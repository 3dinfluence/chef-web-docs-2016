# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Topics package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Topics 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-23 12:17\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:34
# 5e67f212f43d4966a680dea16002641f
msgid "Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 02b3b04e6ac24a759035baa61b9efa35
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. |chef| has a defined query syntax that supports search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` sub-command in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:38
# ce2513efe1564f2b93adfac98814365f
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:41
# 8912b69e99d548ddbbef9fcd5c97f296
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 87e10c3fd50948f39c91122405aac3c9
msgid "|search index| |chef| builds the following search indexes:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 031efe70599247c3b6e667421b10b4ee
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:21
# e7aa5b37025548738fd4d1becfb11da6
# 7f2d6854db8d4e59ae11ca18ff60a25b
# 51ad5c213b6a4a85b4763a3155d43ec8
# bec5a089a7be425985d28bdc281b0e62
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 510873abbb1e4ac99dda9e6ed49199d2
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 5e0ce8036d4b4324bc98fadaea4b06b0
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 9e3866ec3fd64706bdc8a17b3abe80cc
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 18a5ee0ac8e249c4b96755512792ed6d
msgid "|data bag description| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 64813a95693e498a9dea23cb329ebc0b
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 2797cb3e9fa74f2f944bcebd5da0bc67
msgid "|environment description|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 8ae72824377a43958b39e79d2a4e394c
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 32207ee1bce9485cbbdc8d03c369fcd9
msgid "|node description|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 408dbe861fdf4b9bae0bec3e4e34a175
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 726109ebf84042b2b89851262eb97787
msgid "|role description|"
msgstr ""

#: ../source/essentials_search.rst:45
# 2d8ba39047054e67b5b2948bd37855d3
msgid "Using Knife to Search"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 9bb84fc204aa4a1f908d76c430b960da
msgid "|knife search|"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:8
# 1f517db376044133be81cedf1bcd3130
msgid "The sub-command has the following syntax::"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:12
# 85d5793efb1f45418dcda8f1201c4c5b
msgid "where ``INDEX`` is one of ``client``, ``environment``, ``node``, ``role``, or the name of a data bag and SEARCH_QUERY is the search query syntax for the query that will be executed."
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:6
# 594e8dece00545d2924ad48dfcef5c83
msgid "For example, to search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:12
#: ../../includes_knife/includes_knife_search_examples.rst:32
#: ../../steps/step_search_boolean_not.rst:9
#: ../../steps/step_search_boolean_or.rst:9
#: ../../steps/step_search_boolean_and.rst:9
#: ../../steps/step_search_boolean_and.rst:31
# 034edd52637f41719028d6ce21a95410
# 7bbfb8e4eb27491b9fa4b9358831c64c
# d546c70869474aa3a5151c48c4a40188
# 8a06a9dd691d41ef829814479a5b822b
# 6b857904c4b64b07ace94e68fc8d606c
# 9b82300508e24afc9de5300c52b048b7
msgid "to return something like:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:26
# bdf68b5df2c442d299ab4548dae7bfbe
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:50
# 0cd4df2dfb894d5487be9fc6753ac518
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:56
# 24635be135074d96abc4deb23d6dfd81
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:62
# 594c8fbf68b94e519c0f9e4e68cd30cb
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:68
# 95ca8597fa284dbbb878b5d0945e162a
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:74
# adf343cc47f6456887941c5748ad1793
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:80
# ae25bfd8f2ab421d8ba09c6ca67a2ea6
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:51
# 6d2f42bacf474c3caf1ac0884b187a98
msgid "Search Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# e3701f7173d8472a986182a865075875
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 31ff1b675ac7481db69bf054da978f95
msgid "where ``key`` is a field name that is found in the JSON description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:55
# d9edf5bd6b8441c8a219710c7f57a823
msgid "Partial Search Queries"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# f7757ae4ee904c5e972d5cc41c779aac
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 3011298d38b24d15a8bce22438acc1c4
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 4c180e038f8148509c98e2217c609625
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 55d75cc36a8a4676a88c1303c6da8a27
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:59
# 7fc5801f90b64dcd9c9aa813db6d1bb6
msgid "Keys (or Field Names)"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# b03ca7a99f0e44198f56276011bc13d1
msgid "|search key| Any key that exists in any JSON description for any role, node, |chef client|, environment, or data bag can be searched for. To search for the available keys for a particular object, use the ``show`` sub-commands for any of the following |knife| sub-commands: ``client``, ``data bag``, ``environment``, ``node``, or ``role``."
msgstr ""

#: ../../steps/step_search_key_name.rst:3
# 474c5aa7c7ce4765b9ab86a87932300b
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../steps/step_search_key_name.rst:9
# a43c01a3a5c74f5f8bd01835f1c4bfdb
msgid "to return a full JSON description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../steps/step_search_key_wildcard_question_mark.rst:3
# 059c89f0b8e047cd98efe01bea0faf74
msgid "To use a question mark(\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../steps/step_search_key_wildcard_asterisk.rst:3
# eef23ffaf41d4f0ea88d5c8dceb38e21
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:69
# 43b88ac1460f43a2a3ab461f92ebe068
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# d049804b5b8047a1bea77d78b99e6d3c
msgid "A nested key is a key that appears deeper in the JSON data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a JSON structure, |chef| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# fad8cb7188e0420e8270bbd790635ef2
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 24d91fc551764c7a993cdabfce09020f
msgid "Consider the following snippet of JSON data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 93ca621ed3434023bf1088f721e5245f
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 5c3a2cdc270d4210b5aae3ef109efdc7
# c1258184339744c28c1e14d190590e89
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 817ca5562022426abed128f42b7d8e85
# 589f020067c641fd92c0bf198004a826
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 60c6d4ff328141d0a83d08550351f662
msgid "This data is also flattened into various compound keys, which follow the same pattern as the JSON hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 1b4d2e59e3b74dddb57b1014792ad3ae
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the JSON data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 65353a897ea74436882259233cce38b4
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to::"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:122
# c37931f8365a455198e2c6aaec1cf556
msgid "This query will search within the ``flags`` node, within the JSON structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../steps/step_search_key_nested_starting_with.rst:3
# 0f68f9aa3a8e4ad592e42f3adfdf26b2
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../steps/step_search_key_nested_starting_with.rst:9
# fd0f5c93130a4dad886ca499ab01c096
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../steps/step_search_key_nested_range.rst:3
# 2aca15efe379493580c5611822ab5e4e
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../steps/step_search_key_nested_range.rst:9
# f5b390b83fae47b5b8a932c6d7cfec5c
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:77
# b95e42b70b084e91a013b811335b5960
msgid "Search Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 7e056294315e4d2eb43027c09fce8942
msgid "|search pattern| There are four types of search patterns that can be used when searching the |chef| search indexes: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:81
# 71c7002198614298bee9d0e23cd3cf0c
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# d95b126ebbfd4f8fb9d823462b37d272
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item.rst:3
# a6948f48f9354298bbc39a2399e1e072
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item.rst:9
# feed4c574bf74c01a8f6472d4f4f71d0
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item_string.rst:3
# fe05a5fbbb5d4687a44b0ca8ff915f32
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item_string.rst:9
# 66bd0bbf211148b0a919cf22d6f90172
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:89
# cdcf379351264d8d8a57e933b1f27e28
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# d63950b026de4cbf83b2d20d573844b7
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 70510d5704544678bed684467391edf0
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# fbb34684590a45909e3728c0109fb7a6
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_any_node.rst:3
# b8e92072d53a480facc458d14da9df6a
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_any_node.rst:9
# ea47143ebf2b4ac780eee30a6ad86792
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../steps/step_search_pattern_wildcard_node_contains.rst:3
# f3cb608818f14db389c8ff19b19f3ee9
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_node_contains.rst:9
#: ../../steps/step_search_pattern_wildcard_node_contains.rst:15
#: ../../steps/step_search_pattern_wildcard_node_contains.rst:21
# b88b2bc5b44c4dcb97bd6f88c97fd209
# c4534f60437a4fee906b22dd6fbc388f
# 869f873f757c4a7d8de6e7239c18d2a8
msgid "or:"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_node_contains.rst:27
# e26d08a552c9441787061cd9da197fb0
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:97
# 4d98df5098db43909e38b4dfed637357
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 7dc5b18f7f064e09b64181d14c601867
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 6f25707f40a448ca8af95483c5c28581
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../steps/step_search_pattern_range_in_between.rst:3
# d3727e18f93f4e6a94dbe2c1657fa2d9
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../steps/step_search_pattern_range_in_between.rst:5
# d4a6e458959b4949a96a0c0f6d3f85dd
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_range_in_between.rst:11
# 9b2bf3f6c5af467c95d00436de19a1c0
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../steps/step_search_pattern_range_exclusive.rst:3
# 0a9b68d0752b4ac9be503f6aa3d1f32e
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../steps/step_search_pattern_range_exclusive.rst:5
# 94e632e48cc3463796a4522a9ef68ca4
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_range_exclusive.rst:11
# a00bec48b40a4af9b013dc29ec2efd0f
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:105
# 34632a781b8f4182bd6421a7e3252716
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 7e0ee3c77f654a5297d622b9926ef7d2
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 62d477c5f38047abb50b50da66e0730d
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../steps/step_search_pattern_fuzzy.rst:3
# 84c71fb79b4548d8b0d39ee8d279d7dc
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../steps/step_search_pattern_fuzzy.rst:9
# acb0fbc44a544888b720f00aeaed5b1e
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:111
# bc234dbd890b4e8f830438e2fcb326fc
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# b1783f2da092454a8b636e59257b4ff1
msgid "|search operator| |chef| searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 5bba45150ad84b46b97a19ff06debe8d
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# c6c071c9b3774f8780a86352368aaad3
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# c402460e431543f8b7deb8541edd7b00
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 50843e36346f4299988243ee02bc2abf
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 3d6a2c61b40a47fba4fb2a89e0ce357b
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 3e70d1e90c24458a829a445b0d3f486f
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# a07a7691a5b841498fc7f79a346b1ada
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# e88714354bc14976a25e0cae13769598
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../steps/step_search_boolean_not.rst:3
# b6fba8cdf012437aa9faad71c5a1209d
msgid "To negate search results using the NOT boolean operator, enter the following:"
msgstr ""

#: ../../steps/step_search_boolean_or.rst:3
# b091ee1b0fc9496392ddf9f5aac62f8d
msgid "To join queries using the OR boolean operator, enter the following:"
msgstr ""

#: ../../steps/step_search_boolean_and.rst:3
# e4ed892814004373bce8e2351de40998
msgid "To join queries using the AND boolean operator, enter the following:"
msgstr ""

#: ../../steps/step_search_boolean_and.rst:25
# 5f8750840df5473aa5620f39561d5106
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:121
# 6f2c01eae6494b02a4fcd952bf439a02
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 539904435c264b939bb6dcd06ed1a213
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 50ed1687f08243d28fe175d3a2d7716b
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:125
# c66a9452c9a6486a99b03f36476940ec
msgid "Search Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# cd9dff6f04884905a5d57d59d61930ba
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:129
# 9b238213e60a48fd9df7510f91a2f7c9
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# ed60a32dcf1946228046b6a2824ffc04
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 12cc00f535ce4601afdab47dfc0cef15
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 368982e9f92b4961b2172bb3f5a35eb2
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# e59aaee8361c4720aa5d7e0141b18426
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 6a0a85e60d434d9dbaffd3b50a4427dc
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 6c644fc81c6340b9b7bbfa6ebc999028
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 9cc2f01ce51e4855baf3801a9134df46
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 23160ca8271242d5ac5849aeba8c110a
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 2cc84722f4ae41268cd4226af88cdba0
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../steps/step_search_target_role_top_level.rst:3
# a7bd3e1e33784835b776d6964f585f2d
msgid "To search a top-level run list for a role named \"load_balancer\", enter the following (from |knife|):"
msgstr ""

#: ../../steps/step_search_target_role_top_level.rst:9
#: ../../steps/step_search_target_role_expanded.rst:9
# 627949ae861f4a93a64c18dcce4b6aa8
# 364c3ab2be434570a68ec4f23de3e413
msgid "or add the following (to a recipe):"
msgstr ""

#: ../../steps/step_search_target_role_expanded.rst:3
# ee659878f8414c6f8312be3306490ac1
msgid "To search an expanded run list for all nodes with the role \"load_balancer\", enter the following (using |knife|):"
msgstr ""

#: ../source/essentials_search.rst:137
# 2c64d20aa3ed4734b3eff2000f69ceeb
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:6
# 939cba1ecd7348268cb732a06054f27f
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:10
# f37e9a14dece4cee9137d1edeade123a
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:12
# 9311c45c48cc4189ac689a6519c3e670
msgid "|chef| saves expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:14
# 68344bf4ee414eb8a876157512fd911e
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:20
# f13ccbb88c5f43f6b966d06824ac32be
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 1a5c0ffac2ef49f1b45fcd73cacabbcc
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# fa5088ad44314472a46abfbe05f8d442
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:27
# b8b52ac52d0348aeb5d410dd36d8da95
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# ff7264755c14489e92e3ef4dcf3e7875
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:31
# d6ee68c6a5db421688f5f3a2bf088e89
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:35
# 98c4c1ccfb684d148788ee56f51740df
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# 75cd9e4b69654e778e026131c6e4842b
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:141
# ab493f3ee6a64b499118c3f273c294c3
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 1d9da39364934bbdb8fb061d1b3edae9
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 5dea857b26434f929ca788ccb53c39b1
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following simplified settings file is for a web server named \"mysqlchef\" and a database server named mysqlchefutil:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 657b8967137a4a6799228e5392ef4987
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 1cca4a08ab4e40e98e8f26a662c422e3
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# cb5bce5e7b824f3f9976b22839974285
msgid "where the \"[0]\" is the 0 (zero) index for the db_server identifier. This is because a single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:147
# 35b3aa89e1ef46fb979fcfed26737137
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 4a1570e0af78485d8314a28305181ec7
msgid "|environment description| Every |chef| organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created, such as production, staging, testing, and development. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 8740a0e19eae4bc18b323f5c3e5b390b
msgid "When searching, a |chef| environment (``chef_environment``) is treated much like an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 292016356d3d4933af4adb1fc91b594e
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:153
# 09b7649b37ff44448c6f3fc9c00743c5
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:4
# bc0e43e8c2ac48d484e3a7a2227861b4
msgid "|data bag description| A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 3e80fffedb904934baf0043a025212ac
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 37596464bdf7496c993c40d66d6a927b
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 88553bc19abc448b81c4fd8aa8eba133
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 63a628fe73544ca2bc6ebc64df782d5e
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 8adfd805cdfd4d53b40796397f7c5204
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# d3c9bd5363054c15b0b4778e7ca5ff62
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 56c7c1e2e4754f3fa90823508f98dcc2
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 08988a10dedc4ff1aa5caf2d3017a974
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 4e786abd27e14b49a9737810335091a2
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

