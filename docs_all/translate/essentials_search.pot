# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Topics package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Topics 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-07 10:58\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:34
# ee818dd509ba43a8b0ee1d72c7af5fc1
msgid "Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 247ea44458534c59936a5706ab41dab0
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. |chef| has a defined query syntax that supports search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` sub-command in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:38
# be4e7646d09c48439820c731bf3ebdd9
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:41
# 27fea23a0ae247af9663d004584d7bb2
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# f6f112bda4b645d487542ceceaa982bf
msgid "|search index| |chef| builds the following search indexes:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 9bb5d8e5e3474b659dc8a69507bbd1f5
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:21
# 4c85a466d4794f6593bfda622f35ac5a
# f942293387dc4b7390bad2286694a6aa
# 4c89842046a144f09b81187696ebc981
# c3f4cde35f4849bf8dff3d61c001ba3c
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# c8ee50b4089a47268e4171f2b26dca73
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# e63cefd142d341fc9f1aa290bcb865ac
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 0c0d36a6f9e74079b6a0b362315f4c7b
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 8e919491ad2c4f0790afcc9e026a2309
msgid "|data bag description| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# fcdda1cde36e46d29b02f1e755d7c669
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# a7e5ab592f9d47dab6f448925133736c
msgid "|environment description|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# c575e17ef5a74146974ee64a66dbefea
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# b784572831484cab8a5dcafe71fc394e
msgid "|node description|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 2aeb1f4fa7074a6881e6cc3423db4e0c
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 8c55462407fb46d3a1a4cc001e1f0b06
msgid "|role description|"
msgstr ""

#: ../source/essentials_search.rst:45
# 1574a74c6157415fb613462d7284041d
msgid "Using Knife to Search"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 54654c92b17c418da81dc1a9e0eccde9
msgid "|knife search|"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:8
# 9ceb335959ef435bb5e11595b1a755dd
msgid "The sub-command has the following syntax::"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:12
# 49ceeb344e824be28f56e0649951f5c4
msgid "where ``INDEX`` is one of ``client``, ``environment``, ``node``, ``role``, or the name of a data bag and SEARCH_QUERY is the search query syntax for the query that will be executed."
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:6
# cdc58f107a574e018664cc8432102d4a
msgid "For example, to search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:12
#: ../../includes_knife/includes_knife_search_examples.rst:32
#: ../../steps/step_search_boolean_not.rst:9
#: ../../steps/step_search_boolean_or.rst:9
#: ../../steps/step_search_boolean_and.rst:9
#: ../../steps/step_search_boolean_and.rst:31
# f5d089704dd449adb2320fa780e2fd74
# de4129887582477ea28ddd17da6a6aa4
# 61e7b752c37f4234acf1d0dadd79ecf0
# cd6f099f0f4a4a92b5ab03b195fac8d7
# 44f9a7d96b884939b6b898ed73ab4586
# d2b390be01244ce5bc1d92eafbdffebf
msgid "to return something like:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:26
# 78677fb48d344830b8c440544844f983
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:50
# 1eb5bf4f8b3f4f2fadb8634dc767c15e
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:56
# aa555ac95366442caf7630eee444e0ac
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:63
# 83cad43212b648c7866f4291b30cbce8
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:69
# f124cd56935a49a68f59347a807ae004
msgid "to build a search query that can find a nested attribute. For example:"
msgstr ""

#: ../source/essentials_search.rst:51
# 7c75afc9c2964e099fe9cdf43fe21493
msgid "Search Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 2b2988533ebe47e8af1799a79418fd2b
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 8588cde6ab4c46eda69eff6d1ab68b92
msgid "where ``key`` is a field name that is found in the JSON description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:55
# 2e7318e5571b4218abd7dc841fad40c0
msgid "Partial Search Queries"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 36d0b7fe9ffe4c3f8b704ee74ddf4302
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# d8bf3a4180114427beb8deacc3434679
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:21
# 9675542e61e84dcebaabf38fd704e2f5
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:59
# 1199f287787449fbb325e624760eaa39
msgid "Keys (or Field Names)"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 16d3fde82a65446d8ee4da5f7167d132
msgid "|search key| Any key that exists in any JSON description for any role, node, |chef client|, environment, or data bag can be searched for. To search for the available keys for a particular object, use the ``show`` sub-commands for any of the following |knife| sub-commands: ``client``, ``data bag``, ``environment``, ``node``, or ``role``."
msgstr ""

#: ../../steps/step_search_key_name.rst:3
# 6486135c3de440e6a723f7597887d417
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../steps/step_search_key_name.rst:9
# 9d0398163b934cbaa155c102677e7028
msgid "to return a full JSON description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../steps/step_search_key_wildcard_question_mark.rst:3
# f3b612090e2041849550ef8ffc14a618
msgid "To use a question mark(\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../steps/step_search_key_wildcard_asterisk.rst:3
# 27ac28b5efd541809e4466768dd90595
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:69
# 32c46486252b4b6f86ced8d8713d04b1
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 0060e421d4bd4033967fbd352eaebccd
msgid "A nested key is a key that appears deeper in the JSON data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a JSON structure, |chef| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 416a22bca8834b7cbd8046581e4a7590
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 24f0061fa7fe4bea9e59f803ecc6c224
msgid "Consider the following snippet of JSON data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# f4ca572517334f03922192a9cb158428
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 6419cbcbe4204e71b5a85cc832ab3a8e
# 973d6b48bbcb4ee498bd18cd752814e2
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 6636f38eb5cd4630ae9f6514fcd6a5ff
# 2da6c3603d5945f8ab5a82d313edb0ca
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 50d6bcb32321492ba6b723551574557b
msgid "This data is also flattened into various compound keys, which follow the same pattern as the JSON hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 6d7a9eb844b34ebcbb986932044d54e4
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the JSON data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 0523e2369f514a16a580811b09b6259a
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to::"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:122
# 8fc7a6a17457458f852254edf6d3887c
msgid "This query will search within the ``flags`` node, within the JSON structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../steps/step_search_key_nested_starting_with.rst:3
# d5d0930ab8fb4c01b3c8fa2a5f2404fc
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../steps/step_search_key_nested_starting_with.rst:9
# 80926bfd75e1451e83ad62e1607a2afe
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../steps/step_search_key_nested_range.rst:3
# b90b77da46a74eda94e8012e29c51d87
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../steps/step_search_key_nested_range.rst:9
# 361e8da20c6f499aa6a4fc244cced215
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:77
# 343941dd92c9480b8c725a1f2b8b3cd4
msgid "Search Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 810cbb229c67424ea8fcff7b233c04f6
msgid "|search pattern| There are four types of search patterns that can be used when searching the |chef| search indexes: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:81
# fb0db2ad0a1f4cf0aeaad1118577336a
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 15c5a7101b56422da96507b1ccfe6da2
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item.rst:3
# 0e34d7c2f32d40009b19fc363eea8df9
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item.rst:9
# 7b8f32541370460b8d0a222b56305dfa
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item_string.rst:3
# 6cac8719effa42aa87204b2e6d595369
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item_string.rst:9
# 70d74bb619fa450680b768a2c500b374
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:89
# 02fd5ac6cb6f4c7f889d65042bfb732b
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 434e863f67934e5b97202bbbaef14e5e
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 8e0d12d5ed1b4af29747484b07736124
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# b7f331b7282b4dd9bb23d6a4442ab4f8
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_any_node.rst:3
# 5b974dd1feb440c592fbe0b6d391e58e
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_any_node.rst:9
# f3040ff7767842f5a631e6a0f9f83b22
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../steps/step_search_pattern_wildcard_node_contains.rst:3
# 65b5f26261cf4945a517ec9789a43e08
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_node_contains.rst:9
#: ../../steps/step_search_pattern_wildcard_node_contains.rst:15
#: ../../steps/step_search_pattern_wildcard_node_contains.rst:21
# 546b4590b96b4e5f8494e4c7fc4785dc
# 77905f1d8f9d45e79e776502eec298a1
# 4787742ea52b40b4a6f5fd929a008d38
msgid "or:"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_node_contains.rst:27
# 4c37c6eefd4e46f0a76567f059bd939d
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:97
# ff0e87773b3b452d800dd783d8a003df
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# cc573219526145618f21a8925008b41c
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 405f40f8f1364677a95bcc8085d46fa9
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../steps/step_search_pattern_range_in_between.rst:3
# aaf88d29aa6a4aeca03ff7cd3cf787e3
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../steps/step_search_pattern_range_in_between.rst:5
# b863495fcf104b37b1b87e366c0fc357
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_range_in_between.rst:11
# 443c7673c3a64c04a01b24e51f46f40a
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../steps/step_search_pattern_range_exclusive.rst:3
# 9fd42b1fcbe042e5bb4394b4b52fbdaa
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../steps/step_search_pattern_range_exclusive.rst:5
# a82085590aa046a09bc1e8eaafb40c19
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_range_exclusive.rst:11
# 8d799f455e9b4b8a8c7e22dcc717e8cb
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:105
# 454b7456325a44898dbf6bf33b31a33a
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 31873014b6b14b838c7b4213b1604f5d
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# d86f5e20df084cdb8a00cd601b125665
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../steps/step_search_pattern_fuzzy.rst:3
# 030095e992044b38b5323cbfd92eccfc
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../steps/step_search_pattern_fuzzy.rst:9
# 6d916dd44ae5466d8ddc29553e6a7180
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:111
# b5ff5b0842fa4bf8b02a84ea135c76c4
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 9f8ef606185c464ab22b5edae5616e3f
msgid "|search operator| |chef| searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 83ab0d87713a4c24823c75ba96d895c0
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 19fa6e9f0fce434585245e5b10a67b24
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 8f561921e5d849bbae9a9b94a2100d10
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# d546fc39351643ae81eafd43790a390c
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 497e807d496b4b5897dddca321cb4c20
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 3e5c7ac98e5f48c69ccfef8e6d8c49e3
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# b90aa21288c94baba6daf3c17f406010
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# b5cb810e52824ac599e37f8fe6fdcc2a
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../steps/step_search_boolean_not.rst:3
# 9a5ddb2bbf3c4bcf84cce3426052b62b
msgid "To negate search results using the NOT boolean operator, enter the following:"
msgstr ""

#: ../../steps/step_search_boolean_or.rst:3
# e5221ff0d7ac410a88d2f0e2aa3e4b1c
msgid "To join queries using the OR boolean operator, enter the following:"
msgstr ""

#: ../../steps/step_search_boolean_and.rst:3
# c122477029cf479a8c1a5d04ba0ab323
msgid "To join queries using the AND boolean operator, enter the following:"
msgstr ""

#: ../../steps/step_search_boolean_and.rst:25
# b1d6f32b28dd460ea10e5431a9d0b7e1
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:121
# c80c12f633064e6a9e449858e813db57
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 078134ca2d5746c0bff9c82ebce76fcb
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 09c640e141f54af0b67a19557e224ee0
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:125
# 9de496d554d94f2192bd3805a7d815c4
msgid "Search Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 3d159ee8502f444b8fb4a76de9b09013
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:129
# 06cd34f939374b689b2bb4a057e4141f
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 3c1fde8bfa2a4c70bc1457d5287b9701
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# e438bda1cb454d7f98bc01e28689e175
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 3242899351e44e0f97311c8df686ad70
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 7744fdb568fb41a6b99f0049de8bc6b1
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# abc22fd69a2747099bba368a73096a95
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# f4ec59f9f58541d6a10d7d17b5f6f213
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 77fa678e4095416d849e6988b2a7a0b2
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 74588d4d75a9499b836a9fb55c9bb281
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 1c63787f70034c0daa7bb8e999829710
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../steps/step_search_target_role_top_level.rst:3
# 4410a7227f3d4aa69707baaace4a2ece
msgid "To search a top-level run list for a role named \"load_balancer\", enter the following (from |knife|):"
msgstr ""

#: ../../steps/step_search_target_role_top_level.rst:9
#: ../../steps/step_search_target_role_expanded.rst:9
# d52c37aadf8d4fc3a6aec4e4f787c7ed
# d089c0887ff44a90903892cea756572c
msgid "or add the following (to a recipe):"
msgstr ""

#: ../../steps/step_search_target_role_expanded.rst:3
# 9859460f188c41319251fcb6b962914d
msgid "To search an expanded run list for all nodes with the role \"load_balancer\", enter the following (using |knife|):"
msgstr ""

#: ../source/essentials_search.rst:137
# 402a396330c94337a5e779f7ce6c974c
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:6
# 511f7e1aa2394bb7808e5d264b764bbc
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:10
# 09d8a3256b744da4af8a821b5aab78a5
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:12
# e76eb57d16894e17a1c6291e5d93ba41
msgid "|chef| saves expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:14
# a479ec4260844c40b443cd191a842a0b
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:20
# 136b486f034541df89b5ce7ccf960ffc
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 83433a821a934669b8140f690c6100fc
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# 7f068b70a18f4e618a80099f72d61395
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:27
# a522278ef9394e6a85e2df3bd305e12e
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# ce194763b3fe467e9c75b6bfa838a7fe
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:31
# 4254199095224757a519498d3e91a02c
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:35
# 2c75bde6afe3419bbdf91f1a5fc569f7
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# c4ae6f0a608d4947b453d85184e881ff
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:141
# cb5ddda9ecdc405c832d8a704457fb0a
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 2fbf315e596043e1b3053dd00f4a4003
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 2a281824515b4ddc88d4f5405b37b4d8
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following simplified settings file is for a web server named \"mysqlchef\" and a database server named mysqlchefutil:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 19604f5618bc44d48cddab74192be153
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 53f5fdbdd6094497b4339365a0c6234e
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# c1c833f2d3d14db9b1534d09de1651d6
msgid "where the \"[0]\" is the 0 (zero) index for the db_server identifier. This is because a single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:147
# d8d4094a36de49f7974f958b02b58b80
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 105d8cdd482943ada7927a60cd30285e
msgid "|environment description| Every |chef| organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created, such as production, staging, testing, and development. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# daee25d3f79b40cdaf4390e41eb2b3a6
msgid "When searching, a |chef| environment (``chef_environment``) is treated much like an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 0493366e2f7243fe8f3bddeb0db01276
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:153
# 639eeba8808a4155b0580fd36d920b3a
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:4
# b68502ce0da8478eb6e2f2c458347410
msgid "|data bag description| A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 0b1c87b7d3454f7eb8fc802487671997
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 1bf02a2887d94e9f887eb70f94fa557f
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# fd65d0c9fea54e6f8cc5a04711167dda
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 6c3c89f9247e4030aca8531d596c3375
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 7555f7900182487db566fa45a021ac05
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# c8603e8f6b9a4824bb3e720d34871d81
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 594eaf19484246728e1ddd6d3a10cd34
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 8fad72593bf74da48f07fbaa74c3b087
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# cd647c31fece48b6856ac49ad4fdc13c
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

