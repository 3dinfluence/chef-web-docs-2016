# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Topics package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Topics 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-22 23:50\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:34
# 4f13fa84dd3b4528935f2c0b7e255051
msgid "Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 4716cb6ce4c74ddcb56edac935175b7d
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. |chef| has a defined query syntax that supports search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` sub-command in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:38
# 52d422f550b24b5fb9cf859f186dbb03
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:41
# a3533affe0d349c9849de0b96b533219
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# d2fa5f66905d4d69929d785d40b04342
msgid "|search index| |chef| builds the following search indexes:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 149901668b8543acacf3b7dd79a32300
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:21
# 98cb2ee416994057a426a0a068488b3d
# 6880de19861c4f118ff4afc2e82989f5
# 0f6f9e7211eb4d54bb5b700cc3153e0a
# 1f6178440c084168bcdb8739ee5ef600
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# fce8c64a606b44e891e74327bee4e105
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# a85c174141a3419ab814df4a5ca1590e
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 187f4de28e8840a7a385c57db2803454
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 1f1db3b884354a9caa9a08636024a122
msgid "|data bag description| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 9bab9f7badf74c56ad61b687fa677a71
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# cae2d350e12d40e6a7a9e92820237ff5
msgid "|environment description|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# bf2692b097b7407d92f3299912d01d99
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 0ddb12a5d489409e90d2f8aae4790697
msgid "|node description|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# e28e70e68bef4848a4071d8e2e61173c
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 1ce2f0afbfd94a1784447ffa14f513f8
msgid "|role description|"
msgstr ""

#: ../source/essentials_search.rst:45
# c66f0609d44641c5b6e32ace77f1d730
msgid "Using Knife to Search"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 9b40eda0cc0b4985b285546dbaf29b8b
msgid "|knife search|"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:8
# 3418ad5846274897b663c36d1707f29b
msgid "The sub-command has the following syntax::"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:12
# e27ef352ed824f0db8d327c8dafe4e86
msgid "where ``INDEX`` is one of ``client``, ``environment``, ``node``, ``role``, or the name of a data bag and SEARCH_QUERY is the search query syntax for the query that will be executed."
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:6
# 7a6e900589494cc0993ce06efde2a2ad
msgid "For example, to search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:12
#: ../../includes_knife/includes_knife_search_examples.rst:32
#: ../../steps/step_search_boolean_not.rst:9
#: ../../steps/step_search_boolean_or.rst:9
#: ../../steps/step_search_boolean_and.rst:9
#: ../../steps/step_search_boolean_and.rst:31
# fd72f29a4df846be8296eba0b23e3c0c
# 4d3b58aa680241868441ce96533ef468
# c0bd6d9c498b4a118e5effb746cdc52b
# d7f96306d4bf496ba74da6d8eb24fc0c
# 5b19bd1163d94f17a014d0e483b965ad
# b6447bc3749445ad858567bbd4db4573
msgid "to return something like:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:26
# 41264bfd79e44e6caa8d1d2cdbb71a69
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:50
# df1f641d910343fda4ad5115a673c94e
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:56
# 368be76c76134d3db40c86da5f144674
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:62
# c86f17a70c1946c680f04b7a8ff8cc9c
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:68
# 90e6bc4f12104d028340fcb7146d08d9
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:74
# b0cc9c420be24889ac4bd53a399ca452
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:80
# 79e9d90d47694425894cd27a0117614b
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:51
# eb3fa169cea949bea52586053045fcb5
msgid "Search Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 0dda2d3dc54d4b4c8670e640006cb789
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 53b1047966404c07a542cd08ed94e5f2
msgid "where ``key`` is a field name that is found in the JSON description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:55
# 703b4c3df4234b81b31281a0269220ec
msgid "Partial Search Queries"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# e32385006c834b3caf816ae57eef4b57
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 733a92470c7a4162a5c33c662d9720d3
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# a1f7759ae1d749749802480f1f24db23
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# a9c738ee5a8741f0a67f53c59c866b32
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:59
# 8aa4d14590324073b4ef395e9d04fba0
msgid "Keys (or Field Names)"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 6d0d77889fd14e80b61ac55e411bd0c8
msgid "|search key| Any key that exists in any JSON description for any role, node, |chef client|, environment, or data bag can be searched for. To search for the available keys for a particular object, use the ``show`` sub-commands for any of the following |knife| sub-commands: ``client``, ``data bag``, ``environment``, ``node``, or ``role``."
msgstr ""

#: ../../steps/step_search_key_name.rst:3
# 5e2e56dcceba402eaf7cf1adc4c8ef5c
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../steps/step_search_key_name.rst:9
# 62710665942c4c1fb6d808fd1b1c81e1
msgid "to return a full JSON description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../steps/step_search_key_wildcard_question_mark.rst:3
# 045ac4b3cbd7436e927559844a583ded
msgid "To use a question mark(\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../steps/step_search_key_wildcard_asterisk.rst:3
# d562c4a0b6ce46eb963a022f505e78ec
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:69
# 89e4b73fe5ec477bbe7d5aeecbccbf1d
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# da8f92a26942455dafc5542427f7b158
msgid "A nested key is a key that appears deeper in the JSON data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a JSON structure, |chef| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# d254bb6314194f1e8d6c1a8d91ef4636
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 04e548392bb14e59ad3d66eb331469bf
msgid "Consider the following snippet of JSON data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# cabb9e022bb440268d8eb7c5053936da
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 142d9935ecc947f2978fb2b46f1d7af3
# e5812f392dcf4173bb5c7357d7c1aa65
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 7b392a2e40fe4e679b9dd950a0741ee6
# 7c03ce270c24463ea5cadf89e9ae7ae6
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# e86a71a8cd35492cba62018e5061b0c3
msgid "This data is also flattened into various compound keys, which follow the same pattern as the JSON hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 7a0f976ce58640f98fe107a3937766b2
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the JSON data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 87fb8b06f9ed4bbd804d0b8a30228295
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to::"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:122
# 510d7c554bd741168a8297aa326144c2
msgid "This query will search within the ``flags`` node, within the JSON structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../steps/step_search_key_nested_starting_with.rst:3
# 21a5e93e15c1442eb7d0aaddd58da2e4
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../steps/step_search_key_nested_starting_with.rst:9
# 51ef6ff159a541e6a89965926541fe8f
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../steps/step_search_key_nested_range.rst:3
# 576df905182044e0b7f81d06bf504e3f
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../steps/step_search_key_nested_range.rst:9
# 0dcf6ff684e740f58019b89cf4a58198
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:77
# bd258872b28f4721baac8e68020d6f63
msgid "Search Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 90bc9c73c11b4f6e886244d73ff72a20
msgid "|search pattern| There are four types of search patterns that can be used when searching the |chef| search indexes: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:81
# dc540c7faf154532b1e92ea7b4a24e43
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# bc99124bd5a74417b9e022bbfbe73da3
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item.rst:3
# 8c7388d9023842c890a74a574d7db5da
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item.rst:9
# d323a3fd7d504aac952fbfb359e4af88
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item_string.rst:3
# f3e10cd698954100ac94b5b272989c41
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item_string.rst:9
# da95b9dfe2254303babfe1c412c06c10
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:89
# 1ee5106a6b5740ee8a06ad0cab67af79
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# be70c6f62f66478a82a5ba553a780204
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 084bb2117a6a472cb28ef7ae2036f2bb
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# d2973dd13a6d44bca39a55c380378a4e
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_any_node.rst:3
# e0acfb4f23cc4c77a748b82650f3f0bd
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_any_node.rst:9
# c3b0b4879379408eb279ccbc5e0aef69
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../steps/step_search_pattern_wildcard_node_contains.rst:3
# 9c0adadf46b3425db44adbfcf6bae381
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_node_contains.rst:9
#: ../../steps/step_search_pattern_wildcard_node_contains.rst:15
#: ../../steps/step_search_pattern_wildcard_node_contains.rst:21
# 18cadcdfc4fd468983f2d50a4b9c61cf
# c07f7af20ade4c0f8236ea51d86ed5aa
# 41698f0f539b45f9adf0b8a94b00e953
msgid "or:"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_node_contains.rst:27
# d471ea4fb5c64a2082c765ac3d744564
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:97
# 7bad02d104824db1a38edca4734513d5
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# d15453591cdf4992a6fe716a0c76096b
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 338436f3a3284a17941d24da8765c14f
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../steps/step_search_pattern_range_in_between.rst:3
# d8b3a1eea82f4d13802563e44bb44c5c
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../steps/step_search_pattern_range_in_between.rst:5
# aef5ca35f4e748ccafcf6be707c9e481
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_range_in_between.rst:11
# 61f4b3a0ce8f4191b62d18b3dffe65b8
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../steps/step_search_pattern_range_exclusive.rst:3
# d3a7b5818e104d438d58c418514d6e0d
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../steps/step_search_pattern_range_exclusive.rst:5
# d549701355504479aa1fc0237f6c578a
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_range_exclusive.rst:11
# ddbd05cc1fc74f01828c1396eb2487f2
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:105
# bb4e407a888c4365b1009ce23ce5e84f
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 588dca3519f5480db31a404ef5d5f938
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 73c12e548faf4a129f70492ed406f05a
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../steps/step_search_pattern_fuzzy.rst:3
# 6525e1868beb446a86ae3f4c21b67c58
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../steps/step_search_pattern_fuzzy.rst:9
# 879b7a5c9a294038adc50e85bac1d550
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:111
# a4316661284c44ea9dc951d6c5134020
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# f584ef85d4174744a02688b48fd1bd18
msgid "|search operator| |chef| searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 6e7bed399b134969b865aef2e661d196
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 693b3618f6534bc5b513977829d2ffaa
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# b0edd1fdae2b455894c4d64334001c25
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# d524574b833e4097ac3ead4c745022ac
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 59daebbf6d174a669474e47f169fdf38
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 0ef06df8c304436eb62eebd78ad656a7
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 24b792c67ba843aba0d1aa445ed4a763
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# a2e2217e7a35416eaaed3ae653df7604
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../steps/step_search_boolean_not.rst:3
# ed077d9582b7480ca844851271ebaec2
msgid "To negate search results using the NOT boolean operator, enter the following:"
msgstr ""

#: ../../steps/step_search_boolean_or.rst:3
# 385cb80a146a41e4ac6fa2010a75a2c5
msgid "To join queries using the OR boolean operator, enter the following:"
msgstr ""

#: ../../steps/step_search_boolean_and.rst:3
# 3ce07b919d0141b5acb53dd6f66f23c2
msgid "To join queries using the AND boolean operator, enter the following:"
msgstr ""

#: ../../steps/step_search_boolean_and.rst:25
# 3198dba80a4c4fe4861adb76f4970cc8
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:121
# bfabe134d3414134b1ff29618df7faf1
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 9d49292199c445ce867c9df33128d54c
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 592e6a41c1e143aaaf27f57dc9b1f92c
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:125
# ca196c9c8a9f4d1388950008e0a61f1c
msgid "Search Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# c4816b26e31c401bbcbce78c2ad3e006
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:129
# 1a737528574146b1a6b688b04840d45d
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 0fee4787e4f44de688b0a76255ca1361
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# cf91995418d842a684787c40834d3549
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 7bb8ed653c21439e9aeb79b89543fb8c
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 2c12c3b289f748008085783bdc972477
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 5378ec494209490991996b7ab9b96fac
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 90f8b5f1401b4bbc8eef7e45bd5e8d4e
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 6a7e13fb913e4bc7ab56b261538b2694
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 72fe5cd1fab9483e92697be732b36a7a
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 188e49a154334edab75b58f76d312612
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../steps/step_search_target_role_top_level.rst:3
# db40b08cb46b4ec09421cd8fbe2b42a3
msgid "To search a top-level run list for a role named \"load_balancer\", enter the following (from |knife|):"
msgstr ""

#: ../../steps/step_search_target_role_top_level.rst:9
#: ../../steps/step_search_target_role_expanded.rst:9
# 6641e63b0674413ebc40d29f5e629f64
# 65c0bc02af5a4794bf131f1eb18d8c87
msgid "or add the following (to a recipe):"
msgstr ""

#: ../../steps/step_search_target_role_expanded.rst:3
# b1d2ea874e5d44a0b5916011b426022b
msgid "To search an expanded run list for all nodes with the role \"load_balancer\", enter the following (using |knife|):"
msgstr ""

#: ../source/essentials_search.rst:137
# bc46105cef294e73b3fbbe9878389af9
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:6
# 239d685fcd88483fbdc5b67ad0c800a6
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:10
# dcc63fae0469468db26cc7ea3b1b931c
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:12
# e503a98c55c5468a8c45c5f73f95889b
msgid "|chef| saves expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:14
# 915a8c8e8d684dd5997585f973e9c3b8
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:20
# 560c6f72680a45b3aa2b6a49f5a43946
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 047a325274fd4eb6984e99f6d2cab606
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# df96df0523c347d08f20cf41166cee93
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:27
# 235a382cd903458e94b164bd7a129fa6
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# fe49ebe3608b4b1b8ca4c96b39d786f4
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:31
# 16529adc12dc485a879c5f44da9b5c55
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:35
# 122a0b1c2c094682a050e9d343d1c66f
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# 500ad179b0024dff82000214ec724930
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:141
# 80bd1d18302341b187fddc7bc6c26e1e
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# d027ae173b5244e9bf6720e4ed978063
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# ee6c20be3bfc447aae8a3c63f767562d
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following simplified settings file is for a web server named \"mysqlchef\" and a database server named mysqlchefutil:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 90995ab4c23049da971e7c0b3997b80e
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 36130d28e78e411698a1de20ba09c5b5
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# a899cd08805241a989081eb4e0868aee
msgid "where the \"[0]\" is the 0 (zero) index for the db_server identifier. This is because a single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:147
# f9c6c8ebbd0548cabe0546f720bb82bb
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# f8d5b96cc66949d79a258bd40a449381
msgid "|environment description| Every |chef| organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created, such as production, staging, testing, and development. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 71f66cc9c67c470fb7cd0071bd4d1b9b
msgid "When searching, a |chef| environment (``chef_environment``) is treated much like an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 6634f6ed344542fb93bf6afe6fd63377
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:153
# 149534934d944efc8cc91706e8d3946a
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:4
# 022ba2b46fc04bc08e8448b4620b4f41
msgid "|data bag description| A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# eba1d5763b0149f8a7389b4c04eca6c2
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 93cab3efa70d41f080a48edbdabbae73
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# d15945b5fa2f46269110c1ef680d4dee
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 844ae6d3e2b246a68b1ca603628173c5
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 4709e8d46d424487b98997e6947bdd73
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 796f8abcc41b4f47bf1b8dde28748a40
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# c29b7228ad5e460bb0aad742e1b5c984
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 57668d5a42ba4bb9b0f01ad7589565b3
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# e72565060e7d4933aac0513cd3b0b7f5
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

