# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-17 09:47-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../release_11-x_master/dsl_recipe_method_search.rst:3
# a1f88a1de77d40668d03a21585f74c90
msgid "search Method"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 146cdd18f62e4020a9bf5fadb18287bb
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:4
# c2f2e4f3862f45c785f693ea5de0593c
msgid "Use the ``search`` method to perform a search query against the |chef server| from within a recipe."
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:6
# 29993afbac6849b0a904fe2ee8466fc5
msgid "The syntax for the ``search`` method is as follows:"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:12
# 423b32e844914b10bf249b63dc42ba67
msgid "where:"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:14
# 4f66cde7e57648e085775fd32bcbad18
msgid "``:index`` is of name of the index on the |chef server| against which the search query will run: ``:client``, ``:data_bag_name``, ``:environment``, ``:node``, and ``:role``"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:15
# 4ee7de0d9d034716aed80d539a2a17c7
msgid "``\"query\"`` is a valid search query against an object on the |chef server| (see below for more information about how to build the query)"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:17
# b124951c822049518bf887933c2e3cb8
msgid "For example, using the results of a search query within a variable:"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:23
# a6bc13fee6d6417eadb378c076f2e20d
msgid "and then using the results of that query to populate a template:"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:10
# 764f9b9e4ed545f4ba345865f054fd50
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 044e250a143447d8a81be5faff50ca83
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 8794bbe14c63456ca1a30095fb787890
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:14
# acbe9154dfdc4a73b928d1596811fad4
msgid "About Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# db46c0794f8d4a63af83da37ebe74693
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:18
# f6e1422aadd94f31b7ac9c57331855aa
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 3ebf25eab3834dec82d152f5ce70bfdd
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# fec5828ccce447698f2fce70f807e076
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# d241871498194e609b2b90d4c12b8a6c
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# fdfbd582a6404e9a9dee329c7a39c5ec
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 5410399e07c844b6bde776ce236343cc
# 2031f79eb7ec4ac0901c69824e169e98
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# cee8fd0067444522a3801a469e2fc685
# d57abb2ea6e14d07b1229f6276b8bd42
msgid "or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# b615ff13ff744c52a5f2ea89c12610dd
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 0822ab2bb37c43cdaaa455656f20a5dd
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# a4b739f03e9747e39c81dfe0466f1cb0
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 2910bb6235e640eeb747cd5bda3d84ed
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:22
# dc2be76c6c694a538ca30b5d4fa290f2
msgid "About Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# f15f707de14949e8b211ad66e0b98a49
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:26
# daf9463f19f64099890bc851ede25fda
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 99e88a80f50e4e7b9982997b6f096c9e
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:30
# c5a361cc76eb4ddc880f833123cf0332
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 362fb7ee73874f0b90152f84dbea723c
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 36e80436e6e14298aea10845aa89e549
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# c26605f3ae1f4005958daca212badb13
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:34
# a2863ffdf6e945f5a9e40a37814f53a1
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 8f3e3dcbae5e4ee4af8b4ce40e7aac8d
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# 75f85bcbe8ff4f038d86dae9df99f4d6
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:38
# 00eae5bcf94a4ca499886f46f805855f
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# ffc65fa06ffa42708d97e70ef0d44e4d
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# 15e3f58e47254ffcb4f82b7531169c01
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:42
# 1098ab7c673b47f597d16620ded5fd76
msgid "About Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# d36d518666b1496ba3d621bb980bf3cf
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# 75add39864c34d05973ffe4af9279fd1
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 7d2f2533814148398d3ae53dc97a5327
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 845ca72e11fe4c83921271f15eb25268
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 1c5a72ec842b4364b04b2d9f18f8734c
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 7da0ece326dd44358555f5a06b86c58e
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# abd175a99b2a473d931b03a1e81aec97
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 6b1b912619164fa0b25b000307f09a52
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 8bdbd5a0c6c342cf9ee6141ffed801ec
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:46
# c83b431187f846b1a4d486c3f084f14e
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# db4d2598dae84e428264071ee1125d5a
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# 5d2d2f33bd3748698d5e2ff054db6ccc
msgid "For example:"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:50
# 57c40832e4b6449a94d46c887c75c4e3
msgid "Examples"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:51
# b161c77a42944bb6b64e780c2e7e5942
msgid "The following examples show how the ``search`` method can be used in a recipe."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:53
# 3d8bd71ede7b496095369fb7092503b6
msgid "**Use the search recipe DSL method to find users**"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:3
# b49ef13e8ff445018110046eec66eea9
msgid "The following example shows how to use the ``search`` method in the |dsl recipe| to search for users:"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:47
# 52e96aa497574ff78c8da7e323118bd3
msgid "where"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:49
# 7e07357e4e92457abd6f30af3b6ba0ed
msgid "the search will use both of the |resource execute| resources, unless the condition specified by the ``not_if`` commands are met"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:50
# 5fb97197f06648dea9bd12706c774e09
msgid "the ``environments`` attribute in the first |resource execute| resource is being used to define values that appear as variables in the |openvpn| configuration"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:51
# aaf7f6e6cdc444b883fb2f2ae2da9882
msgid "the |resource template| resource tells the |chef client| which template to use"
msgstr ""

