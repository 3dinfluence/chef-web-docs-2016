# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-13 21:44-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../release_11-x_master/dsl_recipe_method_search.rst:3
# 8dc25bade66b4165898f5dbd27b1ac8a
msgid "search Method"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# e03a16a6b79941a3b4c761668d3ccd28
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:4
# 469119635f544bf59e852064045db0b8
msgid "Use the ``search`` method to perform a search query against the |chef server| from within a recipe."
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:6
# 0ba0305d7ed649ff912227d7584b82ab
msgid "The syntax for the ``search`` method is as follows:"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:12
# 4603c58ac0874d049557347b40ec5e70
msgid "where:"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:14
# 994be39ef03d437197d2a2c8c9935df2
msgid "``:index`` is of name of the index on the |chef server| against which the search query will run: ``:client``, ``:data_bag_name``, ``:environment``, ``:node``, and ``:role``"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:15
# 374245016b3f42bba9022530453e242a
msgid "``\"query\"`` is a valid search query against an object on the |chef server| (see below for more information about how to build the query)"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:17
# a68fe2380c614017b829ad70fc4b78be
msgid "For example, using the results of a search query within a variable:"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:23
# 999d0f70d4164ebbb86f76d15074e582
msgid "and then using the results of that query to populate a template:"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:10
# 87feb28c87e54c7c88dd0b0d3ac6a763
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 5477bccff35f46919321f28b6ad1da1d
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# a4b5be19f42047d6854b7115d3958a3a
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:14
# 5b7734eb0c804add8b7ed7d35aa6de34
msgid "About Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 2d65ebd7d208450d9fc55ae74186edc0
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:18
# 2e0b26bf3d7e478c84484ad5f8ca7b8d
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# ba77858d1d1f49d7819fa37946f239e6
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# acd8f3c26ac1495c92cb6d7222bf862c
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# d9c2783e970a435b924e5e9439b9aa25
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# d075959fc23545a78633b98e923f2556
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 6e9fd32250a346898d833e80d573f99a
# f21a59d205ec41489b38b51918124b5d
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 76313125a63c490dbc9b687e4c807f13
# ad878180c9e643c7a863f826c6226ef0
msgid "or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# cee4c3c6f426439e99e499d42805e2d2
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 16e30250d997467793c38da9101f1131
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 9821904777514633b2ae810894cd55d7
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# d88af5bbe30a4aa189853c49018b9c8c
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:22
# 54475ea0dacc4d609455a92e743ff207
msgid "About Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 6b9b96625c3e4fe7af5b71d39c32b583
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:26
# 04c9d9c6f6e64f808365471341eda698
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 794ddc898ef447dcae47c0b9f86e9eac
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:30
# 7abdb18c0c254e81b19a39cee99293a2
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 7c9239f51161481ba36e5c858db0f726
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# da53e7fc3eb448089446ce73cbc3e353
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 083d96bb113a4c35bad921c02a532699
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:34
# c583fc027b0446f3b34484fd2ec5731a
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# d6d5725835f746d8af3274ae1429f160
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# 6b34d9be0a7e484cbf5c48d6b853818c
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:38
# 4796a374f39241c9a57b84d2484543b0
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# bf6cfd706af6467c8f08a8334f2f3a24
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# 56eff2bafe354b0b9e936c5ae36bbc06
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:42
# ab76d92fc9f84bb7be368fa9fa19f5fc
msgid "About Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# 4f6f31b515f045f497d55305ab802896
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# 7b9eebcdaef04df99a982c29bc8f9761
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# a3d8241fe226475780fd0424c528c8f1
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# d9201cf0eea74dc8b3e7fbbfb3b7f2d5
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 3417fa91087845919720e287b458f218
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# fbec18ed891940eeb9c3064ad7af01ee
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 7be5b19f1a044508821bc2e14cfa911a
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# c863faa0c33b4896bb27a1e06ab1b75d
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# fc581624f2c74e2695f4414317b3a8cc
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:46
# d69164976fab4fe2ab8ef4306c0d90df
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 864eb884d2264caf937e8eda37a432d3
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# 07ad0548ba7c4c1a8e7c03fd28d0fac1
msgid "For example:"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:50
# d97e2e1bba7f4009afae6b2c132caf27
msgid "Examples"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:51
# 0b45391848374614a259be7f44a82097
msgid "The following examples show how the ``search`` method can be used in a recipe."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:53
# 369a3525b428408ea9c3dbb3725fffeb
msgid "**Use the search recipe DSL method to find users**"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:3
# b46e7a2d3ef24729ab71005f961a32ca
msgid "The following example shows how to use the ``search`` method in the |dsl recipe| to search for users:"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:47
# f498acfe5cf8482599cec41b6e2ffbf9
msgid "where"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:49
# db5e48fea84441049c22a342d4a812de
msgid "the search will use both of the |resource execute| resources, unless the condition specified by the ``not_if`` commands are met"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:50
# e8461bf4639e48459025999d24194739
msgid "the ``environments`` attribute in the first |resource execute| resource is being used to define values that appear as variables in the |openvpn| configuration"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:51
# 0feac6509c4141e6a3ceb912ae7c20ca
msgid "the |resource template| resource tells the |chef client| which template to use"
msgstr ""

