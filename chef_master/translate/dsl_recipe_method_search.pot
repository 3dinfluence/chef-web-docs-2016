# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-26 15:24-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../release_11-x_master/dsl_recipe_method_search.rst:3
# b2fd67cadd8544efb4fbaa0ebf751886
msgid "search Method"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# a090a8ffea214643a77a753025fb757c
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search.rst:4
# ca9aa18bae3f4fa1a57eab43a07a1864
msgid "Use the ``search`` method to perform a search query against the |chef server| from within a recipe."
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search.rst:6
# 5e9656d8d1674db78bd72ddb1458ee49
msgid "The syntax for the ``search`` method is as follows:"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search.rst:12
# 42c22b3c154f43488372f204a839fca4
msgid "where:"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search.rst:14
# 6ffd99d057fa40908e6739358eecb3e9
msgid "``:index`` is of name of the index on the |chef server| against which the search query will run: ``:client``, ``:data_bag_name``, ``:environment``, ``:node``, and ``:role``"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search.rst:15
# fa57eeb89b794e7f99d3f4a120b93cb0
msgid "``\"query\"`` is a valid search query against an object on the |chef server| (see below for more information about how to build the query)"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search.rst:17
# a27764a26eea4ccf9af3c728df377a7f
msgid "For example, using the results of a search query within a variable:"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search.rst:23
# dc7aa610a7ae44fc9b799d9163adb9ae
msgid "and then using the results of that query to populate a template:"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:10
# cb5b0fdec0ba400fa226d205bc29daba
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 8aa5b9dffdd3480698217a2a03b29795
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# e065ff4f1f31421cb9df384a907dcebd
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:14
# cf6e3796cdb2492cbe91e6076d7f0a90
msgid "About Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 6a9b013f56334215995f851669060571
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:18
# b7d6bc181e1347429adf1f37d625a03a
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 9107a9fee0ff4e05b5e202254c55e68c
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# b993f23ee67549b39aeeb608eec7f7c0
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 8d198354d4df46d1b14f704bcebf5d50
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 9887c9521f1f415c80cb9174f557448d
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 39edbae39e92426dbbb0d84f0e6713bb
# 67e5b294be564f6c801471eb8c171cf8
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# afe6beac0ae649999e528b5cfa902b15
# 3ddf1d799a8849da85e371786d1b6d65
msgid "or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# d69769276239421b93439b7dbee20a98
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 00d8ee8c3bf64b83806b2b82393294fb
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 29b1b0ac3ee841f99ceb5489115b63bb
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# a51033789deb46e4b445119f871b8ef9
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:22
# 67c6a7c86b4a4c29bad77f97dd30c067
msgid "About Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# cd2cfcbb52c54bbf8cb6ad76196f785a
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:26
# 18ba3890fd194743badcecbcc4438a36
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 816816c7eaea485bac5c52b5e4a9d729
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:30
# 979f953e2fa843eaa6b3e3b05181728a
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# aa08ba7fea1e4650b73913a9668d2c96
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 4c3825d799df4762afda3df919c17eaa
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 9921506c5c184907ae3a2e6591140acc
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:34
# 147c904b109e4e588e3734cf12e6fbb5
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 1eeb30073da0420ca554668d8b9842ca
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# 63385af10197494db7e1eca03ed81ba1
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:38
# 7e3ee93645c64a30b07b8a42a7290e5c
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# c198bf38ebc94aed97f473fb74636db0
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# c346a516676a4698a00e00546e868d03
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:42
# b14086f5698e45a59dae82d0ea8e785f
msgid "About Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# 44d24871bcc248ddad39f2d17fafb2fd
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# ebb4528211854287bce6f6ceb81c955a
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 2c2bb544cfa34fd68e410082852ea65b
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# ecd7a9f6d886483db7d6762caed436ab
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# a625132b3bce4226b2d918dc85ba3396
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# f04b9f20be8a4dc59ac862290303f8d8
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 19cff3bd5d314af3a95949c7e990f5d9
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# a5dd6aba80624ed3a68d8b2f3195f63f
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 5b3db36a4f284a38a4cdd07466201e83
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:46
# bb36949d3f0c42ac886806815bf51d7c
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 029fb04f15f44548a8f4c31616c2b2b2
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# ade249280dca4d709f35ed35db71e51a
msgid "For example:"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:50
# 05bfcf80927242f890c67a3b75637a74
msgid "Examples"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:51
# 799e9efc95ac4f4aa931c92a47fb74f4
msgid "The following examples show how the ``search`` method can be used in a recipe."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:53
# 3f284a84058248f9aa2a439d8cb8400a
msgid "**Use the search recipe DSL method to find users**"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:3
# 6a9c561a20254e80921be3f7c51c7a4c
msgid "The following example shows how to use the ``search`` method in the |dsl recipe| to search for users:"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:47
# f2ad00e7dc0d49ed842d6663b795cbe8
msgid "where"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:49
# 530eb271b81e480583c757ed1d7f20e6
msgid "the search will use both of the |resource execute| resources, unless the condition specified by the ``not_if`` commands are met"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:50
# 10a145adbcc54dc799d3f19a9669204d
msgid "the ``environments`` attribute in the first |resource execute| resource is being used to define values that appear as variables in the |openvpn| configuration"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:51
# 0f0bb35c574a40c486c3d2a9bf004f65
msgid "the |resource template| resource tells the |chef client| which template to use"
msgstr ""

