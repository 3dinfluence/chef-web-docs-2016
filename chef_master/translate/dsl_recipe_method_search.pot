# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-29 11:08-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../release_11-x_master/dsl_recipe_method_search.rst:3
# d8c03b75a3b3494d9b51232f02ac70ff
msgid "search Method"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 64ba93df926a44b99c9d18c027fe320d
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:4
# 5915e3b2315e4071be4598a33e434c20
msgid "Use the ``search`` method to perform a search query against the |chef server| from within a recipe."
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:6
# 46c1d95a75dc40039e22d18a6cb4bf2d
msgid "The syntax for the ``search`` method is as follows:"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:12
# 2521f4f5673646b282d8d3ff2cedaa26
msgid "where:"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:14
# ebdd38ba863b42859955b854eedcbcaf
msgid "``:index`` is of name of the index on the |chef server| against which the search query will run: ``:client``, ``:data_bag_name``, ``:environment``, ``:node``, and ``:role``"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:15
# c3a1448c5c9c4f7ead06c2a5ab76e45c
msgid "``\"query\"`` is a valid search query against an object on the |chef server| (see below for more information about how to build the query)"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:17
# d47596c28093431583467b3d6dd25ee1
msgid "For example, using the results of a search query within a variable:"
msgstr ""

#: ../../release_chef_12-0/includes_dsl_recipe_method_search.rst:23
# c506396c57264caeb3d87f80b203fc9a
msgid "and then using the results of that query to populate a template:"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:10
# 644469b976d541b18d85d50598ef2048
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 5c827af00fa2472bb412f678b9c5967c
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 580e3b6f0f964c69a6130886c11676cf
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:14
# cdcbb21da9b241c6a1bb5f05d3083df2
msgid "About Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 51aabc00881648c18604acbf17344851
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:18
# 3facfaf38ec2410cb03332f745c3c1f3
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 8d84b43124894cb0ac488647f4d29028
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 57663193a30a41bbb27c31c3faf6d8e5
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# e9a5e5c3e2ca43838ebf510af33401f9
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 3bafee7b1f354811a0c04d47b80def30
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 201b158c42ce4d449dbfff1ee4351899
# 887cd591252c4bec99bcd4747ce6b4af
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 910bc8c4b8ab4623bc72daee3cfe1a72
# a39aae0ade1e46579cb775a9164d9dd2
msgid "or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# b4c36f5760be4040af5e77c0c3b829c6
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 3af47dc33ad84d74a313bc6a1e45daf4
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# bdb472b50f8840a2bca9ce5163a0db98
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# d0a12ea4a94445da8378d2e6f6adebf0
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:22
# 1dc1ff096d8d4cbd927399c1dc47980e
msgid "About Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 07d860f244f04cf288d3f04af37fc2cd
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:26
# c5953c3a51bf4d3dbc07700b2b63008a
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 8da7727955e84e7199a64cd5778b54e9
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:30
# 63a12c9a6bdf41cf952f019c2329d714
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# b5ec5e8eb5d143cbb2ac5e1dceafa051
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# c3eb6720b1ef4d0c97733573672b96f8
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# b5043864cec246bea433d7858c5e1aad
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:34
# 980c29e654d144ccaae1829ca4fc5b93
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 2dbc7111af3544f49ec9676b0710d138
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# 83b098cf0fee40c590714df16da46d9e
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:38
# e2629a827ef943238cd34066dd61c71f
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# e068c8577a0e450988c38efd605fb25d
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# 9978ecd6733745658a468f3b58f15a07
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:42
# b04a4911034449b4840f21e82e028f5c
msgid "About Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# 7ecdf8fc7d57429892dfcf835cb2488f
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# ec188831c8f54f128c720bee155f660a
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# a0a81c1ba72f425484a678db375c9be2
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 1165a2e830a1447f964764fbfc22b2a9
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 56dc02e48bea456d8034a970b4dbcf67
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 89f6c269a43a4ae6a54fc26ac75dcece
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# bc680ba3b6e049c688560017d4246789
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# c503165164204edfbf78f0380e969621
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# a1b6441007ea440db5ded39235f52d43
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:46
# 870656a43e0f47beb55a66a3058ad2e2
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# efb2b5b6652b414c9cf15b056a657efa
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# 367b45d32454427dab4408ef5e469b70
msgid "For example:"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:50
# fb3add0a96f74642a2932537af0bcdfe
msgid "Examples"
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:51
# 6311c9a79b9e49448cc8cdf2194a6797
msgid "The following examples show how the ``search`` method can be used in a recipe."
msgstr ""

#: ../../release_11-x_master/dsl_recipe_method_search.rst:53
# 74b129a704534edd84c32e2a46bab9e6
msgid "**Use the search recipe DSL method to find users**"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:3
# 398240d364ec4a1e83a5272545c8c82e
msgid "The following example shows how to use the ``search`` method in the |dsl recipe| to search for users:"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:47
# 63c1bc440ca64214bbdbcb9da4fa8016
msgid "where"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:49
# d74c7eb2d78f4366b4c14503eea88aee
msgid "the search will use both of the |resource execute| resources, unless the condition specified by the ``not_if`` commands are met"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:50
# 2758f9836c0c45fabdc0e4c3e90d0292
msgid "the ``environments`` attribute in the first |resource execute| resource is being used to define values that appear as variables in the |openvpn| configuration"
msgstr ""

#: ../../step_resource/step_resource_execute_use_search_dsl_method.rst:51
# a41f5adf1c0545749bc35c731f52d24e
msgid "the |resource template| resource tells the |chef client| which template to use"
msgstr ""

