# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-03-05 17:10\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/resource_common_first_run.rst:34
# 4d0bc7b5214e4d8ca913f1c3ff32e072
msgid "Run a Resource Before Anything Else"
msgstr ""

#: ../source/resource_common_first_run.rst:36
# 1a383fca18d44d37b4a64d9481ea48e1
msgid "|chef| processes recipes in two phases:"
msgstr ""

#: ../source/resource_common_first_run.rst:38
# d2282c58be7a436e891a67b37af7dff4
msgid "First, each resource in the node object is identified and a resource collection is built. All recipes are loaded and the actions specified within them are identified."
msgstr ""

#: ../source/resource_common_first_run.rst:39
# b97e8ede8009481f9296c4ec85d60066
msgid "The system is configured based on the resource collection. Each resource is mapped to a provider. The provider examines the node and then does the steps necessary to complete the action."
msgstr ""

#: ../source/resource_common_first_run.rst:41
# 0dde3244482e44838dfd2b12b1ce3cf8
msgid "Sometimes, it may be necessary to ensure that a specific resource is configured before anything else, such as ensuring that a package is downloaded so that it may be used later. This can be done by setting up a ``Chef::Resource`` object and then calling the method that runs the action."
msgstr ""

#: ../source/resource_common_first_run.rst:43
# 300ff821cc004d249ea4c71c39634a4a
msgid "**Update a package cache**"
msgstr ""

#: ../source/resource_common_first_run.rst:45
# 63812e36587a4c79be45512494acd5a7
msgid "It is important to make sure that an operating system's package cache is up to date before |chef| tries to install packages, otherwise there may be references to versions that no longer exist. For example, on |debian| or |ubuntu| systems, the |apt| cache needs to be updated. Use code similar to the following:"
msgstr ""

#: ../source/resource_common_first_run.rst:55
# 72d748b7cf6c419588b3102ce1de449e
msgid "where ``e`` is created as a ``Chef::Resource::Execute`` |ruby| object. The ``action`` attribute is set to ``:nothing`` so that the ``run_action`` method can be used to tell |chef| to run the specified command. |opscode| provides a cookbook for doing this with |apt| (|debian| or |ubuntu|) and |pacman| (for |archlinux|). The preceding recipe can be placed at the top of a node's run list to ensure it is run before |chef| tries to install any packages."
msgstr ""

#: ../source/resource_common_first_run.rst:57
# 5aa69ace968f44dfa7838780bfdaf533
msgid "**Install a RubyGem to use later**"
msgstr ""

#: ../source/resource_common_first_run.rst:59
# 5f3778019b6346089bac00819dc35e59
msgid "A single |chef| run should configure a node completely. |chef| uses |ruby| as the recipe language, which means that anything that can be done with |ruby| can be done in a recipe. However, in some cases, a |rubygem| may need to be installed before anything else happens. For example, when a |mysql| database needs to interact with a recipe. This can be done with a recipe similar to the following:"
msgstr ""

#: ../source/resource_common_first_run.rst:72
# ee51578da25345a5919e0b8793e6b5f6
msgid "where similar to the previous example for updating package caches, this example creates a new |ruby| object called ``Chef::Resource::Package`` using the |rubygems| provider."
msgstr ""

#: ../source/resource_common_first_run.rst:74
# a94086a112ae4a72bdf388a1b651e9fd
msgid "The |mysql| |rubygem| compiles native extensions in C, so the appropriate packages for the operating system will also need to be installed."
msgstr ""

#: ../source/resource_common_first_run.rst:75
# a69ba531dd6a4a0bae0bbebf4f9879a4
msgid "``Gem.clear_paths`` ensures that |chef| reloads the cache of available |rubygems|."
msgstr ""

#: ../source/resource_common_first_run.rst:76
# 4cf42dafacec40e5a17531e5818a5d39
msgid "``require 'mysql'`` loads the |mysql| |rubygem| so that it can be used to connect to a |mysql| database."
msgstr ""

#: ../source/resource_common_first_run.rst:78
# 53834a7886d946aa81002d9abd1b0040
msgid "**An anti-pattern**"
msgstr ""

#: ../source/resource_common_first_run.rst:80
# 60aea39fbaa8434da50b6155e12bba9b
msgid "Unfortunately, resources that are executed when the resource collection is being built cannot notify any resource that has yet to be added to the resource collection. For example:"
msgstr ""

#: ../source/resource_common_first_run.rst:92
# 14ffdc92c696445e9877d6b1d38b6afa
msgid "In some cases, the better approach may be to install the package before the resource collection is built to ensure that it is available to other resources later on. Or, something like the following can be used:"
msgstr ""

