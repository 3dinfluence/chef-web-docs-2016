# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-02-10 09:43-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_client.rst:8
# dfd5e5f08c6e42bf803312fd73872c85
msgid "|chef client_title|"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:5
#: ../../includes_chef_client/includes_chef_client.rst:5
# 2f292ba81ef94121b7ce1a7cfd783a9f
# 53460878247c46b4b8fa0b9d5a8f0b34
msgid "A |chef client| is an agent that runs locally on every node that is under management by |chef|. When a |chef client| is run, it will perform all of the steps that are required to bring the node into the expected state, including:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:7
#: ../../includes_chef_client/includes_chef_client.rst:7
# 67006b56afcf4d69be0ed0b1540ebb26
# 66a25983943b45f4b218953cedc583b1
msgid "Registering and authenticating the node with the |chef server|"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:8
#: ../../includes_chef_client/includes_chef_client.rst:8
# f93a97ada2b74fa29c022013b6ccfe3d
# 66f828696031428bb0a06b1956152a0c
msgid "Building the node object"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:9
#: ../../includes_chef_client/includes_chef_client.rst:9
# 678b4fccfd2d4cc09ccd17ea83bcfd86
# 31e48a307b5842e6beb9306a4ddc75f7
msgid "Synchronizing cookbooks"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:10
#: ../../includes_chef_client/includes_chef_client.rst:10
# 0db2e2e2ffcf4057940eacae7960ed6c
# d5221c7a6bdd47f5bba71b5659b34379
msgid "Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:11
#: ../../includes_chef_client/includes_chef_client.rst:11
# d2c0060ba3a4456f8f4796ba53c04b35
# 8abb3567dddc4ea9b72057dad25b8637
msgid "Taking the appropriate and required actions to configure the node"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:12
#: ../../includes_chef_client/includes_chef_client.rst:12
# 12e97f4b437d4143aa14d97b423ff47b
# afdc4870defb4bbba97ba277843502fd
msgid "Looking for exceptions and notifications, handling each as required"
msgstr ""

#: ../source/chef_client.rst:12
# 91af84446d5447149b704471dfaaf056
msgid "|daemonize chef_client|"
msgstr ""

#: ../source/chef_client.rst:15
# 8c97da87b4bb42b996dd284a3f91c330
msgid "Node Types"
msgstr ""

#: ../../includes_node/includes_node.rst:5
# ce25c2f6234c41488ffa273c20f91a27
msgid "A node is any physical, virtual, or cloud machine that is configured to be maintained by a |chef client|."
msgstr ""

#: ../source/chef_client.rst:19
# c2b611e80e5d40af8e770f72d8a9d8fd
msgid "There following types of nodes can be managed by the |chef client|:"
msgstr ""

#: ../source/chef_client.rst:25
#: ../source/chef_client.rst:42
# 4f6e08338d694b458e5652c42e17da2f
# d669158d735142848f2f5c9b1973f35d
msgid "Feature"
msgstr ""

#: ../source/chef_client.rst:26
#: ../source/chef_client.rst:43
#: ../../includes_chef_client/includes_chef_client_run.rst:17
#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:16
# ac095d2837824f5ba5e68d18c2218016
# b005ac1eaf6c4fa8bdec86e0f70b3747
# 3ee6be2dd71b497a9d11eb5a44d9fa97
# e4cc96fe266f4221b41f4dbef6057e9d
msgid "Description"
msgstr ""

#: ../../includes_node/includes_node_type_cloud.rst:4
# a488141cc5984c27989116c02c78d11e
msgid "A cloud-based node is hosted in an external cloud-based service, such as |amazon vpc|, |openstack|, |rackspace|, |google compute engine|, |linode|, or |azure|. Plugins are available for |knife| that provide support for external cloud-based services. |knife| can use these plugins to create instances on cloud-based services. Once created, the |chef client| can be used to deploy, configure, and maintain those instances."
msgstr ""

#: ../../includes_node/includes_node_type_physical.rst:4
# 3fc2a1f306404f5ca95d9d312aeaa4ec
msgid "A physical node is typically a server or a virtual machine, but it can be any active device attached to a network that is capable of sending, receiving, and forwarding information over a communications channel. In other words, a physical node is any active device attached to a network that can run a |chef client| and also allow that |chef client| to communicate with a |chef server|."
msgstr ""

#: ../../includes_node/includes_node_type_virtual.rst:4
# 868309d726314708a4ecc847961cc93e
msgid "A virtual node is a machine that runs only as a software implementation, but otherwise behaves much like a physical machine."
msgstr ""

#: ../../includes_node/includes_node_type_network.rst:4
# a5b0e0f99e9542d2ba7a773783c228e5
msgid "A network node is any networking device---a switch, a router---that is being managed by a |chef client|, such as networking devices by |juniper|, |arista|, |cisco|, and |f5|. Use |chef| to automate common network configurations, such physical and logical Ethernet link properties and VLANs, on these devices."
msgstr ""

#: ../source/chef_client.rst:36
# 8bcb77bf29064dd784c58a8fe8bcaeb5
msgid "Some important components of nodes include:"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:4
# 0cea1d51e9cc4fdd93dec31922e84f97
msgid "|ohai| is a tool that is used to detect attributes on a node, and then provide these attributes to the |chef client| at the start of every |chef client| run. |ohai| is required by the |chef client| and must be present on a node. (|ohai| is installed on a node as part of the |chef client| install process.)"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:6
# 07da25d1fdd243aeafb4045866c96f3a
msgid "The types of attributes |ohai| collects include (but are not limited to):"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:8
# 423cfa2bacd248a1a0907c542f9c89dc
msgid "Platform details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:9
# 632a990f405b4034932f253e753a0f1d
msgid "Network usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:10
# 5af438a1a519446fb66823c4eacc5c06
msgid "Memory usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:11
# 34b8341c50f44237bc9a5fceccf73d2d
msgid "CPU data"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:12
# e55f8875e96c49119d6c1d02df47b42b
msgid "Kernel data"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:13
# ff0e99a53a564ee7bae49b00e0dce661
msgid "Host names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:14
# 3f43295fbc054d35b50a041ff76ad082
msgid "Fully qualified domain names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:15
# 8329e7287cf2480688f6e53562a07a0e
msgid "Other configuration details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:17
# 059f699c3a6b4a91b02279e121b7ab08
msgid "Attributes that are collected by |ohai| are automatic attributes, in that these attributes are used by the |chef client| to ensure that these attributes remain unchanged after the |chef client| is done configuring the node."
msgstr ""

#: ../source/chef_client.rst:50
# f6e71852dbce4812a1ef9c0a670155bf
msgid "The |chef client_title| Run"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:6
# eeae310ebf5448f3a9679953fdc61698
msgid "A \"|chef client| run\" is the term used to describe a series of steps that are taken by the |chef client| when it is configuring a node. The following diagram shows the various stages that occur during the |chef client| run, and then the list below the diagram describes in greater detail each of those stages."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:10
# b78d87ffdb504c05ba007b851a16a3f7
msgid "During every |chef client| run, the following happens:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:16
#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:15
# a567f2dca20f49488f097a1da1be4089
# e79e1616b1a9471cb26ee2b9f85e5595
msgid "Stages"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:18
# c44bc82c58af4bdbb7776f2d1637997a
msgid "**Get configuration data**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:19
# dc7f27b21d354948acd1ebe767d838b5
msgid "The |chef client| gets process configuration data from the |client rb| file on the node, and then gets node configuration data from |ohai|. One important piece of configuration data is the name of the node, which is found in the ``node_name`` attribute in the |client rb| file or is provided by |ohai|. If |ohai| provides the name of a node, it is typically the |fqdn| for the node, which is always unique within an organization."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:20
# 11280fff1248452daef759a330ce3cf2
msgid "**Authenticate to the Chef Server**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:21
# 7ea9a5af569449129813665c92f9eb31
msgid "The |chef client| authenticates to the |chef server| using an RSA private key and the |api chef server|. The name of the node is required as part of the authentication process to the |chef server|. If this is the first |chef client| run for a node, the |chef validator| will be used to generate the RSA private key."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:22
# 90bdc627258149f39f56992dfd03fd96
msgid "**Get, rebuild the node object**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:23
# fe43627d97c04804bb76a40516c63b77
msgid "The |chef client| pulls down the node object from the |chef server|. If this is the first |chef client| run for the node, there will not be a node object to pull down from the |chef server|. After the node object is pulled down from the |chef server|, the |chef client| rebuilds the node object. If this is the first |chef client| run for the node, the rebuilt node object will contain only the default run-list. For any subsequent |chef client| run, the rebuilt node object will also contain the run-list from the previous |chef client| run."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:24
# f753cf8f1f984da3bcf610373a6a0d48
msgid "**Expand the run-list**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:25
# 2f49bf95b79646beb07f218e307c4512
msgid "The |chef client| expands the run-list from the rebuilt node object, compiling a full and complete list of roles and recipes that will be applied to the node, placing the roles and recipes in the same exact order they will be applied. (The run-list is stored in each node object's |json| file, grouped under ``run_list``.)"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:26
# 41c6c0bb0e8943bdb8fd95ce294f7f96
msgid "**Synchronize cookbooks**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:27
# dc6b8283af114ae08a1ad70452fb54f0
msgid "The |chef client| asks the |chef server| for a list of all cookbook files (including recipes, templates, resources, providers, attributes, libraries, and definitions) that will be required to do every action identified in the run-list for the rebuilt node object. The |chef server| provides to the |chef client| a list of all of those files. The |chef client| compares this list to the cookbook files cached on the node (from previous |chef client| runs), and then downloads a copy of every file that has changed since the previous |chef client| run, along with any new files."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:28
# cbc195afb5524d1d807622802b0b522f
msgid "**Reset node attributes**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:29
# 0a389a2a155b4afaa88e0fa8f4e65b86
msgid "All attributes in the rebuilt node object are reset. All attributes from attribute files, environments, roles, and |ohai| are loaded. Attributes that are defined in attribute files are first loaded according to cookbook order. For each cookbook, attributes in the ``default.rb`` file are loaded first, and then additional attribute files (if present) are loaded in lexical sort order. All attributes in the rebuilt node object are updated with the attribute data according to attribute precedence. When all of the attributes are updated, the rebuilt node object is complete."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:30
# d971527a7bb445b1b5abb7a642b10575
msgid "**Compile the resource collection**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:31
# 09ff0fb0aaef41bb90c59c2b060bccc5
msgid "The |chef client| identifies each resource in the node object and builds the resource collection. Libraries are loaded first to ensure that all language extensions and |ruby| classes are available to all resources. Next, attributes are loaded, followed by lightweight resources, and then all definitions (to ensure that any pseudo-resources within definitions are available). Finally, all recipes are loaded in the order specified by the expanded run-list. This is also referred to as the \"compile phase\"."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:32
# 84057972a3f2457fbe062b2b7e192d9a
msgid "**Converge the node**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:33
# fa6e8649f90f4a9c8afc72d9e56e5b94
msgid "The |chef client| configures the system based on the information that has been collected. Each resource is executed in the order identified by the run-list, and then by the order in which each resource is listed in each recipe. Each resource in the resource collection is mapped to a provider. The provider examines the node, and then does the steps necessary to complete the action. And then the next resource is processed. Each action configures a specific part of the system. This process is also referred to as convergence. This is also referred to as the \"execution phase\"."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:34
# a846744311054929be0726918b9bdd38
msgid "**Update the node object, process exception and report handlers**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:35
# 0d5b7892cd754bb6885e3ac58a89c930
msgid "When all of the actions identified by resources in the resource collection have been done, and when the |chef client| run finished successfully, the |chef client| updates the node object on the |chef server| with the node object that was built during this |chef client| run. (This node object will be pulled down by the |chef client| during the next |chef client| run.) This makes the node object (and the data in the node object) available for search."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:37
# c15d278a7c5047449090a22d1563f5dd
msgid "The |chef client| always checks the resource collection for the presence of exception and report handlers. If any are present, each one is processed appropriately."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:38
# 9d3436cfc91d4c508cfdd90c7768420f
msgid "**Stop, wait for the next run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:39
# 3126b7243cab43dd89030c489a62be3e
msgid "When everything is configured and the |chef client| run is complete, the |chef client| stops and waits until the next time it is asked to run."
msgstr ""

#: ../source/chef_client.rst:54
# 9b1b6a82d18b46309f638caceb36e7a9
msgid "|chef validator|"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:5
# 1dfba1678dd14175990a2b3b6a780714
msgid "Every request made by the |chef client| to the |chef server| must be an authenticated request using the |api chef server| and a private key. When the |chef client| makes a request to the |chef server|, the |chef client| authenticates each request using a private key located in ``/etc/chef/client.pem``."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:7
# 4696e2fcd6824996893df72366ed0d87
msgid "However, during the first |chef client| run, this private key does not exist. Instead, the |chef client| will attempt to use the private key assigned to the |chef validator|, located in ``/etc/chef/validation.pem``. (If, for any reason, the |chef validator| is unable to make an authenticated request to the |chef server|, the initial |chef client| run will fail.)"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:9
# 7dd58d97dfa64a129c80c7293db6d1bd
msgid "During the initial |chef client| run, the |chef client| will register with the |chef server| using the private key assigned to the |chef validator|, after which the |chef client| will obtain a ``client.pem`` private key for all future authentication requests to the |chef server|."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:11
# 79ed1dfcfecb47f8899b3da713f8a527
msgid "After the initial |chef client| run has completed successfully, the |chef validator| is no longer required and may be deleted from the node. Use the ``delete_validation`` recipe found in the ``chef-client`` cookbook (https://github.com/opscode-cookbooks/chef-client) to remove the |chef validator|."
msgstr ""

#: ../source/chef_client.rst:58
# 4d0d02fef9144b799b8542156b4058ac
msgid "SSL Certificates"
msgstr ""

#: ../../includes_node/includes_node_certificate.rst:4
# aeed7e16b31c4c6493621c71b7d25447
msgid "An |ssl| certificate is used between the |chef client| and the |chef server| to ensure that each node has access to the right data."
msgstr ""

#: ../source/chef_client.rst:62
# 6ae2263bbad14e5f9a183aaca856a6a1
msgid "Signed Header Authentication"
msgstr ""

#: ../../includes_security/includes_security_signed_header_authentication.rst:5
# 404dd65a4b014fbf8a1b081452924c33
msgid "Signed header authentication is used to validate communications between the |chef server| and any node that is being managed by the |chef server|. An API client manages each authentication request. A public and private key pair is used for the authentication itself. The public key is stored in the database on the |chef server|. The private key is stored locally on each node and is kept separate from node data (typically in the |path chef private key| directory). Each request to the |chef server| by a node must include a request signature in the HTTP headers. This signature is computed from a hash of request content and is encrypted using the private key."
msgstr ""

#: ../source/chef_client.rst:66
# 99ca3eb06a1c40c2b4cb96784b267f55
msgid "About Bootstrap Operations"
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:4
# e5a683d3fa6d4f6c83894bbd8289ca13
msgid "The ``knife bootstrap`` command is a common way to install the |chef client| on a node. The default for this approach assumes that node can access the |company_name| website so that it may download the |chef client| package from that location."
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:6
# e4968bd5b708404fb6634de6931bc0fa
msgid "The |omnibus installer| will detect the version of the operating system, and then install the appropriate version of the |chef client| using a single command to install the |chef client| and all of its dependencies, including an embedded version of |ruby|, |rubygems|, |open ssl|, key-value stores, parsers, libraries, and command line utilities."
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:8
# 501b72e6bf39491cb86f9d46f6b87bb9
msgid "The |omnibus installer| puts everything into a unique directory (|path omnibus install_client|) so that the |chef client| will not interfere with other applications that may be running on the target machine. Once installed, the |chef client| requires a few more configuration steps before it can perform its first |chef client| run on a node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:5
# ffc9d20f29f845d9be8b87d26da5a9ac
msgid "The following diagram shows the stages of the bootstrap operation, and then the list below the diagram describes in greater detail each of those stages."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:9
# 3b91bfca2a994616a239cab57d8813a5
msgid "During a ``knife bootstrap`` bootstrap operation, the following happens:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:17
# 8b10802764ab4484b339e32db5d3e751
msgid "**$ knife bootstrap**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:18
# 41d6396821654af5b24691b11abac5f9
msgid "On |unix|- and |linux|-based machines: The ``knife bootstrap`` command is issued from a workstation. The hostname, IP address, or |fqdn| of the target node is issued as part of this command. An |ssh| connection is established with the target node using port 22. A shell script is assembled using the |erb chef_full| (the default bootstrap template), and is then executed on the target node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:20
# 037cfab96a774e439bcf755c8fbbdfac
msgid "On |windows| machines: The ``knife bootstrap windows winrm`` command is issued from a workstation. (This command is part of the `knife windows plugin <http://docs.chef.io/plugin_knife_windows.html>`_.) The hostname, IP address, or |fqdn| of the target node is issued as part of this command. A connection is established with the target node using |windows remote management| over port 5985. (|windows remote management| must be enabled with the corresponding firewall rules in place.)"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:21
# 0ca0e7ffeca64315bf4f132f3862999a
msgid "**Get the install script from Chef**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:22
# e25ae616f77f4344a5aeecdf32968f3e
msgid "On |unix|- and |linux|-based machines: The shell script that is derived from the |erb chef_full| bootstrap template will make a request to the |company_name| website to get the most recent version of a second shell script (``install.sh``)."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:24
# cf8db41b6fc449d1a3ff747a39de769b
msgid "On |windows| machines: The batch file that is derived from the |erb chef_windows| bootstrap template will make a request to the |company_name| website to get the .msi installer."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:25
# d83ffe6187564101810fe8b53c6e1cb7
msgid "**Get the chef-client package from Chef**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:26
# 8da01f8d49ff4de6b153dfaf4112b2b8
msgid "The second shell script (or batch file) then gathers system-specific information and determines the correct package for the |chef client|. The second shell script (or batch file) makes a request to the |company_name| website, and then downloads the appropriate package from |url bootstrap_s3|."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:27
# 1d1fcac51fc9409a95c9f3fd5c626d28
msgid "**Install the chef-client**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:28
# 6cf6a1b19ba7469185f39a78fe532680
msgid "The |chef client| is installed on the target node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:29
# 81158917a5344493b5e4a3a7d0cfdc29
msgid "**Start the chef-client run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:30
# a36e7807e7824563b9105965578c0864
msgid "On |unix|- and |linux|-based machines: The second shell script executes the ``chef-client`` binary with a set of initial settings stored within ``first-boot.json`` on the node. ``first-boot.json`` is generated from the workstation as part of the initial ``knife bootstrap`` command."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:32
# 20107f2956004df784d52506f5112a35
msgid "On |windows| machines: The batch file that is derived from the |erb chef_windows| bootstrap template executes the ``chef-client`` binary with a set of initial settings stored within ``first-boot.json`` on the node. ``first-boot.json`` is generated from the workstation as part of the initial ``knife bootstrap`` command."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:33
# c09b0878ede5418b86aabb246bbb2806
msgid "**Complete the chef-client run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:34
# ef4b11854f8e4db8bd21e9689e7c3d50
msgid "The |chef client| run proceeds, using HTTPS (port 443), and registers the node with the |chef server|."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:36
# f456db489f7c4ca7ba662982d3d25692
msgid "The first |chef client| run, by default, contains an empty run-list. A `run-list can be specified <http://docs.chef.io/knife_bootstrap.html>`_ as part of the initial bootstrap operation using the ``--run-list`` option as part of the ``knife bootstrap`` command."
msgstr ""

