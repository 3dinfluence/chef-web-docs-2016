# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-29 14:53-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_client.rst:8
# f384f567c37f4b3e98ce65f8649d897e
msgid "|chef client_title|"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:5
#: ../../includes_chef_client/includes_chef_client.rst:5
# 3b73c32d871347bf969b18a86fe5beec
# c7df3511d9f848eeaa12e7a2274a6dd2
msgid "A |chef client| is an agent that runs locally on every node that is under management by |chef|. When a |chef client| is run, it will perform all of the steps that are required to bring the node into the expected state, including:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:7
#: ../../includes_chef_client/includes_chef_client.rst:7
# d09821ad922643a5884c99ee6302fe76
# 1ec84d8acaa640b3bf43e683bdf7549a
msgid "Registering and authenticating the node with the |chef server|"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:8
#: ../../includes_chef_client/includes_chef_client.rst:8
# 8bac432fb3754c88bbf9b79fd7e6c4c3
# bc270a569f454f74a0ea5b11556ab343
msgid "Building the node object"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:9
#: ../../includes_chef_client/includes_chef_client.rst:9
# e528d2b61a754345869e7ea74b24b549
# 895a07711e964c73b1dac422ed66e9c3
msgid "Synchronizing cookbooks"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:10
#: ../../includes_chef_client/includes_chef_client.rst:10
# 2c2093dc6a374d2090b9a241c4abe0f0
# add85ee900b34a9187e8637def574abe
msgid "Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:11
#: ../../includes_chef_client/includes_chef_client.rst:11
# ed27a4a5e9854100a75cd86323388a87
# b8ff34c49fd94850871506794f5af295
msgid "Taking the appropriate and required actions to configure the node"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:12
#: ../../includes_chef_client/includes_chef_client.rst:12
# 63b0934c7afa4a168467b4a8de7d84c1
# 1c924663426645f48dcb8f60d031b474
msgid "Looking for exceptions and notifications, handling each as required"
msgstr ""

#: ../source/chef_client.rst:12
# eae539bf53f14abca0acc2e370ab0077
msgid "|daemonize chef_client|"
msgstr ""

#: ../source/chef_client.rst:15
# 4408c74c7ea0404bb17bc0d84380d8eb
msgid "Node Types"
msgstr ""

#: ../../includes_node/includes_node.rst:5
# a8a75d530a554c1995a20aa72888dc82
msgid "A node is any physical, virtual, or cloud machine that is configured to be maintained by a |chef client|."
msgstr ""

#: ../source/chef_client.rst:19
# 98e967f4f4564c06badde76e29420d7f
msgid "There following types of nodes can be managed by the |chef client|:"
msgstr ""

#: ../source/chef_client.rst:25
#: ../source/chef_client.rst:42
# ed366c098c67406a88cf8da0cbfe1910
# d9ce20955cfd4a3b8d774bbf41281629
msgid "Feature"
msgstr ""

#: ../source/chef_client.rst:26
#: ../source/chef_client.rst:43
#: ../../includes_chef_client/includes_chef_client_run.rst:17
#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:16
# 6c4e9fd907af4eee9328cae4ef0bac75
# 782c39893a514c43aae3dc46e59b93dc
# d5ce4315d4b743b2812beb5d50f8c075
# e1553cc79bb647b99cfc85488b69dc52
msgid "Description"
msgstr ""

#: ../../includes_node/includes_node_type_cloud.rst:4
# 7538da2087ae4432a6b1838fb545f0a0
msgid "A cloud-based node is hosted in an external cloud-based service, such as |amazon vpc|, |openstack|, |rackspace|, |google compute engine|, |linode|, or |azure|. Plugins are available for |knife| that provide support for external cloud-based services. |knife| can use these plugins to create instances on cloud-based services. Once created, the |chef client| can be used to deploy, configure, and maintain those instances."
msgstr ""

#: ../../includes_node/includes_node_type_physical.rst:4
# 2137f7b2487e4b83866103c9d4876500
msgid "A physical node is typically a server or a virtual machine, but it can be any active device attached to a network that is capable of sending, receiving, and forwarding information over a communications channel. In other words, a physical node is any active device attached to a network that can run a |chef client| and also allow that |chef client| to communicate with a |chef server|."
msgstr ""

#: ../../includes_node/includes_node_type_virtual.rst:4
# 935c3f48caa048bdb0143f59385268ec
msgid "A virtual node is a machine that runs only as a software implementation, but otherwise behaves much like a physical machine."
msgstr ""

#: ../../includes_node/includes_node_type_network.rst:4
# 85e74983a0a9434a8487d7423a38cf53
msgid "A network node is any networking device---a switch, a router---that is being managed by a |chef client|, such as networking devices by |juniper|, |arista|, |cisco|, and |f5|. Use |chef| to automate common network configurations, such physical and logical Ethernet link properties and VLANs, on these devices."
msgstr ""

#: ../source/chef_client.rst:36
# 60c1442515fd4bf885e1b59a70144d2a
msgid "Some important components of nodes include:"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:4
# 25526bd16ad24b58a05b58952ec89904
msgid "|ohai| is a tool that is used to detect attributes on a node, and then provide these attributes to the |chef client| at the start of every |chef client| run. |ohai| is required by the |chef client| and must be present on a node. (|ohai| is installed on a node as part of the |chef client| install process.)"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:6
# 55ae2ae5bbb7404a873be16aecaf7110
msgid "The types of attributes |ohai| collects include (but are not limited to):"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:8
# 45f6eff6e1064721ac2059e10ccc5804
msgid "Platform details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:9
# 046a486b2bcc4908a71ecc93a5f54bb1
msgid "Network usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:10
# 4e994684d3c64f6b8b8a47ef2f304e6a
msgid "Memory usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:11
# 60f32c69fedf4b0db7f8c082372866f3
msgid "CPU data"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:12
# 4c0e595c349a414eb5a92feedd74357f
msgid "Kernel data"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:13
# 58b6469f36284c268e65d91d6d790908
msgid "Host names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:14
# cc5174628f5841f28deed3d5b43c9bef
msgid "Fully qualified domain names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:15
# c880b9be12e7436ba7cc2353deeb87f1
msgid "Other configuration details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:17
# ddba53933e544442b267292e618f27f5
msgid "Attributes that are collected by |ohai| are automatic attributes, in that these attributes are used by the |chef client| to ensure that these attributes remain unchanged after the |chef client| is done configuring the node."
msgstr ""

#: ../source/chef_client.rst:50
# 392f00148da9472ba24b629a98270837
msgid "The |chef client_title| Run"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:6
# 75f6d304ba7b4612b07e1cc9f3935d29
msgid "A \"|chef client| run\" is the term used to describe a series of steps that are taken by the |chef client| when it is configuring a node. The following diagram shows the various stages that occur during the |chef client| run, and then the list below the diagram describes in greater detail each of those stages."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:10
# 3b50badf863b4efd8ca3dee0b8aa1349
msgid "During every |chef client| run, the following happens:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:16
#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:15
# 1d011f2f14c54e36952b232f8efe1a8c
# 1b1b4f74b22a4221ab1842dcab3722d3
msgid "Stages"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:18
# 7d4beaaa936f47b983326280262dd5e7
msgid "**Get configuration data**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:19
# a3780bb3ec6a45828a60c65e14964494
msgid "The |chef client| gets process configuration data from the |client rb| file on the node, and then gets node configuration data from |ohai|. One important piece of configuration data is the name of the node, which is found in the ``node_name`` attribute in the |client rb| file or is provided by |ohai|. If |ohai| provides the name of a node, it is typically the |fqdn| for the node, which is always unique within an organization."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:20
# 264fd89325a547d7a7b829c1f85b70b4
msgid "**Authenticate to the Chef Server**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:21
# bedcbec703504253a9d86bc85b810c5f
msgid "The |chef client| authenticates to the |chef server| using an RSA private key and the |api chef server|. The name of the node is required as part of the authentication process to the |chef server|. If this is the first |chef client| run for a node, the |chef validator| will be used to generate the RSA private key."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:22
# 38a4a627c0b349899c9d7e4ad2cbed88
msgid "**Get, rebuild the node object**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:23
# 3916ba4b2fb646c3bcdde7678a3b1d85
msgid "The |chef client| pulls down the node object from the |chef server|. If this is the first |chef client| run for the node, there will not be a node object to pull down from the |chef server|. After the node object is pulled down from the |chef server|, the |chef client| rebuilds the node object. If this is the first |chef client| run for the node, the rebuilt node object will contain only the default run-list. For any subsequent |chef client| run, the rebuilt node object will also contain the run-list from the previous |chef client| run."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:24
# e2c3028ea28d4b0eaffcf59c19572030
msgid "**Expand the run-list**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:25
# bfcd29ac344042e8af1948cf870db148
msgid "The |chef client| expands the run-list from the rebuilt node object, compiling a full and complete list of roles and recipes that will be applied to the node, placing the roles and recipes in the same exact order they will be applied. (The run-list is stored in each node object's |json| file, grouped under ``run_list``.)"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:26
# 99a32b229cd04b36888f27d31110d673
msgid "**Synchronize cookbooks**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:27
# 3432f30e3241490fa509bb16f0165e83
msgid "The |chef client| asks the |chef server| for a list of all cookbook files (including recipes, templates, resources, providers, attributes, libraries, and definitions) that will be required to do every action identified in the run-list for the rebuilt node object. The |chef server| provides to the |chef client| a list of all of those files. The |chef client| compares this list to the cookbook files cached on the node (from previous |chef client| runs), and then downloads a copy of every file that has changed since the previous |chef client| run, along with any new files."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:28
# 5b5cf8ddd5c442838ffa814f9d32c06c
msgid "**Reset node attributes**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:29
# 1faf6e8ab2c84875a1951ddeaf2409eb
msgid "All attributes in the rebuilt node object are reset. All attributes from attribute files, environments, roles, and |ohai| are loaded. Attributes that are defined in attribute files are first loaded according to cookbook order. For each cookbook, attributes in the ``default.rb`` file are loaded first, and then additional attribute files (if present) are loaded in lexical sort order. All attributes in the rebuilt node object are updated with the attribute data according to attribute precedence. When all of the attributes are updated, the rebuilt node object is complete."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:30
# a9e47a94ad3a40d0aa439d7a27825a8e
msgid "**Compile the resource collection**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:31
# 5d0ef516a41a4c3093617eb1e3345006
msgid "The |chef client| identifies each resource in the node object and builds the resource collection. Libraries are loaded first to ensure that all language extensions and |ruby| classes are available to all resources. Next, attributes are loaded, followed by lightweight resources, and then all definitions (to ensure that any pseudo-resources within definitions are available). Finally, all recipes are loaded in the order specified by the expanded run-list. This is also referred to as the \"compile phase\"."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:32
# 9cdec9b661864af09dd7f6ab4dc22737
msgid "**Converge the node**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:33
# e4d946e3f67f484c89e4d7905cfb1ab5
msgid "The |chef client| configures the system based on the information that has been collected. Each resource is executed in the order identified by the run-list, and then by the order in which each resource is listed in each recipe. Each resource in the resource collection is mapped to a provider. The provider examines the node, and then does the steps necessary to complete the action. And then the next resource is processed. Each action configures a specific part of the system. This process is also referred to as convergence. This is also referred to as the \"execution phase\"."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:34
# 907f9c4346474e0e957d7be17a2fa3f0
msgid "**Update the node object, process exception and report handlers**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:35
# 3b6ea7e0507e4d339c0f13cfa03afb12
msgid "When all of the actions identified by resources in the resource collection have been done, and when the |chef client| run finished successfully, the |chef client| updates the node object on the |chef server| with the node object that was built during this |chef client| run. (This node object will be pulled down by the |chef client| during the next |chef client| run.) This makes the node object (and the data in the node object) available for search."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:37
# 4094ccfd7c5e4803af9853ebfd61c49d
msgid "The |chef client| always checks the resource collection for the presence of exception and report handlers. If any are present, each one is processed appropriately."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:38
# ae974bc19ebc43b989a777198d2febcb
msgid "**Stop, wait for the next run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:39
# a4690c1cf3d54218b3f76bc2c9daaa31
msgid "When everything is configured and the |chef client| run is complete, the |chef client| stops and waits until the next time it is asked to run."
msgstr ""

#: ../source/chef_client.rst:54
# c99fae01908b4b42a68d8aa06a625c4f
msgid "|chef validator|"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:5
# a6a0500f65de49719797decff347d6a0
msgid "Every request made by the |chef client| to the |chef server| must be an authenticated request using the |api chef server| and a private key. When the |chef client| makes a request to the |chef server|, the |chef client| authenticates each request using a private key located in ``/etc/chef/client.pem``."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:7
# bcd796d9c0eb4e48a281f38a7714ca8b
msgid "However, during the first |chef client| run, this private key does not exist. Instead, the |chef client| will attempt to use the private key assigned to the |chef validator|, located in ``/etc/chef/validation.pem``. (If, for any reason, the |chef validator| is unable to make an authenticated request to the |chef server|, the initial |chef client| run will fail.)"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:9
# d16d539f64a94aa9807c8b88c3e5a6c2
msgid "During the initial |chef client| run, the |chef client| will register with the |chef server| using the private key assigned to the |chef validator|, after which the |chef client| will obtain a ``client.pem`` private key for all future authentication requests to the |chef server|."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:11
# 67f21659e9674d78ad940b980f48690a
msgid "After the initial |chef client| run has completed successfully, the |chef validator| is no longer required and may be deleted from the node. Use the ``delete_validation`` recipe found in the ``chef-client`` cookbook (https://github.com/opscode-cookbooks/chef-client) to remove the |chef validator|."
msgstr ""

#: ../source/chef_client.rst:58
# 7683255163a94b32ad0214368c7f0f98
msgid "SSL Certificates"
msgstr ""

#: ../../includes_node/includes_node_certificate.rst:4
# dc2143baaec74828b9a0b706f43405a6
msgid "An |ssl| certificate is used between the |chef client| and the |chef server| to ensure that each node has access to the right data."
msgstr ""

#: ../source/chef_client.rst:62
# 6a620c65094743a898591604a4d8f403
msgid "Signed Header Authentication"
msgstr ""

#: ../../includes_security/includes_security_signed_header_authentication.rst:5
# f398d42b84604a6e93d6a3da74ee14ff
msgid "Signed header authentication is used to validate communications between the |chef server| and any node that is being managed by the |chef server|. An API client manages each authentication request. A public and private key pair is used for the authentication itself. The public key is stored in the database on the |chef server|. The private key is stored locally on each node and is kept separate from node data (typically in the |path chef private key| directory). Each request to the |chef server| by a node must include a request signature in the HTTP headers. This signature is computed from a hash of request content and is encrypted using the private key."
msgstr ""

#: ../source/chef_client.rst:66
# bccd1cdf55ab47caa899c7dccf228008
msgid "About Bootstrap Operations"
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:4
# 7926c7815f854ccd942bcbdec3306594
msgid "The ``knife bootstrap`` command is a common way to install the |chef client| on a node. The default for this approach assumes that node can access the |company_name| website so that it may download the |chef client| package from that location."
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:6
# 5649bbc89c3c4c88bc374574831a4efd
msgid "The |omnibus installer| will detect the version of the operating system, and then install the appropriate version of the |chef client| using a single command to install the |chef client| and all of its dependencies, including an embedded version of |ruby|, |rubygems|, |open ssl|, key-value stores, parsers, libraries, and command line utilities."
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:8
# 0bbbe67c49534fe997dadc1297329660
msgid "The |omnibus installer| puts everything into a unique directory (|path omnibus install_client|) so that the |chef client| will not interfere with other applications that may be running on the target machine. Once installed, the |chef client| requires a few more configuration steps before it can perform its first |chef client| run on a node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:5
# 0ec97781ee9e456ca5da40021274705d
msgid "The following diagram shows the stages of the bootstrap operation, and then the list below the diagram describes in greater detail each of those stages."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:9
# 1f8d949d3af24b808a3fa12d1d54f1ec
msgid "During a ``knife bootstrap`` bootstrap operation, the following happens:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:17
# b397351b7d654aec8e3d7c472f5b4357
msgid "**$ knife bootstrap**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:18
# 7cc8875bc6ec4c34b19f941ca2746f24
msgid "On |unix|- and |linux|-based machines: The ``knife bootstrap`` command is issued from a workstation. The hostname, IP address, or |fqdn| of the target node is issued as part of this command. An |ssh| connection is established with the target node using port 22. A shell script is assembled using the |erb chef_full| (the default bootstrap template), and is then executed on the target node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:20
# 8f4cd5ed26c84e579be48b0a0217132d
msgid "On |windows| machines: The ``knife bootstrap windows winrm`` command is issued from a workstation. (This command is part of the `knife windows plugin <http://docs.chef.io/plugin_knife_windows.html>`_.) The hostname, IP address, or |fqdn| of the target node is issued as part of this command. A connection is established with the target node using |windows remote management| over port 5985. (|windows remote management| must be enabled with the corresponding firewall rules in place.)"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:21
# 626760a7423c4b0fb77cdc1d90675b4d
msgid "**Get the install script from Chef**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:22
# 64c93c3cff0e440b8baef63ff9a9b895
msgid "On |unix|- and |linux|-based machines: The shell script that is derived from the |erb chef_full| bootstrap template will make a request to the |company_name| website to get the most recent version of a second shell script (``install.sh``)."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:24
# 4af2ac2d4e0b4830b784375512f91522
msgid "On |windows| machines: The batch file that is derived from the |erb chef_windows| bootstrap template will make a request to the |company_name| website to get the .msi installer."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:25
# 68a842f757234f119b5cd567687b886b
msgid "**Get the chef-client package from Chef**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:26
# 881a3ac62a834452a5ddf949de2a8bfc
msgid "The second shell script (or batch file) then gathers system-specific information and determines the correct package for the |chef client|. The second shell script (or batch file) makes a request to the |company_name| website, and then downloads the appropriate package from |url bootstrap_s3|."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:27
# c40be51f9895464da2a4debc20d3e0ff
msgid "**Install the chef-client**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:28
# 734e3fbf69fd4ff6a7e95c3f646424ea
msgid "The |chef client| is installed on the target node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:29
# f8d27a23622b4d8aaee3998919dc544b
msgid "**Start the chef-client run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:30
# 13e6199e5b6443a89fd59792f5d7734c
msgid "On |unix|- and |linux|-based machines: The second shell script executes the ``chef-client`` binary with a set of initial settings stored within ``first-boot.json`` on the node. ``first-boot.json`` is generated from the workstation as part of the initial ``knife bootstrap`` command."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:32
# 5a2726ede37a4449bc7e5924e923f166
msgid "On |windows| machines: The batch file that is derived from the |erb chef_windows| bootstrap template executes the ``chef-client`` binary with a set of initial settings stored within ``first-boot.json`` on the node. ``first-boot.json`` is generated from the workstation as part of the initial ``knife bootstrap`` command."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:33
# cb698c7e9a2d467a932fa65cab326096
msgid "**Complete the chef-client run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:34
# c3fc059badff406e85ba47123b5a40db
msgid "The |chef client| run proceeds, using HTTPS (port 443), and registers the node with the |chef server|."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:36
# 11a7e504cecb4c4cbd3f583d302273ed
msgid "The first |chef client| run, by default, contains an empty run-list. A `run-list can be specified <http://docs.chef.io/knife_bootstrap.html>`_ as part of the initial bootstrap operation using the ``--run-list`` option as part of the ``knife bootstrap`` command."
msgstr ""

