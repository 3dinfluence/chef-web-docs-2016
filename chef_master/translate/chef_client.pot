# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-26 17:28-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_client.rst:8
# 1babed97b25a44c59c4657fd466be934
msgid "|chef client_title|"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:5
#: ../../includes_chef_client/includes_chef_client.rst:5
# 22b710c3189d4c689ad7dd73f16cf8e6
# 90f84f3afa034410b029d8aab9a43f56
msgid "A |chef client| is an agent that runs locally on every node that is under management by |chef|. When a |chef client| is run, it will perform all of the steps that are required to bring the node into the expected state, including:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:7
#: ../../includes_chef_client/includes_chef_client.rst:7
# 3b6756d4d0e14643a04b310732978469
# 34448c16c20b47daab203ec9c90d70a5
msgid "Registering and authenticating the node with the |chef server|"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:8
#: ../../includes_chef_client/includes_chef_client.rst:8
# 9550ff3474d9459e9d2faf9b2f978b91
# ab4a8ee4aadf40d4af14ba8c58bcee10
msgid "Building the node object"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:9
#: ../../includes_chef_client/includes_chef_client.rst:9
# aef0b826b9a6420eb5bd33bea4732200
# 73e2b92a7db1468eae7e5244e752c589
msgid "Synchronizing cookbooks"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:10
#: ../../includes_chef_client/includes_chef_client.rst:10
# 8bb5e0d132a04b47a6f801dafdc65385
# c0479bdd1aa44e7fab1788240b3124d4
msgid "Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:11
#: ../../includes_chef_client/includes_chef_client.rst:11
# 78b0f0dfb14e49b4a67e7fdbcaa9680c
# fedd68584eb044fba521d3f660693c1e
msgid "Taking the appropriate and required actions to configure the node"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:12
#: ../../includes_chef_client/includes_chef_client.rst:12
# 3e64aa5f8a4d4f2f941e201cca09a3d6
# b7d3442cf5f54a1facad633a01cba701
msgid "Looking for exceptions and notifications, handling each as required"
msgstr ""

#: ../source/chef_client.rst:12
# 19f9f7cf8bc44edfb002d06a6eacd1e3
msgid "|daemonize chef_client|"
msgstr ""

#: ../source/chef_client.rst:15
# 93d557ec13fd4b3b98dcbf80157b0179
msgid "Node Types"
msgstr ""

#: ../../includes_node/includes_node.rst:5
# d1cbf2a5c03f49819f3c0b80ec392465
msgid "A node is any physical, virtual, or cloud machine that is configured to be maintained by a |chef client|."
msgstr ""

#: ../source/chef_client.rst:19
# 54381da358ed4d8ca5e7c1298339eb0a
msgid "There following types of nodes can be managed by the |chef client|:"
msgstr ""

#: ../source/chef_client.rst:25
#: ../source/chef_client.rst:42
# a82804fa9efc4ca8a9a5545c24f0430b
# 389a2e624c05419f873976be3d84cc40
msgid "Feature"
msgstr ""

#: ../source/chef_client.rst:26
#: ../source/chef_client.rst:43
#: ../../includes_chef_client/includes_chef_client_run.rst:17
#: ../source/chef_client.rst:81
# b4f9a5a619cb422aa0925ad5609a486f
# 068b43b95ee048c39c53bff0d159d0f1
# 4e922b720f354832b4d4d5bd3a0d37a0
# 7b993ea2e6aa45e79fba21b581fd1e16
msgid "Description"
msgstr ""

#: ../../includes_node/includes_node_type_cloud.rst:4
# 72535c4a6a49433d84eabb88285f0f67
msgid "A cloud-based node is hosted in an external cloud-based service, such as |amazon vpc|, |openstack|, |rackspace|, |google compute engine|, |linode|, or |azure|. Plugins are available for |knife| that provide support for external cloud-based services. |knife| can use these plugins to create instances on cloud-based services. Once created, the |chef client| can be used to deploy, configure, and maintain those instances."
msgstr ""

#: ../../includes_node/includes_node_type_physical.rst:4
# 8fdeee92016144f8a838df69eccab26b
msgid "A physical node is typically a server or a virtual machine, but it can be any active device attached to a network that is capable of sending, receiving, and forwarding information over a communications channel. In other words, a physical node is any active device attached to a network that can run a |chef client| and also allow that |chef client| to communicate with a |chef server|."
msgstr ""

#: ../../includes_node/includes_node_type_virtual.rst:4
# 356d44be4b83425ea2d226f6c6a4c89d
msgid "A virtual node is a machine that runs only as a software implementation, but otherwise behaves much like a physical machine."
msgstr ""

#: ../../includes_node/includes_node_type_network.rst:4
# 8031dbfa09ef47d3919a8dea0256a3a0
msgid "A network node is any networking device---a switch, a router---that is being managed by a |chef client|, such as networking devices by |juniper|, |arista|, |cisco|, and |f5|. Use |chef| to automate common network configurations, such physical and logical Ethernet link properties and VLANs, on these devices."
msgstr ""

#: ../source/chef_client.rst:36
# be3f22812bde4195b2f45e10197c73c0
msgid "Some important components of nodes include:"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:4
# 2b0c92e3c9b34208b7c92c8b38e36320
msgid "|ohai| is a tool that is used to detect attributes on a node, and then provide these attributes to the |chef client| at the start of every |chef client| run. |ohai| is required by the |chef client| and must be present on a node. (|ohai| is installed on a node as part of the |chef client| install process.)"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:6
# dda37752a3d7414691ba54ac5e7e93cc
msgid "The types of attributes |ohai| collects include (but are not limited to):"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:8
# 1991e874820c4a85bd62313320b8e1af
msgid "Platform details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:9
# a0f8226e25924dfe9bc0172d17899d37
msgid "Network usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:10
# 7532ed625b8846daaa64e7d408ca0f8b
msgid "Memory usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:11
# 5708d64814dc486f802468b4308e0f70
msgid "CPU data"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:12
# c1c7f4a7312d438d917061f521b907c7
msgid "Kernel data"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:13
# 1d6c145a43c949afba6f5c62ba350468
msgid "Host names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:14
# e54189de9c2645dfb0a08318e3446bca
msgid "Fully qualified domain names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:15
# 87807edd16c747ee9a7cb60b18df89c1
msgid "Other configuration details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:17
# d103d772cd2c4816bf129f5953f16053
msgid "Attributes that are collected by |ohai| are automatic attributes, in that these attributes are used by the |chef client| to ensure that these attributes remain unchanged after the |chef client| is done configuring the node."
msgstr ""

#: ../source/chef_client.rst:50
# 4c81a4f34d4e4dad855bfd166266f9a6
msgid "The |chef client_title| Run"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:6
# c8dc89e0b4974e69aa3ba34eedf075df
msgid "A \"|chef client| run\" is the term used to describe a series of steps that are taken by the |chef client| when it is configuring a node. The following diagram shows the various stages that occur during the |chef client| run, and then the list below the diagram describes in greater detail each of those stages."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:10
# 5ceebd9c6e34426bb2539cfdb3a21ef5
msgid "During every |chef client| run, the following happens:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:16
#: ../source/chef_client.rst:80
# 0f26532539a64c14b4eb8d007a3daa8b
# bb312da46c414382bd17018cd0680a30
msgid "Stages"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:18
# 39b696e3fca64d28a5f7def09a5cb9e5
msgid "**Get configuration data**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:19
# 0838cdcbc8bc419b804c7f37521b3da3
msgid "The |chef client| gets process configuration data from the |client rb| file on the node, and then gets node configuration data from |ohai|. One important piece of configuration data is the name of the node, which is found in the ``node_name`` attribute in the |client rb| file or is provided by |ohai|. If |ohai| provides the name of a node, it is typically the |fqdn| for the node, which is always unique within an organization."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:20
# 48c7657360504e9b9f129515edcaf769
msgid "**Authenticate to the Chef Server**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:21
# df9a2e04dee04ffeb69cd12be3b39574
msgid "The |chef client| authenticates to the |chef server| using an RSA private key and the |api chef server|. The name of the node is required as part of the authentication process to the |chef server|. If this is the first |chef client| run for a node, the |chef validator| will be used to generate the RSA private key."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:22
# 11cc4c35a51d4e9f897939ea35058271
msgid "**Get, rebuild the node object**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:23
# 177d2427d8784b02bd132ecfb97012b5
msgid "The |chef client| pulls down the node object from the |chef server|. If this is the first |chef client| run for the node, there will not be a node object to pull down from the |chef server|. After the node object is pulled down from the |chef server|, the |chef client| rebuilds the node object. If this is the first |chef client| run for the node, the rebuilt node object will contain only the default run-list. For any subsequent |chef client| run, the rebuilt node object will also contain the run-list from the previous |chef client| run."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:24
# a9c49cf982d44a62b7b7bea1f1236495
msgid "**Expand the run-list**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:25
# d35c5cf385ae4b9a80ab8ae0f8937915
msgid "The |chef client| expands the run-list from the rebuilt node object, compiling a full and complete list of roles and recipes that will be applied to the node, placing the roles and recipes in the same exact order they will be applied. (The run-list is stored in each node object's |json| file, grouped under ``run_list``.)"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:26
# 0cf06612140c457192ce4aed76b2e93f
msgid "**Synchronize cookbooks**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:27
# 886b807dcf6e464c83d1288b3a6057d0
msgid "The |chef client| asks the |chef server| for a list of all cookbook files (including recipes, templates, resources, providers, attributes, libraries, and definitions) that will be required to do every action identified in the run-list for the rebuilt node object. The |chef server| provides to the |chef client| a list of all of those files. The |chef client| compares this list to the cookbook files cached on the node (from previous |chef client| runs), and then downloads a copy of every file that has changed since the previous |chef client| run, along with any new files."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:28
# 6ff6b817c7484cbd9edbfcd87a0c85fd
msgid "**Reset node attributes**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:29
# d2954296229344b494195da6a19ad0a6
msgid "All attributes in the rebuilt node object are reset. All attributes from attribute files, environments, roles, and |ohai| are loaded. Attributes that are defined in attribute files are first loaded according to cookbook order. For each cookbook, attributes in the ``default.rb`` file are loaded first, and then additional attribute files (if present) are loaded in lexical sort order. All attributes in the rebuilt node object are updated with the attribute data according to attribute precedence. When all of the attributes are updated, the rebuilt node object is complete."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:30
# eba01792b12844aeb91ac33f90125127
msgid "**Compile the resource collection**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:31
# e032d066918c47bab440fa3081e2083c
msgid "The |chef client| identifies each resource in the node object and builds the resource collection. Libraries are loaded first to ensure that all language extensions and |ruby| classes are available to all resources. Next, attributes are loaded, followed by lightweight resources, and then all definitions (to ensure that any pseudo-resources within definitions are available). Finally, all recipes are loaded in the order specified by the expanded run-list. This is also referred to as the \"compile phase\"."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:32
# 4e5edc985ef8406199c4944154c18ba7
msgid "**Converge the node**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:33
# 43cf99512cbc4949912247f4e70dc265
msgid "The |chef client| configures the system based on the information that has been collected. Each resource is executed in the order identified by the run-list, and then by the order in which each resource is listed in each recipe. Each resource in the resource collection is mapped to a provider. The provider examines the node, and then does the steps necessary to complete the action. And then the next resource is processed. Each action configures a specific part of the system. This process is also referred to as convergence. This is also referred to as the \"execution phase\"."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:34
# 2a25a3ef4d784c14a23cfd185c6d5ef8
msgid "**Update the node object, process exception and report handlers**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:35
# af2c03e3eb78437fa77fc537f30154fa
msgid "When all of the actions identified by resources in the resource collection have been done, and when the |chef client| run finished successfully, the |chef client| updates the node object on the |chef server| with the node object that was built during this |chef client| run. (This node object will be pulled down by the |chef client| during the next |chef client| run.) This makes the node object (and the data in the node object) available for search."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:37
# ed19733d3d604f789bccf9c3b4174eff
msgid "The |chef client| always checks the resource collection for the presence of exception and report handlers. If any are present, each one is processed appropriately."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:38
# fb08d981d13b47adb13c044b8be80434
msgid "**Stop, wait for the next run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:39
# 992153bedd1f4401afe13a7ef3f9ea1e
msgid "When everything is configured and the |chef client| run is complete, the |chef client| stops and waits until the next time it is asked to run."
msgstr ""

#: ../source/chef_client.rst:54
# 5dfd83c9cc024742aa0a86ba61d4953f
msgid "|chef validator|"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:5
# 35ead728dbe74b61b4ccd9db400b87bc
msgid "Every request made by the |chef client| to the |chef server| must be an authenticated request using the |api chef server| and a private key. When the |chef client| makes a request to the |chef server|, the |chef client| authenticates each request using a private key located in ``/etc/chef/client.pem``."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:7
# 91aec666773b4bb9b02afe1ca2da50fd
msgid "However, during the first |chef client| run, this private key does not exist. Instead, the |chef client| will attempt to use the private key assigned to the |chef validator|, located in ``/etc/chef/validation.pem``. (If, for any reason, the |chef validator| is unable to make an authenticated request to the |chef server|, the initial |chef client| run will fail.)"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:9
# 8375c755225341718413f5dad95e1e24
msgid "During the initial |chef client| run, the |chef client| will register with the |chef server| using the private key assigned to the |chef validator|, after which the |chef client| will obtain a ``client.pem`` private key for all future authentication requests to the |chef server|."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:11
# 5f598f37898947bab4ca07a3700af7dc
msgid "After the initial |chef client| run has completed successfully, the |chef validator| is no longer required and may be deleted from the node. Use the ``delete_validation`` recipe found in the ``chef-client`` cookbook (https://github.com/opscode-cookbooks/chef-client) to remove the |chef validator|."
msgstr ""

#: ../source/chef_client.rst:58
# 3457a8b17f6a48889c861bf1d617fd55
msgid "SSL Certificates"
msgstr ""

#: ../../includes_node/includes_node_certificate.rst:4
# eac5e73dbd994ffab811d16d6e5bc97a
msgid "An |ssl| certificate is used between the |chef client| and the |chef server| to ensure that each node has access to the right data."
msgstr ""

#: ../source/chef_client.rst:62
# 624ff696242645c4be75969c200e1780
msgid "Signed Header Authentication"
msgstr ""

#: ../../includes_security/includes_security_signed_header_authentication.rst:5
# be6b7789b70a46bba2459ca43233b955
msgid "Signed header authentication is used to validate communications between the |chef server| and any node that is being managed by the |chef server|. An API client manages each authentication request. A public and private key pair is used for the authentication itself. The public key is stored in the database on the |chef server|. The private key is stored locally on each node and is kept separate from node data (typically in the |path chef private key| directory). Each request to the |chef server| by a node must include a request signature in the HTTP headers. This signature is computed from a hash of request content and is encrypted using the private key."
msgstr ""

#: ../source/chef_client.rst:66
# 677da44c432f4ecc82e01bc108891479
msgid "About Bootstrap Operations"
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:4
# d1634172226746c486f9e13d09da591c
msgid "The ``knife bootstrap`` command is a common way to install the |chef client| on a node. The default for this approach assumes that node can access the |company_name| website so that it may download the |chef client| package from that location."
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:6
# a68db80c27af4679b4e25e0110b09479
msgid "The |omnibus installer| will detect the version of the operating system, and then install the appropriate version of the |chef client| using a single command to install the |chef client| and all of its dependencies, including an embedded version of |ruby|, |rubygems|, |open ssl|, key-value stores, parsers, libraries, and command line utilities."
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:8
# 4dabb294835a4a49b09758dc45d17912
msgid "The |omnibus installer| puts everything into a unique directory (|path omnibus install_client|) so that the |chef client| will not interfere with other applications that may be running on the target machine. Once installed, the |chef client| requires a few more configuration steps before it can perform its first |chef client| run on a node."
msgstr ""

#: ../source/chef_client.rst:70
# 1269cdc26cb145cc9ba6ba891e0a3d35
msgid "The following diagram shows the stages of the bootstrap operation, and then the list below the diagram describes in greater detail each of those stages."
msgstr ""

#: ../source/chef_client.rst:74
# a42d81d6d1844d6a9abdc311c42e2a72
msgid "During a ``knife bootstrap`` bootstrap operation, the following happens:"
msgstr ""

#: ../source/chef_client.rst:82
# ee171e86d05c46b49df9884e38721d61
msgid "**$ knife bootstrap**"
msgstr ""

#: ../source/chef_client.rst:83
# 5a97f42e0899433691eed2b57ac5e41a
msgid "On |unix|- and |linux|-based machines: The ``knife bootstrap`` command is issued from a workstation. The hostname, IP address, or |fqdn| of the target node is issued as part of this command. An |ssh| connection is established with the target node using port 22. A shell script is assembled using the |erb chef_full| (the default bootstrap template), and is then executed on the target node."
msgstr ""

#: ../source/chef_client.rst:85
# 66d8bd29a3bf441a98e8f7d6ed9b424b
msgid "On |windows| machines: The ``knife bootstrap windows winrm`` command is issued from a workstation. (This command is part of the `knife windows plugin <http://docs.opscode.com/plugin_knife_windows.html>`_.) The hostname, IP address, or |fqdn| of the target node is issued as part of this command. A connection is established with the target node using |windows remote management| over port 5985. (|windows remote management| must be enabled with the corresponding firewall rules in place.)"
msgstr ""

#: ../source/chef_client.rst:86
# 0679d8308ce243d7833d4f778482f581
msgid "**Get the install script from Chef**"
msgstr ""

#: ../source/chef_client.rst:87
# 7c283686db8040d791a4d58357fffbbf
msgid "On |unix|- and |linux|-based machines: The shell script that is derived from the |erb chef_full| bootstrap template will make a request to the |company_name| website to get the most recent version of a second shell script (``install.sh``)."
msgstr ""

#: ../source/chef_client.rst:89
# beb0a21a8cd3414f94d5a01ed0b972b2
msgid "On |windows| machines: The batch file that is derived from the |erb chef_windows| bootstrap template will make a request to the |company_name| website to get the .msi installer."
msgstr ""

#: ../source/chef_client.rst:90
# 2ec76bb7897d4d7981c0a8fa89615eed
msgid "**Get the chef-client package from Chef**"
msgstr ""

#: ../source/chef_client.rst:91
# ff4aa47476ab4cbbb002ad575c0ca1d1
msgid "The second shell script (or batch file) then gathers system-specific information and determines the correct package for the |chef client|. The second shell script (or batch file) makes a request to the |company_name| website, and then downloads the appropriate package from |url bootstrap_s3|."
msgstr ""

#: ../source/chef_client.rst:92
# 2d9eda1741ae4afda6917759fa27c366
msgid "**Install the chef-client**"
msgstr ""

#: ../source/chef_client.rst:93
# fb4d18ee69eb4262b572cc291531def4
msgid "The |chef client| is installed on the target node."
msgstr ""

#: ../source/chef_client.rst:94
# 6fc1c63392394e05a7c36a1cb358fe35
msgid "**Start the chef-client run**"
msgstr ""

#: ../source/chef_client.rst:95
# 4a632cd9fb0e43088f625df95a455c9f
msgid "On |unix|- and |linux|-based machines: The second shell script executes the ``chef-client`` binary with a set of initial settings stored within ``first-boot.json`` on the node. ``first-boot.json`` is generated from the workstation as part of the initial ``knife bootstrap`` command."
msgstr ""

#: ../source/chef_client.rst:97
# 8a78cdbb0857437aa3133e2e9a94ee5c
msgid "On |windows| machines: The batch file that is derived from the |erb chef_windows| bootstrap template executes the ``chef-client`` binary with a set of initial settings stored within ``first-boot.json`` on the node. ``first-boot.json`` is generated from the workstation as part of the initial ``knife bootstrap`` command."
msgstr ""

#: ../source/chef_client.rst:98
# a6ce72de2fe546649fdd6d313931213c
msgid "**Complete the chef-client run**"
msgstr ""

#: ../source/chef_client.rst:99
# 0edf3672f0c74f2a83ab3547361881d8
msgid "The |chef client| run proceeds, using HTTPS (port 443), and registers the node with the |chef server|."
msgstr ""

#: ../source/chef_client.rst:101
# d5ae0e114b1f4eb8bf0f8320fd30cca8
msgid "The first |chef client| run, by default, contains an empty run-list. A `run-list can be specified <http://docs.opscode.com/knife_bootstrap.html>`_ as part of the initial bootstrap operation using the ``--run-list`` option as part of the ``knife bootstrap`` command."
msgstr ""

