# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-01-22 16:15-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_client.rst:8
# 9823eb3c0f8741748f8d10b8679a6671
msgid "|chef client_title|"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:5
#: ../../includes_chef_client/includes_chef_client.rst:5
# d349fc143d574fb082ca5bde611069f2
# dd02a55178be42b9a148fd8dba4e53dd
msgid "A |chef client| is an agent that runs locally on every node that is under management by |chef|. When a |chef client| is run, it will perform all of the steps that are required to bring the node into the expected state, including:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:7
#: ../../includes_chef_client/includes_chef_client.rst:7
# 4a1cc9f8a38744fdb1baf0e96fe3cd8c
# 39dd5444242640fba8a0f09657623e36
msgid "Registering and authenticating the node with the |chef server|"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:8
#: ../../includes_chef_client/includes_chef_client.rst:8
# 9012b21210c94daf87c96ee617965fa5
# 33ef5f7960fa4e6db8972b3ed7bb0254
msgid "Building the node object"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:9
#: ../../includes_chef_client/includes_chef_client.rst:9
# 7a529004233444ad993f6f7d40933313
# eea2cad7f64a42bbbe7be78df4d15556
msgid "Synchronizing cookbooks"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:10
#: ../../includes_chef_client/includes_chef_client.rst:10
# 9c0570e7ba4c4d498b00ffbd663f394a
# fae4c10755be465382ca7086ed77d934
msgid "Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:11
#: ../../includes_chef_client/includes_chef_client.rst:11
# 99ec04b4c8b448efbad0e9019c7dc27a
# 394f33848d564949b52642743fbad2d3
msgid "Taking the appropriate and required actions to configure the node"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:12
#: ../../includes_chef_client/includes_chef_client.rst:12
# 5c3676955f1a4cc6b651ed3957b5ce6d
# 4ec5745e2f444814b4d8f6f4ea26a916
msgid "Looking for exceptions and notifications, handling each as required"
msgstr ""

#: ../source/chef_client.rst:12
# 329ae1941c2344e38aecc61ba0c3a28b
msgid "|daemonize chef_client|"
msgstr ""

#: ../source/chef_client.rst:15
# b6d9738226e54197810f76d398ef6b90
msgid "Node Types"
msgstr ""

#: ../../includes_node/includes_node.rst:5
# 5d27faa28f6d4949b08698dc6cb19869
msgid "A node is any physical, virtual, or cloud machine that is configured to be maintained by a |chef client|."
msgstr ""

#: ../source/chef_client.rst:19
# ca6e18ac9916496eb8f41b90a98149c8
msgid "There following types of nodes can be managed by the |chef client|:"
msgstr ""

#: ../source/chef_client.rst:25
#: ../source/chef_client.rst:42
# df266d8361124ee895401df5e546b912
# 256fabb01e6943a9a664dd0aabcffe9b
msgid "Feature"
msgstr ""

#: ../source/chef_client.rst:26
#: ../source/chef_client.rst:43
#: ../../includes_chef_client/includes_chef_client_run.rst:17
#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:16
# 169315f003fd4d8e817b98c1eef48607
# 5b2724ecb27f4b249d6530301aaef37a
# 15a069e8fba145e489285d3149f33513
# a647c1c92fee46fc92df7e82e82a6c45
msgid "Description"
msgstr ""

#: ../../includes_node/includes_node_type_cloud.rst:4
# caf7fd38dc7f4befb7b4145bfd4ae5d8
msgid "A cloud-based node is hosted in an external cloud-based service, such as |amazon vpc|, |openstack|, |rackspace|, |google compute engine|, |linode|, or |azure|. Plugins are available for |knife| that provide support for external cloud-based services. |knife| can use these plugins to create instances on cloud-based services. Once created, the |chef client| can be used to deploy, configure, and maintain those instances."
msgstr ""

#: ../../includes_node/includes_node_type_physical.rst:4
# 39c81e6b84b146798b7b9aa32b6bcd2e
msgid "A physical node is typically a server or a virtual machine, but it can be any active device attached to a network that is capable of sending, receiving, and forwarding information over a communications channel. In other words, a physical node is any active device attached to a network that can run a |chef client| and also allow that |chef client| to communicate with a |chef server|."
msgstr ""

#: ../../includes_node/includes_node_type_virtual.rst:4
# 84035d41d7b0432e8557a3573cc41b9d
msgid "A virtual node is a machine that runs only as a software implementation, but otherwise behaves much like a physical machine."
msgstr ""

#: ../../includes_node/includes_node_type_network.rst:4
# 47082d286a4a409684fc27909d562964
msgid "A network node is any networking device---a switch, a router---that is being managed by a |chef client|, such as networking devices by |juniper|, |arista|, |cisco|, and |f5|. Use |chef| to automate common network configurations, such physical and logical Ethernet link properties and VLANs, on these devices."
msgstr ""

#: ../source/chef_client.rst:36
# f6e1cabe369840a5a87ec6e1f69d23dd
msgid "Some important components of nodes include:"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:4
# 8061c95ed2834474984a525664e3ec6d
msgid "|ohai| is a tool that is used to detect attributes on a node, and then provide these attributes to the |chef client| at the start of every |chef client| run. |ohai| is required by the |chef client| and must be present on a node. (|ohai| is installed on a node as part of the |chef client| install process.)"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:6
# b6d0b8bd831543598ba7f535cd1b6b71
msgid "The types of attributes |ohai| collects include (but are not limited to):"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:8
# e06aa6a463be47ce82839da19bcaf2ac
msgid "Platform details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:9
# 824eea113c9a4024af6ba187859cc9d9
msgid "Network usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:10
# cb0fd35ec7f1407b9d21b142d7ccfea4
msgid "Memory usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:11
# 609ad7fa5b6b4a5b99027986830ae535
msgid "CPU data"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:12
# e48f785677ac468b9bbe6c61c1650a7a
msgid "Kernel data"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:13
# 025686a5c10e4abc88106b0f64329d38
msgid "Host names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:14
# 9d96990fdd214c20901d0fa97003258b
msgid "Fully qualified domain names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:15
# 007ff821eea946df930ff3be0035a147
msgid "Other configuration details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:17
# 0e655d66aad9461798113c29b5caa73e
msgid "Attributes that are collected by |ohai| are automatic attributes, in that these attributes are used by the |chef client| to ensure that these attributes remain unchanged after the |chef client| is done configuring the node."
msgstr ""

#: ../source/chef_client.rst:50
# c008c493637a4d9ea51c15a73d2c69c5
msgid "The |chef client_title| Run"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:6
# 2c43769f492e4ac98cf370c17bcb3cfc
msgid "A \"|chef client| run\" is the term used to describe a series of steps that are taken by the |chef client| when it is configuring a node. The following diagram shows the various stages that occur during the |chef client| run, and then the list below the diagram describes in greater detail each of those stages."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:10
# aaf1ab8c7d6346608fdc4a6b60a7cca7
msgid "During every |chef client| run, the following happens:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:16
#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:15
# 187ab81f207649088f29fb8fdbd1bdfe
# e761ce7778b34611945bc91351849b15
msgid "Stages"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:18
# 52bb1c4899414896854371d3aecdf5f7
msgid "**Get configuration data**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:19
# 82a73bfafbb84b1ebc95941328845826
msgid "The |chef client| gets process configuration data from the |client rb| file on the node, and then gets node configuration data from |ohai|. One important piece of configuration data is the name of the node, which is found in the ``node_name`` attribute in the |client rb| file or is provided by |ohai|. If |ohai| provides the name of a node, it is typically the |fqdn| for the node, which is always unique within an organization."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:20
# 91f4c21cb1bb4723b89fd32f27491f3b
msgid "**Authenticate to the Chef Server**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:21
# 71371927cdf04e55a67b55b47b2dfebd
msgid "The |chef client| authenticates to the |chef server| using an RSA private key and the |api chef server|. The name of the node is required as part of the authentication process to the |chef server|. If this is the first |chef client| run for a node, the |chef validator| will be used to generate the RSA private key."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:22
# 12feb08630e749138b1198fa5bc97c88
msgid "**Get, rebuild the node object**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:23
# d4341eb8f20349bcba31f459e9930a86
msgid "The |chef client| pulls down the node object from the |chef server|. If this is the first |chef client| run for the node, there will not be a node object to pull down from the |chef server|. After the node object is pulled down from the |chef server|, the |chef client| rebuilds the node object. If this is the first |chef client| run for the node, the rebuilt node object will contain only the default run-list. For any subsequent |chef client| run, the rebuilt node object will also contain the run-list from the previous |chef client| run."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:24
# 2d5d59eec6344080930c21a08fb40117
msgid "**Expand the run-list**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:25
# 5655f1356205461084bad3aa8b5fcd40
msgid "The |chef client| expands the run-list from the rebuilt node object, compiling a full and complete list of roles and recipes that will be applied to the node, placing the roles and recipes in the same exact order they will be applied. (The run-list is stored in each node object's |json| file, grouped under ``run_list``.)"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:26
# 6966a04552c14944b1567956ce0c1af2
msgid "**Synchronize cookbooks**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:27
# c0ba227821bf49709e5042ae1fbe9d0d
msgid "The |chef client| asks the |chef server| for a list of all cookbook files (including recipes, templates, resources, providers, attributes, libraries, and definitions) that will be required to do every action identified in the run-list for the rebuilt node object. The |chef server| provides to the |chef client| a list of all of those files. The |chef client| compares this list to the cookbook files cached on the node (from previous |chef client| runs), and then downloads a copy of every file that has changed since the previous |chef client| run, along with any new files."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:28
# 43150a5d528342cfbb3ea699c4f7d87f
msgid "**Reset node attributes**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:29
# aff5329d799c4d5e902f5c8cd50366de
msgid "All attributes in the rebuilt node object are reset. All attributes from attribute files, environments, roles, and |ohai| are loaded. Attributes that are defined in attribute files are first loaded according to cookbook order. For each cookbook, attributes in the ``default.rb`` file are loaded first, and then additional attribute files (if present) are loaded in lexical sort order. All attributes in the rebuilt node object are updated with the attribute data according to attribute precedence. When all of the attributes are updated, the rebuilt node object is complete."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:30
# 4a5fcd7539c94a938f434473fcfd96a1
msgid "**Compile the resource collection**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:31
# 7fddcbce9dbc4bab912bab8b4a766657
msgid "The |chef client| identifies each resource in the node object and builds the resource collection. Libraries are loaded first to ensure that all language extensions and |ruby| classes are available to all resources. Next, attributes are loaded, followed by lightweight resources, and then all definitions (to ensure that any pseudo-resources within definitions are available). Finally, all recipes are loaded in the order specified by the expanded run-list. This is also referred to as the \"compile phase\"."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:32
# 48847d6e4b48411fb0a1618e3dc041de
msgid "**Converge the node**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:33
# 2af35b8557234ba0a0bfe15bc5c1dde9
msgid "The |chef client| configures the system based on the information that has been collected. Each resource is executed in the order identified by the run-list, and then by the order in which each resource is listed in each recipe. Each resource in the resource collection is mapped to a provider. The provider examines the node, and then does the steps necessary to complete the action. And then the next resource is processed. Each action configures a specific part of the system. This process is also referred to as convergence. This is also referred to as the \"execution phase\"."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:34
# 0c3cf4b93e7748689a0f9e100fe88702
msgid "**Update the node object, process exception and report handlers**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:35
# 34970412c24f4cc5b98261cd39d141f1
msgid "When all of the actions identified by resources in the resource collection have been done, and when the |chef client| run finished successfully, the |chef client| updates the node object on the |chef server| with the node object that was built during this |chef client| run. (This node object will be pulled down by the |chef client| during the next |chef client| run.) This makes the node object (and the data in the node object) available for search."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:37
# a5c1184bdcfc43adb2ca2bf73af495fd
msgid "The |chef client| always checks the resource collection for the presence of exception and report handlers. If any are present, each one is processed appropriately."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:38
# ad356a6fe7094a05bead4e980cfb3ef5
msgid "**Stop, wait for the next run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:39
# 071010125bc34601be0ab1414e326aa8
msgid "When everything is configured and the |chef client| run is complete, the |chef client| stops and waits until the next time it is asked to run."
msgstr ""

#: ../source/chef_client.rst:54
# 6c074f3028d047bcab8b174efb4c52ba
msgid "|chef validator|"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:5
# 29cdf532f2df4cc49711d37bf92a5848
msgid "Every request made by the |chef client| to the |chef server| must be an authenticated request using the |api chef server| and a private key. When the |chef client| makes a request to the |chef server|, the |chef client| authenticates each request using a private key located in ``/etc/chef/client.pem``."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:7
# f0ac0066ad3b498a96901d9ac6d32845
msgid "However, during the first |chef client| run, this private key does not exist. Instead, the |chef client| will attempt to use the private key assigned to the |chef validator|, located in ``/etc/chef/validation.pem``. (If, for any reason, the |chef validator| is unable to make an authenticated request to the |chef server|, the initial |chef client| run will fail.)"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:9
# 79c95cb61e304e479c68dd62b8b1b0c9
msgid "During the initial |chef client| run, the |chef client| will register with the |chef server| using the private key assigned to the |chef validator|, after which the |chef client| will obtain a ``client.pem`` private key for all future authentication requests to the |chef server|."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:11
# 424641803a7344748b1ba87080cc3d0b
msgid "After the initial |chef client| run has completed successfully, the |chef validator| is no longer required and may be deleted from the node. Use the ``delete_validation`` recipe found in the ``chef-client`` cookbook (https://github.com/opscode-cookbooks/chef-client) to remove the |chef validator|."
msgstr ""

#: ../source/chef_client.rst:58
# 59df6ed984044313a58906e918b286e7
msgid "SSL Certificates"
msgstr ""

#: ../../includes_node/includes_node_certificate.rst:4
# c0abe259f1b54a168ed33393b6f03084
msgid "An |ssl| certificate is used between the |chef client| and the |chef server| to ensure that each node has access to the right data."
msgstr ""

#: ../source/chef_client.rst:62
# c436096f7aea45d8a37b36eb39019014
msgid "Signed Header Authentication"
msgstr ""

#: ../../includes_security/includes_security_signed_header_authentication.rst:5
# 257adc506136436c95d91f7b2d608117
msgid "Signed header authentication is used to validate communications between the |chef server| and any node that is being managed by the |chef server|. An API client manages each authentication request. A public and private key pair is used for the authentication itself. The public key is stored in the database on the |chef server|. The private key is stored locally on each node and is kept separate from node data (typically in the |path chef private key| directory). Each request to the |chef server| by a node must include a request signature in the HTTP headers. This signature is computed from a hash of request content and is encrypted using the private key."
msgstr ""

#: ../source/chef_client.rst:66
# 4d8f4f49722c4306814bb9a80d0b8b12
msgid "About Bootstrap Operations"
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:4
# 46d810161f6b43a6ab67089a40ce756d
msgid "The ``knife bootstrap`` command is a common way to install the |chef client| on a node. The default for this approach assumes that node can access the |company_name| website so that it may download the |chef client| package from that location."
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:6
# 3d8fa7d7a55749e2b52cdf8641774ad2
msgid "The |omnibus installer| will detect the version of the operating system, and then install the appropriate version of the |chef client| using a single command to install the |chef client| and all of its dependencies, including an embedded version of |ruby|, |rubygems|, |open ssl|, key-value stores, parsers, libraries, and command line utilities."
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:8
# ffc53eabba2a44d5b254b1de52526ed4
msgid "The |omnibus installer| puts everything into a unique directory (|path omnibus install_client|) so that the |chef client| will not interfere with other applications that may be running on the target machine. Once installed, the |chef client| requires a few more configuration steps before it can perform its first |chef client| run on a node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:5
# a3358f527e4041e0a756bde242063bd2
msgid "The following diagram shows the stages of the bootstrap operation, and then the list below the diagram describes in greater detail each of those stages."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:9
# d58047b8ccfe4b20988cdabcd0e01f32
msgid "During a ``knife bootstrap`` bootstrap operation, the following happens:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:17
# 2e9bfeb929f944db83f37d6056f97c9c
msgid "**$ knife bootstrap**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:18
# a45cadae2d40460189ce8e329294fc08
msgid "On |unix|- and |linux|-based machines: The ``knife bootstrap`` command is issued from a workstation. The hostname, IP address, or |fqdn| of the target node is issued as part of this command. An |ssh| connection is established with the target node using port 22. A shell script is assembled using the |erb chef_full| (the default bootstrap template), and is then executed on the target node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:20
# 86f47afa724e4b39b2b1d8b4b3dedad0
msgid "On |windows| machines: The ``knife bootstrap windows winrm`` command is issued from a workstation. (This command is part of the `knife windows plugin <http://docs.chef.io/plugin_knife_windows.html>`_.) The hostname, IP address, or |fqdn| of the target node is issued as part of this command. A connection is established with the target node using |windows remote management| over port 5985. (|windows remote management| must be enabled with the corresponding firewall rules in place.)"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:21
# 427fcac18280437e8864729aaf1f0983
msgid "**Get the install script from Chef**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:22
# 1addcb7f882441cb9568245ff1c69292
msgid "On |unix|- and |linux|-based machines: The shell script that is derived from the |erb chef_full| bootstrap template will make a request to the |company_name| website to get the most recent version of a second shell script (``install.sh``)."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:24
# da7cef16f2cc411da6c7e415e9da90da
msgid "On |windows| machines: The batch file that is derived from the |erb chef_windows| bootstrap template will make a request to the |company_name| website to get the .msi installer."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:25
# 69c7b8acb53540568776231ba745cebd
msgid "**Get the chef-client package from Chef**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:26
# 8a10e9229c004c5aa115dad83ed5e42c
msgid "The second shell script (or batch file) then gathers system-specific information and determines the correct package for the |chef client|. The second shell script (or batch file) makes a request to the |company_name| website, and then downloads the appropriate package from |url bootstrap_s3|."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:27
# 872df38bf36c47dc89eaf56c01e7bd18
msgid "**Install the chef-client**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:28
# 8789f37f36df4fdf8c92d8d2f1eac8e3
msgid "The |chef client| is installed on the target node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:29
# 06875ddded954cf68b49e15769c4eb27
msgid "**Start the chef-client run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:30
# bb2c5110a74242e58aaf879cb2f45581
msgid "On |unix|- and |linux|-based machines: The second shell script executes the ``chef-client`` binary with a set of initial settings stored within ``first-boot.json`` on the node. ``first-boot.json`` is generated from the workstation as part of the initial ``knife bootstrap`` command."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:32
# 10fd0395429a4bdd86306d66d81d22fc
msgid "On |windows| machines: The batch file that is derived from the |erb chef_windows| bootstrap template executes the ``chef-client`` binary with a set of initial settings stored within ``first-boot.json`` on the node. ``first-boot.json`` is generated from the workstation as part of the initial ``knife bootstrap`` command."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:33
# 0698c00d4ec846c081a45b3fddd7eed8
msgid "**Complete the chef-client run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:34
# 553045c7ab6d423b9b8d203d613348c9
msgid "The |chef client| run proceeds, using HTTPS (port 443), and registers the node with the |chef server|."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:36
# 801a1df941d54767bf5924b363360646
msgid "The first |chef client| run, by default, contains an empty run-list. A `run-list can be specified <http://docs.chef.io/knife_bootstrap.html>`_ as part of the initial bootstrap operation using the ``--run-list`` option as part of the ``knife bootstrap`` command."
msgstr ""

