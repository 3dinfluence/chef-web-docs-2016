# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-01-28 12:43-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_client.rst:8
# 73d5be9453ee49e99d60c953d18f2cc1
msgid "|chef client_title|"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:5
#: ../../includes_chef_client/includes_chef_client.rst:5
# 120ef04ff92b40b6a643ee47758661d8
# 9cea5b5ca0564482a79b6c77e8ee06a1
msgid "A |chef client| is an agent that runs locally on every node that is under management by |chef|. When a |chef client| is run, it will perform all of the steps that are required to bring the node into the expected state, including:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:7
#: ../../includes_chef_client/includes_chef_client.rst:7
# 434d64bc8aec41fdb9c22cac97af5930
# a9f8de4a5c6846ad88ddbeefc154398d
msgid "Registering and authenticating the node with the |chef server|"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:8
#: ../../includes_chef_client/includes_chef_client.rst:8
# 9c765d0adb7245b0a494ab2940499268
# dbe7704b599d4bee909747a7a1ba6b92
msgid "Building the node object"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:9
#: ../../includes_chef_client/includes_chef_client.rst:9
# 47bb9bc8e57b432aa8a110432b4fda68
# 1db1f01fec454b968393665e85a7c56a
msgid "Synchronizing cookbooks"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:10
#: ../../includes_chef_client/includes_chef_client.rst:10
# 4432ae8e1bbf480799938b6d3f77cd2f
# 1da8bbc0bd8a4cdd96974b111049ec73
msgid "Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:11
#: ../../includes_chef_client/includes_chef_client.rst:11
# c38fe8c698e24cbbbea7e91de6e16630
# 2742a2b70dca4500bcc181a1b3abbe16
msgid "Taking the appropriate and required actions to configure the node"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:12
#: ../../includes_chef_client/includes_chef_client.rst:12
# de8ed30675e34c37b8241625d1c73cd9
# 31e562753d624e67921c6c5096cdf9bc
msgid "Looking for exceptions and notifications, handling each as required"
msgstr ""

#: ../source/chef_client.rst:12
# 8bd0d2e5957a487d9f7b23060cc82d83
msgid "|daemonize chef_client|"
msgstr ""

#: ../source/chef_client.rst:15
# 428b25ddeca047468744ea3cfd11a5b2
msgid "Node Types"
msgstr ""

#: ../../includes_node/includes_node.rst:5
# 6e95b789b9784529942dc339d671b74d
msgid "A node is any physical, virtual, or cloud machine that is configured to be maintained by a |chef client|."
msgstr ""

#: ../source/chef_client.rst:19
# 5e6a738b401945a384f7c772cd8766b6
msgid "There following types of nodes can be managed by the |chef client|:"
msgstr ""

#: ../source/chef_client.rst:25
#: ../source/chef_client.rst:42
# c912f94d02344e97b84778fa2bdbbb0d
# 0939f9b69af347e6be3686cfbc5a2a81
msgid "Feature"
msgstr ""

#: ../source/chef_client.rst:26
#: ../source/chef_client.rst:43
#: ../../includes_chef_client/includes_chef_client_run.rst:17
#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:16
# 307db2668a8947cd8e887bbbdc8f8dd9
# 1c0365baf2064010ad98a6c7fe758f7a
# 0bb4cf9334f8454791c3a35868bd2de2
# 29fe5d999a1f4a86bd0d1aa5a9a077ac
msgid "Description"
msgstr ""

#: ../../includes_node/includes_node_type_cloud.rst:4
# 46978b25df644bf596ebc62205745027
msgid "A cloud-based node is hosted in an external cloud-based service, such as |amazon vpc|, |openstack|, |rackspace|, |google compute engine|, |linode|, or |azure|. Plugins are available for |knife| that provide support for external cloud-based services. |knife| can use these plugins to create instances on cloud-based services. Once created, the |chef client| can be used to deploy, configure, and maintain those instances."
msgstr ""

#: ../../includes_node/includes_node_type_physical.rst:4
# 69c51e36cd6840bc83e67cc7664d4185
msgid "A physical node is typically a server or a virtual machine, but it can be any active device attached to a network that is capable of sending, receiving, and forwarding information over a communications channel. In other words, a physical node is any active device attached to a network that can run a |chef client| and also allow that |chef client| to communicate with a |chef server|."
msgstr ""

#: ../../includes_node/includes_node_type_virtual.rst:4
# 4cb4e977f13d429c8b5407f9573ec592
msgid "A virtual node is a machine that runs only as a software implementation, but otherwise behaves much like a physical machine."
msgstr ""

#: ../../includes_node/includes_node_type_network.rst:4
# 6134f25e80d445cb8370b2cee914a079
msgid "A network node is any networking device---a switch, a router---that is being managed by a |chef client|, such as networking devices by |juniper|, |arista|, |cisco|, and |f5|. Use |chef| to automate common network configurations, such physical and logical Ethernet link properties and VLANs, on these devices."
msgstr ""

#: ../source/chef_client.rst:36
# a1bd266421ee45908078a7fab5dfebd7
msgid "Some important components of nodes include:"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:4
# 7aae5572eab34dbaa6ab78076f444901
msgid "|ohai| is a tool that is used to detect attributes on a node, and then provide these attributes to the |chef client| at the start of every |chef client| run. |ohai| is required by the |chef client| and must be present on a node. (|ohai| is installed on a node as part of the |chef client| install process.)"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:6
# 03fe763fe31341f2a84c03fa9f33151c
msgid "The types of attributes |ohai| collects include (but are not limited to):"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:8
# 746277a3b5a94da59849c886da88b84b
msgid "Platform details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:9
# 819fa39a8b6145ba822b92ccb7752348
msgid "Network usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:10
# 12de6a047d20457c97dfbe3cccca6d3a
msgid "Memory usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:11
# 4134ba0c518045f78e8fea857c6b0aad
msgid "CPU data"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:12
# a0aeda24d2f942769799e8b1f37f0636
msgid "Kernel data"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:13
# 073521080fff448eb0f8e109e31e1b58
msgid "Host names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:14
# ce0406d0d4614184b39ab4e2f9fe9ca5
msgid "Fully qualified domain names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:15
# e191ea1f23dd4dcab0dfe2db04d1f0a5
msgid "Other configuration details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:17
# 1ba8678caf1b4edca91e4be3af7400af
msgid "Attributes that are collected by |ohai| are automatic attributes, in that these attributes are used by the |chef client| to ensure that these attributes remain unchanged after the |chef client| is done configuring the node."
msgstr ""

#: ../source/chef_client.rst:50
# 906d27905038449aadd05bacbe57c14d
msgid "The |chef client_title| Run"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:6
# bc5e1fa8c34646dc96b75d74b82e0e30
msgid "A \"|chef client| run\" is the term used to describe a series of steps that are taken by the |chef client| when it is configuring a node. The following diagram shows the various stages that occur during the |chef client| run, and then the list below the diagram describes in greater detail each of those stages."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:10
# 4dcdfb1aa40c4dce978cbaf3037cf25a
msgid "During every |chef client| run, the following happens:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:16
#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:15
# 47f037092a744664adbd0c9e8cf19a08
# 60257565193546f080dbd7f1309f5389
msgid "Stages"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:18
# f7c9c9a630b64b798814d9d32c1248e7
msgid "**Get configuration data**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:19
# f700b1859b464dc6accd9ef2f3584267
msgid "The |chef client| gets process configuration data from the |client rb| file on the node, and then gets node configuration data from |ohai|. One important piece of configuration data is the name of the node, which is found in the ``node_name`` attribute in the |client rb| file or is provided by |ohai|. If |ohai| provides the name of a node, it is typically the |fqdn| for the node, which is always unique within an organization."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:20
# 539e47a6274f460587a21ae7dabce3f4
msgid "**Authenticate to the Chef Server**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:21
# 998586d9f10b403a8cdc5aa3f49a7c00
msgid "The |chef client| authenticates to the |chef server| using an RSA private key and the |api chef server|. The name of the node is required as part of the authentication process to the |chef server|. If this is the first |chef client| run for a node, the |chef validator| will be used to generate the RSA private key."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:22
# 7acc002316e94edeae4de50ab570af4c
msgid "**Get, rebuild the node object**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:23
# a3809fda2b1844409c4c35645c0edf8d
msgid "The |chef client| pulls down the node object from the |chef server|. If this is the first |chef client| run for the node, there will not be a node object to pull down from the |chef server|. After the node object is pulled down from the |chef server|, the |chef client| rebuilds the node object. If this is the first |chef client| run for the node, the rebuilt node object will contain only the default run-list. For any subsequent |chef client| run, the rebuilt node object will also contain the run-list from the previous |chef client| run."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:24
# c6a80f2d6f14453fb241f582e5a82b32
msgid "**Expand the run-list**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:25
# 6498dbbc82e2480195030d069868323c
msgid "The |chef client| expands the run-list from the rebuilt node object, compiling a full and complete list of roles and recipes that will be applied to the node, placing the roles and recipes in the same exact order they will be applied. (The run-list is stored in each node object's |json| file, grouped under ``run_list``.)"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:26
# 21e500d5a25845fb877e5a00b216c708
msgid "**Synchronize cookbooks**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:27
# 0d3e4508b52646bab7590a57abc63826
msgid "The |chef client| asks the |chef server| for a list of all cookbook files (including recipes, templates, resources, providers, attributes, libraries, and definitions) that will be required to do every action identified in the run-list for the rebuilt node object. The |chef server| provides to the |chef client| a list of all of those files. The |chef client| compares this list to the cookbook files cached on the node (from previous |chef client| runs), and then downloads a copy of every file that has changed since the previous |chef client| run, along with any new files."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:28
# fcac074ebf114024b909b5230c7ec482
msgid "**Reset node attributes**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:29
# ab0f1f86e7c741fda9a2e1e0150c0538
msgid "All attributes in the rebuilt node object are reset. All attributes from attribute files, environments, roles, and |ohai| are loaded. Attributes that are defined in attribute files are first loaded according to cookbook order. For each cookbook, attributes in the ``default.rb`` file are loaded first, and then additional attribute files (if present) are loaded in lexical sort order. All attributes in the rebuilt node object are updated with the attribute data according to attribute precedence. When all of the attributes are updated, the rebuilt node object is complete."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:30
# 765de8e7938c471ca33083270478c108
msgid "**Compile the resource collection**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:31
# 8ebad710036046228c1c80cfb4b7e31c
msgid "The |chef client| identifies each resource in the node object and builds the resource collection. Libraries are loaded first to ensure that all language extensions and |ruby| classes are available to all resources. Next, attributes are loaded, followed by lightweight resources, and then all definitions (to ensure that any pseudo-resources within definitions are available). Finally, all recipes are loaded in the order specified by the expanded run-list. This is also referred to as the \"compile phase\"."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:32
# 1008046e9f2c45d2ae642929dd6cc7b3
msgid "**Converge the node**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:33
# f4bf6426af2d4a1791341c7f60fd5267
msgid "The |chef client| configures the system based on the information that has been collected. Each resource is executed in the order identified by the run-list, and then by the order in which each resource is listed in each recipe. Each resource in the resource collection is mapped to a provider. The provider examines the node, and then does the steps necessary to complete the action. And then the next resource is processed. Each action configures a specific part of the system. This process is also referred to as convergence. This is also referred to as the \"execution phase\"."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:34
# 0f450ac7aa2e4302b10d4e37c29b4c0a
msgid "**Update the node object, process exception and report handlers**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:35
# 0508c6d3f43c4efa82b84833207b968a
msgid "When all of the actions identified by resources in the resource collection have been done, and when the |chef client| run finished successfully, the |chef client| updates the node object on the |chef server| with the node object that was built during this |chef client| run. (This node object will be pulled down by the |chef client| during the next |chef client| run.) This makes the node object (and the data in the node object) available for search."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:37
# 3e7740ddb18b4ba8808fb905b691d906
msgid "The |chef client| always checks the resource collection for the presence of exception and report handlers. If any are present, each one is processed appropriately."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:38
# 7e39390ee6d74a2c9fd212b4cad8c3f3
msgid "**Stop, wait for the next run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:39
# 2ee6595a7f6d4823ba5bdbf50f706ffa
msgid "When everything is configured and the |chef client| run is complete, the |chef client| stops and waits until the next time it is asked to run."
msgstr ""

#: ../source/chef_client.rst:54
# 441c836fdd3247999d204611615072df
msgid "|chef validator|"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:5
# 3a4819e677ca4b39957059591cd634a9
msgid "Every request made by the |chef client| to the |chef server| must be an authenticated request using the |api chef server| and a private key. When the |chef client| makes a request to the |chef server|, the |chef client| authenticates each request using a private key located in ``/etc/chef/client.pem``."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:7
# a658020c03e4497aa84a16993316b799
msgid "However, during the first |chef client| run, this private key does not exist. Instead, the |chef client| will attempt to use the private key assigned to the |chef validator|, located in ``/etc/chef/validation.pem``. (If, for any reason, the |chef validator| is unable to make an authenticated request to the |chef server|, the initial |chef client| run will fail.)"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:9
# f4e5cef1c04e4126980b94df9b8dcc38
msgid "During the initial |chef client| run, the |chef client| will register with the |chef server| using the private key assigned to the |chef validator|, after which the |chef client| will obtain a ``client.pem`` private key for all future authentication requests to the |chef server|."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:11
# 8f593d449dc04692b6cd9962cfbe6673
msgid "After the initial |chef client| run has completed successfully, the |chef validator| is no longer required and may be deleted from the node. Use the ``delete_validation`` recipe found in the ``chef-client`` cookbook (https://github.com/opscode-cookbooks/chef-client) to remove the |chef validator|."
msgstr ""

#: ../source/chef_client.rst:58
# 19908b2a40204caf84a935b749d6a90c
msgid "SSL Certificates"
msgstr ""

#: ../../includes_node/includes_node_certificate.rst:4
# f65418cbb73f471195a5c65e0fbd7014
msgid "An |ssl| certificate is used between the |chef client| and the |chef server| to ensure that each node has access to the right data."
msgstr ""

#: ../source/chef_client.rst:62
# 468e2732aef14e23bc7cc9f82032c010
msgid "Signed Header Authentication"
msgstr ""

#: ../../includes_security/includes_security_signed_header_authentication.rst:5
# fdcc0f884985473489930cec2fa1b834
msgid "Signed header authentication is used to validate communications between the |chef server| and any node that is being managed by the |chef server|. An API client manages each authentication request. A public and private key pair is used for the authentication itself. The public key is stored in the database on the |chef server|. The private key is stored locally on each node and is kept separate from node data (typically in the |path chef private key| directory). Each request to the |chef server| by a node must include a request signature in the HTTP headers. This signature is computed from a hash of request content and is encrypted using the private key."
msgstr ""

#: ../source/chef_client.rst:66
# 8e9f4899a8db4870aa2fecf1857d7323
msgid "About Bootstrap Operations"
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:4
# 97571316fa284081a7bdd885f2dfcd11
msgid "The ``knife bootstrap`` command is a common way to install the |chef client| on a node. The default for this approach assumes that node can access the |company_name| website so that it may download the |chef client| package from that location."
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:6
# 3a96814c8e5f4bb3a6a3d081011d9c55
msgid "The |omnibus installer| will detect the version of the operating system, and then install the appropriate version of the |chef client| using a single command to install the |chef client| and all of its dependencies, including an embedded version of |ruby|, |rubygems|, |open ssl|, key-value stores, parsers, libraries, and command line utilities."
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:8
# e3480dd5a2e3455d980023477b35b406
msgid "The |omnibus installer| puts everything into a unique directory (|path omnibus install_client|) so that the |chef client| will not interfere with other applications that may be running on the target machine. Once installed, the |chef client| requires a few more configuration steps before it can perform its first |chef client| run on a node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:5
# b5b29efc2f4a4228a1a700f1e1ae4eb1
msgid "The following diagram shows the stages of the bootstrap operation, and then the list below the diagram describes in greater detail each of those stages."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:9
# efa64dc222b640bfa0c7992a892e455a
msgid "During a ``knife bootstrap`` bootstrap operation, the following happens:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:17
# 4a1c111315b64bf4b71fd8270eccc782
msgid "**$ knife bootstrap**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:18
# 074d37490e0e46dd8ed3358b031c2994
msgid "On |unix|- and |linux|-based machines: The ``knife bootstrap`` command is issued from a workstation. The hostname, IP address, or |fqdn| of the target node is issued as part of this command. An |ssh| connection is established with the target node using port 22. A shell script is assembled using the |erb chef_full| (the default bootstrap template), and is then executed on the target node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:20
# de990137a15b4f1ba43d162751aa2066
msgid "On |windows| machines: The ``knife bootstrap windows winrm`` command is issued from a workstation. (This command is part of the `knife windows plugin <http://docs.chef.io/plugin_knife_windows.html>`_.) The hostname, IP address, or |fqdn| of the target node is issued as part of this command. A connection is established with the target node using |windows remote management| over port 5985. (|windows remote management| must be enabled with the corresponding firewall rules in place.)"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:21
# 016d5e185ab94b2ba5da0e2d249eaf70
msgid "**Get the install script from Chef**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:22
# 7a728fe1eb95462c8ced432abd125030
msgid "On |unix|- and |linux|-based machines: The shell script that is derived from the |erb chef_full| bootstrap template will make a request to the |company_name| website to get the most recent version of a second shell script (``install.sh``)."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:24
# 34c511efa8664233ba3135d2866013d0
msgid "On |windows| machines: The batch file that is derived from the |erb chef_windows| bootstrap template will make a request to the |company_name| website to get the .msi installer."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:25
# 5dc785b5577d439699bad7c7eb7b08ac
msgid "**Get the chef-client package from Chef**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:26
# 6fa415a1310148abbe9792e3d58a6c5b
msgid "The second shell script (or batch file) then gathers system-specific information and determines the correct package for the |chef client|. The second shell script (or batch file) makes a request to the |company_name| website, and then downloads the appropriate package from |url bootstrap_s3|."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:27
# 2dc92d1fb338476085e4e997e8e2e9b0
msgid "**Install the chef-client**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:28
# 02da4f616adc4565bbe55ca3267def91
msgid "The |chef client| is installed on the target node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:29
# 91e39befe75f4a1286d72b38c9b24324
msgid "**Start the chef-client run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:30
# fe6165f46d8648329e80f37500441e58
msgid "On |unix|- and |linux|-based machines: The second shell script executes the ``chef-client`` binary with a set of initial settings stored within ``first-boot.json`` on the node. ``first-boot.json`` is generated from the workstation as part of the initial ``knife bootstrap`` command."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:32
# 723eb36de0444ac98ea83836c89c19e6
msgid "On |windows| machines: The batch file that is derived from the |erb chef_windows| bootstrap template executes the ``chef-client`` binary with a set of initial settings stored within ``first-boot.json`` on the node. ``first-boot.json`` is generated from the workstation as part of the initial ``knife bootstrap`` command."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:33
# c700d91884a244b4b3b74be9844acbee
msgid "**Complete the chef-client run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:34
# 2c7f07d1ee61499ebc2f09a0e933dc7e
msgid "The |chef client| run proceeds, using HTTPS (port 443), and registers the node with the |chef server|."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:36
# 87a171b7a6f64c87a212d0385ed4b458
msgid "The first |chef client| run, by default, contains an empty run-list. A `run-list can be specified <http://docs.chef.io/knife_bootstrap.html>`_ as part of the initial bootstrap operation using the ``--run-list`` option as part of the ``knife bootstrap`` command."
msgstr ""

