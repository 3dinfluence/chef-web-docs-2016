# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-13 10:10-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_client.rst:7
# 034648becce348eb9cba338923105bf7
msgid "|chef client_title|"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:5
#: ../../includes_chef_client/includes_chef_client.rst:5
# 29ed625aff9a402e85a3d7f1f753a2b4
# 4f5b2e18623e4b1e9424a69452400d11
msgid "A |chef client| is an agent that runs locally on every node that is under management by |chef|. When a |chef client| is run, it will perform all of the steps that are required to bring the node into the expected state, including:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:7
#: ../../includes_chef_client/includes_chef_client.rst:7
# 90f4639d5e1d4507908ed4969844956f
# 098c1a2bad39412fb8c66ec59ad518d0
msgid "Registering and authenticating the node with the |chef server|"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:8
#: ../../includes_chef_client/includes_chef_client.rst:8
# b05e17792cc94e5594ac001c6623bc90
# 8e3c3ba607d54ec2b65c9265d229379f
msgid "Building the node object"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:9
#: ../../includes_chef_client/includes_chef_client.rst:9
# 762412131cd1443cbedc9b34430c5634
# e814c62dc1274b55b33e04bc64cf45ce
msgid "Synchronizing cookbooks"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:10
#: ../../includes_chef_client/includes_chef_client.rst:10
# d28f54296ee24af7bb93d044d3bc7983
# fde10a7c39c245108e0a52c329ade9ff
msgid "Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:11
#: ../../includes_chef_client/includes_chef_client.rst:11
# 563294170505442296ebe06639b6bf6d
# bda8e03d5b964318ae6cc449db470e00
msgid "Taking the appropriate and required actions to configure the node"
msgstr ""

#: ../../includes_chef_client/includes_chef_client.rst:12
#: ../../includes_chef_client/includes_chef_client.rst:12
# 992fe6fcbcdb430483ea55417207c16c
# 009684df66a84c8d94c29c4dd36e473e
msgid "Looking for exceptions and notifications, handling each as required"
msgstr ""

#: ../source/chef_client.rst:11
# fb4a63ba07bb4454bbb733c22dcc2ca4
msgid "|daemonize chef_client|"
msgstr ""

#: ../source/chef_client.rst:14
# f48fc5d9bbdf4284999b2a2be83bdded
msgid "Node Types"
msgstr ""

#: ../../includes_node/includes_node.rst:5
# 2ea0e2fcb2cd4110a84947360ca4209c
msgid "A node is any physical, virtual, or cloud machine that is configured to be maintained by a |chef client|."
msgstr ""

#: ../source/chef_client.rst:18
# 9b7b864079c84cf88c9bd3acdcc257a8
msgid "There following types of nodes can be managed by the |chef client|:"
msgstr ""

#: ../source/chef_client.rst:24
#: ../source/chef_client.rst:41
# 76769f505dbb4d93b1dcd7036c6b9811
# a861bfb3c675422bb20073cd63b9bae8
msgid "Feature"
msgstr ""

#: ../source/chef_client.rst:25
#: ../source/chef_client.rst:42
#: ../../includes_chef_client/includes_chef_client_run.rst:17
#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:16
# 0ff3d23015324912908de2c004a357a9
# fc481dd7aaa1447bad3eb9279362fd12
# 66fe2fb1625347c1a2d77a94ab2688e6
# 1f6f2c4b9b634433946ca431b2243b0d
msgid "Description"
msgstr ""

#: ../../includes_node/includes_node_type_cloud.rst:4
# cf4c7661b90042b7b7d96ac1e45ba542
msgid "A cloud-based node is hosted in an external cloud-based service, such as |amazon aws|, |openstack|, |rackspace|, |google compute engine|, or |azure|. Plugins are available for |knife| that provide support for external cloud-based services. |knife| can use these plugins to create instances on cloud-based services. Once created, the |chef client| can be used to deploy, configure, and maintain those instances."
msgstr ""

#: ../../includes_node/includes_node_type_physical.rst:4
# 310e5b80e3b64239b25ad53ab9439d57
msgid "A physical node is typically a server or a virtual machine, but it can be any active device attached to a network that is capable of sending, receiving, and forwarding information over a communications channel. In other words, a physical node is any active device attached to a network that can run a |chef client| and also allow that |chef client| to communicate with a |chef server|."
msgstr ""

#: ../../includes_node/includes_node_type_virtual.rst:4
# d1d37765e7a04b5fa186d2aef96154cd
msgid "A virtual node is a machine that runs only as a software implementation, but otherwise behaves much like a physical machine."
msgstr ""

#: ../../includes_node/includes_node_type_network.rst:4
# 726a017c1331491fb886db22b564e62c
msgid "A network node is any networking device---a switch, a router---that is being managed by a |chef client|, such as networking devices by |juniper|, |arista|, |cisco|, and |f5|. Use |chef| to automate common network configurations, such physical and logical Ethernet link properties and VLANs, on these devices."
msgstr ""

#: ../source/chef_client.rst:35
# 3f4e2e2151614bf18d1a269075f4d95f
msgid "Some important components of nodes include:"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:4
# 752b69e0a1f54f30a2d6a22403d66670
msgid "|ohai| is a tool that is used to detect attributes on a node, and then provide these attributes to the |chef client| at the start of every |chef client| run. |ohai| is required by the |chef client| and must be present on a node. (|ohai| is installed on a node as part of the |chef client| install process.)"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:6
# d3e269704755426885322792113c4563
msgid "The types of attributes |ohai| collects include (but are not limited to):"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:8
# ead24581618b4127a3276c0bd602111d
msgid "Platform details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:9
# 18f4461c19c4468195dca91f41ff9b1a
msgid "Network usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:10
# 5f003e25b507431fa40995c2f2b8aeca
msgid "Memory usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:11
# ca0f189e26864b8d8a8d7e277ffa9448
msgid "CPU data"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:12
# 2c0d8a3ce1df49b0aa80287b5b2c8bbe
msgid "Kernel data"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:13
# ecc5d638cc86411ba1bca115f6547031
msgid "Host names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:14
# f36a199257c04df593e420c244a2d436
msgid "Fully qualified domain names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:15
# b42f110a52ca4f0185bb1eb886510c31
msgid "Other configuration details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:17
# de87f00bfcf44547b60fefa6d5b1bdad
msgid "Attributes that are collected by |ohai| are automatic attributes, in that these attributes are used by the |chef client| to ensure that these attributes remain unchanged after the |chef client| is done configuring the node."
msgstr ""

#: ../source/chef_client.rst:49
# 25d3ee78346b4c3d8d2f3f2a2003bceb
msgid "The |chef client_title| Run"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:6
# ac1084839ede407991b0f27ea772262d
msgid "A \"|chef client| run\" is the term used to describe a series of steps that are taken by the |chef client| when it is configuring a node. The following diagram shows the various stages that occur during the |chef client| run, and then the list below the diagram describes in greater detail each of those stages."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:10
# 60fe97f6106f416cb23daae490796000
msgid "During every |chef client| run, the following happens:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:16
#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:15
# f5efa26c7a6b400288126f9917479780
# db687dcb329d44b6af6020f927733ff2
msgid "Stages"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:18
# 8c40373c098143e1b9fb4ecbd748ad0c
msgid "**Get configuration data**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:19
# b0193f765598496bbc5d9126ecfec571
msgid "The |chef client| gets process configuration data from the |client rb| file on the node, and then gets node configuration data from |ohai|. One important piece of configuration data is the name of the node, which is found in the ``node_name`` attribute in the |client rb| file or is provided by |ohai|. If |ohai| provides the name of a node, it is typically the |fqdn| for the node, which is always unique within an organization."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:20
# 07d395e48b00474b9bfa827383852f50
msgid "**Authenticate to the Chef Server**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:21
# b6273791728646888ecf6a420e43328b
msgid "The |chef client| authenticates to the |chef server| using an RSA private key and the |api chef server|. The name of the node is required as part of the authentication process to the |chef server|. If this is the first |chef client| run for a node, the |chef validator| will be used to generate the RSA private key."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:22
# c3a3742eac4740a5a85e78bae735da4e
msgid "**Get, rebuild the node object**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:23
# 16a28861edab45228169c86dc9bc785a
msgid "The |chef client| pulls down the node object from the |chef server|. If this is the first |chef client| run for the node, there will not be a node object to pull down from the |chef server|. After the node object is pulled down from the |chef server|, the |chef client| rebuilds the node object. If this is the first |chef client| run for the node, the rebuilt node object will contain only the default run-list. For any subsequent |chef client| run, the rebuilt node object will also contain the run-list from the previous |chef client| run."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:24
# 9706d29480d545d8a6a7ef8d7d5cf0dd
msgid "**Expand the run-list**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:25
# 248990564cbc425dac6aac10bd9a266a
msgid "The |chef client| expands the run-list from the rebuilt node object, compiling a full and complete list of roles and recipes that will be applied to the node, placing the roles and recipes in the same exact order they will be applied. (The run-list is stored in each node object's |json| file, grouped under ``run_list``.)"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:26
# 063287fe92b44adc89e841df8e407bda
msgid "**Synchronize cookbooks**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:27
# a14cbb0d14864fb09ee5e8a948821ff9
msgid "The |chef client| asks the |chef server| for a list of all cookbook files (including recipes, templates, resources, providers, attributes, libraries, and definitions) that will be required to do every action identified in the run-list for the rebuilt node object. The |chef server| provides to the |chef client| a list of all of those files. The |chef client| compares this list to the cookbook files cached on the node (from previous |chef client| runs), and then downloads a copy of every file that has changed since the previous |chef client| run, along with any new files."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:28
# 8986bd1180694f66be0f40c28ee5c4b3
msgid "**Reset node attributes**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:29
# 22c8c799d26b45c3907124061db60ee6
msgid "All attributes in the rebuilt node object are reset. All attributes from attribute files, environments, roles, and |ohai| are loaded. Attributes that are defined in attribute files are first loaded according to cookbook order. For each cookbook, attributes in the ``default.rb`` file are loaded first, and then additional attribute files (if present) are loaded in lexical sort order. All attributes in the rebuilt node object are updated with the attribute data according to attribute precedence. When all of the attributes are updated, the rebuilt node object is complete."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:30
# 3f0b6f62dada48e298ca7ed4c9a18a99
msgid "**Compile the resource collection**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:31
# 50d73779db69424788658aa81ba02bfc
msgid "The |chef client| identifies each resource in the node object and builds the resource collection. Libraries are loaded first to ensure that all language extensions and |ruby| classes are available to all resources. Next, attributes are loaded, followed by lightweight resources, and then all definitions (to ensure that any pseudo-resources within definitions are available). Finally, all recipes are loaded in the order specified by the expanded run-list. This is also referred to as the \"compile phase\"."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:32
# a23798ebbc714bbda5b76d9f5dbe26a3
msgid "**Converge the node**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:33
# 918f076e0add4348a79de85311a323ed
msgid "The |chef client| configures the system based on the information that has been collected. Each resource is executed in the order identified by the run-list, and then by the order in which each resource is listed in each recipe. Each resource in the resource collection is mapped to a provider. The provider examines the node, and then does the steps necessary to complete the action. And then the next resource is processed. Each action configures a specific part of the system. This process is also referred to as convergence. This is also referred to as the \"execution phase\"."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:34
# 19704d275cb240ddb8b445ef287e0e09
msgid "**Update the node object, process exception and report handlers**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:35
# 057f059884b04b3789f16c8eb4ff0207
msgid "When all of the actions identified by resources in the resource collection have been done, and when the |chef client| run finished successfully, the |chef client| updates the node object on the |chef server| with the node object that was built during this |chef client| run. (This node object will be pulled down by the |chef client| during the next |chef client| run.) This makes the node object (and the data in the node object) available for search."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:37
# 7b92753c3c6d42b69113d991d32216ee
msgid "The |chef client| always checks the resource collection for the presence of exception and report handlers. If any are present, each one is processed appropriately."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:38
# 6b149d75c0684be6a88e8935231d36f6
msgid "**Stop, wait for the next run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_run.rst:39
# 327112a3b16e475aa2fe26c4bade1b96
msgid "When everything is configured and the |chef client| run is complete, the |chef client| stops and waits until the next time it is asked to run."
msgstr ""

#: ../source/chef_client.rst:53
# 7810978986954cda9b5f1dc4515ab8f5
msgid "|chef validator|"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:5
# 7d02e7531c1542048251cc986a192708
msgid "Every request made by the |chef client| to the |chef server| must be an authenticated request using the |api chef server| and a private key. When the |chef client| makes a request to the |chef server|, the |chef client| authenticates each request using a private key located in ``/etc/chef/client.pem``."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:7
# 56ead9a1fcee4632b82cc788d9a7d6df
msgid "However, during the first |chef client| run, this private key does not exist. Instead, the |chef client| will attempt to use the private key assigned to the |chef validator|, located in ``/etc/chef/validation.pem``. (If, for any reason, the |chef validator| is unable to make an authenticated request to the |chef server|, the initial |chef client| run will fail.)"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:9
# 10693fd2be904cc983b48b534641a6e1
msgid "During the initial |chef client| run, the |chef client| will register with the |chef server| using the private key assigned to the |chef validator|, after which the |chef client| will obtain a ``client.pem`` private key for all future authentication requests to the |chef server|."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:11
# 5d403bbc05de4462bbd353ecf7cbebcd
msgid "After the initial |chef client| run has completed successfully, the |chef validator| is no longer required and may be deleted from the node. Use the ``delete_validation`` recipe found in the ``chef-client`` cookbook (https://github.com/opscode-cookbooks/chef-client) to remove the |chef validator|."
msgstr ""

#: ../source/chef_client.rst:57
# f1bb07dae9c74e288a8b9c43edfb1a1a
msgid "SSL Certificates"
msgstr ""

#: ../../includes_node/includes_node_certificate.rst:4
# 5e48d6cdf3e243118e1f96da04b89992
msgid "An |ssl| certificate is used between the |chef client| and the |chef server| to ensure that each node has access to the right data."
msgstr ""

#: ../source/chef_client.rst:61
# f65f511f36f949518c34f18384033dfd
msgid "Signed Header Authentication"
msgstr ""

#: ../../includes_security/includes_security_signed_header_authentication.rst:5
# 2cd3dc8a21f44c92b8ddab941a7935e4
msgid "Signed header authentication is used to validate communications between the |chef server| and any node that is being managed by the |chef server|. An API client manages each authentication request. A public and private key pair is used for the authentication itself. The public key is stored in the database on the |chef server|. The private key is stored locally on each node and is kept separate from node data (typically in the |path chef private key| directory). Each request to the |chef server| by a node must include a request signature in the HTTP headers. This signature is computed from a hash of request content and is encrypted using the private key."
msgstr ""

#: ../source/chef_client.rst:65
# bbe15098b45840399c938518298276af
msgid "About Bootstrap Operations"
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:4
# 24fadac1eb4740469f4d6284857ebfdb
msgid "The ``knife bootstrap`` command is a common way to install the |chef client| on a node. The default for this approach assumes that node can access the |company_name| website so that it may download the |chef client| package from that location."
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:6
# 2e710a7aa65843a48af384f191a3d0f5
msgid "The |omnibus installer| will detect the version of the operating system, and then install the appropriate version of the |chef client| using a single command to install the |chef client| and all of its dependencies, including an embedded version of |ruby|, |rubygems|, |open ssl|, key-value stores, parsers, libraries, and command line utilities."
msgstr ""

#: ../../includes_install/includes_install_chef_client.rst:8
# 55daa761ccfc4919b610d7c796bf3fa0
msgid "The |omnibus installer| puts everything into a unique directory (|path omnibus install_client|) so that the |chef client| will not interfere with other applications that may be running on the target machine. Once installed, the |chef client| requires a few more configuration steps before it can perform its first |chef client| run on a node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:5
# 33c086981e3549e8a0ddac0f10bd1af4
msgid "The following diagram shows the stages of the bootstrap operation, and then the list below the diagram describes in greater detail each of those stages."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:9
# e4527087300646e1adfb5c786fcb764e
msgid "During a ``knife bootstrap`` bootstrap operation, the following happens:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:17
# 0f0ca6339825451a80206be4fa9c408b
msgid "**$ knife bootstrap**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:18
# aaca2c2e93124d3b950c299848e33858
msgid "On |unix|- and |linux|-based machines: The ``knife bootstrap`` command is issued from a workstation. The hostname, IP address, or |fqdn| of the target node is issued as part of this command. An |ssh| connection is established with the target node using port 22. A shell script is assembled using the |erb chef_full| (the default bootstrap template), and is then executed on the target node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:20
# 16451c93263d4d0e8fc6d262935ad195
msgid "On |windows| machines: The ``knife bootstrap windows winrm`` command is issued from a workstation. (This command is part of the `knife windows plugin <http://docs.chef.io/plugin_knife_windows.html>`_.) The hostname, IP address, or |fqdn| of the target node is issued as part of this command. A connection is established with the target node using |windows remote management| over port 5985. (|windows remote management| must be enabled with the corresponding firewall rules in place.)"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:21
# 9954bc82be9b44e39c2d844b40c20148
msgid "**Get the install script from Chef**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:22
# 98bf87186efe4cc382cfa033a9871c6d
msgid "On |unix|- and |linux|-based machines: The shell script that is derived from the |erb chef_full| bootstrap template will make a request to the |company_name| website to get the most recent version of a second shell script (``install.sh``)."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:24
# a3c02d2dcfa242498440a58bd1ddbefd
msgid "On |windows| machines: The batch file that is derived from the |erb chef_windows| bootstrap template will make a request to the |company_name| website to get the .msi installer."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:25
# 38b3847578bd47f599bcde38a39f0892
msgid "**Get the chef-client package from Chef**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:26
# 8484899e8c364e7c9b7a34c01f3ff4c7
msgid "The second shell script (or batch file) then gathers system-specific information and determines the correct package for the |chef client|. The second shell script (or batch file) makes a request to the |company_name| website, and then downloads the appropriate package from |url bootstrap_s3|."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:27
# f7ec9a577b1842879f2e27e3b929512f
msgid "**Install the chef-client**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:28
# 479c7b8c4fbf4f66b603d35236952261
msgid "The |chef client| is installed on the target node."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:29
# 3aa80396e81f4845880e18afd9824081
msgid "**Start the chef-client run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:30
# 8d19e0ce3b154e2cbc8a2b5fa543e3c3
msgid "On |unix|- and |linux|-based machines: The second shell script executes the ``chef-client`` binary with a set of initial settings stored within ``first-boot.json`` on the node. ``first-boot.json`` is generated from the workstation as part of the initial ``knife bootstrap`` command."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:32
# f11d8e58fbda47fca71535cccbfabd7e
msgid "On |windows| machines: The batch file that is derived from the |erb chef_windows| bootstrap template executes the ``chef-client`` binary with a set of initial settings stored within ``first-boot.json`` on the node. ``first-boot.json`` is generated from the workstation as part of the initial ``knife bootstrap`` command."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:33
# aa3f5ad986f34ff78d5139dc48a26f7f
msgid "**Complete the chef-client run**"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:34
# b2044591d0314457a47ad62d6d6c502e
msgid "The |chef client| run proceeds, using HTTPS (port 443), and registers the node with the |chef server|."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_bootstrap.rst:36
# 13802b4ce4024a82a32b03750e10a5e1
msgid "The first |chef client| run, by default, contains an empty run-list. A `run-list can be specified <http://docs.chef.io/knife_bootstrap.html>`_ as part of the initial bootstrap operation using the ``--run-list`` option as part of the ``knife bootstrap`` command."
msgstr ""

