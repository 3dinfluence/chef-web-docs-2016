# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-30 15:14\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_chef_client.rst:33
# a34707d5e6324d3781b65532bb5bc6c1
msgid "About the chef-client"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:5
# b80612b6aaea45a5bdf3ca9c5a8675da
msgid "A |chef client| is an agent that runs locally on every node that is registered with the |chef server|. When a |chef client| is run, it will perform all of the steps that are required to bring the node into the expected state, including:"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:7
# d4429a4436ed4b6a936ecf8d8f8a0d2a
msgid "Registering and authenticating the node with the |chef server|"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:8
# abf1fa7346ee45689ec76a866403b032
msgid "Building the node object"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:9
# 9aa7cc9b4741482e8d8b7ee1f02ffe23
msgid "Synchronizing cookbooks"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:10
# fbf393cba79e4afba8b83025db404c3f
msgid "Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:11
# 2da905f263704e7ab6ce93b649b7ee92
msgid "Taking the appropriate and required actions to configure the node"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:12
# 7b63907ff6894128aec5beeefcf26a5f
msgid "Looking for exceptions and notifications, handling each as required"
msgstr ""

#: ../source/essentials_chef_client.rst:38
# 02e0a77cbdbd4191831b20c5f2dc5ff3
msgid "|chef validator|"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:5
# 8331897cf3db47c78bdfe0037501055c
msgid "When a node runs the |chef client| for the first time, it generally does not yet have an |chef api client| identity, and so it cannot make authenticated requests to the server. This is where the validation client---known as the |chef validator|---comes in. When the |chef client| runs, it checks if it has a client key. If the client key does not exist, it then attempts to borrow the identity of the |chef validator| to register itself with the |chef server|. In order to register with the |chef server|, the private key for the |chef validator| needs to be copied to the host and placed in |path chef etc validation|."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:7
# 26a6d56958354cda8be99ca0ce79a02e
msgid "Once the |chef client| has registered itself with the |chef server|, it no longer uses the validation client for anything. It is recommended that you delete the private key for the |chef validator| from the host after the host has registered or use the ``delete_validation`` recipe that can be found in the ``chef-client`` cookbook (https://github.com/opscode-cookbooks/chef-client)."
msgstr ""

#: ../source/essentials_chef_client.rst:42
# 738de8e35dc34fbf99fc0d0236777320
msgid "SSL Certificates"
msgstr ""

#: ../../includes_node/includes_node_certificate.rst:4
# ce1ff74ee7e1429eb1a5c485fac4a20b
msgid "An |ssl| certificate is used between the |chef client| and the |chef server| to ensure that each node has access to the right data."
msgstr ""

#: ../source/essentials_chef_client.rst:46
# 37a9a5bb4224458a9eaf031a9437699e
msgid "Signed Header Authentication"
msgstr ""

#: ../../includes_security/includes_security_signed_header_authentication.rst:5
# a6c90a1f6b7e4f22b9f00d968f93bc3b
msgid "Signed header authentication is used to validate communications between the |chef server| and any node that is being managed by the |chef server|. An API client manages each authentication request. A public and private key pair is used for the authentication itself. The public key is stored in the database on the |chef server|. The private key is stored locally on each node and is kept separate from node data (typically in the |path chef private key| directory). Each request to the |chef server| by a node must include a request signature in the HTTP headers. This signature is computed from a hash of request content and is encrypted using the private key."
msgstr ""

