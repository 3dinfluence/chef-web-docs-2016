# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-30 22:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_using.rst:33
# 568df266027e4594a9646320928d840d
msgid "Working with Knife"
msgstr ""

#: ../../includes_knife/includes_knife_using.rst:4
# 2818272cc18c4582913051cf5b00d0b8
msgid "|knife| runs from a management workstation and sits in-between a |chef server| and an organization's infrastructure. |knife| interacts with a |chef server| by using the same REST API that is used by a |chef client|. Role-based authentication controls (RBAC) can be used to authorize changes when |knife| is run with |chef hosted| or |chef private|. |knife| is configured during workstation setup, but subsequent modifications can be made using the |knife rb| configuration file."
msgstr ""

#: ../source/knife_using.rst:38
# 23026f803b6644d9a79d93e89fb36fe5
msgid "JSON Data Format"
msgstr ""

#: ../../includes_knife/includes_knife_using_json.rst:4
# d23c1ef75d4143079a242253dc376c06
msgid "Most data is entered using a text editor in |json| format, unless the ``--disable-editing`` option is entered as part of a command. (Encrypted data bags use |yaml|, which is a superset of |json|.) |json| is a common, language-independent data format that provides a simple text representation of arbitrary data structures. For more information about |json|, see http://www.json.org/ or http://en.wikipedia.org/wiki/JSON."
msgstr ""

#: ../source/knife_using.rst:42
# 45f85ab4ccf546f6811289c20a598a47
msgid "Set the Text Editor"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:4
# 8feae39aefde4b72979803d2cb5b7814
msgid "Some |knife| commands, such as ``knife data bag edit``, require that information be edited as |json| data using a text editor. For example, the following command:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:10
# 1b0557d64ace4c91a0d0204a91751fe9
msgid "will open up the text editor with data similar to:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:18
# c165f5d37fac4225abf0f1b22b3dfb29
msgid "Changes to that file can then be made:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:27
# 705ae3a5f795464eb6c5642eae48a248
msgid "The type of text editor that is used by |knife| can be configured by adding an entry to the |knife rb| file or by setting an ``EDITOR`` environment variable. For example, to configure the text editor to always open with |vim|, add the following to the |knife rb| file:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:33
# ca00513a9e7d45218f4754c44c249c4c
msgid "When a |windows| file path is enclosed in a double-quoted string (\" \"), the same backslash character (``\\``) that is used to define the file path separator is also used in |ruby| to define an escape character. The |knife rb| file is a |ruby| file; therefore, file path separators must be escaped. In addition, spaces in the file path must be replaced with ``~1`` so that the length of each section within the file path is not more than 8 characters. For example, if EditPad Pro is the text editor of choice and is located at the following path::"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:37
# 0faba81c14fe42c3beb86e5c873cdb83
msgid "the setting in the |knife rb| file would be similar to:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:43
# 6b861d4468b04d9e9e8f9219a3d7839a
msgid "One approach to working around the double- vs. single-quote issue is to put the single-quotes outside of the double-quotes. For example, for |notepad plusplus|:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:49
# 7eba9eb73ce34115836c6c9b482bfb3b
msgid "for |sublime|:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:55
# 38a04af7d0f84101be1b5d2da319749f
msgid "for |textpad|:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:61
# 14200ce4eeb14e04a7d68cce1ab82a65
msgid "and for |vim|:"
msgstr ""

#: ../source/knife_using.rst:46
# dc5516e222964616bec4e4ae340d2d8f
msgid "Using Quotes"
msgstr ""

#: ../../includes_knife/includes_knife_using_quotes.rst:4
# 54ffc25ee07c4ff4b2f309e345d986dc
msgid "Values can be entered with double quotes (\" \") or single quotes (' '), but this should be done consistently."
msgstr ""

#: ../source/knife_using.rst:50
# 56a0661e4ece4a6289a20ffcae3c63ca
msgid "Sub-commands"
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:4
# b8f0975c38d64429bbc51d5ff118dc3b
msgid "|knife| comes with a collection of built in subcommands that work together to provide all of the functionality required to take specific actions against any object in an organization, including cookbooks, nodes, roles, data bags, environments, and users. A |knife| plugin extends the functionality beyond built-in subcommands."
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:6
# 9ae93bd18cfd48fb9656d28d03bfd660
msgid "|knife| has the following subcommands: ``bootstrap``, ``client``, ``configure``, ``cookbook``, ``cookbook site``, ``data bag``, ``delete``, ``deps``, ``diff``, ``download``, ``edit``, ``environment``, ``exec``, ``index rebuild``, ``list``, ``node``, ``recipe list``, ``role``, ``search``, ``show``, ``ssh``, ``status``, ``tag``, ``upload``, ``user``, and ``xargs``."
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:8
# 586d5c547d9f4ca3bba071ed54a251fc
msgid "The following subcommands run only against the open source |chef server|: ``index rebuild`` and ``user``."
msgstr ""

#: ../source/knife_using.rst:54
# 5905b56b78c04e4faee2ade1a83b84b5
msgid "Verb Sub-commands"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:6
# 41278950389c4f78ad13258d41a17d91
msgid "|knife| includes a set of subcommands that are built around common verbs: ``delete``, ``deps``, ``diff``, ``download``, ``edit``, ``list``, ``show``, ``upload``, ``xargs``. These subcommands allow |knife| to issue commands that interact with any object stored in the |chef repo| or stored on the |chef server|. Some important principles behind this group of subcommands includes:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:8
# 1f10310840cf4f94ac6bed8c8bcf6bcf
msgid "A command that works with each object in the |chef repo|. The subcommands specify the desired action (the \"verb\"), and then directory in which that object resides (``clients``, ``cookbooks/``, ``data_bags/``, ``environments/``, ``nodes``, ``roles/``, and ``users``). For example: ``download cookbooks/``"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:9
# fbdceda7425e47519ab9b256fed14e6c
msgid "A command that works with certain objects in |chef hosted|, including ``acls``, ``groups``, and ``containers``"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:10
# 65bcf9bca3374289aa5f1c6f60c2e4ed
msgid "Uses the |chef server| as if it were a file system, allowing the |chef repo| on the |chef server| to behave like a mirror of the |chef repo| on the workstation. The |chef server| will have the same objects as the local |chef repo|. To make changes to the files on the |chef server|, just download files from the |chef server| or upload files from the |chef repo|"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:11
# 2d03dc6b8820491896b20b3f954e6264
msgid "The context from which a command is run matters. For example, when working in the ``roles/`` directory, |knife| will know what is being worked with. Enter ``knife show base.json`` and |knife| will return the base role from the |chef server|. From the |chef repo| root, enter ``knife show roles/base.json`` to get the same result"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:12
# cb9e8656a8dd4708b62a4e05db25624c
msgid "Parallel requests can be made to the |chef server| and are configurable on a per-command basis"
msgstr ""

#: ../source/knife_using.rst:58
# a836f2938536464eb6086c3e97295250
msgid "Wildcard Search"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:6
# a17ca0482ec84a7688114a3df6fec35c
msgid "A wildcard matching pattern can be used for substring matches that replace zero (or more) characters. There are two types of wildcard patterns:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:8
# 96f115ad9e7f4ee592e6c49694bedc36
msgid "A question mark (”?”) can be used to replace exactly one character (as long as that character is not the first character)"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:9
# 88ba37f17a074807b56dcdba99628c40
msgid "An asterisk (“*”) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:11
# b717257fc2e34d79a1010ab85068042e
msgid "Wildcard patterns must be escaped (using a backslash) so that the wildcard itself can reach the |chef server|. If they are not escaped, the wildcard is expanded into the actual filenames and |knife| will not know the wildcard was intended to be used. For example, if the |chef server| has data bags named ``aardvarks``, ``anagrams``, and ``arp_tables``, but the local file system only has ``aardvarks`` and ``anagrams``, escaping vs. not escaping the wildcard pattern will yield different results:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:17
# 49766ae4a7e64d339f5715859c48f6b5
msgid "asks the |chef server| for everything starting with the letter \"a\" and will return:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:23
# a19ef5d6f50a48a0826e46423a5958cf
msgid "But, the following:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:29
# f81e4f7f8d7b4ea6b0f5b1071a595ad3
msgid "will return:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:35
# ea599f1160c84423a79783533d7e8f50
msgid "Which is the same as entering:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:41
# 35a3ba429496459fb03d250df48fa0d8
msgid "to return:"
msgstr ""

#: ../source/knife_using.rst:62
# bd415e76cd3f4101b5f4c0a6e362013c
msgid "Plug-ins"
msgstr ""

#: ../../includes_knife/includes_knife_using_plugins.rst:4
# 7e9eb9c2f9734f57957c3bfb322736dd
msgid "|opscode| provides the following plugins, which work the same as built-in subcommands (including common options), but must be installed separately (using |rubygems|): |subcommand knife azure|, |subcommand knife bluebox|, |subcommand knife ec2|, |subcommand knife eucalyptus|, |subcommand knife google|, |subcommand knife hp|, |subcommand knife linode|, |subcommand knife openstack|, |subcommand knife rackspace|, |subcommand knife terremark|, |subcommand knife vcloud|, and |subcommand knife windows|."
msgstr ""

#: ../../includes_knife/includes_knife_using_plugins.rst:6
# 581dd3883f964764ae2dc63085bf5572
msgid "The community provides many other plugins for |knife|: http://community.opscode.com/."
msgstr ""

#: ../source/knife_using.rst:66
# 3689e9b4d31f4f2e95c7b24183f11bfe
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:4
# 1bc4f60c72134704888dd9823e330369
msgid "All |knife| subcommands have the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:6
# fce24a16f1d44321ba7525a23803b2ff
msgid "knife subcommand [ARGUMENT] (options)"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:8
# 7aff8da30d0047328f6eec6c982db045
msgid "Each subcommand has its own set of arguments and options."
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:10
# 3f5d15056230468693c078274995c5ae
msgid "All syntax examples in this document show variables in ALL_CAPS. For example ``-u PORT_LIST`` (where PORT_LIST is a comma-separated list of local and public UDP ports) or ``-F FORMAT`` (where FORMAT determines the output format, either ``summary``, ``text``, ``json``, ``yaml``, or ``pp``). These variables often require specific values that are unique to each organization."
msgstr ""

#: ../source/knife_using.rst:70
# e6798e5880c24af1a7d20c08dbc30410
msgid "Many Users, Same Repo"
msgstr ""

#: ../../includes_repository/includes_repository_many_users_same_repo.rst:5
# 40d12658b53f41138a56203bc6122dd2
msgid "It is possible for multiple users to access the |chef server| using the same |knife rb| file. (A user can even access multiple organizations if, for example, each instance of the |chef repo| contained the same copy of the |knife rb| file.) This can be done by adding the |knife rb| file to the |chef repo|, and then using environment variables to handle the user-specific credential details and/or sensitive values. For example:"
msgstr ""

