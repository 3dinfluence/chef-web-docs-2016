# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-27 22:25\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_using.rst:33
# e9c3c03b04ba4c03b171ab7a82b76e5d
msgid "Working with Knife"
msgstr ""

#: ../../includes_knife/includes_knife_using.rst:4
# 7e940f83f7d24a8a84dec2f2e932bfe4
msgid "|knife| runs from a management workstation and sits in-between a |chef server| and an organization's infrastructure. |knife| interacts with a |chef server| by using the same REST API that is used by a |chef client|. Role-based authentication controls (RBAC) can be used to authorize changes when |knife| is run with |chef server oec|. |knife| is configured during workstation setup, but subsequent modifications can be made using the |knife rb| configuration file."
msgstr ""

#: ../source/knife_using.rst:38
# 2da0a179aa274bf7b7fb5f9197f5c3c2
msgid "JSON Data Format"
msgstr ""

#: ../../includes_knife/includes_knife_using_json.rst:4
# e0b50e95bbec4c4f934cc39dd7dad353
msgid "Most data is entered using a text editor in |json| format, unless the ``--disable-editing`` option is entered as part of a command. (Encrypted data bags use |yaml|, which is a superset of |json|.) |json| is a common, language-independent data format that provides a simple text representation of arbitrary data structures. For more information about |json|, see http://www.json.org/ or http://en.wikipedia.org/wiki/JSON."
msgstr ""

#: ../source/knife_using.rst:42
# a355a47ae42e4596b89a6562cd524e84
msgid "Set the Text Editor"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:4
# d0bbed306c5f4726a0d065b56ce0df98
msgid "Some |knife| commands, such as ``knife data bag edit``, require that information be edited as |json| data using a text editor. For example, the following command:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:10
# 5d8e3843095d4c4cb6fbdec082034c79
msgid "will open up the text editor with data similar to:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:18
# 503c2c4f0cbc4a559bfd353e4920c776
msgid "Changes to that file can then be made:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:27
# 623478a13ea946ffa07ba888e4b987d5
msgid "The type of text editor that is used by |knife| can be configured by adding an entry to the |knife rb| file or by setting an ``EDITOR`` environment variable. For example, to configure the text editor to always open with |vim|, add the following to the |knife rb| file:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:33
# 7afd0fdb130e4a7d8cca883481c24a65
msgid "When a |windows| file path is enclosed in a double-quoted string (\" \"), the same backslash character (``\\``) that is used to define the file path separator is also used in |ruby| to define an escape character. The |knife rb| file is a |ruby| file; therefore, file path separators must be escaped. In addition, spaces in the file path must be replaced with ``~1`` so that the length of each section within the file path is not more than 8 characters. For example, if EditPad Pro is the text editor of choice and is located at the following path::"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:37
# cb5c6f76e48d498288d585b153ca15c6
msgid "the setting in the |knife rb| file would be similar to:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:43
# 7dc813ac5a94410594062057fd3fff7f
msgid "One approach to working around the double- vs. single-quote issue is to put the single-quotes outside of the double-quotes. For example, for |notepad plusplus|:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:49
# 3a2ad6f9c4194f909b285d5414f70e11
msgid "for |sublime|:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:55
# 44951a454c7d4b0189f968f41ac133c3
msgid "for |textpad|:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:61
# 40c150f47ca44c528cb7917fd416ffc3
msgid "and for |vim|:"
msgstr ""

#: ../source/knife_using.rst:46
# 20df50f5d9d54f989d84bd7a25696034
msgid "Using Quotes"
msgstr ""

#: ../../includes_knife/includes_knife_using_quotes.rst:4
# a59aff6967664a8d9d71c3c61eb6db16
msgid "Values can be entered with double quotes (\" \") or single quotes (' '), but this should be done consistently."
msgstr ""

#: ../source/knife_using.rst:50
# d90fe14233ae4811b34737dd0f404421
msgid "Sub-commands"
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:4
# 8771a668593946f4b81e08d871eee0ae
msgid "|knife| comes with a collection of built in subcommands that work together to provide all of the functionality required to take specific actions against any object in an organization, including cookbooks, nodes, roles, data bags, environments, and users. A |knife| plugin extends the functionality beyond built-in subcommands."
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:6
# b41bd3f2c32542098eef258f851b9f3b
msgid "|knife| has the following subcommands: ``bootstrap``, ``client``, ``configure``, ``cookbook``, ``cookbook site``, ``data bag``, ``delete``, ``deps``, ``diff``, ``download``, ``edit``, ``environment``, ``exec``, ``index rebuild``, ``list``, ``node``, ``recipe list``, ``role``, ``search``, ``show``, ``ssh``, ``status``, ``tag``, ``upload``, ``user``, and ``xargs``."
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:8
# 93851218bcb541dba0431768194d4b1d
msgid "The following subcommands run only against the open source |chef server|: ``index rebuild`` and ``user``."
msgstr ""

#: ../source/knife_using.rst:54
# 5541863450c34d3793ea568da0dd471d
msgid "Verb Sub-commands"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:6
# b554508b82a34a799972e04e803562e0
msgid "|knife| includes a set of subcommands that are built around common verbs: ``delete``, ``deps``, ``diff``, ``download``, ``edit``, ``list``, ``show``, ``upload``, ``xargs``. These subcommands allow |knife| to issue commands that interact with any object stored in the |chef repo| or stored on the |chef server|. Some important principles behind this group of subcommands includes:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:8
# 1cd668f01ccc43c58849a81625b780be
msgid "A command that works with each object in the |chef repo|. The subcommands specify the desired action (the \"verb\"), and then directory in which that object resides (``clients``, ``cookbooks/``, ``data_bags/``, ``environments/``, ``nodes``, ``roles/``, and ``users``). For example: ``download cookbooks/``"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:9
# d438f171ddbc4da9bf9c2a84dcc1457f
msgid "A command that works with certain objects in |chef server oec|, including ``acls``, ``groups``, and ``containers``"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:10
# 9349fdcde4734398918f18576e8fd900
msgid "Uses the |chef server| as if it were a file system, allowing the |chef repo| on the |chef server| to behave like a mirror of the |chef repo| on the workstation. The |chef server| will have the same objects as the local |chef repo|. To make changes to the files on the |chef server|, just download files from the |chef server| or upload files from the |chef repo|"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:11
# e6bad37adca94ee19c4ac2637bfc24b8
msgid "The context from which a command is run matters. For example, when working in the ``roles/`` directory, |knife| will know what is being worked with. Enter ``knife show base.json`` and |knife| will return the base role from the |chef server|. From the |chef repo| root, enter ``knife show roles/base.json`` to get the same result"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:12
# 6e27a96a8ffb4f88b22e2a8e3d91472f
msgid "Parallel requests can be made to the |chef server| and are configurable on a per-command basis"
msgstr ""

#: ../source/knife_using.rst:58
# 597ee4d08e8544018232e8ea1afeed1c
msgid "Wildcard Search"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:6
# 4403dccf51cc4d17bd3074bdbc90e783
msgid "A wildcard matching pattern can be used for substring matches that replace zero (or more) characters. There are two types of wildcard patterns:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:8
# 1048a9fa6fa848a9a8b33b645a5dc292
msgid "A question mark (”?”) can be used to replace exactly one character (as long as that character is not the first character)"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:9
# 06e142bbcf88432c97b93e900f2a07fc
msgid "An asterisk (“*”) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:11
# 8f180003d5d04308ac157945f46a5c37
msgid "Wildcard patterns must be escaped (using a backslash) so that the wildcard itself can reach the |chef server|. If they are not escaped, the wildcard is expanded into the actual filenames and |knife| will not know the wildcard was intended to be used. For example, if the |chef server| has data bags named ``aardvarks``, ``anagrams``, and ``arp_tables``, but the local file system only has ``aardvarks`` and ``anagrams``, escaping vs. not escaping the wildcard pattern will yield different results:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:17
# aea5496f2a544fee877352304fd219b7
msgid "asks the |chef server| for everything starting with the letter \"a\" and will return:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:23
# ec54a625a3a441c99b4e86b1c60acb8c
msgid "But, the following:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:29
# 7a8a803f8cf641af87390aadb5b1e201
msgid "will return:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:35
# 9d0f4c6345ac492196f6eabd3b40a452
msgid "Which is the same as entering:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:41
# 3f06717f66ce4488a6186372fdec8491
msgid "to return:"
msgstr ""

#: ../source/knife_using.rst:62
# 2cf588c576da4134b886a0905366e741
msgid "Plug-ins"
msgstr ""

#: ../../includes_knife/includes_knife_using_plugins.rst:4
# 0e87a71d5c35438392876f06b8839b6c
msgid "|opscode| provides the following plugins, which work the same as built-in subcommands (including common options), but must be installed separately (using |rubygems|): |subcommand knife azure|, |subcommand knife bluebox|, |subcommand knife ec2|, |subcommand knife eucalyptus|, |subcommand knife google|, |subcommand knife hp|, |subcommand knife linode|, |subcommand knife openstack|, |subcommand knife rackspace|, |subcommand knife terremark|, |subcommand knife vcloud|, and |subcommand knife windows|."
msgstr ""

#: ../../includes_knife/includes_knife_using_plugins.rst:6
# 240fd87c915d488f93d056a6af0f35c7
msgid "The community provides many other plugins for |knife|: http://community.opscode.com/."
msgstr ""

#: ../source/knife_using.rst:66
# 25b1fcf99c714bd6a51d1d2a532c79c5
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:4
# d5585ec771c3474887a392ee515f4bf7
msgid "All |knife| subcommands have the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:6
# c25944ef8b454a02b78eaad24a878c9f
msgid "knife subcommand [ARGUMENT] (options)"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:8
# bab6c425188840a190c6f3c3ae921853
msgid "Each subcommand has its own set of arguments and options."
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:10
# d3ac4dc5de214a99bcf6deae9202f456
msgid "All syntax examples in this document show variables in ALL_CAPS. For example ``-u PORT_LIST`` (where PORT_LIST is a comma-separated list of local and public UDP ports) or ``-F FORMAT`` (where FORMAT determines the output format, either ``summary``, ``text``, ``json``, ``yaml``, or ``pp``). These variables often require specific values that are unique to each organization."
msgstr ""

#: ../source/knife_using.rst:70
# 50c3942d8b7e47b39cfc09d1afc8347a
msgid "Many Users, Same Repo"
msgstr ""

#: ../../includes_repository/includes_repository_many_users_same_repo.rst:5
# 265647d526e94732ace9732a34682613
msgid "It is possible for multiple users to access the |chef server| using the same |knife rb| file. (A user can even access multiple organizations if, for example, each instance of the |chef repo| contained the same copy of the |knife rb| file.) This can be done by adding the |knife rb| file to the |chef repo|, and then using environment variables to handle the user-specific credential details and/or sensitive values. For example:"
msgstr ""

