# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-06 22:07\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_using.rst:8
# 2e0f8ff111c8433dbba9a9c2340b34bc
msgid "Working with Knife"
msgstr ""

#: ../../includes_knife/includes_knife_using.rst:4
# a441ea18e79e492292098c57beeed7a4
msgid "|knife| runs from a management workstation and sits in-between a |chef server| and an organization's infrastructure. |knife| interacts with a |chef server| by using the same REST API that is used by a |chef client|. Role-based authentication controls (RBAC) can be used to authorize changes when |knife| is run with |chef server oec|. |knife| is configured during workstation setup, but subsequent modifications can be made using the |knife rb| configuration file."
msgstr ""

#: ../source/knife_using.rst:13
# c82b75da0feb4c41a9b10f1a27bbf715
msgid "JSON Data Format"
msgstr ""

#: ../../includes_knife/includes_knife_using_json.rst:4
# 8f365ff6f7634df782a050c513006dc7
msgid "Most data is entered using a text editor in |json| format, unless the ``--disable-editing`` option is entered as part of a command. (Encrypted data bags use |yaml|, which is a superset of |json|.) |json| is a common, language-independent data format that provides a simple text representation of arbitrary data structures. For more information about |json|, see http://www.json.org/ or http://en.wikipedia.org/wiki/JSON."
msgstr ""

#: ../source/knife_using.rst:17
# 40470029f6ee4a438774cfe294e5d5aa
msgid "Set the Text Editor"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:4
# 9eb45151013e40748756909c468ae850
msgid "Some |knife| commands, such as ``knife data bag edit``, require that information be edited as |json| data using a text editor. For example, the following command:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:10
# 9ef42b55476b463b8fbe44217a526489
msgid "will open up the text editor with data similar to:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:18
# dcd956c9c73645ff9c3e168ffb0b1efc
msgid "Changes to that file can then be made:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:27
# 618752dc2fc14248829864dd6e9dd43b
msgid "The type of text editor that is used by |knife| can be configured by adding an entry to the |knife rb| file or by setting an ``EDITOR`` environment variable. For example, to configure the text editor to always open with |vim|, add the following to the |knife rb| file:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:33
# 1059f5069ed34df8be06419aab71c6dc
msgid "When a |windows| file path is enclosed in a double-quoted string (\" \"), the same backslash character (``\\``) that is used to define the file path separator is also used in |ruby| to define an escape character. The |knife rb| file is a |ruby| file; therefore, file path separators must be escaped. In addition, spaces in the file path must be replaced with ``~1`` so that the length of each section within the file path is not more than 8 characters. For example, if EditPad Pro is the text editor of choice and is located at the following path::"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:37
# 60abb080e917406cb61a7d1116f9bdc7
msgid "the setting in the |knife rb| file would be similar to:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:43
# 6fa3c549693d4fc09a0e97d690b817a7
msgid "One approach to working around the double- vs. single-quote issue is to put the single-quotes outside of the double-quotes. For example, for |notepad plusplus|:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:49
# 503169bc1c64429cb0e815ab85f32fa7
msgid "for |sublime|:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:55
# 0b3511bfcc654d319eedd0a5a19e6d8a
msgid "for |textpad|:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:61
# 776950c56e9841d0b096c467e6a25314
msgid "and for |vim|:"
msgstr ""

#: ../source/knife_using.rst:21
# 044995bca0a6484382efba8582fd7b4d
msgid "Using Quotes"
msgstr ""

#: ../../includes_knife/includes_knife_using_quotes.rst:4
# c8decf3c0d10477d842a35060e4cb524
msgid "Values can be entered with double quotes (\" \") or single quotes (' '), but this should be done consistently."
msgstr ""

#: ../source/knife_using.rst:25
# be86f3e1fe2f4a978e9a7a6f1b842d22
msgid "Sub-commands"
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:4
# 08c8ffd20ed34063a4ab4e4c4abaa47f
msgid "|knife| comes with a collection of built in subcommands that work together to provide all of the functionality required to take specific actions against any object in an organization, including cookbooks, nodes, roles, data bags, environments, and users. A |knife| plugin extends the functionality beyond built-in subcommands."
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:6
# d1ac4e73d21b4deea9108d836e34080c
msgid "|knife| has the following subcommands: ``bootstrap``, ``client``, ``configure``, ``cookbook``, ``cookbook site``, ``data bag``, ``delete``, ``deps``, ``diff``, ``download``, ``edit``, ``environment``, ``exec``, ``index rebuild``, ``list``, ``node``, ``recipe list``, ``role``, ``search``, ``show``, ``ssh``, ``status``, ``tag``, ``upload``, ``user``, and ``xargs``."
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:8
# a8ef8badda824e0fa84fb75442b4d48a
msgid "The following subcommands run only against the open source |chef server|: ``index rebuild`` and ``user``."
msgstr ""

#: ../source/knife_using.rst:29
# 545e4dc1b651489cb6c675fe36490d63
msgid "Verb Sub-commands"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:6
# f626a46ee3a84db9ae098a80163068a3
msgid "|knife| includes a set of subcommands that are built around common verbs: ``delete``, ``deps``, ``diff``, ``download``, ``edit``, ``list``, ``show``, ``upload``, ``xargs``. These subcommands allow |knife| to issue commands that interact with any object stored in the |chef repo| or stored on the |chef server|. Some important principles behind this group of subcommands includes:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:8
# 57399a53b6054addbb80b4b30532abb9
msgid "A command that works with each object in the |chef repo|. The subcommands specify the desired action (the \"verb\"), and then directory in which that object resides (``clients``, ``cookbooks/``, ``data_bags/``, ``environments/``, ``nodes``, ``roles/``, and ``users``). For example: ``download cookbooks/``"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:9
# 2cc0ff1c75f849238f9f9bccedf5aba6
msgid "A command that works with certain objects in |chef server oec|, including ``acls``, ``groups``, and ``containers``"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:10
# a6098b05634843f19e960a454e66c7c4
msgid "Uses the |chef server| as if it were a file system, allowing the |chef repo| on the |chef server| to behave like a mirror of the |chef repo| on the workstation. The |chef server| will have the same objects as the local |chef repo|. To make changes to the files on the |chef server|, just download files from the |chef server| or upload files from the |chef repo|"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:11
# a27f88b43882401999730f535135128b
msgid "The context from which a command is run matters. For example, when working in the ``roles/`` directory, |knife| will know what is being worked with. Enter ``knife show base.json`` and |knife| will return the base role from the |chef server|. From the |chef repo| root, enter ``knife show roles/base.json`` to get the same result"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:12
# 8e7a01a196f045998679518880b6e6ee
msgid "Parallel requests can be made to the |chef server| and are configurable on a per-command basis"
msgstr ""

#: ../source/knife_using.rst:33
# 9b11bc4ca0584121b9d8a10fde44e5d4
msgid "Wildcard Search"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:6
# e841619fdbed4c5eb5b77cc60a019627
msgid "A wildcard matching pattern can be used for substring matches that replace zero (or more) characters. There are two types of wildcard patterns:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:8
# 9e615467cdbc4db59a9625fb8439b24f
msgid "A question mark (”?”) can be used to replace exactly one character (as long as that character is not the first character)"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:9
# 35135d2e9245497a9a8d4a5faa38e53a
msgid "An asterisk (“*”) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:11
# e4bd7b2969ca4e8c88735f6c659eb2fa
msgid "Wildcard patterns must be escaped (using a backslash) so that the wildcard itself can reach the |chef server|. If they are not escaped, the wildcard is expanded into the actual filenames and |knife| will not know the wildcard was intended to be used. For example, if the |chef server| has data bags named ``aardvarks``, ``anagrams``, and ``arp_tables``, but the local file system only has ``aardvarks`` and ``anagrams``, escaping vs. not escaping the wildcard pattern will yield different results:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:17
# 82f1fb3b50254e1b9e40b25b2a39e787
msgid "asks the |chef server| for everything starting with the letter \"a\" and will return:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:23
# 01edc755de874e3197c5639f7278a5bb
msgid "But, the following:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:29
# 71bf1dd7e1f44e0ca457cdab6fe7d20a
msgid "will return:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:35
# bc53119623ff41e9a53000278c6f24ba
msgid "Which is the same as entering:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:41
# 57ddbdacfb1e4cec9cbf0bd06ff07de6
msgid "to return:"
msgstr ""

#: ../source/knife_using.rst:37
# 9847fd45bf364374851516f9ab82f1c6
msgid "Plug-ins"
msgstr ""

#: ../../includes_knife/includes_knife_using_plugins.rst:4
# a1d96fe86be24ee19f4da5a1086d8d62
msgid "|company_name| provides the following plugins, which work the same as built-in subcommands (including common options), but must be installed separately (using |rubygems|): |subcommand knife azure|, |subcommand knife bluebox|, |subcommand knife ec2|, |subcommand knife eucalyptus|, |subcommand knife google|, |subcommand knife hp|, |subcommand knife linode|, |subcommand knife openstack|, |subcommand knife rackspace|, |subcommand knife terremark|, |subcommand knife vcloud|, and |subcommand knife windows|."
msgstr ""

#: ../../includes_knife/includes_knife_using_plugins.rst:6
# 35573d5a73cb4892bd423426cd480854
msgid "The community provides many other plugins for |knife|: http://community.opscode.com/."
msgstr ""

#: ../source/knife_using.rst:41
# f1b213e248ca4440bf45938caa740939
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:4
# e2791851ab2c4e53b1a3e8d96a173fae
msgid "All |knife| subcommands have the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:6
# e1c4f177f7094ab390234b29074d806a
msgid "knife subcommand [ARGUMENT] (options)"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:8
# 3faedd68842c447b947dece562be4232
msgid "Each subcommand has its own set of arguments and options."
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:10
# e277f15d611c420b85f69d5f731c1f3d
msgid "All syntax examples in this document show variables in ALL_CAPS. For example ``-u PORT_LIST`` (where PORT_LIST is a comma-separated list of local and public UDP ports) or ``-F FORMAT`` (where FORMAT determines the output format, either ``summary``, ``text``, ``json``, ``yaml``, or ``pp``). These variables often require specific values that are unique to each organization."
msgstr ""

#: ../source/knife_using.rst:45
# 800438df2f1a44819c1211a461abe890
msgid "Many Users, Same Repo"
msgstr ""

#: ../../includes_repository/includes_repository_many_users_same_repo.rst:5
# abbd55ab0f61482eaf02edf4bc5d889a
msgid "It is possible for multiple users to access the |chef server| using the same |knife rb| file. (A user can even access multiple organizations if, for example, each instance of the |chef repo| contained the same copy of the |knife rb| file.) This can be done by adding the |knife rb| file to the |chef repo|, and then using environment variables to handle the user-specific credential details and/or sensitive values. For example:"
msgstr ""

