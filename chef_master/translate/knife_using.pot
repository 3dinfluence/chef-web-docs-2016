# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-08-26 13:03\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_using.rst:33
# 9dbf0ff38ab84021a84a980f4e3075f9
msgid "Working with Knife"
msgstr ""

#: ../../includes_knife/includes_knife_using.rst:4
# 35db644b04534f3b90fbbe27bc81ac05
msgid "|knife| runs from a management workstation and sits in-between a |chef server| and an organization's infrastructure. |knife| interacts with a |chef server| by using the same REST API that is used by a |chef client|. Role-based authentication controls (RBAC) can be used to authorize changes when |knife| is run with |chef hosted| or |chef private|. |knife| is configured during workstation setup, but subsequent modifications can be made using the |knife rb| configuration file."
msgstr ""

#: ../source/knife_using.rst:38
# ea7b93a64e16414e8ea976c741a3c306
msgid "JSON Data Format"
msgstr ""

#: ../../includes_knife/includes_knife_using_json.rst:4
# ee30c15212424c639299b213b0d0005b
msgid "Most data is entered using a text editor in |json| format, unless the ``--disable-editing`` option is entered as part of a command. (Encrypted data bags use |yaml|, which is a superset of |json|.) |json| is a common, language-independent data format that provides a simple text representation of arbitrary data structures. For more information about |json|, see http://www.json.org/ or http://en.wikipedia.org/wiki/JSON."
msgstr ""

#: ../source/knife_using.rst:42
# 4574083006484f26b04ae409f408bfdd
msgid "Set the Text Editor"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:4
# 8488a04f017448499219c7478e2b218c
msgid "Some |knife| commands, such as ``knife data bag edit``, require that information be edited as |json| data using a text editor. For example, the following command:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:10
# a34e4037e589485fac9a9ebe7f8f436d
msgid "will open up the text editor with data similar to:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:18
# aa72159db02048538a8aa1dae13f15ed
msgid "Changes to that file can then be made:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:27
# 5fdd6d9b98bf41efb312bfb3b513379b
msgid "The type of text editor that is used by |knife| can be configured by adding an entry to the |knife rb| file or by setting an ``EDITOR`` environment variable. For example, to configure the text editor to always open with |vim|, add the following to the |knife rb| file:"
msgstr ""

#: ../source/knife_using.rst:46
# b11fdfc006fb42fba5c63bdb54563bb2
msgid "Using Quotes"
msgstr ""

#: ../../includes_knife/includes_knife_using_quotes.rst:4
# a0612f33806b41afb4656cffd671a00f
msgid "Values can be entered with double quotes (\" \") or single quotes (' '), but this should be done consistently."
msgstr ""

#: ../source/knife_using.rst:50
# d69cb708ddbd44ef9ce724d210ed6a42
msgid "Sub-commands"
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:4
# 40bad05c54e94d18b43b5b61ae62dac2
msgid "|knife| comes with a collection of built in subcommands that work together to provide all of the functionality required to take specific actions against any object in an organization, including cookbooks, nodes, roles, data bags, environments, and users. A |knife| plugin extends the functionality beyond built-in subcommands."
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:6
# a140775b551340c7a449c3e3f7d6dadd
msgid "|knife| has the following subcommands: ``bootstrap``, ``client``, ``configure``, ``cookbook``, ``cookbook site``, ``data bag``, ``delete``, ``deps``, ``diff``, ``download``, ``edit``, ``environment``, ``exec``, ``index rebuild``, ``list``, ``node``, ``recipe list``, ``role``, ``search``, ``show``, ``ssh``, ``status``, ``tag``, ``upload``, ``user``, and ``xargs``."
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:8
# 468d8bfac5cc461c9f319de5f418bfa3
msgid "The following subcommands run only against the open source |chef server|: ``index rebuild`` and ``user``."
msgstr ""

#: ../source/knife_using.rst:54
# 711d99c7dd0b4df68159cbd52d7d89cb
msgid "Verb Sub-commands"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:6
# 8f489c0dfee843f0ba9a52ccd1380005
msgid "|knife| includes a set of subcommands that are built around common verbs: ``delete``, ``deps``, ``diff``, ``download``, ``edit``, ``list``, ``show``, ``upload``, ``xargs``. These subcommands allow |knife| to issue commands that interact with any object stored in the |chef repo| or stored on the |chef server|. Some important principles behind this group of subcommands includes:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:8
# cc3b1f63b8fc469381c67d3d96a5421d
msgid "A command that works with each object in the |chef repo|. The subcommands specify the desired action (the \"verb\"), and then directory in which that object resides (``clients``, ``cookbooks/``, ``data_bags/``, ``environments/``, ``nodes``, ``roles/``, and ``users``). For example: ``download cookbooks/``"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:9
# ed574239d7cb4dad97e25c8410405b03
msgid "A command that works with certain objects in |chef hosted|, including ``acls``, ``groups``, and ``containers``"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:10
# 2f6b4bfee0034a31a8cfeacbc973e892
msgid "Uses the |chef server| as if it were a file system, allowing the |chef repo| on the |chef server| to behave like a mirror of the |chef repo| on the workstation. The |chef server| will have the same objects as the local |chef repo|. To make changes to the files on the |chef server|, just download files from the |chef server| or upload files from the |chef repo|"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:11
# 10fe722d1d0d42959fc8c605f067ecf1
msgid "The context from which a command is run matters. For example, when working in the ``roles/`` directory, |knife| will know what is being worked with. Enter ``knife show base.json`` and |knife| will return the base role from the |chef server|. From the |chef repo| root, enter ``knife show roles/base.json`` to get the same result"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:12
# 80d69a8ea04b4b4ea5e9129302b51bff
msgid "Parallel requests can be made to the |chef server| and are configurable on a per-command basis"
msgstr ""

#: ../source/knife_using.rst:58
# 39890db77e7d416eadd00f439505f553
msgid "Wildcard Search"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:6
# 8f24e9326d5c4306b82ba5e3409600dd
msgid "A wildcard matching pattern can be used for substring matches that replace zero (or more) characters. There are two types of wildcard patterns:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:8
# 0617fdcc7efb41c8a5d563b6e61fb184
msgid "A question mark (”?”) can be used to replace exactly one character (as long as that character is not the first character)"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:9
# 48dbb8c89d6c4f8bafe5873bd5cb1014
msgid "An asterisk (“*”) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:11
# bf7a6ce0632d4618b04428f43d9d3277
msgid "Wildcard patterns must be escaped (using a backslash) so that the wildcard itself can reach the |chef server|. If they are not escaped, the wildcard is expanded into the actual filenames and |knife| will not know the wildcard was intended to be used. For example, if the |chef server| has data bags named ``aardvarks``, ``anagrams``, and ``arp_tables``, but the local file system only has ``aardvarks`` and ``anagrams``, escaping vs. not escaping the wildcard pattern will yield different results:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:17
# fb0666c4549b43a7a2414614d5a85f3f
msgid "asks the |chef server| for everything starting with the letter \"a\" and will return:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:23
# 13cf565e031e43d3ba111044bdade572
msgid "But, the following:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:29
# 405ec72f7d5447ffb06c4d2d94ba41f5
msgid "will return:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:35
# b7c6c0ae36d443968054bc691ce58c5a
msgid "Which is the same as entering:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:41
# 49460cd232d54f6496eaa027b8d81d0a
msgid "to return:"
msgstr ""

#: ../source/knife_using.rst:62
# 47a40c7dc0144a618598e959561d59b6
msgid "Plug-ins"
msgstr ""

#: ../../includes_knife/includes_knife_using_plugins.rst:4
# 8cf905ce51f94d7c9a8c137ba96adfa9
msgid "|opscode| provides the following plugins, which work the same as built-in subcommands (including common options), but must be installed separately (using |rubygems|): |subcommand knife azure|, |subcommand knife bluebox|, |subcommand knife ec2|, |subcommand knife eucalyptus|, |subcommand knife google|, |subcommand knife hp|, |subcommand knife linode|, |subcommand knife openstack|, |subcommand knife rackspace|, |subcommand knife terremark|, |subcommand knife vcloud|, and |subcommand knife windows|."
msgstr ""

#: ../../includes_knife/includes_knife_using_plugins.rst:6
# ae45f0bbf9dd4dc8b52195e628565d35
msgid "The community provides many other plugins for |knife|: http://community.opscode.com/."
msgstr ""

#: ../source/knife_using.rst:66
# b1858989584f4171ac79c7a15ccbbeb1
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:4
# 8da53b12506a415fb9a08bf7d3924103
msgid "All |knife| subcommands have the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:6
# 8797dd4767f342b98fea109ffaa2033a
msgid "knife subcommand [ARGUMENT] (options)"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:8
# 88f185c88c574a60bacf48bc0245285d
msgid "Each subcommand has its own set of arguments and options."
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:10
# ef4a908709fe42acaa63176c318746c5
msgid "All syntax examples in this document show variables in ALL_CAPS. For example ``-u PORT_LIST`` (where PORT_LIST is a comma-separated list of local and public UDP ports) or ``-F FORMAT`` (where FORMAT determines the output format, either ``summary``, ``text``, ``json``, ``yaml``, or ``pp``). These variables often require specific values that are unique to each organization."
msgstr ""

#: ../source/knife_using.rst:70
# 1cfde88c1d2b4f0f8e85d376fe48f728
msgid "Many Users, Same Repo"
msgstr ""

#: ../../includes_repository/includes_repository_many_users_same_repo.rst:5
# 0cb7347f728c49b28aba9b94c2618fd4
msgid "It is possible for multiple users to access the |chef server| using the same |knife rb| file. (A user can even access multiple organizations if, for example, each instance of the |chef repo| contained the same copy of the |knife rb| file.) This can be done by adding the |knife rb| file to the |chef repo|, and then using environment variables to handle the user-specific credential details and/or sensitive values. For example:"
msgstr ""

