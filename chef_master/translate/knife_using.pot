# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-26 11:41\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_using.rst:33
# 0ab561ba6f08474bbdff14a674aeb21c
msgid "Working with Knife"
msgstr ""

#: ../../includes_knife/includes_knife_using.rst:4
# c97612296af14c30a08ea04d01418446
msgid "|knife| runs from a management workstation and sits in-between a |chef server| and an organization's infrastructure. |knife| interacts with a |chef server| by using the same REST API that is used by a |chef client|. Role-based authentication controls (RBAC) can be used to authorize changes when |knife| is run with |chef hosted| or |chef private|. |knife| is configured during workstation setup, but subsequent modifications can be made using the |knife rb| configuration file."
msgstr ""

#: ../source/knife_using.rst:38
# 6b90bf9288e14a6d89c966b89f1957e1
msgid "JSON Data Format"
msgstr ""

#: ../../includes_knife/includes_knife_using_json.rst:4
# 5ecd8e119cd1466e8b29cbd5f7f6196e
msgid "Most data is entered using a text editor in |json| format, unless the ``--disable-editing`` option is entered as part of a command. (Encrypted data bags use |yaml|, which is a superset of |json|.) |json| is a common, language-independent data format that provides a simple text representation of arbitrary data structures. For more information about |json|, see http://www.json.org/ or http://en.wikipedia.org/wiki/JSON."
msgstr ""

#: ../source/knife_using.rst:42
# 827b381cde064e7d8d3198a53764bc7c
msgid "Set the Text Editor"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:4
# c9105bbc68ca4292b8fcba181b49dbf2
msgid "Some |knife| commands, such as ``knife data bag edit``, require that information be edited as |json| data using a text editor. For example, the following command:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:10
# 467a2240c55e4be6989bdecd4ee882e3
msgid "will open up the text editor with data similar to:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:18
# f025837fb07340f6a10304b9be7a21b8
msgid "Changes to that file can then be made:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:27
# 5fcb860bd8174ddb9e861ee54fe62057
msgid "The type of text editor that is used by |knife| can be configured by adding an entry to the |knife rb| file or by setting an ``EDITOR`` environment variable. For example, to configure the text editor to always open with |vim|, add the following to the |knife rb| file:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:33
# 59c5cdc575ac47b08effe2d44b1631cb
msgid "When a |windows| file path is enclosed in a double-quoted string (\" \"), the same backslash character (``\\``) that is used to define the file path separator is also used in |ruby| to define an escape character. The |knife rb| file is a |ruby| file; therefore, file path separators must be escaped. In addition, spaces in the file path must be replaced with ``~1`` so that the length of each section within the file path is not more than 8 characters. For example, if EditPad Pro is the text editor of choice and is located at the following path::"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:37
# 89326c7de5f445029b0d285f2f5587d1
msgid "the setting in the |knife rb| file would be similar to:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:43
# 423d12ea2d674ec79c098a0bc28991a8
msgid "One approach to working around the double- vs. single-quote issue is to put the single-quotes outside of the double-quotes. For example, for |notepad plusplus|:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:49
# 6ae59a6b1830497289a4f5823d6b74c2
msgid "for |sublime|:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:55
# b05637d825f64ac9803be83acbd0dec0
msgid "for |textpad|:"
msgstr ""

#: ../../step_knife/step_knife_common_set_editor.rst:61
# 2ca5f704460348e3b577052d41e2ef43
msgid "and for |vim|:"
msgstr ""

#: ../source/knife_using.rst:46
# 4b43f871d9cd438598710647d19b1d12
msgid "Using Quotes"
msgstr ""

#: ../../includes_knife/includes_knife_using_quotes.rst:4
# 93b4ccbdb8544532afb9552a222ccd14
msgid "Values can be entered with double quotes (\" \") or single quotes (' '), but this should be done consistently."
msgstr ""

#: ../source/knife_using.rst:50
# 6f21be8dee8f475384ed9179d358bb88
msgid "Sub-commands"
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:4
# 9b99272f9f6548f69d2699112a60285c
msgid "|knife| comes with a collection of built in subcommands that work together to provide all of the functionality required to take specific actions against any object in an organization, including cookbooks, nodes, roles, data bags, environments, and users. A |knife| plugin extends the functionality beyond built-in subcommands."
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:6
# 6aa4efd9375940ecabc642dfefea2e8e
msgid "|knife| has the following subcommands: ``bootstrap``, ``client``, ``configure``, ``cookbook``, ``cookbook site``, ``data bag``, ``delete``, ``deps``, ``diff``, ``download``, ``edit``, ``environment``, ``exec``, ``index rebuild``, ``list``, ``node``, ``recipe list``, ``role``, ``search``, ``show``, ``ssh``, ``status``, ``tag``, ``upload``, ``user``, and ``xargs``."
msgstr ""

#: ../../includes_knife/includes_knife_using_subcommands.rst:8
# 8b852504f3124cadb66dcc2dd9ab29fb
msgid "The following subcommands run only against the open source |chef server|: ``index rebuild`` and ``user``."
msgstr ""

#: ../source/knife_using.rst:54
# b47e417ba7ce46588807e1a157a7c0a9
msgid "Verb Sub-commands"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:6
# 3d7c2dc6acb8428093bc3b5659e1cf6f
msgid "|knife| includes a set of subcommands that are built around common verbs: ``delete``, ``deps``, ``diff``, ``download``, ``edit``, ``list``, ``show``, ``upload``, ``xargs``. These subcommands allow |knife| to issue commands that interact with any object stored in the |chef repo| or stored on the |chef server|. Some important principles behind this group of subcommands includes:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:8
# e52ea28096904addac49397222fbba60
msgid "A command that works with each object in the |chef repo|. The subcommands specify the desired action (the \"verb\"), and then directory in which that object resides (``clients``, ``cookbooks/``, ``data_bags/``, ``environments/``, ``nodes``, ``roles/``, and ``users``). For example: ``download cookbooks/``"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:9
# 2e8fee2d23b046a598f96d47acc30b9c
msgid "A command that works with certain objects in |chef hosted|, including ``acls``, ``groups``, and ``containers``"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:10
# c3bc96a549794cdd9914d0b244a3bd29
msgid "Uses the |chef server| as if it were a file system, allowing the |chef repo| on the |chef server| to behave like a mirror of the |chef repo| on the workstation. The |chef server| will have the same objects as the local |chef repo|. To make changes to the files on the |chef server|, just download files from the |chef server| or upload files from the |chef repo|"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:11
# 5352cf7cfd1043ceba316ec3005068b8
msgid "The context from which a command is run matters. For example, when working in the ``roles/`` directory, |knife| will know what is being worked with. Enter ``knife show base.json`` and |knife| will return the base role from the |chef server|. From the |chef repo| root, enter ``knife show roles/base.json`` to get the same result"
msgstr ""

#: ../../includes_knife/includes_knife_verbs.rst:12
# 74ee355cf40e40ab9d33bfb777b50f26
msgid "Parallel requests can be made to the |chef server| and are configurable on a per-command basis"
msgstr ""

#: ../source/knife_using.rst:58
# 4618ae5bd398443091d6e068e17ab3a6
msgid "Wildcard Search"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:6
# 20573fd7559b48b1892570cd7aa8368a
msgid "A wildcard matching pattern can be used for substring matches that replace zero (or more) characters. There are two types of wildcard patterns:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:8
# fd3a75da49b2465083bd0a18d0711bd1
msgid "A question mark (”?”) can be used to replace exactly one character (as long as that character is not the first character)"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:9
# 7b9533be29494fa9b71bb67792b5fe73
msgid "An asterisk (“*”) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:11
# c5cd921050ed4ffc9d3b2661862ad8a7
msgid "Wildcard patterns must be escaped (using a backslash) so that the wildcard itself can reach the |chef server|. If they are not escaped, the wildcard is expanded into the actual filenames and |knife| will not know the wildcard was intended to be used. For example, if the |chef server| has data bags named ``aardvarks``, ``anagrams``, and ``arp_tables``, but the local file system only has ``aardvarks`` and ``anagrams``, escaping vs. not escaping the wildcard pattern will yield different results:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:17
# 4319aae691454e18b6cefbaa2f378e51
msgid "asks the |chef server| for everything starting with the letter \"a\" and will return:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:23
# 4c45ee046d714f279cf3bcbbbc638001
msgid "But, the following:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:29
# 5203c97a68b1432b95e87b782950772a
msgid "will return:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:35
# 285e076a5bad4ef083e2b1ac0db1d8a5
msgid "Which is the same as entering:"
msgstr ""

#: ../../includes_knife/includes_knife_verbs_wildcard.rst:41
# c43377626d1e40488f4e816cf53abfea
msgid "to return:"
msgstr ""

#: ../source/knife_using.rst:62
# 8c7ea2399a0a423d98fde1b3090667a8
msgid "Plug-ins"
msgstr ""

#: ../../includes_knife/includes_knife_using_plugins.rst:4
# 815611341f4d4302a529a07cd373e9ef
msgid "|opscode| provides the following plugins, which work the same as built-in subcommands (including common options), but must be installed separately (using |rubygems|): |subcommand knife azure|, |subcommand knife bluebox|, |subcommand knife ec2|, |subcommand knife eucalyptus|, |subcommand knife google|, |subcommand knife hp|, |subcommand knife linode|, |subcommand knife openstack|, |subcommand knife rackspace|, |subcommand knife terremark|, |subcommand knife vcloud|, and |subcommand knife windows|."
msgstr ""

#: ../../includes_knife/includes_knife_using_plugins.rst:6
# 78b5af34a087482bbded14ba5f3e4f74
msgid "The community provides many other plugins for |knife|: http://community.opscode.com/."
msgstr ""

#: ../source/knife_using.rst:66
# 725a8bc6d3b34b968b3f02632cee8ce1
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:4
# 41095792a1cb49d895eb03c06e8faee5
msgid "All |knife| subcommands have the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:6
# 7c9f3883d0a347a0910e085fc658e96d
msgid "knife subcommand [ARGUMENT] (options)"
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:8
# f1ad0714b81d43e0a555683f7b5bc2eb
msgid "Each subcommand has its own set of arguments and options."
msgstr ""

#: ../../includes_knife/includes_knife_using_syntax.rst:10
# 666ca46bfc0e4e4cb1095fef4254a0b1
msgid "All syntax examples in this document show variables in ALL_CAPS. For example ``-u PORT_LIST`` (where PORT_LIST is a comma-separated list of local and public UDP ports) or ``-F FORMAT`` (where FORMAT determines the output format, either ``summary``, ``text``, ``json``, ``yaml``, or ``pp``). These variables often require specific values that are unique to each organization."
msgstr ""

#: ../source/knife_using.rst:70
# 54d64a44670e451ea6909058095acc5e
msgid "Many Users, Same Repo"
msgstr ""

#: ../../includes_repository/includes_repository_many_users_same_repo.rst:5
# 81adb4d6ceed427bbfe8106862791c5f
msgid "It is possible for multiple users to access the |chef server| using the same |knife rb| file. (A user can even access multiple organizations if, for example, each instance of the |chef repo| contained the same copy of the |knife rb| file.) This can be done by adding the |knife rb| file to the |chef repo|, and then using environment variables to handle the user-specific credential details and/or sensitive values. For example:"
msgstr ""

