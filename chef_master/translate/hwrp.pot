# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-13 10:10-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/hwrp.rst:7
# e5dd47a0c4ce4aa59682d040c5f8deb0
msgid "About HWRPs"
msgstr ""

#: ../source/hwrp.rst:9
# d1602d0ce19342a6a3563503850d9cd1
msgid "A HWRP is a term used for a custom resource that is not created using a cookbook's ``/resources`` and ``/providers`` directories, but is instead created using |ruby| and is located in a cookbook's ``/libraries`` directory. This type of custom resource is more complex and must be authored entirely in |ruby|."
msgstr ""

#: ../source/hwrp.rst:11
# ec4bcd7001eb4c86825d5c3c7c9fc62a
msgid "Once created, a custom resource becomes a |ruby| class. During each |chef client| run, the |chef client| will read the custom resource from a recipe and will process it alongside all other resources. When it is time to configure the node, the |chef client| will use the custom provider to determine the steps required to bring the system into the desired state."
msgstr ""

#: ../source/hwrp.rst:14
# f3131c4b74d7498585b1f2bc6d658136
msgid "Library Resources"
msgstr ""

#: ../../includes_libraries/includes_libraries_custom_resource.rst:6
# 05aa75bb6b44416baa1b68ac90932d1a
msgid "A resource can also be defined in ``/libraries`` directory. Some advantages of this approach include more control over how resources behave in the provider, the ability to control the name of the resource directly, and more options available for writing tests. The resources and providers for a library resource, similar to lightweight resources (defined in the ``/resources`` and ``/providers`` folders) typically have a separate file for the resource and the provider, but this is not requirement. The main disadvantage of this approach is that resources defined in the ``/libraries`` directory may not use the |dsl recipe|."
msgstr ""

#: ../../includes_libraries/includes_libraries_custom_resource_core.rst:6
# 86ec7e449c134d47b8ea5fa78d45c405
msgid "A resource that is defined in the ``/libraries`` directory may leverage core |chef client| resources by using the following syntax:"
msgstr ""

#: ../../includes_libraries/includes_libraries_custom_resource_core.rst:12
# dd204796995e46ea9e31d845222152ac
msgid "or:"
msgstr ""

#: ../../includes_libraries/includes_libraries_custom_resource_example.rst:6
# 3828a6b0b76a4664b4f34dd494062dfd
msgid "For example, the following definition leverages the |resource directory| resource to create a new directory, and then evaluate that within the context of the custom resource:"
msgstr ""

#: ../../includes_libraries/includes_libraries_custom_resource_example.rst:19
# e4cf96f493cc475eb316372d87ea4349
msgid "The following definition uses the |resource template| resource for |debian|-specific cases, but then the |resource link| resource for everything else:"
msgstr ""

#: ../../includes_libraries/includes_libraries_custom_resource_example.rst:42
# 0937de90a67849bfb1f81d9fa69a960b
msgid "Otherwise, a resource defined in the ``/libraries`` directory is done using |ruby|, is added to recipes as if it were any other resource, and is processed by the |chef client| in the same way as any other resource. See the ``/libraries`` directory in the `database <https://github.com/opscode-cookbooks/database>`_ and `runit <https://github.com/opscode-cookbooks/runit>`_ cookbooks for complete examples of how to use this approach when defining a resource."
msgstr ""

