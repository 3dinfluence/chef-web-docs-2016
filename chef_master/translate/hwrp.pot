# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-29 14:53-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/hwrp.rst:8
# 95780bb8e56243528296d135e2138b8e
msgid "About HWRPs"
msgstr ""

#: ../source/hwrp.rst:10
# b8718dacd20a4f77a5cd25af8d967a22
msgid "A HWRP is a term used for a custom resource that is not created using a cookbook's ``/resources`` and ``/providers`` directories, but is instead created using |ruby| and is located in a cookbook's ``/libraries`` directory. This type of custom resource is more complex and must be authored entirely in |ruby|."
msgstr ""

#: ../source/hwrp.rst:12
# 02eb03ca69f742bda8e0aa92d0c95459
msgid "Once created, a custom resource becomes a |ruby| class. During each |chef client| run, the |chef client| will read the custom resource from a recipe and will process it alongside all other resources. When it is time to configure the node, the |chef client| will use the custom provider to determine the steps required to bring the system into the desired state."
msgstr ""

#: ../source/hwrp.rst:15
# f0de4bbd6e12493a930e96fde393b0e0
msgid "Library Resources"
msgstr ""

#: ../../includes_libraries/includes_libraries_custom_resource.rst:6
# 8588da2f8eb0478facb8fc2589221339
msgid "A resource can also be defined in ``/libraries`` directory. Some advantages of this approach include more control over how resources behave in the provider, the ability to control the name of the resource directly, and more options available for writing tests. The resources and providers for a library resource, similar to lightweight resources (defined in the ``/resources`` and ``/providers`` folders) typically have a separate file for the resource and the provider, but this is not requirement. The main disadvantage of this approach is that resources defined in the ``/libraries`` directory may not use the |dsl recipe|."
msgstr ""

#: ../../includes_libraries/includes_libraries_custom_resource_core.rst:6
# eb7f82cd483d404e963bc279c54e53f6
msgid "A resource that is defined in the ``/libraries`` directory may leverage core |chef client| resources by using the following syntax:"
msgstr ""

#: ../../includes_libraries/includes_libraries_custom_resource_core.rst:12
# 7607207efaa847a6b8dbd94346a90a90
msgid "or:"
msgstr ""

#: ../../includes_libraries/includes_libraries_custom_resource_example.rst:6
# 35a88a641e66407cb7d63eabb5877d67
msgid "For example, the following definition leverages the |resource directory| resource to create a new directory, and then evaluate that within the context of the custom resource:"
msgstr ""

#: ../../includes_libraries/includes_libraries_custom_resource_example.rst:19
# cf1ce4bb097145d7a64ee6a06ab06499
msgid "The following definition uses the |resource template| resource for |debian|-specific cases, but then the |resource link| resource for everything else:"
msgstr ""

#: ../../includes_libraries/includes_libraries_custom_resource_example.rst:42
# 3f469cbf6adb42d19669c589f95e1425
msgid "Otherwise, a resource defined in the ``/libraries`` directory is done using |ruby|, is added to recipes as if it were any other resource, and is processed by the |chef client| in the same way as any other resource. See the ``/libraries`` directory in the `database <https://github.com/opscode-cookbooks/database>`_ and `runit <https://github.com/opscode-cookbooks/runit>`_ cookbooks for complete examples of how to use this approach when defining a resource."
msgstr ""

