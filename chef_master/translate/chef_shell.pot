# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-04 13:15-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# e04f92dc31204e1593a4ab1ce2f3d7ca
msgid "|chef shell|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# cbbbeaf828d14db59be8a61490009cd0
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../source/chef_shell.rst:12
# 45b1fd68e50f4bb7884cf76baa101764
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 00f2fa66aa1b4a96ba2ee25c2f504eec
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 4a7850e427fc41a8b1953d42680bedc2
msgid "|chef shell| is tool that is run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 90bc7c7069cf4f1695cd707efaccbdc8
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# e6e045f8af774098bc1761043892e523
# b01d945bb3204ec1bc9d1c72cb30ad68
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 43c7fe50fb864f9685d25b57bfd79e07
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# e78fc9f80d494cd2815d4f844eabcaa0
msgid "Default. No cookbooks are loaded, and the run list is empty."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# c23c164b59b84b4587b7f7c942888a25
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 002f3563e7b7485998f0ebd2d5a038c3
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# c0e5fcd7ed39442395ceeac70d27aa1a
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 21e96163fc9c4bcbbd1de2eba8767013
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 625777210e364810865b05be22d68294
msgid "Configure"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:5
# a4b2e74b9ae34f8a9f7d0ad80518b981
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:7
# 2c3c6aaedb0c4fa28e5c2accb3231b72
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:8
# 8a84418d51404258b119422a1f9d585a
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:9
# f75e1667983e4baabdecbf3396d1bae1
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:10
# d60b1d7b782742fc9ba202b081792050
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:11
# d937b0a9ba49456ebe0cdb14820b90e4
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:23
# d46fbc2893c546d2be824ffac2846ec3
msgid "|chef_shell rb|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config_rb.rst:5
# 77cef3ec510e4eef89f01408c3d576cc
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config_rb.rst:13
# ee8aad1803e140989433fcabc419c89a
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:27
# 96163d8884d142b1b81cdb8302333967
msgid "Run as a |chef client_title|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_run_as_chef_client.rst:5
# e5b0fb139c2840e7914986bc72c8e060
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_run_as_chef_client.rst:7
# 8a45d1371c984df3b98da57081761204
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:31
# 50c84d86388544ff956a6878cec4a93e
msgid "Manage"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:5
# 5b06c7bc57b34cc591f5031846ca8c0c
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:7
# 468938f6f72b4feda8763d20cf9c28d6
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:13
# 76cc72065f4e41e9821a08480e6323f9
msgid "where:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:15
# fb4a80fd7ca54397a5cd1b8805bd28b0
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:16
# 6d7202351bcc4f6d959cda725dc3a1d0
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:17
# 39e8db8f6aac460fb4598c57c739c268
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:19
# 65bbafa8cafe4c239f11db2cbde0c89a
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:25
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:46
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:62
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:74
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:92
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:112
# 6a9314d4c5834aa0b5bb16a25ac51e90
# 184cba2b5811465086ec39c35e44cbd9
# 525b8edfe3754059abf369e6604f0d8b
# a965adf684014975a4e2e090c035097b
# 89d8439918e848928f340d58d146184e
# 97ac041176f34934ae1cedb52610f4ae
msgid "to return something similar to:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:40
# 66a8535a1ef04ec681ad1b5379cf86a6
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:56
# 6d70ddea5def460b88f6683bcecd2b2b
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:68
# 49d9ffad23444847974eb9e6bc42314b
msgid "or:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:80
# e4c49a6d480d4f1dadb967c92d7722a4
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:86
# b9d71d8fa11444a391e70a6a1641a7e6
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:105
# 8e816b2514804e0099c2ef831a4e718b
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:35
# 5f5762fc5aed44ee9d2610101829d474
msgid "Use Breakpoints"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_breakpoints.rst:5
# 813456d74fe54e748f19a87b77aeab52
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:39
# a56990835af64c9f99ab56fbb5784f6e
msgid "breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:4
# cb176aceb0a34a1ca9f16154d8bad5bb
msgid "Use the |resource breakpoint| resource to add breakpoints to recipes. Run the |chef client| in |chef shell| mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the |chef server|."
msgstr ""

#: ../source/chef_shell.rst:43
# 87bb37d47de5468781f54a1ab9e40225
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 7d71d7146a454903bd7d463246b9bc7c
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# c48b7f291037443fac1fcbec25080c6c
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# f35f5886ad804597a49fb88287687852
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:47
# f9e8147841c1488b81b65cca30bfa1b6
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 0a1a14827c8b4252993d34f11f0e98c5
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# acc6f5f6c26049988f31fd1386624ee6
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 0d7b87d4fafc4c5a974949245e69d094
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 3571696720fe4681b9484c964645d10e
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:51
# 46a974d1ee134a7f8a994de9e7234ddb
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# ecef7c6e829246f3b04a00d306b98bad
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:55
# 74b22136e333474f8c4a1f2d2a475d61
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# de7cee81d7534ccda1b205ead08aaacb
msgid "This resource has the following providers:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 016164e18614410d8d1c53ca0bf83cc5
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 35e291d4995346e989ae6e188b66d151
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 18314a4812804821963cdd64a4f0f681
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# dce4b19f26d2400a95f71ba59c92a2e3
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# d3e2bdee39f448a78d342386e85d5fa3
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 0279ca2682d94ceea60c2dcfc2435940
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:59
#: ../source/chef_shell.rst:83
# eb0d7e7b97d24bf7a1ddbff1d9b24710
# 9543f60f232441b3ba8401bfef7be2ac
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:60
# 1b858aaff450486689e07884b01896e1
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:62
# 34a2213752704c129507e009105ea7ec
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:66
# 12a4a088faf645d9b9ef76f2e8002ad3
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 34d5429586c94e479a800166e0542ff5
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:71
# bb67f6dfd0a7484e87e15878fefc3127
msgid "Step Through Run-list"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:5
# 24289f3f76664338a9c87716eae2834d
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:15
# c3cb25a60b6c4cfd8fc3f3a40b767cb8
msgid "and then run the |chef client|:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:26
# 3f44049387964e2a841e4fc5cd0b99e4
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:33
# d935e64e52d5414c9e1ec0d1b04611a6
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:40
# 89fcf0d5039e4461bec15155984ba5e3
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:61
# 8d9d517616a14038b903ed38bd3a5830
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:68
# b21575172ad74dedaae6b5aa9a8a737f
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:75
# 4565520d4bf4429aaa5f21f517d0ce6b
msgid "Debug Existing Recipe"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:5
# eb870add00e94c94a1f306e0481a687a
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:24
# 40c05de385ee4ed1957c6f42c4ab870f
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:33
# 4c97829031f9453a89c8b7536ded214d
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:41
# 6e52d7fe98d8436b9419d57ae16b546b
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:79
# ca701556c1de45c69ff17dd5dff43cb3
msgid "Advanced Debugging"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_advanced_debug.rst:5
# b0124f12b06849e2883bac2773142c0d
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_advanced_debug.rst:15
# e865555ce91047afbb42bc9eee78a7d2
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:84
# 422568506fec4291a169f3a97fad8393
msgid "The following examples show how to use |chef shell|."
msgstr ""

#: ../source/chef_shell.rst:87
# e3e4cc3f30e74fd7bb0021c6182397ac
msgid "\"Hello World\""
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:5
# 48f51fadf4924a6d88f84776b97a1e65
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:7
# 0b94a332b80a4896bd058936dc8a5da1
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:26
# 84519dffac6e4c218fb108d874dbd6c1
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:33
# e8fbda309a604344b8cbeef1c84f260d
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:66
# 25c7f17beefb4d69bacdbd645be4f7ec
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:76
# 283ecb55e1834edebccab599f00d8d69
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:85
# d54b200cbe8947a391631aed885dde27
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:93
# b3d6219f562642f687485a93ac44bc16
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:106
# 63c06ab254524315a2ec8afc12309ca2
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:91
# 37d452f5bccf41358cc63ccf980cb741
msgid "Get Specific Nodes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_get_specific_nodes.rst:5
# 20b00c1499e64833a187cb4292ebf9df
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_get_specific_nodes.rst:11
# 64cee8176e9e4763befc603380666926
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

