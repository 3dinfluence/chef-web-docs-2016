# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-05 22:37-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 363fb1f3ec674a23aa5e8a81ff7ee696
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# c4c70f66dfaa42afbfb0ec5335a6e561
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 0aaa2f5281534997906c0358d2b4b189
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 593f9032f73e4415ad302f0e3cd576e2
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# d15bbd9c276e476d9c62671ed40c00d9
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 23af419660b541fa9498434d5bd6a1e1
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 1615f413a30b468f99dbb9353c0f92c2
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# b96a3c31421146ba97753a9a7dd5732a
# b1466d47eea142fd8fb21c1dae3490dc
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# e09fb76b4138479cbc2d6d0ed965af29
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 729cee0b24b94f5aa19b751582cb2377
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# f8f00d17d56c41618aa8d7343d31e001
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 1fe2dc88ef914cd5b9550c00d8fb6f1f
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 9174cba9519641b58d778c72762d2c19
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 3f2a397897fc432f9c4e3c2123f5db28
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# a8fd8286a915414c85f7660c39cdc8c3
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 7c38c5e197174721a5251354a7981d01
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 804c2e89f3de41e191deae3ca05baa67
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 87610580bb584268bc462a64d82c1bac
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 4a5f42f4ef4f473caf9c6bd1273da886
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 35423b3e16d343319097bf06e3befc51
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 1f783194a6cf4130afa807ae0b7322cf
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 846662081fa9407386b5f2f47a154ac4
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 30c2bcdd18784abcb16eb5af14cb1916
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 092eb8cd71774fa5b398359ac2ff0472
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 313acfe9fa37459f993ff3cf79d22067
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 90279195bff044a6b2aefdcb4bf120c2
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# c5dc9349eeb143669bd75e6a4d4e6975
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 65faae77078743b1bc8564ce506521c6
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 36618247ce8f44e581721952058f150f
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 07109d50c1a2477183272e2f7372baf2
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 9b22b52154cb425182bde8d7c9360fc1
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 143610a6bd574972a9b852e190a49033
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# 2acac60245d140718311b70e251f28a7
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 58e06895595f46e0925d39f76bb706fa
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# e9316b4a3af244f780a967ee1d8b28e6
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# b7260fe365a142b5998072b2292e5692
# dfeb933cb5944e55ada8d8404b20df53
# 3c5701c9398d4a31bf9878c3b2cc1db1
# 73bfacb8a65d467bb64983430898aaa4
# 5f93bc7fd69548669585815c519ec3f2
# 4cc9872df81a4243b20b36d80bc9245a
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 5ba57d4f4fce45f8bd111a1e15ea423c
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 731aead8a36148b7a89e137d7e6322c6
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 7dfc2f1af54e4d209ed6c08517cb719d
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 9f0c1e9ea7524f07a86c053a9956d1de
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 5a7f652bc4454ccca6830ea05a0d5d85
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 160cb47f122340ea9c2f134995020bb5
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# dd9612e9dea34f5680c993fb5f05e1da
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 1ad89994efe743bd8f20183376b066a1
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# b2820c9151e14bbe9039ca2a933667c9
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 2b6d5cabd6ee41f3bf0f47a3847d82e6
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 5df291f5da4547fe9f6b47349f1f478f
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 363ae4da085f4ff896814e1ff6d32fda
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# e727e7cdf4e9485cbdf6df3fcd973b25
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 7e3fdbde23424f7aaac1cdbbf4ca3fd8
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 4ba5b9ee52054a108187cd27f400e87b
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 8204636cd5a0406fa46778a570e90ca2
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# a5dd99bd56504b3e8b0c7ed352313f0e
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 400aed499d9b429b98dc00e3e6c534f9
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# b97dd0ddae3849b5b310fb7de35385eb
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 1edfe81eabda4d8eae923038bfc4089b
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 4d7737d95de04ff8a18ffd2df620657a
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 17253cee447c4e56976b8cd536eacf76
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 5b5c58dec51943c2b63146959782b6bf
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# a740e222ebb14ce8a700f347a6de75c7
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 429f89efb1734e96baae15c80bc7f05c
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 41e653518773490e8fa4ae65a4b846e1
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# a1ae58af78b94a5b9266155dcc8c64c6
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 781303a9399a4f3aa03dafa589374afd
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# e4b95d7e98b7455b982930b9aabe2123
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# b2611d70062e4e0ca0f050a4f5262cfe
# 6c772a7c6d8c4c6dbfd9f77e60dcd5b4
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# efbe7459e88d4f36a8fb07ad408e6418
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 0c773a7c17534833844050b5430a18b7
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 6dd4b64b14ce493fa071548231321620
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 7bca58ed06bb403da697253f1cac2247
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# c64cef116b9e45309da471748f9569f0
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 96185329e9104e21843a77110657c35d
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 395ea5a9f9b14eb9ae951510927682be
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# f204852a5dc545a8b1351b493c0f6c3c
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# cb4d806b21b44f209bac6b9d69aae955
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# dc693b87b033490ead460a5c79985ae0
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# bb7aa19829e145b8bdf7ba813a64df6a
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 066f78955273443899e675ad153f5389
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# d4546c9353864243b8bbeeda761c62c5
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# e14af37aec6a4be7a5c2ce0ca4937663
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 21bfa0a1e0444fb5ac2acafd897f7549
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 2c992ed49882452eb60924cbb342d0a8
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 46582e916a404b998bc8670dcd2b23d8
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 66dca258357c49ef96433c44c023b255
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# c02fba3a969c41cc985af9673dc38744
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 7bb9c881071c4edfb3e07f2bec482441
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# dd75df2a7a8f40f29757100a120b8fd1
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# b16cce67644440359837b118f452be9d
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 2a732660b7c84f368d62b9fb0804424e
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 8893bf9bf80e4c71a8c8e345c424ac98
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# baf492e2130149f6b50d226039504b17
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 586f917c351346b98e30967d0cad5fa5
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 82933002e4b7498fb4e343a735de5a35
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 55381552651d4e7eb4bc97f78c099685
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 5267c656d4b54ab5be78b5e815378ec8
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 62d5e5d507874e42b4ffbf13a9d70dd5
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 559b88c803774930a453211d670d2f29
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 7fe42bb4a4ee4ce4a96e171d016a2c36
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 0b0fcea393204c8a8db447cd89dad1d7
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 79834019c8f043bfa26335429fa7e512
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 144a7a4ad1cd437eab6346c32d33e632
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 8f567f4ed32b47baa45065ae01080d5f
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

