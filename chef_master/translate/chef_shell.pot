# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-22 15:09\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 93d7a4d7b4d342d6b0c6bbb7377fe98a
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 81d9280f92aa4725802777b0f2e53838
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# f0e93739bf0840a69b0a4bb6829c1c37
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 21ac4cb29b7b4ce9b74f6534e46858ec
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 40b67fa1f044456c9f2141cc6ad4cee8
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 24a2fb876b224b26a5ca989686d4bb40
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 09acb988a2644d1eada9747754bca2fb
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 2e054d043b0a40f59b187cc1b5ff27cb
# e512522cab4c4581ad2313d2248db27f
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# d9a09f16ebd94726878eddc4bb8d0a38
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 211b7eca16f645689974a9d94d63b9f9
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# ddc5482a15ba4e9cb8c1c1b1a49d6cf8
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 40fe4226bc454ca081dc8fd2e682a970
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# ab29d43e44ec43ce8c31990108492b54
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 7731577b34c64f3886e82072f72fabea
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 526a931b18c248569e5272f5d82361d3
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# ac35c9ee9bb449d2ad63ad35f506fb99
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 82640e0dbeaf4436930ce8cd0ce312ee
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 57d563e891fa4807bf81de865892055b
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 2ec1d15b322e43b8a6e48563632eaf01
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# d45f875346404dfaa4ee0efd0aa9abc5
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 2cd12f06c132486491bc92ff975e397a
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 64a7a836b56b45a886fa90c22d231171
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 05817fc64d3f4ad7bab423c96902773b
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 7963a331fe654a94ad4003a3dacf70b2
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# ddaceb05fa4f4577aeefa8786714f655
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 182e4961af434064929ab37234c33460
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 1330374d01af410da855e21f66b1feec
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 187102fb44eb4c6baf5f172e5ab3387c
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# adc9fbece2914d80a7d07abb185ddefd
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# ff8748b64c34456eb6d59cdde18c4fea
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 0300135d16344030896695bfac2314a7
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 30e97a88cdfd4daca2b600c1d5914f07
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# cec5ec5ba82b4f4a80f18ffb132530db
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 2ef1a0c4f5564786a33415a61a387763
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# dd1d2eaef13b446f8b5229f53a690e3e
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 1347a3a1503a45e7a8cb2acc9fb28260
# b1bc0002fe9043a2b59c74699f440f23
# 821f103473254518a6d3ca77641c1a62
# a0a6a0e0d08f497dae120d6c62b9a13d
# 570fd5d75038405e8a3c4508ad4136b2
# 65af41af0e44458c914332ed55d2d3af
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# ecf728d1b3f74495a257a4a14799dd61
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 8d098fb9acff4973812a8a7d3b259c4d
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 8df14d150ef24b4a9af369a18d27bf58
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# c34f0f776e3f47ee9b8a2e168023de5f
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# ea952845f9b44ddda6c1d3d9bfdc121a
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 11445e54d3b8454db85ec17b077a473d
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# a8280180906a48d39adf0db17c927f22
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 7e2aba0c428d4f228184cb04e2447cac
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# e01503de6ea849dab88b4ef6aa334a9a
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 7aa3da046bfb4335a6fb2dbc3ded2369
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 5572a6dd017b417c8593bafbb688ffeb
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 77544ea706b5453d89f13822d8daea1f
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 5a4bd0a815cb4be0a35436a6d3b6d2ea
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 23868c225b744557be612de5d33a7559
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# b03df4770479467c828566a48c70cc7a
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 33de888495c7492bb0a092ad2a67648e
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 69b638d3ad524a729db3a1bbceb02e59
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 51c0320af1144509b6325f4c1cbc64b6
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 0611a15ef7b64408a32fc7d575084fb6
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# af2b80ddf94e4066b115c6a033c5b0af
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 9c1bdd0f8ad14027812245bc9529e269
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# e43e9fd65337437e9cb7a3a95414ce80
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 451fa229f9884539ba8dacc69214183c
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 0aab0f0053d0406f93e4e003d6695859
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# c73705bd96f44ad7a91a151280ba7769
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 1d429a03db1a4784b4987bff5ce7c2f7
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# e922cd64aac9443f84b72007dbd73ac3
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 00632e32f0eb421ab72c2ba72aacbd50
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# cc0aca3e6fb442b988b81d8815e13bc9
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 24ce3e09d50c48a3bb213f036079649b
# d2d15a234d004b59a037892b24f41eb3
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 10adb9b214944dbe95d1a34fa1af5c6c
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# f95e8d8e89dd4b25909a05fb5f308408
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 4c8ddcdb94fe43c9934fb8df12fbc20d
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# f1e92b7d3bf440ddadbf42852ef172cc
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 55c90c63b3954098b12b5c78143a71f3
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 83adf4703fbc4f03aa5b04ba06bd361f
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# bc3f4e5938154fd780f9521d401c307a
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# e0da869658b8460f9de371944aa555fc
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# a82b45fb17ae4437b91aa8bb3813bdc9
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 94bda51484c748f985f8010e392fcd88
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 8e0c93f82ea648b19a2caddee795bce3
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 4c30c901da1441448e71747b27022a8b
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# bf7679f089f54bbd9bc84ef627e4e1e4
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 52368515bf914e7f99acec1279ecc578
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# c4c2f65703724afc9deb12521d2b962e
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 3307016e3dad471cbb4a002aeea3f420
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# a52b229827a34e36ac2b8d61a6b6c732
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 160ebad6edb4454ea048efbe77665ede
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 183c49a310d848a38cc8312c5d0db640
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# ec4cbb4057b74b3cbef3702292a94a92
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 74c9535488544a2ba0de685551c2223b
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 0bdb978d5af547bf8bb662eb3bcddc20
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# fbd189a649404996aa6920bc66353113
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# e6c3a2e6563f4cc389abd556a3f96d43
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 213d02ec20b54dd3b7e5d0c90c608076
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# d71aa722b3bb405bb072ff95fc512f32
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# cb45eafe2b6a4e7eb5644820a15d3748
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# bcbceb99ddb84f49a2ba4ea4af969f58
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# a25eca2fcd354a08a53622df4de0e4f8
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 16d774284ec94fb3b1d81ecc3b41fc5a
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 2844dec8887540469e0f1145e97c1b92
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# f2734e9031b74a45ac013841b86e0552
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# dc5892dc9547428997c36c8af993a624
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 9d1b0f82220b4dc6a1a99274f7c5046d
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# eb46cfb2e26a461fb95874bb5a6bcce6
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# afc6a9c1890e47c4b2a294a1db80d7a5
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

