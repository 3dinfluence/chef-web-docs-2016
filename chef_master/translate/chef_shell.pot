# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-16 13:47\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# c0e5ba08a37e41cf9cbf533427d881a0
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# f8548a409844453d97d09a56c7e76d57
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 07a20d93db53453f860f65dd6dbca609
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 220fec17db2941aeb4374253ee975395
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 18a3e13aab5c4b869e0b282e5136219e
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 2e8ad8d1ab1c4721b0969447e82f68d3
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 9b8f6ebd29e9494bb7f79beffd164ddd
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 1be1d4b5532845d8908dbb3b8c13dde4
# ad55ddc358164001a92ff643fa9a4d22
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 2ae764f77b384311ae416926e3eb4c9b
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# db880d83f4314514a928a2e42814e9d9
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# e69d7ba0003f4dd5a312fb7038c26a3d
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 30228d3e59c84dd8901d43a67cd2d912
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# e2dd3f7314f644939567209f06c8ff5b
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 5b944bf4bcdc48aeb2cf7a0f1f541fa1
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 4dc6215103a94d05b9d7ea8dd602a900
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# af405227e420418b87d111b1e1ed1d62
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# dbe37f47749d474e9b22e27fd19daf83
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 42e75ae777194c9a9d371f8086aeda70
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# b4d34a9be54e4e2ba17f9a8aab8cb8d5
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 6fdf9f7ffb3d48329aedd9d405e62060
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# eaa928f298ed48f3971141d6cfd429ff
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 57fcc7ed008248df9e337aba9324e4eb
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# d192fc51ba5e4009b5b894058bad8522
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# cf5a925e610b42bfb174aab286487079
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# b823524a2f0d4b199b2c51aeaefa0ecb
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# ba8f22567d94435c8e7bb61b2dbaae63
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# de9ec3222e4f4208b8705318bf732e59
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 5199651d351c49d996a08d2cdbee01c0
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 1c0c4fdaced74257b99b6e6b4f8bc0ef
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 3104fcca7a4747b3824bc1bd8be3bbca
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 85e58522d69846a49417beee620fafc4
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 8148b38ac0154eb287ea9f1620184bd6
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# f0f92debcdbd400db4262ca1eeb4e4c6
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 12ec06806904469493dfe205df030fb8
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 88dc118d729044d08485eb696f4999b9
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 14bda68be7964bff8db9dfb3c181a182
# 1073628eb9964db4a71b21b549841971
# 6dadbf61e0804debb7a5d4a3651537d1
# 1dd27319b26a41cb80db98999a5a9b4a
# 2a79f26da6d648f1810c561bf38fab52
# d017cdfbaa104c0bba9463dc0f7bcf19
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# fa8b4aa257a548ac92f0f45a517a0e3c
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 0ff6b784acf848809f936fc098cefa6f
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 9ae17bcffb764495ad5ae5acc44b0ca6
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 60e15e5c4b8a4358b445156f35c14bdd
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# fdca39163c924e23baaeabb01484a1a6
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# e1f97bf3ca4c444abfdd46d123c2a0a6
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 94df1d330c6448d89a007c552c636e39
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 60f88e8690be4b18851af9f2bf6af23c
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# a1bccb9680174e64b7e07c8ecf4ddd81
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 49f546af6cd243059ec8f81472e18b83
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 1a4cc5abb9554720b07cea49b7e120b5
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# b47a405b0e7f4aad95e08555532e70e7
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# ef4f5997085e494a946de0cb1aaeda50
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 911d5fc5325e4c9a97c382dd6292a8ec
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 751e6731da1644c6afc72117084eb2dc
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 29a42936e42d4b8c9fcf899284cd92ad
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 7a119ae53b0b4b5d946d3db51035f197
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 92db6d5d78e84dfba8421237f065f760
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# cdb408a214fc40ce8155a6d67cfe06c9
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# ee50f36a67ac48ee982dfe418a5f60b3
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# ccca15184e5542f0a0183eb22e5a5706
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 824ef860cbc14b888c2566c3e15c3b09
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 540d6a5ee6c2417198433202108d2d6a
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 978f18c9230b4019a197c4d8e0d3c7b5
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 9defcfbd703f4922a4d9375bc3e6fcb8
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# ae284ca12c3445c6a0261f65e4c9b1b6
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 4d88f730ee6b4e5d83a7bfa9b91c4421
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# e57dd055516d4fb3963f9617fd161425
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 7ebc6959654e4662a12724b67c1b9371
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 553b61becf3e492bb61b10e67f072437
# d1b538c8336642ad86e82aa1cedc627a
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 9d9ce6ce95e64731858f5c0fb478d89c
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# c6f721189bb347f9a142f73767b48303
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# bc91a1881eb5433a9593495e307a29bb
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# ac9c2b336e8d487aa5479fe84e91a0da
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 27a697591de14377a1d65341c6e37c0f
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# c4ee0b765ce346c6b4b6ba56b35b3de0
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# ff41758078ba4e0d9865654d251ec7a6
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 84cbc9148fc54435b58c8e897d49e49a
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 72442b30faa94b23b0dcf037814b96f5
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 04cc10242c5749bab29d0e592b64559e
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# c870f6f7dcf34d26989c3df6b10b3d6c
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 95f71108466643fd92e284bff37878af
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# ba8b3c66d7884cf090865da5f12388e4
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 8016e130241b42aa9dd092d5fa19bc93
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 6c063d13fe06466e8eb8538221caf040
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# fcd852d0ecbd49efba79a421e735aaa7
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# cf3b3b95dc324dd1a941cd7ad617646b
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 0c400bf04bd54a819181a270a0d89079
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# e1d829ad80e544cdac1eedd0c008cd71
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 02c1f9e558cc435bb739fca25b8d65d2
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 5b1a83d490ff4530b152ba7940a1bac7
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 4f950679e1b541baba484706daa9340e
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# a8b84d1504604af2b782ee58d646ae6c
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 9239c1db5b504c6fab5e73bb942077a2
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 788a6ceb32f548c880697b3766285457
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# e03362d81c8a497a832caa2cb0b6d78e
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 1693793f426844fd90a9c20a5c41d61c
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 362ee8a17f594db1b442436a28e71682
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 2f17990965c0439888c07196a1a93aa5
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 16bf7ed0857244ce9b68fb1a3a6ff8ff
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# c0c78e47590e4374b56993051c15abd4
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 671b17bea01e4ef6be47001d17c5637f
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 5a2a9b22de124ec696af0b4197132a54
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 40b523b6381249bcb8d29e0765211a3c
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# e1f0ff753d364c369c2a7c892e35c7ca
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 962c87c5b28b4b05a07ba322b378d972
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

