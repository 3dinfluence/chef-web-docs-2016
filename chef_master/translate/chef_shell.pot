# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-05-14 13:18-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# efa5f67dd65b4a4f88e81eaf0918f1e6
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# aa18670e15664f929135dc39de2db96a
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# ab8a3209e9a9406da76bbc43ddcf3a48
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# f062da337d9c4c36ab112293acf2acd2
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 221b513175654337b1e4402ff8896c5f
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# bde895b40b8f421e8a4408caf165657d
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# f2418bd62521407d94f7507977b1ce36
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# cc4fe6ac54b14d64bc0678ac78928ec6
# f4f7ee5834774c36895c29ad9e3f3b81
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 1e1b41f13be5474593522acf5252e00d
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 43f25a52d80e4caa8dfaa4cc9cc8e965
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 39c13e5075544e8da4a1756878d399af
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 39048b6ebb48464fafca7cdee061bfbd
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# f8c0fac99d6942908fe346ee814d08e6
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# eec5afe7e9a64aff8be7b4fd2c8370cd
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 90a13e52d7ee425088fee82e61fb9928
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 2eceb12a9ab747cf8b633e403f55cec3
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 29b9dd8b962041f0afc0ce52a1e7ba33
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 6ddc3c4322bf4f3c943f7a475e7c34d3
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# e6b000d9b0aa40d99b14559dc4f0c223
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# a48875aee5ad484b874592e0b90df558
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 6d063186d71647bf88ce04b31ce7ad62
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# e64bdcd46f12449aaa858732cc50f448
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# fa525584659d4cfcbe7e8df15ee4112d
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# e9f2afb2c69348f6b98ad95cc7716178
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 76c5d04375794a6bb8726f39d9cce3cc
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 758cf4af4f7b428db9d53ae0a3bc61fb
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 860fcbc93b97430cb131fc5215783f57
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# cce491a8b48347509e5ee5f14598cdf7
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 40bc4591ecee44e99850efec130c5f77
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 6ddde9ca4db348dca574169e59b51a04
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# dc1a3be7780f4a5e836ca98f0a7361ae
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 82adf509d1c34b2a89889bf4061b7b55
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# fbab1c05d41a41f79123b1a6f6bd2968
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 6cad22cf8e6742e7bcd2b8bbf42a1a8d
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 6c22bdcc3aa04008bb37a32516e7a7f4
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 5e0607f33dcc4f5c9890645c3c2a52e6
# 7f5fdbd688f445e684c24ba589de815f
# 76212a9007f7434a8bdb3ffbb8c7b822
# 1a6f1731b76f4cb2af7e33d005e6c264
# c0232003ac3847a6a7830dc2efc2fe9e
# 0437aff014bf4d7eaaddb6c76703e91d
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 5ebe362fb83e4cc59efac187df5ad02f
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# c5923721da5c43ea85f52d728c1d43d0
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 132346c2d53d4dd182304d2a5c07308c
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 3c74574a66984971b76c18c5d02421b5
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# ab981076f4ba4fb8b22a853b7f43511b
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# fe23ac6a87db4ed3b440f0a1a652553b
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# bc52d077aed546828d08248131412a1a
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# dc1463b3ee0c4de8a43f81f57f405926
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 5e7361e550394e30b2d9d108881a2de5
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:4
# d1a73a6e0f4d41c681cc854ed342d0d6
msgid "Use the |resource breakpoint| resource to add breakpoints to recipes. Run the |chef client| in |chef shell| mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the |chef server|."
msgstr ""

#: ../source/chef_shell.rst:179
# 23ebb591338f4ec7b3dc3e552d709196
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# cce08b31e912452c961d7f45996e21d7
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 80fe811bff384286ab567bf767aa24b0
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 041f3cfcf8cf4fc4ab8d6452cba94fca
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# ca2872ea5ad745c5bf5b6857950c9e41
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# aba82e34c3904ce4ab9250a5b16c3e5b
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 0255431275af4726bac6fdb271a5c1b0
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# d0ee053b3fab45a49af71401bfb845b6
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# f6fdab8ad6dd424bb1c9605fd707c0e8
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# c868a1af15b54cd492997ed0d43dee85
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 0935876abc3a49be925e778fd3a2a1dc
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# f5e0ace9f9b845d682e5b8e9ce027fc7
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# d147e414099a4e7fb1e5bbcdb6cca78d
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# b0c042b46f94486790b2a37034cb52a7
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 1292910e91454c659ab35e0144207a94
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# e5791effa8cc42f692617df376012b3f
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 73023b31487241ab92a724235d03767a
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 36d74ebe3e184c3da7cc9b67cfac1efd
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# a0f7ea8086e04f298b8dc14150468d9c
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 56877fce22354b25a9b8b50c99c32e47
# d5e09a4b03bf4a5dad7a45e3f2790060
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 5283c6ed97114733abef9cc48c819279
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 451fd6f7980246ba868eb3750136a7c1
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# a72bef582879466180698c4a8a8d8707
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# a56b86827f64447bb4a96608d1ec133f
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 20f929109dda4a898d4e8e0ed9770a62
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# b3054915c6fc4d1a9d1e3a4ec05c6cc0
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# eb4d157ee29e4a62b95be62c7ec23f19
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 871f3e5efaf74393a794a299fdb8e5b9
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# d23c654858524ac1ae40255894c56d73
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# f895da5e00f04d078304a969574439a0
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# e6ed42ef81dd4e588d84c8c7ba9bbff9
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 008489a0acfd49338a348001b53dcdc0
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 1416f38d9c1d47e290a1fa40f665622f
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 18a75a0a1f00496ebe96568d393651ee
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# bc979a7272ea4b96892fdfd6d4145756
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 9d50573c460f45ec89595c901422315f
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# f536ad09b1994a9cbc5ce24d85f256ad
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# b1ff2254a9774668ad44802b59f51072
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 08d4657b77534b45bd42f1089fbefe15
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# d29db2aa797441cfa65f90f436b1e4df
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 3036383b9c4044dab8700f4a99015684
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 6244f08e02814e2e83288351371e7bfa
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 2b4757b12ac04d4fbc3c14c0decb48e3
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 580421ca6d8d40459999356287f98040
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 9ae5e0425fe94bba9d684305662e5dc1
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 5ccfd177d6724a98a71c2e543d5c5858
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 405bd5da44f74198a0e245ef64e5f1c6
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 3e95417d2da0470b9a88aed61a16e456
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# f29fa98d98bd4aa4866ef58933508e4a
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 271a8e01b452499aab7ab149738df764
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 0c77e715de8949fdbb365593a99024eb
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# f2a12a15f6cc4a6c829d398c15575f7f
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 139d6ea3f58d4be2b0c0bbd662ffc061
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 49a95c44259a4704b5c1839f39d919c5
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 1022f16bbaad4b99a460bbf38a145540
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 92a671f94bd94f74b69999df5f7480e5
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

