# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-31 17:02\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:33
# e63dcd41d3c34fcc8cbed5a9c8301a7c
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# b450aab85b0c4839a2f754484a04ef14
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# c947dc09bb9b418fb56c5f2c2a88a32a
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:37
# 360b31bacd624669beec2a6b033aee15
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:40
# bd84c8df57f74ceabc66b62040ab8e54
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# b0a5410e3b8c4a59952ad683192bc55f
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 7792e961d8764c5790c7355ed5c242ee
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 9176f8b7d2854d9dad7cb9a500866df0
# 794df7241c564430a9e644c47e127605
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 4b4345b4ed1d4e93a4bee691aefe4ffa
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 9201134b6bc44bb1a65879c33231b13f
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 154a615c1a3748388a7f7e68424b3ce0
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 6d11de81220d432b9184b3a9f3d3cd74
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# e9c999da99db47eb883cd8ff53d45a53
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 656c22cb4fdd4f1e8048820eb32aaffc
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:44
# 4871b9e861784f3faf650ed3f3765ae1
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:45
# 6e547a58650b451991b4b1e8b9459cc1
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:47
# faed80938d844987acbe14861adfa503
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:48
# 2164b3ca2bd84faab4382c3266bdf110
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:49
# 616fdfd8a9c744abbb474aca9efb8caa
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:50
# bb7901d5d1ad418f971e9744c5ba23d8
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:51
# 66acde36bb144759af53292319dfa14e
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:54
# 850bd8b131ac480b949ab2698c93d603
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:55
# c676f6cd02c0451ea3778da46422aaa6
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:63
# 22373f5ddf574fe9b23ff666f67754af
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:66
# 38a7cf7e61504e828898992235d4c54e
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:67
# 7d671ff59c97460daf1885efdef7b6d5
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:69
# 5d19429753de4cbdacec7e49a534b95f
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:76
# 37c8050f2575467a8591e9936e4c9da0
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:77
# d0439255de174629be3dfeb95b0daec2
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:79
# 659fa306dc56494a855ac03fb7044040
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:85
# 77613df6d69d44ebbd05fded5e217af8
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:87
# a199f17fe9a54531aa6c15f2c53072b0
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:88
# 5f7ab4f71a0849628e3cf6097936af93
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:89
# 852035f52e47494fa6ad041f6b9ea0ea
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:91
# 5cd88db18a204720aee3b847552843f9
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:97
#: ../source/chef_shell.rst:118
#: ../source/chef_shell.rst:134
#: ../source/chef_shell.rst:146
#: ../source/chef_shell.rst:164
#: ../source/chef_shell.rst:184
# 9607621904334d08a08dece01caa14b3
# 8634047fc0c741fab8e6cc0b477ee010
# d503985ca8d44954a645aa0ee1e4dfa8
# 0e2072fd3d64418aa4f125743b08703f
# 78465c36b59b421e8b65530d7c099f68
# 7346634e8b204841bdfbae1e501f2899
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:112
# a1b78fbecd74436399357d1ef6b8a97c
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:128
# 2be782446147482480e8b6c5298546a4
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:140
# 31c08542e5914ff6b2c6e5aae5eaf71a
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:152
# b6966475c6574461a87db5407c8184a4
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:158
# d251d3189c3245528f5b4f81445b32a4
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:177
# 466d7441003a428ebe22a2750997ad69
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:195
# 7ec3c34dbe114a76b8bc5abf4b8081e6
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:197
# b3e140f713d64d728b6982ee683b87f5
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:200
# 3f681c965e6b49dfb8a94dc665d7e3ff
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 7f4b267896a04e6f8bde871f52901bd1
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:204
# ec54f9c82ceb4cdab54df51397f32ef9
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 7776523e93904e3586d767495a18b448
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 0c8ad2a297b043a6be207465e9d8804c
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# aec323eefb854ecea46ae11a569201af
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:208
# b323621ba7554d4eb1a5217751210186
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# acbab83dff9d4572950680d147166436
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# e682b844061c48a8860db75bca7d3a20
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 5496808bb0a84da78e6ba3baa94fd533
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 88d9095f0d9045a9b2085827f3d02c8b
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:212
# e8bb47a48cc2466da6e609c2182962c1
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# adaed7f5017144c08b04942a50d0c47c
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:216
# 5aefa8199794436583a0f2ff96d6730b
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 12f2177a44224fcbb0ca3ef3ab1f8a3c
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 35ec83d1e1574cd6bfb5b2b3d44ef34f
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# dabe23e20a9c440099631545391823d2
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 200ed00b3757447d9f34d3ad396e6dda
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 5a2a1fa32d374c478a7e8101fa0a7be1
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 9116be2c71214f7c83b2eaaf2281299a
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 1ec895f8dc974229a90cae0ccad28e2b
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:220
#: ../source/chef_shell.rst:391
# 789ee1ba1c9349e098eea10303da2eb2
# fc95bf42735d4937b7028e2307ebef2f
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:221
# a832da5ad64646bbbc308787019098f6
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:223
# eb7ccf62df374aafb4e6b19785360bf6
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:227
# 4757fda0faf94bddaa533b80b73f5095
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 22eabbc8327a4e9ea60ddc63abb560cc
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:232
# 905579ec6a054dfcbe58b583e43f4ce7
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:233
# 4a7d8759297f48d88a0eeb24788cd2a6
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:243
# d1b5081af0634f95b8930a27c7ce071c
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:254
# f60675c56bf143508cb7d6106ef3d71e
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:261
# ceeb0473ed9d4f368ebdcc335514f609
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:268
# 19b6ff5d97e54fadab8a8b37c92baa82
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:289
# 054dafe4549c4b758a25d98a3bbd2dd1
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:296
# 7c832fbef5ac4b618b2766d896b35be9
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:313
# 823381cfe9ab4a7ba51bd48e9e97fa62
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:314
# 37a705c2524e4766b34ef0e57a7a93ad
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:333
# e6d85a56a5e74931bee6ec57e0ba9fd1
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:342
# d27238d6fa7d4e2ea6f8ca0e35d89a39
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:350
# acbeadbe43274ecc9edd883d032ded54
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:353
# 99b0dca428124fc6b00eff368065f8d3
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:354
# 7076f467c5414f3d9d4da9a41f2ca348
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:364
# e66803250db24963b8f20b2904a99c85
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:387
# 2fd8f57986264984be835b248db70ddb
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:388
# 8d264e846245471b91bee7e15ff587c5
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:392
# f43f05d7d7e14fa6ab0b5ecf924f59e6
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:395
# 95611f6fdb224ef6a6c5ed9f3e5ef6c2
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:396
# 7184a7a7ada24bacbfe136f142c15d06
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:398
# 54cac361a2c7469fb8c5508ed66fe887
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:417
# 195fe0263bd24618a6af079769d914b6
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:424
# aecd6908f1194ddf8a4c314a420eeee4
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:457
# ed0f9aec5bb94ec48fc6edf901c248ea
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:467
# 2d8b0fa983fd482ebdff5f5169c353af
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:476
# 697734e6868f4b4dac8a1e4299226d0b
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:484
# 248a33dd1b0940d696da172a96c74b2f
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:497
# 9ccf4199cf124c1e849708528071aba0
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:507
# 6476a0e5dd0549c9a1bebedda29d4275
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:508
# 454b4e0ff9ce468c951e9e24426d8e56
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:514
# da5ca25702f6410d8119dc94e3534e2e
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

