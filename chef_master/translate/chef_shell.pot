# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-06-20 12:06\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:34
# 9d18c5d836864956bdfec52d05f4ee83
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# a319c70f2f80495ab422d77b4f2947bf
msgid "|chef shell| is a recipe debugging tool for |chef| that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# a4066dc3d1b848a5afd62d247bd233f8
msgid "|chef shell| is the new name for |shef| as of |chef| 11.0.0. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases of |chef|."
msgstr ""

#: ../source/chef_shell.rst:39
# 6c74f2d6ce4f4d3abc5a74c03f4f2242
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# b80943ca5f304345bbde9e708985d8c4
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 5da8b5798197455bb3580c734f3de2cc
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 046ee2b834e9400884d9f84de5d22340
# 3df21441bde04ab3886fd04be7b8ac3f
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# d6b7606f2ed7498d890c30fe7c8e74bb
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 97874cafd5db43169af4feef3f758f3c
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# ba150fb5a4da497fbd64e69eede759f9
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 1b0a056b34704763a6728465f341b4e2
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# b4dd61511bce4a489f01715eb8182788
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# b54a3e1874944cc8927ca3e86c29b49e
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:43
#: ../source/chef_shell.rst:230
# cfd545419bdf4f619436252386a4acca
# 34451db8464c4aeea5e01d5ef98701b4
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# dea56ff52ae54e1c84f29759d5a19603
msgid "|resource desc breakpoint|"
msgstr ""

#: ../source/chef_shell.rst:47
# 6dd0352f98494c72a209bd57bc7c2596
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 231d4ad374c24b629d3d281d18540728
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 9ec03230563c46e69b9f393c15be1ab1
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# a5354823367645f5b1d6afb8d0e68284
msgid "``:break`` will tell |chef| to stop running a recipe at this point when |chef| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:51
# 4663d58982db412ea635f6cd75292067
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# f7ef5f5153de4923ac252fb5190080e3
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# fc4d8d04b19a4812a062b38df42ac179
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# c329b56cc27346d0be0e9d71853c9557
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# b287335b0a2b4e9a94fe4dffe6d77f96
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:55
# d59fb9acffdf40538c8039ed74614690
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 0bd797e43a974ac8b9b2a5253f9e5549
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:59
# e96ba11eb37b4df5a3038515e1b9a526
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 2fc8b8e90b9940de94fc6e32c48c2306
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 9a3424af25e24d7cba6230c6b6d68d0e
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 4519c44be96f49a8af9cb7c72c800cc1
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# e5228b8176de436c8209500cfc6cb601
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# ee16f45ed1664f80adcdbe3cd461a3ae
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 2f03020a2dbd4589bf0b683ca23ca276
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 5998694381dd4334bec1a792cfeb3b57
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:63
#: ../source/chef_shell.rst:406
# 7da439065e3f453fb326f366bc3636de
# 9aa6bf3ea89b42138a56efc2c00a0ba1
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:64
# 04ffe3089b3244c4be1aec60e7977bda
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:66
# b5195710ea8b4598988247de9424b620
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:70
# 6d16df2be27644338646a6829ba4407d
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 4e0b4f0a455a46319a375ac42bb98c48
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:75
# 17e1948cbf4b4a55a12bb1d9964cb1ec
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:76
# 8f007dc4eb474f3d8f529eac7377f39e
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:78
# c205efa424d64968b5639f53f5097b41
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:79
# c1ce9313e3fa4380ba29ca52edbf96e9
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, |chef| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:80
# ba69eb23129b4e39878aa3596629d31b
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:81
# 05c57feb773a4f4cb717fa860a7c7c94
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:82
# 31f39713e30f48ddbbc2c0323dad1c20
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:85
# e3bc84277f4c491fb3e089a4fe28c91a
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:86
# c75d3ad0e5d04abba258778a98d9e974
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:94
# e3cf94e1d4f0430c85c3a47ef126824b
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:97
# 0482769453704bda94e7d4f96c77ae26
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:98
# 3f5a2b84021242b1978500c19da5f156
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:100
# 7e1e476f810b4051a6e9767748a8d7c5
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:107
# 4959f62144004ff8926a93b378feb7f0
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:108
# ce4c15c92db348ecb8a6e3de07ff8e20
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:110
# 8efaaf7c8b814705acdc698f6a143ef4
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:116
# 8d22b53bc0f24277b0f4d356551bd464
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:118
# d931b257a7a34b83836fc86393a61619
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:119
# 2f44af66d38e45eb892ee66d08644aa3
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:120
# 54939661e485444ea8eabfbf9142f6c3
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:122
# cd9f2929d29c450cae08977cdd0c1817
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:128
#: ../source/chef_shell.rst:149
#: ../source/chef_shell.rst:165
#: ../source/chef_shell.rst:177
#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:215
# e05b3becc5064ce391b829d6be23351f
# 7684e256a1044e6fa9378326517c512e
# 17301eaabacb4b9b8ccfff9227b6fb16
# 69096c8f0bcc4ab29e1b0a91481e2b5b
# b1dbb4ae78c04884a625dc4a789f3cc2
# d9bd4032340d411ab2b4151b22fb74be
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:143
# 77f9cc27c2bd47c491345817186ca2c0
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:159
# 8bdfd48075bb475fb00f43253a322da2
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:171
# a1a7a977833d43529a664c2064500b98
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:183
# c806c28f9547423f85c2b1dbf4c329e1
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:189
# 1073d58e5b9e4bb492f89447477dc6e7
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:208
# 4f22ee4d76584999aeaae0b03e2ecd0d
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:226
# e60fa544e1914ef6b65a2abbb0f490e5
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:227
# c9cacd7705524cbd92c9244fbeef4bf3
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:231
# bacba0ff306441848f313ce45c5c93f9
msgid "A breakpoint is implemented in the same way as any |chef| resource. The |resource breakpoint| resource does not have any attributes. Its default action is ``:break``. When this action is placed in a recipe, |chef| will determine if it is being run in |chef shell| mode, and then if it is running in |chef shell| mode, the |chef| run is paused. (When |chef| is running as the |chef client| or as |chef solo|, the ``:break`` action is ignored.)"
msgstr ""

#: ../source/chef_shell.rst:235
# 66b4426c2bf44f9e8aed711ce8bf544e
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:236
# 53892ee2f8444936bd30dcf429355def
msgid "To explore how using the |resource breakpoint| to manually step through a |chef| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:246
# f6f00bd7ae30429e8d9993e8ecd35d5f
msgid "and then run |chef|:"
msgstr ""

#: ../source/chef_shell.rst:257
# 04e51c9d9d9748c78ca948ae31d2bf60
msgid "|chef| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. |chef| attempted to name the breakpoint after its position in the source file, but |chef| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef| run:"
msgstr ""

#: ../source/chef_shell.rst:264
# f54d8ce3ab2249e48eebd605ba566002
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:271
# 2d29ab2f4e804cd5966bf94945834271
msgid "The |chef| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:292
# a6c9ce65e3484f12ac94c56ab5685b7a
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, |chef| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:299
# 169cbc4f8528472f9124c1c3438ed310
msgid "Rewind, and then resume the |chef| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:316
# 6d796e14ec2c4051b2ae19b8ca3be8ad
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:317
# 837c048e08154a6eb37f1d1686f84973
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:336
# 61321360f1c742579435152ff15c9556
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:345
# 6c395bf1b047401588e1b9f000ebd993
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:353
# 9b66859178684d869165ad72acb0eb53
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:356
# 5a9f2f9604694959bc047812d2608482
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:357
# 0c1f57de56ec4f88a2d8fbd070a172b8
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:367
# 7c8bf0605e45444d8e88e44dadd6dba7
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:402
# 34f225246a1646ee9eeb3382f2afce1e
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:403
# 775ac78e85824a1bbc640a3c3c8f40bc
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:407
# c804d299efd94c8893746a2b2ed87c84
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:410
# a0af8def07a743c082c96c2739cc4e07
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:411
# e50535919b944b86bf5ab3ca78fbaeac
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the -s or -z command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:413
# f33cacb9e3c1402aa84552e3b3edbdf8
msgid "When |chef| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When |chef| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:432
# 80d3d5f58e2a47a39420df25156961f8
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:439
# 1e45bdf84c09469eb155e8b1435b1902
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:472
# c23360b749da465094bbd153afb2b741
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:482
# 6acc8225459b46d49ddaab68c4d91937
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:491
# 8e949e6ed5974c01b17263e7a6c5e56b
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:499
# 83dbfee27fe34e3e88997da4a339cfd4
msgid "Now, run |chef| again:"
msgstr ""

#: ../source/chef_shell.rst:512
# c4731b49b88f4e64bfba4f9d4d258fbc
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, |chef| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:522
# 0fc136a7850b44f08e39c60695b1717e
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:523
# 43e255317550467ab1a9f3477a756e76
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:529
# bdb4ddbf875f43c89600d987b053600d
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

