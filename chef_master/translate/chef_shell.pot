# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-31 13:34\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# d65942b8f68548e2bb68bdc075c75942
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# c5535e8db7144b2ab5d88bdadf1330f8
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# cf8f1d0f367e4af9a6514647ff58c2d9
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 8088f5782c7f42ee910336aeceadda90
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 930e8bd6992047ea99316890cd426ce6
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 91fbb2a662494ba3930eb9daa7cf18d4
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 98a1f949398446388c0db0e0016b63d5
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 2e9138bd30864bdc85a3c23eecd5b2b7
# 52971f688c2d4f2da8db0c482f03c8a5
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 87841cd63645494a9c65a7ef2fc3ad15
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 8135dbb8cfaf42eb83c8a14b5005aa1b
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 97a0aedb36ce452aba642fe0940524e6
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 4ec0adb0a3f347c8a5e4272129e41197
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# ed1a761d1b284a41b17b9b6a046bc196
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# a45840c13c684ad09c00e003f4d8332c
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 6f70e34437a74fe68a2d38197ed8c091
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# f405ceed85634309b20fbe6cfc7d1e84
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 5def893e940443bbb4cff3395d474514
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 3a18a3270be44050a5463e135e932eb7
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 9411c005fa6e44d68966d9538ff2f179
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 77d810db198d49629fc5fcf59a94ae56
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# c31f474e5ff24c71a748a31d1881c5b6
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 6b7091bd59ec49abad0e2aa19dfbb556
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 987ec30c09fa4bc2909680ee0989c296
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# d4cb98886591441bba08968a0b2c74d4
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 7318b1e29cc447498a8fd7c52a7b2e5c
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 9f253b41144941f0970d3d327ab77a8d
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 9b7469fe10a14f0994f8dd06abba9fcb
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# d5bce879d01e40dfa6bcca0d5cce3d42
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# f4badc51829f4b5d8a20ef3b08c6fc48
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# f3aa37df74784999bf863d146ec22275
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 7cbccf4d1dd146a18ac90a1fa02c0b59
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# ede32d2f287e4c58b0e138fffabd30fe
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# c177f5e3071c401598d9f6ca968e470a
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# fe8e2836d2734b33b9c4d3e3ea44ae06
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 2b9c39b915ce45868d5a3a86f8635d43
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 74f5c6f6d63a4570b17328f7ef62c234
# f561ec39fabc4a1aaaec23607af73085
# 0d56ca9f0b2148c6821a637f3ae20676
# c32b577f1d694e3f9ba9342a6a88ecb0
# b8c36e3f43b74f4788625c363ff66762
# 2d44017fac434ec9819c29fabf327636
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# f27094bd0f2440c28ab78445aab93000
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# d158c0a46a6b46c885b0e3cc542ec445
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# eaa1cd3e7238430ebaaa34ea30a24418
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# c73e5ad21b8b4760b32c07a49ace0cbd
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 054c99f4408744daa34e9fe0bf58831c
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# e11cd36beb1b45698f0783fb204147bf
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# b8b461f9397849a78c520a19dd180d61
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 57eb48e33c0c48ecafcc375de4f65662
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# ec6a0a7bc9374b9593b3e03609a60f6f
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 84bcfe0289214139a10a3e9296250f6c
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 9621ec242ac049ed95b598b07fddfafa
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 6484ed9ad58c41d6aa7924c59a239a2a
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 8e1db13ff75c461eb831da75df8dd0da
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# a41db5026d9d4c0e8eec264de4e8a081
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 3b58def18e854ce49cfada103205a7a9
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 2a84da73102440b9a9e9ca44d1e10592
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 051e2df2bbd54397b5a463f566aec126
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# dde7c1b16eae4256892f7ab1cbc24f10
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# fed8afa5f27e44e39a78718a57599b46
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 0aa038b8ac584f96ac82aaae61b461c9
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 8acb3122d66949e09a8b77bf3aef7f81
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 6ffb8f143ecd4260a364cc87a3831c6b
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# ee16f878f76f42acb2b8354df3954f7f
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# d0702b46299448a6b54f56153052b700
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 0ad8a961c87a445f9d7d37260f4e52f2
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 6c290338d5c04187b9d17bfbf1eee2d5
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 80dd41b07cfd459b977218e03ad8967e
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 4a7a2f63a5ec423ab72599f2d54632b0
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# f18e17e0c0434577958693e942d57257
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 254b1102a2c34770979b0b7251effce7
# 5b985d745715417aa4faa2f30f693b0b
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# b2f17c602e044ae38cf2a888c67019fe
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 6187547406174e4d97e9ece724cc1e3b
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 7b98a2a71bfd43f6ad87080b42b9d933
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 5b093bfc060546679567bf9dfdc58bd7
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 4bb913e2936141358bf110a2a2263a35
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# e1edb8e3f20741ab920272134600eaa3
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 05a12a7558604df0ae9f1d74fa4077fa
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# f22a95670bd54f2288d0f8a04d09f28f
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 1b201d7101d6409f861c14bfd5da9f72
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 57e11faed72b4a2c8f12849ccd2fa728
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 0422ac933d514f8b92103d228207b8d1
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 9945d0f7f2874ce69ab82d3cda6343c4
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 89090a6780174ba98705ef4975264ce4
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# a01dd3c5045e480d9236de41aa7b3b1a
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 3301df147c81418f851bb50a9406e3e2
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 398e0727eab148b68adaf5c68fa9be73
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 9be995cb9b9547dda066b7deda97ef4a
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# d09d9d34f5ec4f2a9b491bae13bfe059
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 311dce6b98c94f1da2c7abff52fe74d6
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 1373ebbff5a842e4b8d3288dad55da3a
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 358e9b33931c44c7b093e884bb1b9572
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# c8aa00fffc8e4bdc8129bc54924a8e30
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# c573b2664f6c417390d15b6e7d4346ac
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# cdadc7b7fa4141a289664a36507ba4f1
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# d0d7fea8f9024f51b3a438d76dcd3459
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# f8be63a6658240bba65bf417fb69674a
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# c47b100545aa46969c1843890ce8df51
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 3c575b25d7a948daa1311ba486b5764e
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# df625480ffe44c23b5ae53220e35203e
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 3fbbba1b366d4d88a92707f01975a653
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# af30494cc8d245ef8d1c688e15ff4086
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# f1076a9193d744649c0c9c410fac9661
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 17f7b98e220b42e5b03ff3147b2dd4e6
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# f879f7bb81134560869aea73c352c993
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# eaef0beac2f64ec8b1d4ae3f68e103f4
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 152e51ffec3a4e2b8c31631c6c598e9b
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

