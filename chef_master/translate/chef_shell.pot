# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-07 21:21\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 4f1374b895ed4bdfbb71bec1b71cc9a8
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 64853bc1ff3745d69b41cff8e208f3dc
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 435fbdbd2bd3497d9f49768c82916462
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 1fed1afd0e474cc0989e81ce049fd8e1
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 9c66ddcff0104952b15c8be78a7e6f76
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# af8425907fa347ef85e7c7a306dd6bb0
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 40727fa5016c4ccaae4dc427458c20a7
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 01b0293bdd1c40afb3bfa1721b03fbea
# 536be5188cbc4d22a25fdcdf65c5940a
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 5efc0d7907554c3e888dada728545874
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 5da2b2a2c0ba4f33803eefb1e76fea78
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 7d01f29a640f4e1799275c07f54d56e1
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# b0532e4a9358406189a350dce9691b40
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 00d77abe90274242bc672ff7afc97311
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# b6679dd7665a4d179346cc3cfc3db6c9
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 360712093ee94af7933161de8ad08f0a
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# d288cf9ad871469097fd9392277fd943
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# cdcb55d0e22b4aa1a83cb07112f74f73
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 516bb414bdf6456e9a7800f35d8fd2ac
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 717132f2d2d8457db5f2ef15180c5bd5
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 5d86d11920ff4e8085da8947b6d2791f
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# cda1369dc0664e5eaf2ac65b6d6590be
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# f5aeff85a7fe452783df52f7de0c4047
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 6e0f59c5200f4498a9712b134a2617b3
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 1f8fcf3e39ee4c33aa8c24e98380d92c
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# d0c37dbbf9724bcaaf2ed0b290a0d966
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 03c52767713f49af9600c306e02223c0
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# eb813ce726fa4a50b4da5d2bad26c8ea
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 3f279898e3124b55bdf2f94b0862e16b
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# b72c18ec65c54bd5bc3c3730734382c2
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# cf68f2ed72fd4584a7801c944fe9e624
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 956fa4a9579a489c8f1a907a81da0b45
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# bbe08441a58044eb8fc9414101227693
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# 419dabed31eb4427bf3424a6c9a75734
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# ddea05d0a23d4fb1ae931f77549946d0
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 05e4e9f805cd499b99446273b0e5b29f
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# f6a0c354ed18408eb9b1dc207876363d
# b12f1ae5c736468a8c828676d7300e6f
# 349dbf757dd44a10932e812c0d2a6a02
# 0f57254d1e7a408892daedc6f3a380d2
# 3f136a3f90534b34920ff717aa61b4ed
# 76e3cdbf2ff341cd904b323df10f353f
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# ce6eb1c6c28849898a8f744901dd1946
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 02fc2685e2d64bddab06316688921698
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# ba84a547a8994facbed0cf3c9be928ca
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# e6e6fcb9b6cb47e68154df51fcf926ce
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# c1d3e228473a4396ac0f56bf5becfb0b
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# a9f24af9258a402aae159c568c8f337b
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 0d609d0e336545b2bf2c6527c6e54e19
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 58f060cfda4c4b56aa6bab6d96690d0d
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 2f7f1ee688d84af798b0e6087295ed2a
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# fae12dd0f730484e8d97f68ffbcd9280
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 87ef3a4a40924f28b3d827b3f39f512b
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 46db205be0d746ffa1c90b9a87a7736c
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# ace40d06e8bf442eb1a65de99412cd0b
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# aa93074280e64d1ebe80b11ae89aaca6
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 008d4e46132f4b91a3756562fbdd9cd7
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 1df51a1a610e4d1fbc4e0376f5ee045a
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 6434fbc0ac974c4baf2e500027a19596
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# e41e9f3480c043baaef9281b80a7f9eb
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 75efd0815ab24329a2c1b764b913957a
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# e1c0805912dd4e1fbe100810f2480ec5
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 66917b1444704f37a74a3f957d78d3cd
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# d23e8b74f78e4d209c19eee264446c54
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 19006e25a77d4a329ebbf76786975ad9
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 44f5e1e52d40411186fb7803f2c52369
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 3ea345e06112408bb6633ded03f55440
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 1494627adbbd4b1ca5bc2bf8f9677ed5
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# f40b0880bd6145c5b55f6a57327f330e
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 313a00eee271482d98309a3b35d4f6f1
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 6b084268ed484fff896a1e573649c8e4
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# eda36c44f5fe481690b201fc3ae12a1f
# 6a37d64a06bd4784adf8d7036e1dd696
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 0f1e149d0d13460fa6295d8350523fd0
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# ce5a5400773b4a7681cd3402d53cc87f
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 69e159d3467b423eb93d126248b52400
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 267141d0a2c6421fae69c26373840198
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# e199072d207f499b9a97c77806e0823a
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 76cc2fb0d8a24862824cb522b7e63e45
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# ea8bfc9bf9e44940a44476926d389b70
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# c58cd440642e4eb495aa3974171d67a5
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# f13db68073da4d49a373b1f972414e89
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# dca32fcf315b413ea3d466c06ccc2434
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# b3f7e852c3bf4626bd06a26fc0e65388
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# c1f0c9a3017b4beb99468ebfad4a4419
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 8d5b12a11fbd4217b229562a00e055d4
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 3f09e99c1eef45879090251c965a9020
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# aee039bd39b44664b7088e2f88ad2db5
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 3ea2348961504db5a17563019e36fc42
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 88a7294bee024f439126dce325fee60c
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# a84d6a4cb27c4a3eb14e7db1fa10141e
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 387b50b470fa45ae8fd2354f4e61f91d
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 127ec8e19fb645cbacccfba45b4113b7
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 79f523653bbf46ca8d27fd41eac1b5d0
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# da6b240c9cfa4c7fad299895ed164720
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 8a6d094fbed64de6aca8c7be64fefb4e
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# d3a84ca626534ec9ae9b3d01bec1dc8d
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 0c727e3b6ec7450d8cbf4500e2f71a22
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# e139cbb87b4c4f75b6d7887e5c1e97c9
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 9977242f0a674b0f91d941d062e68e60
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 8edc0c5fd7594d30bb6b66b7114fc4fa
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# da6f7d81f4424b4bb2c616de5727010d
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 0cc36ecd285641208c05649a18ea19b7
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 4165b62a46ab46a2b8d85bd322e8feaa
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# cbb6e30552bf4ce2bfcfee92a4b9d100
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# a024ae74181a450a8536c0f96c213fe9
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# e7ef347f26e54fb8ac44058f98f57250
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# aeefa615ff624b09901db2083adf74c7
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 7d11d6998dac4b7e820452ca663727a9
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

