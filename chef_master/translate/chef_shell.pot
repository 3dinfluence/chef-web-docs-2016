# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-03-23 21:03-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 8db023350b824dcabae7754bb0a3c29e
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# c74f7775872d4974b762cb98080db469
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 42dbdb3a5ea443cebb4cf648da3f3e64
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# da9d5517ab3f445183600bbe33827171
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 3190c0f74e05489d9a2ea6d2ae2be2a0
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 2512da7c3f224ab89e591d7c6ea21122
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 35948a29d02d4d19b8ed6911d9907e0d
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 647adc0fffb94efb82b9b48a91783496
# 5a168e002daf4207b0120f7c8ff1f1e1
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 41d3fd3b51cf4863a7cc2d77881d86e9
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# c4013df800c448aa94e3cb4d35713a7c
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 2da5bfbd8d1641c4a89eb5e94598d2fd
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 78f2ec76ce2f4dae8f6c2e5bcc3195e4
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# f2b9499aac11491e89fb876fd3e90239
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 10f27ce3b47d49a38d80b509e57cf08c
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 8ae8d48cc5d645a8abd659c3fdb80aae
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 75d5e99688ea433db41c3bdec1b064d8
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 513d84fde0da4d21a07050e1ebc555de
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 67eb2f2f4e4f46b198f417a74081f5a8
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 25b06f9854aa43b5b2032637cf69173d
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 253335f26d894408b01151648fe094f9
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# d43fb483b1e84e6ea24748f8605c80b1
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 83b9f1b47748400993bf6a4697b9ffde
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 9d46fc9ae36441cabfada6098eb6e040
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# bccdd842c0ad41af8ef7115887b2b5f1
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 460ee0ebdeec432f8f1397309843f1c7
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 519292eacc254acc9148a1042994eedc
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# f4cf11a443ad4490afb28ae508c18916
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 1896793abddf48cfb036c2a137177c0e
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# aec6a0e0ea564b41954f47dfd71ada08
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# ae3c40ba6fca448bad7a650f86048198
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 4f725740985f40fc92a2073675cf7ca9
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# ec4b8666cec64713b6541a3fe771a429
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# 1fba862b0a1445ac9b50559989964549
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# ac173170fa474271ab09189383cd65fd
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 951dfdfd43b84ed7acd42b67064957e4
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 0af99a4a2d7b433aa136fb8f4194334b
# 2fb3d68b71104fff96a6f7dc79b8cd05
# 5fdb4de9f279492baf6e48457a4a9faa
# 1b8de13bc46241a3a409a2e8de1bbeb6
# 721a0f58201045ea99fade3d7cc24820
# f394533a36de44c181a3541a0ccde427
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# cbabc2af6f7e477ab763d79e9a33ed1b
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 7fbf404e5f2a42bdbc1902132208f1ac
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 8e4269192b94497891481dc44bc37b6a
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 64d9a710e23c4a06a5f3690738556c03
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 1764c48267a54cc285da61f922952125
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# a6a41e7af280455c8097327219748699
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 79c3d3de067646a9b935681bc26ab7c5
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# a176d123082449cdb400c52a1f5f9f1e
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# efea458e85944f2da37e9410eb28ba61
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 052a4a7cbeb64c2c9747167fb578e9c8
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 411bfe83f4e9490ca5a004cef802b28a
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 1e1f6f25c81f482694e865d3a592bee3
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 70c128e4c9944cfdb7c25eb7b06562c0
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 66fc3643727f4c2c98a2dc85033515b2
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# c7b928c9b40248139b0846c145158732
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# f8e094a3bad84929938cd5c1dd7adf4a
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 8043275ef8aa4a1fbf1d3b595d2e17dc
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 0e9c2faac75d4179a864b310ab3c23e3
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# d22ff690d2f34a32b8c6fd6330e33138
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 9239232294ca4cfa8f83ca2ec63bc4df
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 9aa0a65b65d944debe0dd8a5d11cd770
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 9d1990e93ec84b7dab5d9289322a08ed
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# c1ebb6a1a6d14a06b75923c3de79e2fb
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 75f64148a03a4723b966f71f058704b3
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 36715722b5a14767a3d1b1d89a7c9aa1
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 16f91c08439e4c22be095faa7e749d68
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 7e73546cb668444fb5ca273400a230ea
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 57868d3cea1c422dbcc1bcd6fcaadf93
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# fe2d05d361e14b0eab09407312f90385
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 82a7d34454f942a4b1c9e54a2718cb3b
# 2825d5fcceb1455680eaec10390bd605
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 2cec2430f6fb4269b3ed218a98f48fe8
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# c4e7153c685d4f9fbb97489987063322
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 423ac93972874c17b41199a9caef7b9c
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 5cbecb12e9434c01822d6aee2fd2a8ce
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# a9401691e0e04a18a905f8d2aa6fb4c4
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 2b42c5b6da46418490fba2c0c5f2a787
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# b11024d04d904407a62ec44bd249acbc
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# ff93b39bc5284ae88f0056f346ab05e5
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# c631f45ac78d4731864f07e43dc01504
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# a047c44972524016aefd96250ae0d8c6
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 3095771c0c9f467da823d5475a4a41bc
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 7006e0e3e133440e9181e765862e836c
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# c5eb9de69e464ecab1dfd396473fd8f1
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 8f4e33acf20045c9ad9ef9be848b3119
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 9b3b8450b9db459a81b491cea6746a38
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 4fd0ad0bff5d4393bd18da7b1a399530
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 38ef2946e2674c7a97b1335656c222a3
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 04f0dcbab54442ffa3cd1c5e0a1ddde7
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# bbb1981785494949a54e6db330c22a5d
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 005dfdd4ceba4e699e625beb315de8cc
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# c22580ed6b284f919488c2579fe8d546
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# d3594275b6dc4a82a071a3ff5f0b3ed5
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 19ab1c99d928435891e12dde9832d170
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# aadeda96fc384620a767257440f06b2e
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 4d793f72826c4feb818a23bc00a71fb4
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 0f21298f5ff04235bdef87eec3166b93
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 9ce27470871c4701b0df2dd64f4f12ac
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# d5b6de8afa914bf7b2e89a664f99ad74
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 015d2f0136cd4f1aaeaf3ff8c1524fae
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 5ef4aed6e7304cf4b2bd2bbe9c28f49f
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 6feda84d5dd1424e8220e6131ea5c836
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 7bf03c2cc99a4cbdac1e11946c2f2d32
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 801ee17ed2be4d7392d39e5f46b790fb
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# bd7cf5e5c9db4f848ce5fae3cc8fd0e3
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# c02237d47bc04216bcb08cf68e204cef
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 54211ecf32f5448d91deb524f30872d4
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

