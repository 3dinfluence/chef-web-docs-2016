# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-07-25 18:13\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:34
# 7737174a9ecc4839b12f9d33d63e52cb
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 2f06fdb8841f497889ff881aa3220423
msgid "|chef shell| is a recipe debugging tool for |chef| that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 67bb9abd4a0b4e428c9730f6467eb24c
msgid "|chef shell| is the new name for |shef| as of |chef| 11.0.0. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases of |chef|."
msgstr ""

#: ../source/chef_shell.rst:39
# d6129e7c2ad54b84b8c62b54311e6b5f
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 8d058c68cab64adb9d3655a04090da94
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# ed6c1094f1504a9bae0a3d4511d4aa2e
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# dc6185430a864b2985b03158fbcc00fd
# 729c7fccd2234d01b55db5b6546af4d8
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# d3100c2430ec4fbab91c3ea45713d891
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 187d8720e27342d1b2306b2f8243fd3d
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 89c70ad2bff1443eb21524d2de779d63
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 5dd42495142d4b1a9b94886d954b95fb
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 2d4e59ad1ae04541b008572a69286915
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 4b62cb6d96104fc387084f45add35c87
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:43
#: ../source/chef_shell.rst:230
# ddefb270568145cea005038f6b48a318
# bf04ce8e1fbe497ba31b0dd47d57d4d0
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 524d33deeecf49b7a806642c3eae96b1
msgid "|resource desc breakpoint|"
msgstr ""

#: ../source/chef_shell.rst:47
# c5935bad98b7494daf0017588600c6e9
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 6a6940f172884e4c805f435671aa256e
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# b40d24f8f4224d4ca54f81c2f7939bf4
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# d72a3660b9604765b2b3638b20afc3ad
msgid "``:break`` will tell |chef| to stop running a recipe at this point when |chef| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:51
# 17aee7759b254f10af258ee086ff0892
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# e683a8c509e64b2da6cdb811fc38d03b
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 5bdff748acd1443c996e6cfebb288c2e
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 386b3241c8574c47874db4fc7806728c
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 605dcf1bff3745568d4713d6f54413e8
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:55
# f757485e6beb42c099c0b5c47458f4ab
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 0d39db14427d464faed94e2eaba0fec2
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:59
# 7dcf2cc4c29a4c69bb11b58e01766d05
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 480cda07887e464f8768107cf4af8a29
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# c3f6848782d343b686a5419a3552d06d
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 3c21757b384047088fa5d91429039972
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# a30e19fd1b0444bba8099d07a90b4511
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# d8b90821ccf14363be0c11aa2647632f
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 5bcbb647c62045208c1dc906d342d08c
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# d71e375a690b4ec4ad5d6e1a2c731c16
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:63
#: ../source/chef_shell.rst:406
# ce6b2ac8e07241f98ee0a0461a45ebf2
# 03a14c9909454b23b2eee64fa67cdc6d
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:64
# 70c167b660cd4c0aaecede80957b570b
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:66
# 56d2a8dc22bd494ca28fe55b9a650179
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:70
# 135f5f38328147479d6f2e20cb73c03c
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# ad02bc49ad54447ca64f2b9d45e0aa5e
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:75
# a5758e297c8744b488747e24cdf3750d
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:76
# 98e24329b0304ab1936497faceca1514
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:78
# 2d7dc3cd358d4c25aaa1bc8d408582af
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:79
# e146cd92d2ae4f6ba69692e4cf7fbcbd
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, |chef| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:80
# 2b8bc72b1bcb4719809da1f975a1154d
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:81
# 9bf79f28c55c431592428c933a7378bc
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:82
# dbf1dc7395ad49b98cdb2cf445ba112c
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:85
# 96e926732637413db242e50b1446565c
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:86
# e503a4945ce24f999bf2f7f23957c1f6
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:94
# a4c16d830f7a4f8aa91388c342584cf3
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:97
# 2149e4cc6191408eb08b7f11961ad502
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:98
# 11bd44fdbc684b5ea23b53a299f8b904
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:100
# 63bb3e356be54ed5b6b7dd359c3637bd
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:107
# c0c7461eab044ecebbb5a135fa4bbc17
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:108
# befda20498bc40419486586c61a9764d
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:110
# af47a73f2c214a62ad26cab596af7222
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:116
# 13a2a9c5f31646efa38c5eda7e2205a6
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:118
# ae929eef67b34c73a7a178ec9636c405
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:119
# 993a37597bb44ad795ad127c9e48d702
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:120
# fb7694229de748f184d866ae374135dc
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:122
# aab3c9cc211941f39ff1b03c1ce6491d
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:128
#: ../source/chef_shell.rst:149
#: ../source/chef_shell.rst:165
#: ../source/chef_shell.rst:177
#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:215
# a5bbf52c127d411e95a69ae1ddfffde8
# 1322d9426dff4142b3ad4ea9ca42ea50
# 62ab1ffba5354f2183bae81bc0919c15
# 4fbd70bf18754ef78a973a5c1de9129c
# f62efbe613f94b3681e20b0597ac638c
# 10e12d37cd2f4581904bab96bca72cb3
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:143
# c2a21d7c1419423a9595d9bee3600455
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:159
# 4e6f7c48868340678069c27984bb1843
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:171
# 42b7bfdc3e1e40968f6df2d2170d1ace
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:183
# 0059756f952b416dafdb24b865f576b3
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:189
# 5bde81ec963a47048a1b95b7a174b52f
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:208
# 9360db8f2966483eb16b2d810178f2e8
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:226
# 9ab295096eb744bca686b9001077cd50
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:227
# df3bc2488a244dd6878680f674e73424
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:231
# a91873a245564f01830c03af83051a2e
msgid "A breakpoint is implemented in the same way as any |chef| resource. The |resource breakpoint| resource does not have any attributes. Its default action is ``:break``. When this action is placed in a recipe, |chef| will determine if it is being run in |chef shell| mode, and then if it is running in |chef shell| mode, the |chef| run is paused. (When |chef| is running as the |chef client| or as |chef solo|, the ``:break`` action is ignored.)"
msgstr ""

#: ../source/chef_shell.rst:235
# 01da6acd268d4caeb3568329170c5d45
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:236
# 2223560d6d2444f0be2579196b8f36f3
msgid "To explore how using the |resource breakpoint| to manually step through a |chef| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:246
# 957e7d5e74434a7e91647280a6d3308c
msgid "and then run |chef|:"
msgstr ""

#: ../source/chef_shell.rst:257
# 647250c8af064570bac8c1f2b258ace5
msgid "|chef| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. |chef| attempted to name the breakpoint after its position in the source file, but |chef| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef| run:"
msgstr ""

#: ../source/chef_shell.rst:264
# d7aa2ea9ce7e497097d6ac594f33d494
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:271
# 1368b26fb0614b51848f01e4833fb67c
msgid "The |chef| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:292
# a9ebf3d3c882485d82138f12f01c4c5b
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, |chef| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:299
# 9a7d2012c9ce46329d582475f3e0e21b
msgid "Rewind, and then resume the |chef| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:316
# c48c9b623667491f88e7a570f7747265
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:317
# 1456ee9aa97e44a6a5606e6d20fce2ad
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:336
# aca55da5cafa45238104fe67f8eb085d
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:345
# e582935e851e42e8a175bbb0c4742496
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:353
# d7cebfe1c4384e5d9ee1e2dd4c9c7124
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:356
# a32e4560c7c742b399167863722f5fc8
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:357
# cf4dcdb0454041839a11a0a03056c162
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:367
# f879023c17e54bda881fe3ba2fa6e6cb
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:402
# fe3c6b4789294ec4bdcfcfa886f629ac
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:403
# f0defc73e3ed47279d2628e3fc45717d
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:407
# 2824941552de46c8b852ac838e5979c8
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:410
# 4d412d7a78a444f6b6a4aa0cb7ef878e
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:411
# c9c2e5b476b947fc93eea46518b1840b
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the -s or -z command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:413
# 45432acebb9c45429605b44e26a3af1a
msgid "When |chef| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When |chef| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:432
# dd3eea7857414936a2b25d0c907942a8
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:439
# 59b4f7d689ae469baeac160edf9b8f6e
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:472
# ec79dde98a0642ab8cbc6818301659a1
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:482
# d49e4123e0504df2a8c3bd87a23da48d
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:491
# 0e07a8484f3c432b801c286506e04d46
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:499
# 94b364540e85428990fa39a978192960
msgid "Now, run |chef| again:"
msgstr ""

#: ../source/chef_shell.rst:512
# 40398ea5768a456294429444770fe530
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, |chef| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:522
# 1d1525b8f4d7412f95992f408012948f
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:523
# 2a9d98f177b34eae8e0a6907fe8a90e2
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:529
# 8191b9fdcbfa4bb9ad40e3d77e437eca
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

