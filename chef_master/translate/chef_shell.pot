# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-02 10:51-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 46893e802f274f69ac26a72338173bc1
msgid "|chef shell|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 59efe4c86e4745458f7378f61065dfcf
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# ae29cdf91429410ab78ae0f6aab5efc8
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 718d115664f74d90bc4a7939bb8e460e
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 127110c3d5fc48d3b7902bf1f3c7db81
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# d4cc566adf9c4a5e91090ad181d9804f
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# e9288cb91efb415eb950d591f2bbb25e
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 0095875335204d84bb4f239411600073
# d923867806014cdd82123cf2bb758a73
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# b449e886a767479d884177256e95e5e5
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 68d261f7e60f4ed6bd9369c06895f40b
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# e3916bf022c44bf4b3306db04ba6b482
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# bd0e110af39e46fc9362df1e7d8a41a6
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 7556e6a2aadd4d2481b61b713199e3ba
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 8cb47e10e0a04c85a218303ab23f6ca1
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# c82f8e031bef4efbac749fd0a5bbf9e6
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# eea603d7e4e24fd393cbcc2d6f4f9151
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 52e494a6db254a3993f94ac56c11ab13
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# cb16ca2987864478826e47e0c2639369
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 9eef633b630f4818b2e48a5661c05f78
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# e241e7689a514b848b3a70f6ec217c51
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# d49d0d339c294cfab681a7f8af97ed98
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# dfea51e18f604079bb4d37f967a65268
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 41c7f1548bc64c7cb110682519199ecb
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# d219d8c81d5848d983125bd9f3b91822
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 3db61e74610942da9c4e2749452146fd
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# eb27e82643334f8db0acf9899e9a0472
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# a3ea2057dd894a2892aa4c661d74ace9
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 789c74161ea54fa8a0fc416491ee0235
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 2ebdc17d14e24cf992a154d333c0f64f
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# ce35d7442b704039a6acb239256d2b21
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 193834b368234ea09c349bcee9689a98
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# bbc2ddce2aed40c3b916dc3846d265c5
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# 79f8474d1e1d4576bdadcd4c6507d357
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# f4a4d9e0ed3541a7b0fc7255695cf4dc
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 82fdef8d128c4544ae264ae4b79f2fb1
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 44e9fc4408324f6a9ed03357565ef27b
# a59fc80bd2c44d0d9e681ef5b1a84d47
# b500a047cc2040ea9ffca849230412f1
# 04978ad5eae241ac820598ce3711f64a
# 79f1bca9d3794a7dadf74488065f3355
# a55499e9adb34eecb938aa2c0681cd43
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# c3a8b3e011b541abb83b107b8db78f04
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 85fb442eb8194b5088652a42dda865cd
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# a4b5d27d70a948a2a61aad292d65b93e
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 58452e27c08e41c49160aa799254534b
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# b6bb7514a1c4422e8729bd060f6238c9
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 84a99763d7584afdb53cdc04b83f7f61
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# c29fdaf88bd34761835011ee9c2c0661
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 2f99933f3b394224b9037aa9edbb7bd4
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 627ddabc9a104b678ae268e9cda7a6cb
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:4
# ed86d742e0e14bb98ae4974dcf98c4a9
msgid "Use the |resource breakpoint| resource to add breakpoints to recipes. Run the |chef client| in |chef shell| mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the |chef server|."
msgstr ""

#: ../source/chef_shell.rst:179
# 2c0c3cf75d2d43de925b872ed9a5346d
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 11ce56233f914bd9bc7b584df93fe289
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# fcd263c5e2bc41ef950b487fe04380a4
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# f5b67128592347c08966b36c1e342427
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 8cbf9f9729f0445e8a114259f2423893
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 1c34a74a9bd04541b02ccea75ae3f6f6
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# a3fe0d062ace4f73a2c81220572ad8f0
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# fbd2dc9dc5fa4d3ebfa625cc69b71126
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# bb28f984a8574048b7e7f81c7f20ee05
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 6f84ab55f04e4fd99239c010bab71758
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# a2d9b5d874474cec8ff98a06ac9f80fe
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# d03ac921e9a64913bab43ed5048b64b6
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# a5c039af149f4b0f98d62b74b5a49037
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 2685520e64124a7b9a6bca8cf7f6ef5c
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# b650935604be4973be02bf36f0607347
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# ecb631fa7705486ba55399e028fb93bd
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 46f3b20018a345e18fc048a986f388c1
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# c6b7bf8aa3ee41e2a4a75ad2a8f9c176
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 9a43cc1d182f44ac9c2e216a45731f3b
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# e5f7361ed14743b18c9e1c902964d609
# 7ab358cea6c24ba4a70094931b51eaca
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 222cef4200ec40f986141af7507f288f
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 870cfcbda1bd449f95d620b4389e41a8
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 2f496823db8a4d7f883be0c17642987b
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# c4a00a42bf6e40f3a054325ff8d3870c
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# b0092629b2d4490287973d6e0f50fcf4
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 13752bbc5d044ea69e265763cf68c08d
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# db08f20d34974f429658df5998516afc
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 175971514ca8477f80e400222a531641
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 753d768b9e56483997f3ab6cd466e10e
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 880a0c060b614af7bfa47184760641aa
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 7ae6f30182d149d2bd8ef938621d30ab
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 9b0c06fd81fd4eaeafc1c9bf21b07288
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# cbd3893707ad4bffac60f9a932e0d80f
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 155e749e09fe48d0a9a3d506f55a67fd
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 91b6834b1cb64ab39db19bb4c699b932
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 1d7cf056a7794297b116e605c1f2da85
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 195c99a8974048b1a986b2517a62e4e5
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 10ec0599cd3741ccbf14e74d17ccbd41
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# a566942025b74eba9d5f03fee25ee3e2
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# d2eea1f0488841cdbbf982355cfbc3c5
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 6d6454577c7046e09faf19edce8eaa76
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# e0b8b3a54d054787bd3c5b8b02dbbd88
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 42607ed09d89495a9337d67fe85e40e5
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# f316b3328bac4681a7a7a122d1b5c6a3
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 6c42ee9d8565419e9655b62fa92641e2
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# d4c02880be98441c9f79b0a42d8ae3ce
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# ef47b74473be4ff5a6c66af07cdaed3e
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# f34a93a65b1e40498be6f0da51c4fb9d
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 45fc496c0a914de4a9e1f01cf6b56cd0
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 4a41088885bc406094be3dadfe9baab5
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 6ec390c442614c419efd27ea6dc6efdd
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# a64b9b5ccd0347fdb27b257026f666dc
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# cda086fbdcfe44cb98e035ece5a30e7e
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# f893c8ec11274fba88920da74b3e06c8
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# c321b485807b41bab2ec415af90cefc8
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 9cda4039692e4f5790b6bc81570a8166
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

