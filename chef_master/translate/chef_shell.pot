# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-20 09:14\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 4fe4fe8e745a47408505ba35b4f7d7ab
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 815bb5be8c494b4fa89ef7aa822692a2
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 72933b63635746d3a3ff56022c20f5d8
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 229d77ebda29481ca305527f2e6de530
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# e10611fdf3b04994a236cf914a0c9495
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# a1e390049733475a96f6de10e0e8bf06
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# b0aba8151a0d44308bc664e2a653cefb
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 0d4f2daccf1748deba4256ae68f6ed86
# 6932948049af4dc082dd6c3a9bfc1182
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# e50ecb4b3ee64c28b0511e106f7b4a97
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# cdfa558ebd2f4803b4b6bcfab98d7ff5
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 741f8da141644e05bddaf5f13341dead
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 7ccba363fdfa4fd5aaf500ec2c5951e1
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# e2a6ff725b1c456f9b29aeeb47d3bfea
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# f19d454d50d942e3b6ea59bd7b522bd8
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# e3926091c04a4adbb746490c475f7047
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# f34bf0d86166460b88e1d8eca95b7bbd
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 80b1117050ad4353988b32024bed33f9
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 4400c418a5ec41379fcb77fcc2ab5215
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 2b78dc24e71b4f2389a66eec11a8192c
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# d223a83eddd948d3b492c0d1592267bf
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 34a9f377c4e24536a03a89e8867dcf57
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 3843c99cd77a426788bfb334ccfe518d
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 3f411af9fc2d4c0bb983c600059df263
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# e708ecd66df942b8b35284cfee38012b
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 286586f52154475da93a44a143023170
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# c60fd5dfc41949e789edba88f22beb44
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 333b0dee82aa4756bcebff1a23c51d5d
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# df459ad0f2ea45b19ac09cc7a881a274
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 8cdb8d64fd6e4741ab4aca1743d8156c
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# b25be7ef9dab43209eb39592b2bf9eda
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# b11435a8259347c58d153d0c49f2950b
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 097ed68f34b54bdf99647ccc9096a589
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# dbabc84b185e44fe9fecdc831b509a7a
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# c48f47055ac94341b2d5cdbb187aebb3
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 384df136264a4ff5bea8a0877eb9f8de
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 90d362937c4b4a109b2363d12940bc8d
# e4ff78dc4a834e32abae4d4b7624828f
# b56cb81187fd413d931ca5fdda6cc6c8
# 4ababb73adb54b3e92b94fe71ec49d96
# 6546a2fd8b5a4161a9a1a8a7789ee7ba
# e20809609eaf498596aa639081a6fcd0
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 2f21776aaf964f7eb2531c986e70b66c
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 3c23779241ea4c72952e29d76829bd76
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 42359e77dab34d24b2d45e60ba7e0391
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# c34377f2307e4ddbbc1edeb5cb786591
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 6601b0a118a24522accda9280f87c886
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 2d7c748aa73d485c9d8c0baa3e6fae83
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# ff089dc0d4534388bd94fd17fb8b2cdb
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 39ccb7df947f4a9295db662145f2eef6
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# f05beff7cab94c1aa984248e6b3aa9a4
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# e117d497b92c49c4a6e4b3648411bbc2
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 4a8679e4298d4785822d53bffddc4fb0
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 46b185ba4fa94a848ff17af73582b2df
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# bcb21bb6c8904237a5b2784da040fb51
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 4198c54441ce47c19f7573d86fd8626a
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 58a9fa2f37994f96a735354e64336dfc
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 28a49a1dc8d74644a10c3fa4945f0617
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# e72d6ba3a6e44f26a0b138b29c6434b3
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# f99512eb55d547208f0c9acfb1026e86
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# a61f9cf2c43945a7b8abdf20ad4c1597
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 4ee6db8136c349adb5dfbea9c66e84f3
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 9820fd33f13a4f99bd7e38fa9bca96e7
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 2f9c15b654f94c16a5e6a6297b48ffa0
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 83fde26b22fa4d7fb703f23940d90cac
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 88903498db34496990f30496f5d96823
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 582bb44be1fe43e6a2a4c845e05f8411
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 96ebb6147e104a0d9a215faf8f1227a9
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 92aaf72220f240f982fd56ba5673f7fd
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 883541e08a88432ba9778b4204e9ee7c
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 4aa65dce66bb428aad5f2324412c91b5
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 136c1e91f42041a4a28973e3caefb64f
# 177f2d12908745c491e68e6a659c569f
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 44baf40656d74eeba73940f629a30043
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# ce919863a8e84b16849507958a7a29c5
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 47fb7e0efdae47c3a1052666ed5ba450
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# dd597fe88e9d4cc39084462ffb4efd45
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 40939749ddc544b29227126c6689ca5a
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# ed5edb8884c448b5bbef3bc73e4edd52
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# a1e6d7b0b2fe4c8b97c7cd2457b89031
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# c3fa5bbcdef047239f808e3d77b30678
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 22d2e0b4f0884363b3234aeeee01a742
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 39845523019743148b5b86d1cb3dc1b6
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 30178eb0c1704e72958078c16eb3407c
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# f1d4feb8d37d428b977b509ed97e1cf9
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# bddd4725dd104f198eb0325ca426bf7a
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 5a84b1025d3c4e429b62d4598e96d0c4
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 8513c0cffadc4af0bae87155d11786dd
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 4a0e0b0f521547928a096648e9527473
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 8c62207754f94a17ba8b72a3012a2a81
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# d25bd1000f7549e4a4eab125273c610c
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 1c7216a4370245e88e08e6e1075eb52a
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 610dceeb8cc44df29dbf4cb2c8f6e8f6
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 592472b094f4468c9802b87e69209431
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 11c7dcab205d49e8ad0384008fb049c3
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# ddc5660f910d45f6904f10c40c1566cb
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 08b82e54feb945eeb963a99d71a8634d
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 8c49d01a2be647a4adb5f8138c6e6bfe
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# a19030bfdf0444acb2056935c7e9cada
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 0c39c5a888ed450cae877de364892394
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 7f60f6705fd6499a966c41a9d2fa373a
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 7fdd9cff312f4ccf98853b241c7278cd
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 900e0fd99dbd46608eb77efe34f4aca9
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 994c99fa4eec4319a724142f734e8556
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 081a924f868d44068af7a53cafe8f068
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 7b14e79db70f471d8e19f5a988180b20
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 9ea89ff97cef407abe005b8e4639f608
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 835bbaf1ffc54b18b7e439cc120ba058
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 2e54a12a52b143e892af72acf2a707f8
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

