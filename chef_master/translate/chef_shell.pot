# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-31 12:18\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:33
# f9e234ae0ab3452089f2bca072dd56d4
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# cc295c45817f474b8c78c80f02adaec9
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# c4f7b719755e4b67b905b8a871e72c44
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:37
# 33fbe70f018f469ab1bc6bef9e6e2bdd
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:40
# 28819b991614497394851f89f627b013
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# b61f5a587ec74626896e52110cb2922f
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 86ca8370e4a1403e896e8301641f76e2
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 2798cb1e8a364f5ab9c6e25a78f7306c
# c8f6cd986d7246fb8986324e8118ece8
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# c1ab006afd1f452dbaa4731cfdaa4c2f
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 45060b25f02d41ff9bba105d81eff2f1
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 9da17b2cdaaf48d8babea46dc0d87ce2
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 6b0d24a552484761a673a15eb5b9163d
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 3927933d5f8943e3983e0580885c78a9
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# ec09e120065a4d5cad727240f3bb0d2f
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:44
# d2a9082897bb4bfebaeb59626121dcc0
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:45
# 69848c722be14450ac2c98cc69d0a0ef
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:47
# de1ec5837c64443ab57062e3d863f8ad
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:48
# 3eb18021c5d0485ca5a9ad30e56100d7
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:49
# 90f428751baf48b3b7ddaad2c3e9fba0
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:50
# e37097756b90430d8775dd7f8eb76d55
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:51
# 9775f2fb4e21426bb4f22576af387f2e
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:54
# a26826f6bbc14f7d97416cb6cac016cd
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:55
# 1e4310c9c17441bd91871d22ac6bb08d
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:63
# 6a5aad248757466eb4f1b5e216f2b114
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:66
# 4619c88f349a4facabc8d35d0361c336
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:67
# c9fde1fd5cb74496a525ae044586c662
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:69
# fa6b4ff67b8d4ed894ca898c412fef4c
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:76
# 278b095dac3f478082498c50f09cb57a
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:77
# e35f51c03cb843c99f976235431b5f48
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:79
# 1482c1088a0b4b4981bc5c83a0464293
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:85
# ef50ac934c37439ebd9301c10d08e623
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:87
# 1d29e929bbc04886a1d0ebfaf0f4a6b5
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:88
# 81491b35bfc041fa852386315989d8ba
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:89
# 353975f332b141678c50c23d7592c871
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:91
# cb91f00baf6a4500a8ed7a1e3433db5c
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:97
#: ../source/chef_shell.rst:118
#: ../source/chef_shell.rst:134
#: ../source/chef_shell.rst:146
#: ../source/chef_shell.rst:164
#: ../source/chef_shell.rst:184
# c197aa59b33344ac8ade3740b1fa95a9
# 3808494b120642498e16a1ebf76e430e
# e874a3b7b5794e21a1ac9104a356406d
# 7fda24ac0ae7473e8f6f253343295a9f
# 4c71a173fb1c47f59397665ed17766de
# e5faacdcf104476f801c2e4495ef1aa1
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:112
# 98baa5373cc048009d23a84e27b50b2e
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:128
# 192701da64af4a45a79d6183d7b74fc3
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:140
# a1f51aaa3f8c4bd9a8a1a1c351b85a64
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:152
# 3b7a5ddd43b44b4f8e3998e0011de8d3
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:158
# 3c52b9f871074de78cdd49e47994d085
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:177
# f3b7f84871b24aae85b2e016fbbe84e5
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:195
# a253621d00964ad1bb6c1619897ef221
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:197
# b91c79cd3396496da4abe87f51bac50a
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:200
# 567b09a8cb81470a869708c7cac0800e
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 1ae9dec307744b008375f97b28d48225
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:204
# cefc2827c4f34e268940b21539ffe1aa
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 1559f46924d24f2b9b2c1dca2b447715
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# b7610cd31f014d9ea9604a5c404bce90
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# c7a52afd28cf4b09aef5f9c7fa8cb6f0
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:208
# a2880cfd68c948e7bc76fd941b8cd94a
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# ccd90135da1843e48f53e9f51b58d257
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# b82236ee2afe49f7b1bb589d63ff835c
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 2193a257c56c4ea6bb1517a0708cdf56
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# aeab18a133a441a3bc3c3c667607ae0a
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:212
# ba85151abf1e4a67bc49985906a325fa
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# aa017c6c62f84612b7359365f46c85e0
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:216
# 1ff6da64f4a348bfa61a305301e4ddcc
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 4352040eedc44086a5b1a4315b39524f
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 047bb7ce1878441e852433017a6a78b8
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 5e586bb2e4b744c6bcc242a2f3b59450
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# d3dbb5e92c174275a29da50788ad976b
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 8141c5947494482097264b2114be00bb
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 6e67f5531d84431881faeb79fed0a13a
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# b6180c9922cf4454b694c56635a08053
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:220
#: ../source/chef_shell.rst:391
# 6410ee10042c4ad8895be6e7320efbb0
# 1f89136829ac4d93a127c5527a544d7a
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:221
# c7c24963520b48a2bca695825a880a55
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:223
# eadd14ffaa0444f0bd797610949a1871
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:227
# 8a3f2eff7d2b4018a37a092c21ab2b39
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 74ed8982015a45bb91cf07e0743bd4ae
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:232
# 806931be6f5242b69c827bc226044c9a
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:233
# a316e95fe02e4551976979f6de3f42a8
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:243
# fa5e399db26346adb7292d97bd2e250b
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:254
# d34a263e764c46b58bdddbe9459cb3d4
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:261
# 4bffc4ba175a4546bc70c73a2e37ef2a
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:268
# 2d54e39f7fa14c71946fad2f0dfe7a50
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:289
# 8d8c114592934c2982b5f5c065985f10
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:296
# fd56b91d33a945af97a927e96a95302a
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:313
# ffa8368f90c042cdaa0f7902d845fa18
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:314
# 047023800ca242de977699859a2624b1
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:333
# 904de20672b942f5bc2a52c24551507f
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:342
# c087d368bd0b40489b94fb19136f275d
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:350
# aa8050ea78934d14a496dab793946a49
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:353
# 2e4cf9326c6e4b20a70d805cf7d7fd93
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:354
# 38e1bd34e5b94ba4bca107bd4917f682
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:364
# 09818e85b1d04370843ef28befd31c4d
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:387
# f3d6f6588a82474eab858cb9676ae864
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:388
# 3f7f126ddf324fa0ad75b4d7812df390
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:392
# 404b1e1259f849d797173c8d6954e89d
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:395
# f287bb7f73f14052bab61afe784d5ea9
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:396
# f975571cf9d24d029af03741c9d4075d
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:398
# 3cc3730f4f2d4b789abd510e1b6f78d2
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:417
# 0d9c94d89d3745739b1e00f3681bada7
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:424
# 2e58c73059f649aea43b07d7ee85696a
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:457
# 77a9de39bc204e3b814d1877f6c88ccc
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:467
# 5deaa3320ab4448599690a6a9334769a
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:476
# 7b72c06533f042f899c1fefd9bbbaf0e
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:484
# 7f4fd373ccf142228fa3680056e6c01a
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:497
# a5b0cd49f25e4706a989e3badbb1c0a4
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:507
# 3d3dc45966754329bd67dd7375d02964
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:508
# 37daa9490d3c43ae9446e808915c9dee
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:514
# 2400b601680848d793180ffb5df5b88a
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

