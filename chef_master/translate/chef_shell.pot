# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-04 22:34\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 20d2a63052154078bd4eddfc812ce219
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 02056d92fed74c37a27d1c8857e7ec9c
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 4bd6c68a2b3849b48799c910515a8eac
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# d389d5ac926149fb80f4dce6e863fe89
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 10a199d6b5ac4ef3aa6db3bf0dc9429f
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 684982bce0cb434fa96a6a7fa10af81c
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 4fc27ba75b7648e19309dee895943d70
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# c86535988e0f45bcb2fa4665b6e59af8
# 21ca38beea7d4396973ef5cb76f0dfeb
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 051339edbaef44bbaad736c5cdcfb1a5
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 599057d763284658beadf7f3c24fc58f
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# c9ac8e6087af4f308a24121515e19984
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# b2256554b7bb4425a36dbd15f2f6466e
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 8b9dab5fbea54a4e920863630eb420a0
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 22bba63bba29449683379610d090554d
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 7193d1a12f964a0197861223f43de6d6
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# ae9b4eb5f02440ef8c72e6b2349adcdd
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 6bdf9eeaaebd4c91b243e724f92a34b1
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# a9c7111b56a143bd9436668e90dce5d2
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# a1ee97e662c048eaa2db660fa9ae1307
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 424fdcd5f522483f97f50e235200dfe2
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 1613c0dd4d7d450e8ea3ba6d3b9bf5b2
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 4e593cac606b46e3b4dbd18987432c37
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 5a5c8bb08f9a455c99452062518e70ea
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 430fd6f5a1fb45509e0714c6d88ee5f0
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 0180b3e907a74bd4ba42f87d6c887a88
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 84c8f20e518f43c090c7148577ed42de
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 1c30cdc7187940b7a50f7708ad3dc809
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 726d325f192f405eb4c7f61e9bacfab0
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# ea524f0ac3a5400b99585a60f39ec2a4
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 0ce18730f12a4b9daff00c2e195a53bb
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 813506950f99449b9cb0481af71a6d26
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 6c08b3fa4e3a427ab6b6ebb703b0f5c9
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# d197fc616c014b3eb5f83b061d8c68a3
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 53c6eb0f40f14083822388f6224ba7a0
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# d3c71209788e4f8589f7dfaf52b97e78
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 1bde7cca7f7342ed9edcb91b174a48f8
# dc25c7b0acf14cf7a174805ac29a8705
# db78a476708f46888646d00f369926cb
# a18cf4d1888e4edc9a78fd821210f52e
# 8e7343f5179a4527bd25cd1dfa46cdd4
# 81ef7d2c51a0441698cbc0345c6b752f
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 940d263f963b44a0af9017439f9fb7ce
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# bdcf60c180a041a8ad219b07e00fe574
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 808faa3ec8e946aeab6432584a27d560
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# c96d44b4cf1a47858a2b3d47136cce09
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 1888b9e3bda34a4db97fb3620bee7133
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 446ae79afdf6482dafb19c74732b94b6
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# aff574b667a848daba66bd999126f068
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 43389e35683f49f6b13e9bdb9a612d9d
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 394fac060ef14e1db22c1c6a49cd59e8
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 4f88ef46bd76437e8adcc5a491c18809
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# c39a809a32454cc0a363566829c62158
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# a201c5f9af91417ba80f6bdb4593d7f0
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# d9d0c421e51f4e72939934dfbef53eb4
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# c04659be4dbf46f19fb3cefc531052dc
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 0e19bad1c64947ccbf0a517be8d2c275
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# a7a0962a6d5d4ce9bb1c8632710b76ed
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# d86424f24f124fbcaa43cd8b4b2bf6cb
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# c4af632830224169abe429eee037ef95
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# e81f942ce34f401fa2cba5628f08b77e
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 0da5b8633cd84543b05e803d3f6f0fdc
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 8caed3b09bc64c6dbd7185118c46644c
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 26c9ea7d784b4f04aadff2400e101fd0
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 3982e9d76e774d5fae7d41cd19292ff2
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 63824aa19ac74ee4b35f6083ec189b1a
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 3ad87a184da545ffb1b372bd9cd8adcc
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 1e339552da464fa893f618cde0b4b8ca
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 6d312e4a86e64342997b79f7d91581c5
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 5840ea0bfd5c4c51a7fec1182d48fdfd
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 016e3c4d82ec4998a67514e2297d4b2d
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# e02beebbff7f4b8cab313a7035f0689b
# 936c893c5bc34aceb6a2c05df9914e45
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 37d4da6f1b014a53b3daedd764ca92e5
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 15bc328e032d4e6da026a54a25a1d95d
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# cdf49593c1014751b6819383b2e10b99
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# e53f62cda16c4dbe8945781fb93456e2
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# d84880e8f77d47f8bdcb6afbe81b59ca
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 3c2aa2c84c72494fbdb700617a8a4885
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# fc358685182549ed896c11ea4677b5ba
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# dd1967673c0d4a3fac9c2707a5499c32
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 04339d8ffbe74035bfbe5169e626b7f0
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 4c17abf3db1041199926e142eb0ec1a4
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 166368fc0d7d41b689505dd56dbcf62f
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# c534e35754d047c3a25f232818ad1eaa
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 053d7fd0a6464762b0a9eda6327c1413
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 2a64634df7a245fa882bb9568d43feef
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 5277e76d64044ad88395c676f73ec2e1
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 06d5c7f90dc34cd582411da831c679a4
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 1685626468f24ef8b7e10480292cacf7
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 0cd8ded4b7484a27ad2d67182a01275a
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 5a59aa8e6fc442b4ac4de9b86ad0f2c6
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 089312c9928f4d4e9a8d79fee204be8e
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# e253f13557514353be5beb21ad07ccb0
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 2cb836637d7147f68d714026d0e9f0df
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 6c4dc4760eff42788c58b7164d3a6688
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 39f911cfa2b44fecbc4b9b1e78c01557
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 98fe670b93114d359da9950f4f3b6e3f
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 5b4f795d197d4412a7d89cf5443c23a7
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 2ecad6a96337453ea4f173364ef885c4
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# ebd9398ce7e04d1ca9cef748728f38a2
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 0679271e99e8467fb8acbe566c170b1d
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# f7bc922051764d288ade87edc51faf8d
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 448e45d06ced410299b25a7548843b05
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# a8d51aa614c4440a8e9ff1c5b2143ada
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 2ca18af3173e401ea9e67772028db7d8
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# c3176c568e574a16a896a7035dd46319
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 106803d0957d4082a58dcf328988ebc4
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# bdf6901006794a85b378c656ff8647f0
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

