# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-02 14:27\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# f305da4389b34d02b1a8ab9db97deb90
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 4cffac742f674492938fcd81e618b6d2
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# c6cb244785d64979a171d70297b4286d
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 0be8010e5b26454fbc634e5ebeca7f0c
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# e4833d09c21b4bdfb4c5775da3581df0
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 444f35b8c4824516836952a9eca1eaa0
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# fc4db07dbc9246ccad6afc65a8c36cce
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 787bfebe3b594cd7acaf8ad98e7ffce4
# 4fe668be1c14456bae2e83b37f82effe
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# b64df31288f046d498b534c9d785ae78
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 448016e21dd7490db1b28f753a7c486c
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 00cf655c3ad04d93b0b960316bf54e3c
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# e4f8ad6decce44c29dbf3af4fe90561e
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# d3d6950549aa41c6b0a0cd4c817d5c6f
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 5f10e4f15c2e43b09740c2a7c7f37fd7
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 44d0ed1e2782404eafbc13f0f1aa0f53
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 3bcd19b7a83a4fcab34817f9a33176ca
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 56ef09a53d8b460ab5a698c1da8ab797
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 7736a77b6dda4d92835befd221c9e1cc
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 8b9e9fbf64b940668e928915c6375db8
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 424c3ab0fe5f40a4a3d31d7771df3df0
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 4961bbd1047b49a5a152f2a164d1e426
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 22ab94bb29bc4665924efd8d4ce24380
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 2b8aa2d8aab447a4bedb228c7f8ba19d
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# f85711f1ca0846798368920aa41a602b
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 3e50923d39e049e38709b4f3c58df7be
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# f4fb553156d34ccebc0526fc391426f1
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# b89156e423234dc087605e519fc47193
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 2587f022a6c14004be9b10119b5b2714
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 5da19bad5efc4234a8a2a50a923e8945
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 7b3faa4e785040148164c516792338f9
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 79ec9d475ce24769a6b24dfc17de5ed4
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# cc0b082a5d07453c9354c78835461572
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# 7f20fc382004448182ef5e56828cff65
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# d7549fee878748ac859214462b55ca38
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# d6b071732c23483196f76dc0a739b710
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 5efa96c11a9549dfadd1f1966ea9225c
# be26b5cccd9b4a99b87c0b27ee28a389
# 7a0d7e9a2b4e496da49e0fed585b1e6d
# 19329c91c3454003bb765520972b900f
# 01079a4a4284429680d05939c898b2e5
# 064cc6a5bf2c4e379ccd7ad2b76cbcab
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 9179759442fb4a41814b89bff415a683
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# a28f8ebbf9d14ad0824dc63c58edb8ff
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 4018d9cd063e45fa84305592663e7609
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 1dea1a4aea344b1f9380e2b79e4fa2c5
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# dbcd64e6072a4719a0c63b0fde6994c5
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 3543643db9fd43baa575863a487a7007
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# f9303e5c0c8c4cfdaabd0201aa4f194c
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 1cbcf41c73914a6a8407e171d29419ab
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 8d927e01382240b9a86cee9384f581e5
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# da27a5b860724645a29502ad3635114e
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 5d2693441030409890556fad4d7756af
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 36384df72dff42628c678f77ff8d44b9
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# bfe806aa7b4f4af48edc7936a1e8f0f0
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 329e1f35310a488fafc50134ba458eae
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 26b9f2b8c04d480d9ea0f8e123879617
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# d0075d31ae4042f3ae4db098b997eade
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 799a620b972c4321be82c4258e770786
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# a7d6df4dbe6843afb501c4827a8c3708
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 6285eac713964d5aab4fb1973551ab6d
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 32891973dcf24704b762ca90e95c9f2f
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 1e3fa486b61c43bcbe5f3d21459f83d1
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 6f68fb94639b4487abb0a446fc2f8a16
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 3df48e63071e4347bd80a098c9a4793c
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 51a7b592c6b84ffcb0df7cce88615e31
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 807b488a2f034dec9a66fd680fc2d41d
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 77e79d385b21446c94c676807b9ee4b2
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 6f9417ae10664ee4954593361ffa36d3
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# ac750ac9af384babb370acc81dcbcefe
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 08641c38e83248adb7fc461820c3d8d6
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# a2bdd52f1ca745dc930b6265903d905b
# aa6f8dc18b2045c1a7d6788b1b5bf4f8
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 11b67166c04343aab809f5a0901ae5bb
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# d0aa10923874408bbd726aa7f408759b
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 5d81f1b3ea3146eca1d712cb81d36afc
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 4c2b41f55549468fb3038f279dd1093b
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 8a7e02d967214ac383f5d20e5d1c3b3d
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# f4188a81e9164b9099360780e598ef59
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 69025752324c4fb88bec5010b04898cc
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# c6562f097a62445aaefef66e515315f6
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# e46cb1acb56f4703a8753adaed2a8679
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 50ccf01708894157bf4536e2dfb9f4e3
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 27356dc0813c4ac9b6a96f9758d24baf
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# e26c23634dff4ea397512cfb983e7b03
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 9748ae75d14f49c591c6d7ce2943412b
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# c48329880db34574b8eff3fed45a1d81
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# ca4a6cec41da4ed189a28dd0868a1077
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 20deb3fe48044c5db5e6cd9606a6e5b9
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 70ea3f84bf094d9fad8ec4afdb54e339
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 5130b34b96e24e8da6dc6e3426a950ab
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# f035711d83114d169e1c0c3d3f524988
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 45343a06dac247d7a7afd239efdf22b0
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 22247ae50f584d3e93a0f21fc128a2d2
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# f26783799d064a12a24ece06dd65b43d
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# a62ebfd5e88742b4bac1b59f4ead683f
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 56271143f95b4a7d8506847791566f01
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 6c2715f6dfe34370871c6e31ec1b4017
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 65f817a638fe45079aa78d89eabb66ea
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# d440484feb3042629309f63fb54861e3
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 29edcf79ab414f498f041b058284507a
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# b89f6e1374af49bd85271eb3c73f725a
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 14175ffde0bf465c995df9536000a63f
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 305ab02e7ef1483fba215a271cbf84aa
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 3cab2a2b6b9c45b685b59c5e35142319
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 26782fb7e6194e329031eb19849a4ae4
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 9b6acd9433d7486db174749963565f72
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# c739cc6755c74779a05372c4bfe3a311
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# a6f23bb6a5c34b38a00e778fcfebc3d6
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

