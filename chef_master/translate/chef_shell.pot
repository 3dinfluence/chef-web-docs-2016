# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-05 18:04\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 66d506cf320a439fb490aab52eea4d26
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# e47a977aa17b450384bd23a14c75b213
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 5069f4b5d2a446428fdb7b0fc1ebfc1e
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 363e0a1ace814092909456b827342e64
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 7cf6042af13f4212a694a7f55fca40e7
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# d235ab63bc7342c580b8b4d454776b23
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# d76f8c00ae8d4ae381acb1ed3e47e2c1
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 18a22c2d4a4c4d6ca03c3316198a968b
# 668f9994b6124582bd5ad69f4a8f46e7
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 9228888a3f9d4ec380f0b709e9be894c
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# e8902deec8814cdbb7a38ce7f0da06ca
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# d6b74b692fd74c609191ceb0fb4f40ca
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# d3ed2f07776d4b12b30683757ad6cc5a
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 9316275a84ef4d9abe753815f151f487
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 6919a580a38f4b3e9fc68d122439dacc
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# b0a321a712324745843dd37d005fdee9
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# f4609bfb07884c48a845c488295c946b
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# de6e05db0a6c4d32adf0a591f7a20dcc
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 2763fca0960a4aebb4ac70fd00caee1f
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 8ef5e6b2e61c406cb227ef3edd749f59
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 4f6679da6b5a4540892b98cdadc9fc86
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 9939a6998df149e391541c3c624def2c
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 6fdfa7a5328c4019b6e82e952e9802bc
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 6e7601c967bd4524839bec319bf93e7e
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 49168e098fbc4fcc9945eeba2d9b8aa4
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 7a31a3865740440a883e5aa39b899ea9
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 8e530d0068df4d15a5a0ecb1dbd8a8d8
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 3c5014759ae74827b064649343f810f5
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# cf05ed929edc4648b4bf5806b93da971
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# cc17db83d2834bf189c4d59727a0b780
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 8090f7d19eaf489b8f91e0e055caf232
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# a6b983d734b74dccb7415aed1f36a235
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 34d99da24a5d44b0bf7c07c0ecc99c26
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# 81b84db33e194530b734f122c9801ec9
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# f4490efc02524ce18078520b1ecb0e0b
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 1ea59d9686f1466cbd647823a6241418
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 2b243c7a894048a69a1ba3332bb76015
# d39e8781b01645c99700435b8fb2743d
# d29bea90e4714a6ba38de78e2061ce29
# 5b365c0db48749f89893022ff2faa262
# c1764d9661214b64b089aaf3070f9821
# 2bd0ff2ba8a74cdcbcd79667f02094ea
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 6d32dbfcf77c4231ad46e39423ef9ec6
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 7fa8418a99aa4be7b40da4c59e74d5c9
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 5f61e5ad5e414162b5ad46fe94809d4c
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 5cf9496bae024bda83014dba1231d6b3
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 094a5b165bc2438e9511f8ac8406660a
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# e32f7272fe764ee59b2a81d7144ca351
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# ae924c95af8f4417897870b58b2191a0
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# fe43dd9dea934099b6053fbcde65a02a
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 56b3feb7f37d4728bee88b54da06f02f
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 6ae830bf87b3458a8f5603a13d050d74
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 9a5b7ff079224fb0987c743b3d8590ed
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 7501b26f05e745c6bc65e272d2336aa0
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 322f280e3d68472d8fbf8eccd6991143
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 4018b6eb391a442fa8d2b35a1d279625
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# f7671bcba0e1425d8bdfaeaab194ecc0
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 8bfd8c073d47440ca6ba55c608b00340
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# b08bb8e9738f4b9ba692b6019e28711c
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# caa3f6743afa44ee9d5d92008a4305b2
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# a82e5b24a742438e9506782009e0b355
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# c79f865b3abe413fa3fe5cc4c57aafa8
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 16ed2d6f000c48438c63e09c262c4627
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 2735c234c4674a9ca77ff8950a4473dd
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 3b60742030364cb39c1569502d34aa4f
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# c313390f8a804b3dabb400803d96656f
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# c9ed91218d80444aac18dfaa099af2d6
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 31f212a1de6e4bfdb106966f5faefbb4
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 718c050e219a437d82242c0578d843a7
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 031f739677f343dba4b4b56e11d26bc1
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# f843f06799464a7c95fb73474a0398ff
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 1c66f41e5b1b4fadb77f276827c02230
# acabb317f776466f93609ef6ab9718b8
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 02ea5848468f499ca40ba9e862af7436
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# b3d05f5df9b2466fa173544da42fc28c
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 1d1c1dd762614232b3f3227146a3a48d
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# cf34cbb03cb446f78aa0ced283c9df29
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 8946deaba8894457911b505daf9cd0a4
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# dcd7f5d90474448bbb46f71352106c4d
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 7c8bb15256364ceb911fd03351adf620
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 5139441241c441ada2c841aaca33d1db
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 839cbd5cfb2149eaa99c100392342d5b
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# da701075b83049dd8125b3822006096b
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 35ea811619fe400cb5468f0095c7f22a
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 6b2420238bba491ba5f4f5065cb97780
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 2b19652922dc4683adc72a3d62c0fa05
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 37d7d9fa59114856a04791942148e45c
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# df39c1b5fb5645319a92b55cb9a45730
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 3099479d3797481a8a7b44201636733e
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# eda3e09a752644eeb49b994330c4f784
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# adacf622c76c4e7fafd914a7217eca16
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# f5ac57b6cb914132866d4369bbd5004d
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 646221852a0141c2a7569ff516b9b121
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 3bc33841158946e9a7acffe73a5f085d
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 4227732de7904c85923e786058229891
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# a91796b3212c490c9a069fc005604601
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 80e10e7dfe884cd0a73ac4cdb833f227
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 39ff718388714d9682341010ba72997d
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# efbc8c766b85482bb37c20916dbee820
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 3a8ba426e2984a33ab2ba7d41dfb2d15
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 74a496ecb7cc42ac9bc53b0d5ac14b78
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 1dd32d0486a24b51b124883fd8ed26ca
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 08b62419393b4a5f9116427bb00dd550
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# e1d616bdca0e41f68e4cfa966e43ebe8
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 485202ef459c426a86a8f17d0a5a8222
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# a1fa0c01fef84a428d9a3933d0fb1046
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# ef03950ecf7d4b3aa104e5fb3ea5c0bc
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 1d0479d84c5048d3b47296e5284f716c
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 003af3817ca9457aa0f09393fe6e7e0c
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

