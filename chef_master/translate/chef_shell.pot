# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-09 00:07\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 7ea941fb214c4b659ea4c7cff1954970
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# f6a6d2746e364823902596fdd992e9f7
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# ac4c796d5d43444bac5dbdd6dbe856b6
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 17d2c4088f344ccdb2b703a9411e57c2
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 1b812264e1cf42558ab719a80eb84b17
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 3fa748c7b4544c0a821bcfe663891ad6
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 4751cfdcac7d46fbb2b04f178ca17b51
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 112865021d6a4a559c1d7dd712ab1f30
# d3c055ee3705408ca9f67a268c35110a
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 264bc9650808446bb4de3ae38bd51b2b
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 94bc5efaea0a47908361f455aee402c1
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 58371f3312314774a5611dd221ec9b01
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 2756a1fae15b43faa3f920c90191051a
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 81229f942362480fa5de747b009b29f2
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 578f669a7a9c4e348f3d245c035aebea
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 844355833cd944718c5a2d49991a6d7b
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 91a9ccf0c3bf454cb7d227f098eebd50
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 4c9cc09e00e14bf8881cc706dc03f111
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 6643d374028342709d3505fc25bd8844
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# b05e6fc2f7de4abd83608b78e40aab6b
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 34fa80b2928a4ccb850b9f1db0be1cfc
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 33e6432af90d4308a945e59bd9ba3566
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 5dda29dcc902430eb284ae444a63def5
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# d57020936c59450891032f555d3d7d6d
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 939750495f9c43dea2508e40d02669c3
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# dbc917d98476467bbb1e8470edfc0694
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 4641e1a02f654949bd69fdb22ff23604
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# bdebe0d0e04e4635b02812351c8a0733
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 08c40f548a8343c59f9955c23a69655e
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# ffcc25a6accc4c50b95d54cdba7c22e7
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 8815fbc4001c48afa1c3c7abfe80108a
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 265421834baa443e88d5d8aa30316b0d
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 1d4a3e7a6f1945299a2ecf7a406912a7
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# a2758d2ea5f84b97ae5a89e9c3de6210
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# ce520a72a8aa405dbaf6a8a254a1dbc8
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# f3a5e058ba6e4319a31714a14983705a
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 905254452ba3490c845d30ece119acc7
# 5daa1f0aefd349dd9507b290bd8f80e2
# 2ef0b40b824f47e698b3782f16262192
# 873c050f421345c099bbbf091089f24c
# f36f8c67ba844fee9d64c48ed8eda19a
# ac322e1093cf4105a96c5b65fd91499a
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 85015d2cbe59467ab8b4d85ddc2000be
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# ff6788a7d6a44f57b72dc9d84ac23328
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# f9ae65abd4b745a0b227c9ab110f627f
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 4383f59bed4041a98ddeb5a84543eb34
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 59f1796dbbfd4eba829809ef3d367351
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# d83d5ca3b4304630b97f0bfc4ae4c08f
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 92fa3f16bdb0401486279300e6a6f7ce
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# b280721a8da94cf8b4148c5bcb9d9294
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 9ec2836d36a748b1810b2437ea043216
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 1a1863887d8843a88e02a17a8b41aa37
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 80459ca960ef43a1997bfd8aaa6c60f2
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 6d2f115dffe14e1da410d6f59d9af66a
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# bb15acf9e4034a5fbce4922c39e4a8fa
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# ff6f187ff6a94deab57f72cd0e14d02b
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 14778837a7c04f1899f528ca2c0b4498
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 7ac5954a008740ee809386bcc8859e07
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 7d7eae4f11154b11acf98d0041a2f702
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# e286363ca8204bf291c9d8df953349a9
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 460e0090795e4e8b94c8a39f2d351353
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# eb923e66e0ad4a88aba4ffad5e48d4e2
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# c24bd23019b54ec9a3889ab32418dae9
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 44f5c941bab24e62a203c9dc4ffda95e
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 931f6772c0fb42d5a710e0b841309e6b
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 84d53c4f90644d4d832ad3b7018621f2
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 5fe0123b13e84eaa8e5880d28994e898
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# e2133ec73d9c48bab118e9fa2cddf401
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# f400f49abc4540c6a8ea858fc719f87a
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# b656a7faa70947eca8cb88e30ad85f6b
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 576ea9ae14ad4f61be5db6b43ff2d65b
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 0687ab4a4d8044ffa6a1b5cb3c35f7ca
# 8745ad5fb0f440ba8e1a2592ec96c9c9
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 6f71793290f844109df86030530ef86a
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# bf129832076344ecb67259082839ee7f
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 8c969c7b64544cd794192057256a2f37
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 6464de219fd5405ab690caef65c435ff
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# de4813e34ae44852a6b6d290d24e48af
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 7e29d375a06048ef9919b489f7c4453f
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# a3da6e3e45814fe69451f72c157d96f5
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 6d0df45736f64af3a01e6503c8806cb6
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# a69995a479dd4de691907eed7398a5d0
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# b4dbf8291fec4de393743bf5ec4d47ef
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 00bb46f726254023a0e943b901df129e
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 46dba416c01e4866a6074d26ab33a927
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# c96fefb25de640ad92549d58f2307873
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# f8d1c633cb674e89a6966f76387164f9
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 491b77f390a94464a37c2e48293c6dc5
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 76abdaea892742879a0928560df71fc9
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# f1241e361aec43c996927cbff584bae6
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 5937a15ee0224500bf786a41761eb966
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 078124bbbc9b4522975fb61e83ad30b4
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 32f989b54aea4539b402b7da2f3001f9
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# b0fdcb03fccf4d5191d2247bec3a9208
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# a90b0650076946a2ab04f15840b0311d
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# caad9f2e194341ce9220d9e6eae2adee
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 79f27f9af2ed4b90a0e542116dc1b698
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 6c6e14f16fd84b1e917e8f7d5fc922ac
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# dfb282d7fe614af8a3308a53a1c6d8f5
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 9645bd6305984aba80330fb0aa04a440
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 2e7a5d45985a4f14a117073796a30798
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# cce3c1d62c254e48a7f4874b7e0e4a55
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# cd240fae6f3c4396aaec4c78238ffb21
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 30a073693a814974b9cfd89f165469d9
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 842480b04bbb45d38e3afd9024e9e38f
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 5c0b9b1741a94507a777bf1c03af906d
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 82a1d2cb55a943b18a46d5c21c225656
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 6bf1e93fbad24895a9da094b8f22661b
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# de39e2c21f594160ae969257d3bf1d33
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

