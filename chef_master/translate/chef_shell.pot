# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-07 14:29\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# a3d7dfcf4bd5492a8ee98387988c7808
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# b54a71224ec641eab2f3ebb3309bdf28
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 3490263aeacd447da4362babce9244bc
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 685592456aa04b269d40e7b5ae27e9fc
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 61edad221b584c08bbee66a6b312d6f3
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 39275272ad04449ab1a58a4e63c65d70
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# fe728bf4ba01477193fd146607ce3fae
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# bf3c7f1f7d1f4f45a1ed1e39f4e3ac54
# 6562b65fef6747a89df3e7d4e8ab6ad3
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 7e0518839b8f47e2995d0cbc88bbb055
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# f1ac437538614b08bd3242ad62a75c39
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 27adbb58e8e340158bf00758da3995b1
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# f2622018e4e9491ea15621283700e3ad
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 2f4bb99a6c874143831f8f5aab1ddb52
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# e9de3ba7c8f6496ca0b75c0e82d876eb
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 6f8e2a14e1154cf2b776e69f459adb5c
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# f008d6344faf4b8a9cd745c6af171cee
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 26097269979b484dabc15287547541a9
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 538a62efab514e06a0becc677ccc5d17
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 4185dc29a9ea49caafc47ff9777c28f0
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# d1682881a18b43459046bd29cafbe665
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 891b96dea51a49e8a1129fe99aca74f1
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 8d0f0477a3bc4ffd8bac031efc4356e5
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 3cc5d955210144ebaa83510cbd83b108
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 4c9763b16d7e45e5a57eafe5416102f7
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# dfff9283df52434fa34e205471e77312
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 9d953757ed7041e7ad09df323bef1cfa
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 847598244ff649b5b774bffa79cf2efa
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 83c0702d641a4d9cb5fa9be6552c0fc2
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 2414642d989d49299094f018ffb6174b
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 64aa47cbcbae472289d3a8fbfe526d65
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# fe15f139802a4977b83f505b84b6ed87
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 6ac989dbaf1943dfa6a90ebc011a922d
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# a81f1e84902d49d0a15b0d96ef67e803
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 37bb75ea7a44447683460389389b6775
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 3470476652a549ef85d1fc6f147991d1
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 485782958bd34b14867d424eba08a223
# 3b6816561d964340ac78ee5db4bb7370
# c3d9a292308e404595abe44cf7413c64
# c6fc67f0cf2845d595694611b83d954b
# b50e11fb4510477f8b6644c7de051a9e
# b3aac51f99c74cf29034c314ae559f9d
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# d8248e414f524d8cb20a491c8a91ad42
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# a7855a43a965416aa93b35c036cc02cc
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 9c89798404b34009a647cc6d42dbd8d1
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 48d9f2ee23f44f6d914eac810fe7f179
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 8cc69d21b5ba4c42b58e354e1e5af061
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 332bc4a903ae44f2887ec100d491aab5
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 9ab2af81a0ed47e5ba3a503e7d6f5386
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 5ed2fcdbb6244506b5ab9af0ab810784
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 24995b42df1e40f998ecd858d194a1e4
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# c2f1b60bc4af4f13bb52ce3451d8dc14
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# c9b689334c614169b6eaf455ca749047
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 227d9f514b2141319075edd5b317b710
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# af9f9bcab21a42aab653f5556c54e1dd
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# ce2d244ca3ee4c0c83eb91d5b8a3a794
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 080a71ea1e024f6197dafeb1d031509b
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# aae8ee1a9bc540ecbf8b30b4215ba90f
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 223a33fcfec94ac39989753171ea2ac3
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# b3a3a27f06504244bd10771d8470444e
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# ad5c4cea325442b8b30a85b3832caf58
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# c48c7e4f643746d2b594c297cc0adbd2
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 66b0b769354c4f29bd94b2543bda04cc
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# c3a432e53b714f6ab642c25ed4852287
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 5261d0fcfcf34b13b18c4e65890f149d
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# c8204def4e524e09ac4f60872f8ea9a8
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 1ad1afa1dca241698b910b425454f7c0
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# ed504ff240694217a7e51b3220ed19b4
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 9b0f152af16c4f1e86b58988dc276d5a
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 0facacc8c7d84dcf94d55c3ccff657db
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# b2b9a7faafec4788a2efa6db83227833
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# d7c4f832df304af1b09d9d5eb0ffb25f
# 5f0be3b6c3714c40aa744e5b3e11fa69
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 1df940e11e9546aaa7cd727ea4b4d648
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# bc5051d8f3be4677bad95c51365af64f
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 7004dc810fe14bca9ff1ed9f212c786e
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# e9f3e603bfab46e489328298c674d0f8
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 291197c58c214bf68dbf05b4215978b5
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 03cc8fde904547cd9cbab5558aa23cd7
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 03ee6620317349b9a221dcb6d1b73b25
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 02c2aea776eb4ca09576586efe1555d1
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 5e3e29a52d3b45ccab936fe64b26a78e
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 8e247dfff75e4c1bb5d078eed5915794
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 3c4832aea0934b24a06c306506a003c8
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 2afe0d417fef4eed9c801dbc451baa70
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 9388f70685654a7da30100f97daeb791
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# a48291ba3dd3401d9e9da28af6fbf345
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# aea730cd8b174ad38f101dd7f445b203
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 140533c4e09c4b38a576519070580ad1
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 948984873bc1420fa2e419da0d5555d9
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# d9001a00161b446cbdb7b2656263f347
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 5a7d5c12a59d4e2ab82dc13e7fa460ad
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 39e0d3ba48c14d80907fcfbf2f4b9c3c
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 0569b669cb8b40ebb41638db1d4c75b4
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 430d4b2a5f414bcf9b3be37bbd2efe81
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# d1de348d09b64a7a83690a2ae8c0ed67
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# da037337cbda4e758abf9ae72dca36da
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 5d288e7961b34b7fa8da28b8f2d7caf0
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# f72106b475e54518888dc3f0aec7cbe8
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 5bfa751a58604bf1ac2fff2a6a7c63fe
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 76c2d5e9158e4a20985c9753be19dc3a
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 0545f9b4f2e34e0bb09821b7000becea
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# e4d3df94ce394715af4d15dc8f492272
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 62f1979d383d48a3bb60e2450a47b379
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# df3e84264e944095bcaa2d3aa2ca1678
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# f66adef8d2d7477e8d05c3a17e543ed6
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# e03380657b7549caa61d6b687c26d804
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 61a1c27a50804473b0ad3a08638e030e
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 03c1d1354ced4d5f8e42801e3d6b9223
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

