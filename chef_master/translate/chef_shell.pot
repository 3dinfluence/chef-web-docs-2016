# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-28 14:53-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 9dd0559da9274de08479d61e523feb3b
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 6aa3aa035a9943829827ffac52f8aa40
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 28ce4017497b47879d9f598945c804c9
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 93506e46d77f45c29f26534e7065af88
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 1c9b3c2c002b423c9b5efd23f54169d5
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 10180cabae5b4a199ff22857f90c7708
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# e519ab20ecb447c78de8c3ada09b8e3e
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 5373a9545f804a3b8045edf1f0fca6fd
# 6afa72432aa74182b2f2096bce30b3c2
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# a1d76e9e24fe41b09b034be0fa4b453f
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 62e4343971eb45debab572e4c90b3ce1
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# a79159c4490d43e7b784db43001aa550
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# f5d38c0160d54255ab9256ff6ae12415
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# d950a911a3fc4711b06660bb18f36002
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# c12df75149364262b8c297672527fb7c
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 3a027699c2bd4973905a199cdd7684a3
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 9dc351c52e3b4b6d877908d0bf6745ac
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 1123e70d56d041c1bd1de935fdf42e75
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# ad2ecd67c086487989d1bdae3ed87084
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# fc658bdeec2e439a882132e2b102a309
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 1b23371519b64b118d5f97f54b8659ec
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 15c9bf5a823f4df3acd6656d295bec14
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 8d1794fe917f450386bd498c2e1b39b9
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 6e109170c4944ff28670fa39b0d50947
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 4ab4e031ae854818aa20e48cbff1075c
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 121c006487f749e9929cb7f9882bb2a5
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 4ea06588d921406189658e8d722600b8
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# d6553307267d48a4bc8c5ef0e7c10ba0
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# fba1f6fa767a414d83ce36dc9cc33303
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# e7837869b068471981322e9641bb3620
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 97cb7d62849f4df7998b6fd1515ef356
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# dce321f3d8c04a87905d83a28748edd1
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# aee279edf56f4eadb0fba7a65925ee1e
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# a52602978097406687a3cb0e5bdb7c79
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 7e02139370034554ab854f42413c54ae
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 0c6fa43b76a549c795c7a534b91fc030
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# d87f5d49e53a4bfb8c2e29b6b911b56c
# 5da1fe949d9543cc8dd1b2decc48ff50
# 99e6e94e1720400eb413b7b1957d4650
# 8f2833de1dfd43fb91291ec9b46977ea
# e455a23af2b24cda8f862afef45e4e09
# 566bd598973b40b7a3e56d573ec8004f
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# dc610d328d2e45f8874be76cd6effc0d
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# acd4972b567f409eac45377ee6f121d0
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 11d0be9830634afeb2df9e254b94c4c4
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 161c26d7cd53489ea1f781ae7f1478fc
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 405e6a2b870e4b17a599778106776b65
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# aa6ed70f031a4220a4655bfa54c0bcff
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# fbe8de0a367b415aa35793ed2ab24a92
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 7ff931c08056413fa21a6c359dfe0a5a
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# ba1149b2cbc74b1c8c02d7707df8ef3c
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# f2029c89f3ef491e936e0733e39fae1d
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# da2bf66baf654035850518836bb759d7
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 4199921595aa413ea876bf43998f5c0e
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 59b1361909ba4e8ab02fadb2c081367f
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 5bac8da0c5224a9083a46f4c8462eb7c
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 64ef01edc08343579abe6757df15be8a
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 0a92729ccce442d094a94bf781aa28cc
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 89e6aac667c7481f8575a9a130a63120
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# e8c537b28ca447acbb537df4bd7568da
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# ae55947551814ed1a21ce035e8913819
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 22a39d78a50e4281837218c590823329
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 12f5dd7fbe9e4e998e0b79a1cb1fd6f8
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# bd67972ad4eb466d956ee1fe008dfbae
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# ced6b8848a1f421a8beb31b533e2d569
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 29600a47843c4caa943c882fca09a020
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 715718201ae746168b3f0c13e22785c1
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 535e3d76bafe4607844e67f0a391e6ef
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# b081ccc896e3450dbc42477455ce2713
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# a9f2148d16f7479fbb8d990374b230d9
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# cab947bee7e74f9fa882c261296fce7d
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 222f6820fbbd4693999650ab12f97432
# 2102331a3f434286927e927972ff9275
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 822f002644484a4a98abcd0b74715ac3
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# fc4accf4868e4d26ac61ea5c388004d7
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 0e8214543bdd4281a7bd0a583d152571
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# c8a7f84aad114bd6adaf9194fd0e90e2
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 29982d2dfd044bb299da81c66be502c4
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# bb24b2b3528648dfa936a16091ab6a4c
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 9e7c6da7bbe24a72be80f1612459d4f8
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# e0d6e0fa8380460094a9c6e440c1d2ec
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# d11fabefccd24581b1bb18815f45d3d2
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 8bbc7f68d833482b91e88b58835d1ea6
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 07111e35bdd14a13a3e5b2574683155a
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 07d8df3d148b48e6822af0683efbe04d
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# b2fdabe7a7d24c078aebc30dbe956cc9
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 5802d081570b4909814435087b57589e
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# b15ece7a4cf84afcadd91ebd9fca82dc
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 75a3d35d860a41ae8edc24461ae9dce0
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# b87d2acc4d7443038089ac5e466e9dde
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# bff25002246248398b7f7c533c65a7d1
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 1884f21333f242c1af886791b1256869
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# fbadda9cd670454b9c6ad6140523d667
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 9944f213b0094537a79cbd1755a443ac
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 9f20c02ab9bf4803a4c291f9fab83008
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 53c78588e18444a7932909cfd567ed25
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# b26150dd2aa546d7b0d3d9f89b6e456b
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 328579f012fe410a976137df4088d4cb
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# ec16383ad0c94758bc6f503ed5959dcc
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# f39557d2bed344a38340c721785fb02f
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 317d03edf0a54cbbb5ecd966a607fd19
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# b29676e52b8f4d35ba1bb1d2128819df
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 45b96f0fcb46483f8f1a04ac8319d357
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 11f5816801b74a3a985aac01a2eb0d7e
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 3802e28cdc8642ffa14bcf6d17db6cfe
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 990610b158724ecc9addf530ee5ed5dc
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# af697ace9c964da58b32be9e36800a91
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# b5cc6a647ddf41e3942f1c05ede500d5
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 1ef93d2640aa47ec875728102ab8bde3
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

