# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-27 16:02-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 0560f4f0ac6343b5815b5fa56a8f4445
msgid "|chef shell|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 60eb1439f2a44c1ab20ec74937abb0e5
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 49cbb132f5254da8b2026ba60c811154
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 68b8180228ae4d6c8468e0b506be6a8f
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 3e4e0eedf2bf4ccca943b9778ed90993
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 68b2a889d6624806856d145913e6513a
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 332a6309de7c45c18ea8effad0da8947
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 53ed38a97d684980a856423a4d742d68
# dbd85c31ed104289815bba251ae24edf
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 2a82192217e34491861927636b9d45aa
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# b628a8eeeb834b7e84dc5e8533cea3db
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# bcb24b9bb9b047a9963c0a65505084a7
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 83b07f3ecb2e448fb25a010808e6e868
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 67deadaedc7f47fba75387fbba76eb6e
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 86252dfe76dd492ab348e7c1ab082590
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# c22febf596f44149a8e6a5f9cfa8d915
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 28a957271b3044199337fc0448fa0655
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# d0548f03e3034d91bec6c249cd287f33
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# ceba1360bcac45998cb057cdd40f6a06
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 9d7107d1b67342199674611add5ee669
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# fc5ea8282ae54484ace1bcf1135f9426
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 908db0df7dd74f89aa7b90e6ddcad9ed
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# e4eb478630a248739678da0ff025101d
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# c935a115243a4f2caa89149f84c13dc9
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 8b12184da41e47aa858d65599b5959a3
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 5953aa8dd0584084817f056d2a558042
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 52ce973006d84c6ea149b0c2fdc6f87d
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# f1f03c1c5b424e9ab8fa748cfc508002
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# efb19fb4b98b4cb5beed6a075fe7ce0a
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 8f97e1ae8eb04ff0b3f06dd74e4f9563
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# ec9739001ea64a2089fbcb7a704e9be5
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# a9d7bcefe1ee411ba1c0e8efb5b0445b
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 08823c6498a24ad08ac8e4c1fe682189
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# 824b07a995f649848c45bcbfdf5ae5d8
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 86fd865897f24392971e82ebf08728c5
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 8d17a3fff2c2453d9d83b8e0b55db124
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# f895e3258b744b9fba3694242b6c784e
# fabdd5aa425a4901b4010a1f13d9ae44
# 729bd42a901e439787c0eded3dea3f4d
# 2b2038c09ec6494d94eac50f0a5afd6b
# 2ddad36db4214c6abace12541b5afc0f
# 4b5c3dfcf65841128965f1a51ff3cf74
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 7bdeaee3d0374942aaa685403459586c
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# c669b668865644d098339a9f8c46725a
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# bc475fdc795740f4a1de75e6776224be
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# bb9050073a1142dd89566ecc916a2439
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# c2bc7e27d4954cc0add4003232930176
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 9d858640b0ba4592b113edbf4d174b28
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# f2df980836ca4e5e84c6e48a4f03ae91
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# c2d5927532a94ae2a181026cbbdaaeaf
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# b13d8f38429f4a52b2650cf57c1703ea
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:4
# 46b5acde4d9d4803a12f285a398f23d1
msgid "Use the |resource breakpoint| resource to add breakpoints to recipes. Run the |chef client| in |chef shell| mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the |chef server|."
msgstr ""

#: ../source/chef_shell.rst:179
# 999e863b9cbf4671ba81f6dc30077b75
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 6b6e3de0559446a5ae8b27be53662879
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# dd6add931a224be596926f969b68ab78
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# fbd9daca0db84ebf95aacff55b07b536
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# d7beabed27834482b934f2727264474c
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 28ee03525ec94f0a9ace40c8b5d3545a
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 4419050a75f4486db8500f96340f442e
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 2bf0d9d5139e4ed2a14cac8742ce85d8
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# f3fafd21ce3c44588237a226f12dd774
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 262890e97dc3400aa1cdef265f6ea175
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# b7ee5e1b6a4146759124e8aafe4bded5
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# bbf3cd7444944d9dbdb8be9cc96517f5
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# d604121e67d448308685554b0b02596f
msgid "This resource has the following providers:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 317a1451ee8a4046a53a90759a4d8516
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# da47db65075d4906b151fa26cdd48445
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 909b7617b2cd43f6acd71c1f0f9fc1d0
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# a6cb22293f424dfeaece1b69027b943b
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# cb9e2f1e29a44fee9563a88ae5dac6aa
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# c16f1344cd794536b69feb147b776438
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# b0206365f1ca487aa93e8f1a35831581
# 81c8b2cc58d84ad8b37ac7c31775139a
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 73acce5582cb4d8696bd48ce81fd812a
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# d3d2d99c525b44158ce72dadf035b77a
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# b3e6e78c20004a089c05c965434d4be7
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# e5cef5d355964d1a848fb38e368ffbd0
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 464dfcf7fd7d4271b5e52f24816f7816
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 1c20d609fdb3429f901dc8af1506006c
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 1eed999bc98042f19fa7af931d79f226
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 293924fb54e94ee890b32ccc5797b743
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 094359720499491693c814799d104005
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# be7bcdbb84f74e9b9f9b32864064e3ea
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 4c85741728914ae5a9027213eabe6fe4
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 4a899d9c0d034f74ac664e3787ad47d6
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# e29d0355c3c04a2e83c9c57224f8f160
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 72a2c065b5ef48a38d6c90661d6a3c49
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# ad1a7de5d72941b6a552ed5e4e9c79be
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# fae5e849b60c4cd78df50f9aa3b8814a
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 03a24ea467b54896af9e0ceb4cefd4ab
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# a0a3a5ac1a1041b1bffb1c1a46b030b8
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# f984e303bbfa46ef901204c95491ed91
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 0f8f6d2b7034443a979b4a4129a90689
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 975232d1850447e1a4bef00cd9e4b5ef
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 705e2a7ab5ca491f8e3c3ead629e92a6
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 9bd44703404f476aad626bdae2bd8bb2
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 7e0e9fa43d464b03bdcf854c85b7d973
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 4007f069fe8041b3ac60426558690b0d
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 7a02a380975d4eaaa02ece52c8a718d7
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 6d1cd17d06c9461ea4a92ed87850c6d7
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# aa0a27abef17472ba554740c9f62cd87
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 8243cf8bc39d46819629fc0b42061144
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 71a9f03a5a29432993728368dc3eccc8
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 07300929ee194ea09534d2997d7f46c7
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# a38187902d664e80a64d94a9ed63c9ad
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 2bcbdf0e1b134f659b050a284566a0e4
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# d73ee64b292441c69a23b71c5d4bfbd5
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 75a8167f33bf453ebdc69599ab7b3cf4
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 377396e9f4a24adbaa9e43ea3ca7ac7a
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

