# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-25 13:38\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:33
# 4e7607d2c79647bfb1f37c5a96d9bdee
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 9dc55a1798b7426c93af06ab7c010aad
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# fe04dec3dc1c4637b843db0113dc5762
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:37
# a4f4c40075ab4cad885bfe0d99f60dd3
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:40
# 1f458277f3a542bda58e5f6477576213
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 2e1897c48ac44482ae474481e6ff2907
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 728f45da37a0408ab07bf57fa1b03060
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 054e044ae28541eb8f86f7b89c3851b5
# 93e22bd27c364362bd89cc4d7bc30e6c
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 7479f3e70de642b095dd1d70b807f63b
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 874a08339b814664a9320c4bc03d75aa
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# fa49ba553150438986dba8e5f990ce56
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 1974e366fbd5414d990882f508e67eaa
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# d7564b1520804b6ca900290d8fb00b3b
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 69302a115bf2448790375886e00e24d3
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:44
# 0e52965e9f944e9a914b7ad85ba21edd
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:45
# 19f008b1e68b4091b445c4e0a9623d68
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:47
# 8cf2f4823456460e851bdf4ba5b3109a
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:48
# 7705f6039c784dcf82a064c011390f21
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:49
# fd35e18a1b6847eebd39ac123cf44310
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:50
# e90d941afe144a4a930772d6759a8bd0
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:51
# fb25a24e9aa9409f995c1fca75804bcd
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:54
# e4e960acaadb4300aae5fbea71846be2
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:55
# e670976214dd4db1a6b67a176e4e6600
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:63
# 7b2bc3c9bfdc4beba375a0860786faa0
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:66
# 2c6a972ceafb4948bd5ec22006ade4be
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:67
# 3a22937b289e447c8029bb17bf2003c5
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:69
# cf6effff5a734699bf84d84a23a046aa
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:76
# 45001ee1970144559ed7c7f719e1d1fd
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:77
# fcdf83e6626449eaa1370331d4de961c
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:79
# 122ca54bb6f0475c8601c69577942865
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:85
# 3776db6113ae466cb767cde296b8dddc
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:87
# bc733b8fb4604e789295c64c72cd1629
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:88
# ab43b7fc663048c2b779bcb47b97272b
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:89
# 850cf7ff96d74ed68233213413d4eaff
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:91
# e36e8bca7ae048ac8e22b60d2d6897d2
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:97
#: ../source/chef_shell.rst:118
#: ../source/chef_shell.rst:134
#: ../source/chef_shell.rst:146
#: ../source/chef_shell.rst:164
#: ../source/chef_shell.rst:184
# b06b1ea206934bb8bb8a597642be8b8b
# dda76f1ff8ed405babebd9c8c23f6e89
# 17b08e79aa2b4f138b6e701bb7e82457
# 6b1af1ced2f9449eb447ad11268f0221
# 9e48eab36def421396904a40bd9e5326
# 63c16b0120e94302ab41d9843ed670b6
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:112
# bcb2eff57f474cb3b06201c4b993f42b
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:128
# 0bf3b458a1a64d98b6fcae2da5318771
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:140
# 0d4c9c8784374c1e82f03d5e1069e231
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:152
# 1f962494f97a415691fa3cb7a91f4109
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:158
# 56873c7bb10a41e891c9bd1baa3164ae
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:177
# 9b97fb180ba0478bb3a2878e39341361
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:195
# 987dab7794cf469d82b2691f3c1dbff8
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:197
# e279d250cc9f4783ad565e8caf2d2f33
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:200
# 2a1f6cbe102b44c18fb770936181c8e4
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 1c44405488434ee28c69d331f5506a19
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:204
# 36aed26d5e394baf821f080a94e60a14
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 62056ebeda8a490fa1b26d7c72f34154
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 4f3674a692bd46fcb6f3ceefd478c3c0
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# ac3cde2f5e394ac4ab1ecf49360ca639
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:208
# 9e0b19a963ad4bc9b799195f29def712
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 2252c12f9acd43ffb62ea8a2bd48ef84
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 2e9efdf9ba5641eb911fa32746190781
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 48b1932fbc6b4db9851bd2945df5af93
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 8e7d0ca33a7845eb95eb77d36bcfb08c
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:212
# 7e82e18e85c24021aa16f6357577e964
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 26935e84c7294dcfb59ef16405549216
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:216
# 75e44f0dd9534936b8854966600ff85e
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 848b29cf705540a9ac4d56ee4ce07243
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 7de7fd5f97204e4c9326210a75d93d7d
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# cdaf0df402b04aa28495a2f83ed4f8cf
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# b5f207126e7d424c85da470cf655e834
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 0dbdbf9cb181466692c0c770b0ca7d89
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 89fd6e7b659148f5805b19af580ac12a
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 9203a12240914961a2659bffa989056d
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:220
#: ../source/chef_shell.rst:391
# ffa91075873c4009a8d91c5a0f69b9ed
# 6071782ad9ac49bbac2f9ec4ee9caf18
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:221
# bbdf52a3a5b44b229a7d7c781d6f530e
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:223
# a1936ad6d44c4313b0d5a967fe2cf887
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:227
# 16dda48cb8b64a6da55b66a126077f40
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 14edcf44117d4187b62f40a6c28621e6
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:232
# 5db26d59dda440f097a270ba1b3a14bf
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:233
# 0031befceb0844b9b5623ddecbb4cf37
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:243
# 82e28030f3254f719fc75cedc948ab9d
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:254
# 1d9784941ac6465f808e696adda856bc
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:261
# 5563b4fc78f343bf86ac8b21c382e49b
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:268
# ad68f1c0d8564f3abe8cd61f281f8512
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:289
# cf0955aa0996452d9bf93ebcb2b7aeeb
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:296
# 7aa18968abca46bca3c9973337359363
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:313
# f23ce561c25c446baf2023bb812a9fb2
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:314
# 13a0c4a93b8a492e9076b2f8d553fbe7
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:333
# d1c0d8841e0c49b9afe3944c41624124
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:342
# acc3cc50252d4a68b92e8d970a7575a7
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:350
# 8bb472c06717449d92a627a7d5cc8fa5
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:353
# 9a391b65a72643a198aecc8f408b8a90
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:354
# 446e28fb437f4ab694371d3145e48715
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:364
# 18871c25b214431ea1eaf56d02f83b0d
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:387
# b1fec4c3287c4b778943884864361af4
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:388
# cf9aad22998444668f3d8eda4235afdc
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:392
# dd83ea69527c494ea7b9fb6867f3f621
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:395
# 187090abcc8a4ac8ab3cfc63cf49b7f5
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:396
# 1b347ea9473d43938949d4625e5f95b9
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:398
# e264afe9cb97495194799ac7c2a41a6d
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:417
# 683e7c15c77545fb82dee8c208496538
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:424
# c04bc03d5cd4404ba5d06abf1b314bfa
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:457
# 113935c2ed43402e9861bb580a1920fd
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:467
# 49d2392d95d041779524bdbf915f4668
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:476
# dbacd1f93a6349b79c1c316f71f3bee6
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:484
# c851b75cc40b4f01a72926b32146b0d4
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:497
# 43fe160ca57b408d95ec43f5e5e4a775
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:507
# b006db1d4fe44681acbabcfc63f87bb2
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:508
# 5005a4d998cf465fbe9558220745f22e
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:514
# bacdf1d1a1f4409b8327f6cb96fb3d6e
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

