# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-23 17:56\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 9894d3b286b94f7a9909e8b4dec53b4e
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# d87f02099d9244e8933f1475341e6b92
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 83875091cd404798aab6c1abec6697cc
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 20d78a4eb9894094a9ee891b74a675a1
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 7a894be6692f443e9b5e0d5eaf373d9f
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 88444f7ba5fe47b9b666104846059014
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# d48d940058a240e9971e54d567236fcb
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# d14912868b6943908efab1f8be3a9dac
# e335fba32734411fb8875a1495b1a887
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# f895d11350914a33bc103a56bd484c36
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 8eb6619426eb4afda7a27316b449feaf
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 2fbb10cf1cc344b8beb4def8eaa8da47
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 3f3fabcb26324757b4879766346210a8
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 75662877b3984f6b910a67962ef3a14e
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# f5bdad664b554b7a8bf2d23e1e17e9a7
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 932e10c7b3de40f58311ad3f3531cfdf
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# ca8eae5ba567471f95bb3c8d176b2134
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 642c7dd3819a4f43866a7872ac2e8586
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 10472cf6382c43249f18bce9664a06f8
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 665f6fd351fc4aea9f315f2924fc703f
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# c5a2322f37954dc4be1bd19721b8e086
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 06650befbeac4f0184bc13601560710f
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 8dcb392ebb07409380615e16fc965e12
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 2ba0f647075c425abdf68080a6a3ce7a
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 111fdab19ae7436dafa01dcba0a230d7
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# dae44488e2134f66a0706532489377d7
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 62bab4deb2a04a05a9079eedffe83fa3
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 32471065aa754ffb946b519185af90f7
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# c48b25f21e8d41d6a9ca0e2e4c28b3b9
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 7dd1a2e61f65427782b339af3294b616
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 17caded7135e4abdac98f015f904e82b
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# a9339a78161641fa95c486783e93e48e
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# d61e25eb777c4b3a89c79a42d3e6fc9d
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# 33822a9030cc475383c4dc1fc7e3fc63
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# d7f00d06b4f34595b6b08c64325902da
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# f962692a426a4744a7d41ea2f34e94be
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 973f308554d448bb8c1dd0a3e06aa73f
# 5a81fb265fe14890b8d9057773d0b81d
# b4a5f20f8e264f00a73e8db726446a86
# 59734465cdac44868d16a820df4e9862
# a80793b4cd824f14869b0d7afd4be226
# 0c1f757c428e4b78acf444b2fd03029f
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# d69b7aea350c42738b0007c7e8b58fe9
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 74c1810a790e45f6b977f5e498911c94
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 335ad6b902e44069a083e200578545d3
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 960e7a9ab06d4f5e959b236e94eb323f
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# e3bf07e72de94cb2a6fcd781e41e305c
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 5b1a84eb1c004817890f0605ed5c9980
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 70d0fe3fda59412981306e2f206410d5
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# be6381d4dd3e4c0c8cb82541364331e5
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 87cb83e3fa0e4f0eb20b6012cc69b3fa
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 76e1b259df6a4e1296a671f736efb7eb
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 48fa50275c764f8bb98bb3c8d6df5cca
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 7a4f506517624b409bcbbcf1ade939ae
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 5cecdefa40674bd086ed84302f9d92cd
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 78339ae7e0a34d18a4927e426fa5850a
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 9c35afecdb024f76b7d3b8b486dd5c97
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 28d17cb86f8a440892753a1d07357678
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# aa9a8ffff9d5425cbcae2ec3c55f4846
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# a86eb2b56659416fb5061ef0620a3b1e
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 9b902f53c1294bbcb394a3ffb0191563
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 429bfc2c4b3d49cc9d5e649c8264786c
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# f314898f30f640da86f5423a3d4e3abf
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 7c263f95257244d5932d20651b05530f
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# bceccd930fbe4842be91a23c966353a2
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# ec2ae70525a3419fa82d3e55655317f1
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# a660612a22cd4dfbb2db218bd096ca0b
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 402537115b5f4f21ad05845644bc3cf1
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# b4a4c09515e04011abc7f3b971cb61ce
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 575ec84163524f3cb4a07f3016828c93
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# d6c46ab5d2c54342bfa28ffb85daee28
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 0bffb5e6b06e464a81ca1a1f59b0f0a0
# 10510b9536f445859c7f8b192e26d079
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 492a4ceb5ee342979a56b47c0addbd67
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 3532f6748bc44b40bedf7afa6691143e
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# af3f786fcbfc40399460438cfb6423d9
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 4ae77073c5314842989984acf681e46e
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# a856e43883bd4b859f9bec74bc7173d3
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 91347ec782e34d06942a1476b0c7c95c
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 8a4379c6e2634f6f95693700177c5fb4
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# ddd76792af6a4c16ae5607d47ea4f8f3
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# e12d92cac11a4293b7e95e2ffb077a61
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 175078fb374c462289790644697c105e
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 72c51738035545669422d31ba21021ea
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 9f090cbc48694152af02544aba9be27e
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 77a1444b2db74c37acb4a6e5e6096aff
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 0bf9008a243e463baf28624ddfcf4818
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# e3594246cef441bf998ba16fe353ff18
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# e4f1f0ec2a1c409ab09727b85a7eaa0e
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 4cb386db3c1f41a8b9177e8b1b6aaa87
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# f7975a6c1bbe48e794be758ae772c4d1
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 4215ecf6a9744c0982f0ab0d7b228dbe
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# a21fa496da5c47a9aeee8fb17dc3f50b
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# d71ecedb772a4f358b22898678d05cfd
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# c7f12d19aa39410e998bdcad82a2f0a0
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 836ae6497bcd40f2bc9a0b133a108285
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# c8a9ef582b1943518a44d26fe71e10eb
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 2f046e321eca47c699bdfb6d7ce5742f
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# deaaaee6b06d4bbd9c37d3b47cc6cd85
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# d4b629f7fc0c4917a2f67bef18ba40f7
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 7cdddc54a53744599cd2d81cd45114ea
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 8928406867564522822f53a66d03cc7a
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# b242f17af4c645ebaa43f5b8aa1e39cd
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 016b2576700e4cc78b1b7d60e5855253
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 1bbbc6dc6e424c5ebb2a0f67f3183f54
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# da385f5227384a6b8e199b210819276e
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# d075a6dc41fa42bcabcbc2becf66b284
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# b65e0639bafe448cbb3477491fa020dc
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# c972ac65f9754b8cb8ddc4fd6ed6b54c
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

