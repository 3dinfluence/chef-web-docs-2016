# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-25 13:54-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# a36386c048c441bba42d52616ead8331
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# f029fd7a19f74a329f274454ae336429
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 9252e5d235a0449caf3db1c04de6373d
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 3aff1a413979496dae59f5429a293717
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# d644265312b24397b0cfd0c15031a17c
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 9653be49b93d4b48b0df8fb064e29deb
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 28f522f24c4d40dca6ff9117537a5c0e
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# e49d946fb86847208229d238ca421830
# b1fca6bb819e41cf83f16e80aac504f3
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 3a9521a7c3e74bbd87a9e670d1c3cfe9
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 04dd5979458d4041a6b74b7707642e13
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 4d6b35e59fb048de966bf7ad359e9206
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 723641cbb50e445fa1d0deb3875e6edc
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# db5b20b042934f289ebac0fa8a750f5f
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 06461208e2dd4f76b4fb284d7952fe2b
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 13f400bfce284a109100c50612438cd1
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 9ad003fee2174ffbbc6daf1f6f8802df
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 545cf75d46414a64a3e1d740f5a28e35
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 7e9e9a95ff2f4e2990934503b9ef9c89
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# fbb3be9ec4d64131a4288e0c2a014eaf
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 9565ea896dba4de6afd03bf2c23fcb2e
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 8d125da398b54a69a3dbadf949abfb2a
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# d03a6bfc4bd9473face320492da4537d
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# ac0136fda7cd407e8e85f7975995c29b
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# deb984484985471abf52c6685b6855d3
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 8f2f50410332464480333314a6c238de
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 0707efc6442d4b7ea1bddc8fe30bd3ad
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# b6ef331bd9094933afb3f5497c3bd437
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 3a1ee6831d964a66864d910f96493a38
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 44fcf801462f40eda2f7b30bfb32fe59
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 8f5bf2bc179e4e238f8c08b7cf894e90
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 400e40cd30c641f6b07a5d1d7c0e7893
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 1524665fb9f34f2fbcc7a72c392509a2
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# a7e7b74fc9fb4207a9ec18958e2c9a61
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 2521ac33ce134c83b555236b3d466092
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 51c4dc228b9e4e759256edeab3f9b2c1
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 245356d09e894097a1ac4414daed6eac
# abe5aae1a0424364a92aca68534af82c
# f8c3d5cfc87d47f3901758a36dc7e4b3
# c03f916125eb4d40a75f34aa3c5ccc39
# d86ff4bc68614f99954d91bbe767dc5a
# 549261bdee4e4fd4b8b509a25e750f63
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 9bb681639e3f4b8595ae1308c542dc8b
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 3825dc64dc494e4c95e90617415b611e
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 717838d7b742448f875170d6a16b6f2a
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 6dd97f276e91425c9cd4c7aad35a73f2
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 998aab721c4b4e018b04c53c11674102
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# a292629106174d3bbdd8888611e02d3f
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 0a5a1a8e520a4b28902d560cc39c5c5d
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 94a66bf0a5df4bd2b266b60be9f2df2e
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 614c1ff31d3a4520bc552956e5719b0b
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 9a32f12bf70e4752baadf87045412d87
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 931d5fa2a946412ba9029026ad2070fa
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 34d8ebc82cb646e69d62a4853d682dd1
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# d524bcaf0af94eb2832b1adacefdfc88
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# b137989c8be843d987d1687fef4bbdda
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 8a8d44b06a964a83b5e7183cec6564a5
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# bce4061974304afb9d36ac8ec2506599
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 20fe05dd9bbd4ba586625567f5e5996b
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 86497344012c4d1d899ca97da4211395
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# aa2d648e5e5f45469ae27cf1966b7071
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 1d93a0202ac04699949499d55c156245
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# ecffd7348f1541dfb98a53dcb82341c1
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 914578644b5a434280fe1980b7f9db51
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 14a267f552ef4aefa1dfec853e1f9b35
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# f03834fd053349278e74e9c82b0ba768
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 6b52af6bc58049c2b0bdedfee42078fe
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# e3879b20813d4883aafa134d9d2fd357
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 3d7c7e001cf54cabb6d29dfcdc3d94ee
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# d531ad04ae644728a2e1e8121b98e51a
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 56f9a4478f5045d38fed4ddba518eb8c
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 8272f40d0ff14b11a9c88ceef6db4895
# 94cc00737cb64c1892488895ba9f1f17
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 8a74e709b9324b1ab7bc96d36aab0510
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 9f3ef57d93644731978aa1e23e788e3f
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# c316208abaf64dbdb14da3aea6feb603
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# b2a66dc9c125491db52ae4055290fe6a
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 4eb9e0e8e200400888b78c0d2595e6ba
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 4037878aef164115b72b77d0df4cadc1
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 0afc9ab80c9e4ce493cd84c09eace1e3
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 43880fd2325247fcb0d33bf57a2e11a7
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 1e4505a9055e4b828de99b5d894a7b57
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# b42a402e21854bbc8999505fc7766e76
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 248a8980444f4532b9835e660d0e0610
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 6d19324b843d4f9d953741efaac35207
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 0b26764a57784bf08f50b8c9f948f874
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# e736f3394cdb48c9a3f2a8708a998536
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# f179b9da738342818183d893442a3df7
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 11b46cc7a4114ca48d1d977fe52bb1b4
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# edba9bdce1894dffa4222ee82c7e21a2
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# c7098d2b2fa34489a3fa8be35cbcbc92
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 0e606784cb624d358e839f40e2bc2f18
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 319acece43ca47849f50f91ba2f9c386
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# a1986f06b0d449d3825ecf432a0f816c
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 882e1da895754e749955b5f60e96a83a
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# c1c445bff6f74a07bd4b0b2d10f5f752
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 438253b45cbd4fd99b94910ca5b9ce2c
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# fe1312e0a8c0454fabb38aefda787e18
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# af0183cfd71b4acda9b29e2ef34e6ca6
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 78e5434ac46542d4b6f413849853165b
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# aefcc1c6533948988f34e4f653151475
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 17688162b575410c8c8287ce44d33bf8
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# df95d436b0f4476182de653c48e9a9d9
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 8c8c6df0c14c4b85b944f45d7a832f41
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 608f7977f221415bbf30513a3c24d29c
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 9e217fda286947d09c84d20f889045d7
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 0777b999d2bc44cf9f73f6bf1efd241b
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 0ac2b30b85534c53b1e6f264bdb02cb3
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 3d20e74c7ee34912b4ad3e9d580b1587
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

