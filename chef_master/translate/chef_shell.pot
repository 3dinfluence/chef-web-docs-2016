# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-21 10:57\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# bbf20dda322f4b7a90dc9230e7cbf6c2
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 4c8055d5ac8342338fe6df73b450bb59
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 3b4579bf042e4e9896796ee9721f0a75
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 31624203f7e14c5abeb168fde7864615
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 133ab8764ead491bbf4f6d289717787d
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# b9205c29b8f84736b9ce05403a3b1894
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 5bc93c2f23354e3ca499344cdbcd4ede
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 04f592dff6d94063834aaf8bf53b8290
# 748a5ad6423d4b49a457876c0609322b
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 6ee9f4b15afb4521ae8679425b428d97
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# f136e6ef159a44f7b38f3adda1bf945c
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 6987183fc7f14b41b787ee15e6fe5eef
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 68f62974d4cd4161a06cef73adc4d94f
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 8b8c6705ff5f4bcfb0029b8b93e0ae96
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# ff345c93cc3e423c9517b3a85739acfd
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# abb2237fdff94c9ca128dc2bc95460c5
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 6991d24f1fa14eb79bb1a23b3c7a878a
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# bbdbcef351b9425888f5a8cc4735abf7
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# bd5f51a1f81e48fdb29bacb409399ace
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# a3c22a51312c4bcdb073802a85ed3bfe
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 858be540b3364926b36d276d8292f4fa
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# d76e718fb9524c10b6ed23ad18c2dfa4
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 4992e1685dcc4407a4945fb0af3e458d
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 749aa149a31a442f8c7bd977a8f89647
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 6d31d7fd6d124a72bd96a02d212ff211
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 88d893f6092d4bf7bbded615e480d801
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 5bbd4d1c0f26473cbd68441b627c4a9f
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 746ee244ef244f8a85c41fb8a32ca1a5
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 4a6e88660bb94d829d835626297efe50
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 155fe1000cb5489dafa28e5a5c8128b9
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# e085cccb7ffb4345901fc7c3b517323c
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# c23bd28f6d2149d6a3e699c416b30d08
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# b3c5ba627b444e53a1e684bef224ff5d
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# a2b0f5ce1ea1460eb4a66754831ea84c
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 770c08ed39ef4dfb9085a734ca0f744e
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 0d3b743828724670a787234f13e21f5a
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# a23d00cb34a6440b876fd9907e25d90f
# 102b19795f6c4647bb923eb3efd68c14
# b5e601b8c47043dc87c565fd1858ef3d
# 754dde69817c4e3bb0abf2dddfdc66f9
# 1bccfc15ef2b4d88bedb95d7456a5926
# cae639dd31954aabb935d63b623a22d8
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# db5ba5be860149fba744c7a1058c815c
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# b2b7792f3f2d40d0b35fd538f906d0dc
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 8e8a137eee3a4f9eae653d49fc68fa60
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# fbcc1c50193e423fadd2ce4d97e0faf5
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# b5dd54999788441685015b60ceaa1eec
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 5bc7e3d6722145cebfee6f959dd1fbba
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 15014f659e114326b3c5bef3b564d6f1
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# d0bc90473676479e9f6036b9fdf2ba65
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# df4b65f66acb4b42bc7d863ec40dd574
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 4bce2a6deee140099eaa7d63e39f4f53
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 0fdd817729d6434990f20d84958c33f8
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 93ffa8469b2f41879f8b2656d251bfeb
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# a4cb6899dd6b477d93740f546ea91aa5
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 569fea12d608455582cc565a2c3efbca
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 39399e3d36294fe5be92f0db18d5a258
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 8d8690d86bff487f8661d4f23f44029e
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 2b34670118bc4005ac2e1baaa603f53c
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 02c88ca8a9b44cceaf0a55dd60980482
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# dc1bc3d5565c42cb848da708556621fd
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 762062473fd34ac0b0b2ae02d14c1ec7
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# f01b726d71564fdab411771226e89c8a
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 43b3740320a14a86965b5f102e1b50e0
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# da2f792c1ff646f5a96faf58ecd315a9
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 5879022f357b4ada89930a5488801ac2
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 9f898e2e33a04f09924c1207b189d793
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# fc63ec06e3de4dea9e08e6fb32305d0f
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 2406bf6aa91c4026ac133589c651c24b
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# d976a9753bb941acb6d30d6623957864
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 4025d9a897c54ae6a817311cab0f62b4
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 4bed9be7d1a44ef1bdbaf0a6ee7bfad3
# 1a3840d573c14f1bb57989f9e86f2a59
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 4b4f637199244183a1eae32f398837f9
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 664b4b0e3c7f421a8ea00fc5d32881f8
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 972201d0cdb7446c92490e122fc0f85f
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 8755f5320fba47529c75978b99292361
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# c78500cb63394eecadc01577de1b30ad
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# a570970705914e8dabeb3a3b9eae60f1
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# bfb2e0e33dc247caa06552a32fedcb0f
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 6f4e77c1bf6e46eb855a2bd192b1f196
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# a927a2a9cfc24a4392ac6d9a7f56960f
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 5e21fa16dbd446d486e48eafd7431cf3
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# aa9c557d49514028831b42cbf326a27b
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 2e89a87d402a4042b18777bdbedf74f4
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 366c1a83360f457998b6ae17057d60be
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 61d9aad6b51f479da516155590274c4e
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 5a7d2efb7b4b4513831665c369e42668
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 2d75175901cd4a74b76053ef4e75c537
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 12107f09a8fa4487b28352256d3c460d
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 92494a73431f402d9d03961d10efaeba
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 21fabd78ef074b2794056ca9402798f8
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 35dce89005ca4dd18ea1703d8dd22d2c
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 620cd123489e4b889d871a04483787f2
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 27b98d34f6d04d6ab90749128af34af8
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 66c4b66831824515b7c0dbca8a2ff4fe
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# b39eee2ec92a41c1a6a6fb20ce9d1012
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# b31494e8be304285a2bd02b40a8d48d0
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# d07e2693567e4385bdca0946f0bd0479
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 33674e5e62a14bf78b2874e8e8fd221b
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 64e06628c6034084942cf71f224ea95a
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 2d3493dca33b4451bc54c1b8468d0271
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# ee9a4f14c0f94dc181e64d2d6ae55254
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 1d2956641b00488faa6ccbbee929f514
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# f4b8d98130b4452f9f4033fd23de3848
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# b2cf6e4cb2ec45ed8b5ffa004bdd46f9
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 557fabc11d594f17848225a5fcfca957
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# bb0db0c9a1b64a4c8b325eef34422765
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# c334d5942aeb4aa2a50ceae8b78e83dc
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

