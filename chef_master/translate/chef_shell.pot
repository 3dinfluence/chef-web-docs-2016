# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-02-10 09:43-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 4266763c45c24cea868fe767c1336eec
msgid "|chef shell|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 6dfd5a160dce4d91b638b3f0f5c44307
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../source/chef_shell.rst:12
# 2be966085ce04cdb81d66c6baf22afd6
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 3c580add6e17487f9074cad8c5517fd2
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# c30a6523e4084939be7eb9c9d56d6fb1
msgid "|chef shell| is tool that is run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# c5a61ca9b5a14ab585061794ef7c3f86
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# cdf900ccc4cb4cfa946f9bc0f8f6ebcc
# 2af332ed1b84453e9e9ab1c3d0279279
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 5428eede06d24f59bd7df3be13e164a8
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 7ccbfdb3dc874715adc102ff5c68f51d
msgid "Default. No cookbooks are loaded, and the run list is empty."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 1a0b8a3871cf4763af74b01ad8cbb597
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 20117cef1d14469c97ef7fdfbc15707a
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# aff29a7ee7444f488becc902f6821e98
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 1ddcee531c9e45bdad3d796a73dc4556
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 2ca57fa3c35f477da040b507b3e5ee16
msgid "Configure"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:5
# 37b423799b8d4a63b745503bd8cb1cf3
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:7
# 74959081df114f53958bb2823ac74c78
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:8
# 2fedf21ae8884978b190c648fee98749
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:9
# 24200930dc854fec80ba9dc894ce7fa2
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:10
# 8add4b2de26c4bdbab6ef9a2a9b3001e
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:11
# 62c7ea5465574effb4a64b3e541389c6
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:23
# b55dc590b5f443f88f0f9689a1e14d2e
msgid "|chef_shell rb|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config_rb.rst:5
# 30963b82077d4608b321b05055cc30e4
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config_rb.rst:13
# f128fb4c1c664e5f8a5ab4064dfb5829
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:27
# 13c154c94a044f3ba63f4bfff0ab30ad
msgid "Run as a |chef client_title|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_run_as_chef_client.rst:5
# 201441dfe42f4664acf132b632957e92
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_run_as_chef_client.rst:7
# c5350aca3af34ed4895f67cefe087601
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:31
# 481a58f26cef44ac8e8873fbe9955e2d
msgid "Manage"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:5
# d21b7b4a8b6e4243a1a2fa6aaad66a17
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:7
# 62f5a1ccc5c14e8188f1739dfb5fe7df
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:13
# cfdca4ffab014bf08da4d192001bfd95
msgid "where:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:15
# fc8cd22e4669403b905bc8d08c2b2570
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:16
# db937780516944d09a5b5839ef565be9
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:17
# e38b38130a724528bcbd9d2bdcebef98
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:19
# 739e9a851ea84c1fbb91e25b13f65cd9
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:25
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:46
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:62
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:74
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:92
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:112
# 283bfdb1445e487188e3bb5de0ff47e5
# 361fa06798d540ec907fd49f39340f9b
# 48f19435118144f8b8fb8670baeb52ad
# 7598b0fbe2bd4f20aef5c88fb7d82236
# 482d728e57c34c179a27ec7b0f874347
# 5057029638c44d72ad35cb6d6ed69e67
msgid "to return something similar to:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:40
# ca9c317b0028448ea6b1dea8124a753e
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:56
# 6c4f88e6a1d14835b68b44e44a93f63f
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:68
# 3bcfbe41c59d472482cfc798150fc0f6
msgid "or:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:80
# eaeff6c1f6584094af2892d89df92332
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:86
# f5e1341baef445458efe74a47ff05354
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:105
# f3733e9623d54ad1acfbb5a7234a38d6
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:35
# f84a1c01e5a7407a8c077ba9c073dd9d
msgid "Use Breakpoints"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_breakpoints.rst:5
# 74ab2145350f481eb261c2eecad38efd
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:39
# 748793a365e64136b3325fe04086cc7b
msgid "breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:4
# 125e9a43c30e42f5a9714957373d5cc0
msgid "Use the |resource breakpoint| resource to add breakpoints to recipes. Run the |chef client| in |chef shell| mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the |chef server|."
msgstr ""

#: ../source/chef_shell.rst:43
# 9ceacb7a830b4553995ae72aae4e57b6
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# b73b15fe520f405fbc0475ca5ca1aa03
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 48db06adb5ad4e33ba45e12c2245522c
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 09a7c56519d045ab902bd6af4406846d
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:47
# 0810d5b3482a400089feb442f2206782
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 6453d185ec0f407c99718a655046e14d
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 5208922e3f5348e9845024251a360daf
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# fcccefd281c14baea6086b1364118782
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 9566f7aa46b048649b08a67bc4231f54
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:51
# 772952c0e5cd4cf383cc2cb40bfe2170
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 606e1c33062f4161a0407218c684eaa9
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:55
# 3c577d43fdcf4cb89095b5b02a1e1d9e
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 6fa69d412dcb4173885d3618a0897c96
msgid "This resource has the following providers:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 8a6e54c3c74d452cb04b4b917e86e9c3
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 868bd80220ed4c898780dec099ad6844
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# c34c401ea9d94e9c876c472e6dd3bef7
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 31c8dede8ac04318b8dae59d760382ea
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 61918345807c4d7ebe7aa278fcba233d
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# e03d1eb27324437cb314e8b78c4e892c
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:59
#: ../source/chef_shell.rst:83
# 03ac51993d59498eb221e1c711f1d91e
# d9681dd67a124a2e862be353bdff8c75
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:60
# 9e9a2ce5b0754708a7c34ebbc3a80129
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:62
# 1cab9819d6b542e799f1ae6eab474cf8
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:66
# 0c3cea79df0745e491102b9c99c94c18
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# a82e6ca6f6bd47788d0fffff9be2bd86
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:71
# 4f633f3b9c1c4381b27e75653711d18c
msgid "Step Through Run-list"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:5
# b0ee3243ad9c462eb9e01874454936f6
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:15
# b64c3514f55146b4adca827f9a3ce6bd
msgid "and then run the |chef client|:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:26
# e3ba1c7f6daf41a68b627ef2815b1820
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:33
# a094f8fb6bfa4ddd86681d6bae509a6a
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:40
# fada5ae609f2436a9b139b02b86bdb96
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:61
# e9ef8c0f296547ba95771b9658515a1e
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:68
# c6327083394d462db9d8f87d0fad4460
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:75
# 7caee131018d4fd4bc57c248cbbc0067
msgid "Debug Existing Recipe"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:5
# 5c1b95ad592a4cc8b2b74f64dde9b37c
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:24
# fff22c40fc454e7eb4cfe270c779f987
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:33
# 76565172d45a49abbcf3b9adf1a1daa4
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:41
# a0c37e88582a4bbca9b63a2e1bda5a4a
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:79
# 7967b82900524b4289467770c399f82e
msgid "Advanced Debugging"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_advanced_debug.rst:5
# 83e77981efc14c8cb72b770403e68b6b
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_advanced_debug.rst:15
# 3a53d4fbb557454187fc81fbd1a5136a
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:84
# f81e19de591c4619824b51228dd47342
msgid "The following examples show how to use |chef shell|."
msgstr ""

#: ../source/chef_shell.rst:87
# a160eec287324da6b1c645279e6c0ebd
msgid "\"Hello World\""
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:5
# 9cd8c4849ce041bb88f18bb2f35c0c64
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:7
# 001a382322fd456787ad718cddb979b6
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:26
# dd2dfe757fdd43659633c084f9ce27f7
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:33
# 5dc6c4d852b24d119e11fe5d477dd0e0
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:66
# f383ee54eb984691905779007290dc4f
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:76
# bded898b190c4d718f7d56c034836406
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:85
# 6c510f79aa7f492aab0134cec389aed9
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:93
# 875910e731b249c4b6f9beffe98e1ad5
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:106
# e1f76e46ffbe4da48a599c48007d71b5
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:91
# 7c4ac241162d4c4f82016afd1b9868b9
msgid "Get Specific Nodes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_get_specific_nodes.rst:5
# 23341be573eb4f6191e31102be7c4b28
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_get_specific_nodes.rst:11
# aec819abfd0d4acc81791da1120c6638
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

