# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-02 12:37\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:33
# c2c0b0dd549441a6b10ab35fdd7e5b0c
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 55f942368b0742019fdb4df9c3e99602
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# b0b059f13bdb42098869f82ab73ccb1c
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:37
# b07c42576f964608976ba49550339631
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:40
# 1fa8b9aa28ea40638ff7807c9b40c352
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# ade23253270f4ae6843815caa116634c
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# c0895ef8d8b7493885f5f822130eba93
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 36e6a41fb9ec410bb809f95ab59c76c1
# 87bb984df68045da8f2c3aca57ad98be
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# b7ba7e0571a34c299a8b6a43a89733ac
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 63dc7bbf85a94b34a24480d79978190b
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# e4611f3eea16445b95e54780a8cabb6e
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# a895ba24c30d4cc9a897d764f4b3988c
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 38c47aea64924754a5e9d0983ebbd0ba
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# b99a62902c7d4b099ed4b3b89527fc43
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:44
# b1664b0fb3e1432f82a93496947ada80
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:45
# 20737cfe515f45c183796490913c60cf
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:47
# bc1ba2de279e416fbd0efdf4785d1f04
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:48
# b3ae44face2d4ef2a204188d60998ffc
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:49
# df8e78fa4dec441c88f5ccab6aef0831
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:50
# 1d51b4980f674a6fbff10bc01c7ada08
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:51
# bb169e73fec94edfb031ac5cf327e649
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:54
# 5e407d56af2d404ba27b8efc531efeab
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:55
# 634630548474456185529dee74fe077f
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:63
# 829e9d4427b54321a0f51cc439c8fa01
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:66
# a8a649ea4fa8420a99c5e7cdf8606ec5
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:67
# f6233d7858574099a86b9a56e023fddb
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:69
# fdf4cc33c19e4400ac495ec6a30e7198
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:76
# f305289a1ffd40c488c1bae4daa10a99
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:77
# 0a2db353aea74a72b5099c70a3abda73
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:79
# 8006ef06a1994d97a20f1dd63be81023
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:85
# aa26c6d762b6411099f1f48d37b616f1
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:87
# be81fa4901ec48b2b536e072bc5723f4
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:88
# 2d5974f4e75046b4bbcaa50d182f4985
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:89
# 8b0d583999c943bcbe8778c9983300b8
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:91
# 50370dbb68364b90b6a1066cbded84e1
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:97
#: ../source/chef_shell.rst:118
#: ../source/chef_shell.rst:134
#: ../source/chef_shell.rst:146
#: ../source/chef_shell.rst:164
#: ../source/chef_shell.rst:184
# da307059b4fc49bf899664c4ae4f83a2
# a8f600e384c747ee9ab496568ad240b5
# 043d8d9c1011451f8228adbbbf0aae3e
# 19d387dfdaf940ba913ad0b36b02deb1
# 6564c2f87d7c485285cf8e248f6a7293
# 25d86bd087e0448aaac51bec7133dabf
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:112
# 424e34d17aad47d9923fb43c3f3db178
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:128
# c63fd6f67d6c4d11a256e749fce17371
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:140
# 4fd1beec1c8e447383ecb39872abbd64
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:152
# 19a9f5e2ec4b43379c63ef7e77d6245a
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:158
# 76fc7a073b27499583c95665ef4ec7f3
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:177
# 9fc52d48b9bc4079829088b70798645b
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:195
# 4631303a6d024cbf9d6ac22769f0d7e2
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:197
# 5bf97e1e2bce43c59d421f0c5702b720
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:200
# 0edb9d6b7a0946ed9f86b7b9ce759f45
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 92291433ac76453995a62c39972b3b52
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:204
# 2504fa4878a24a3ab84990b40588fc9b
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 88ee8d7ddf0a479b99036bb72caf1824
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 23d3a8e6529e4471aa39bb261570190b
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 91e53aa2d9004c59be0c77430f5a182d
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:208
# ea53ff4d19e14c0989b8219ec2b3f014
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 0ca2b42a8e084b01b4d79829646d1772
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 89b18bab4cdd4545a2e3649f701462fe
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 24c8ec5575ff4b8faf7771cb53508a73
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# c92ba4b6614442328c0d4765fcfa5066
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:212
# 392749d26a964e4f938bb33ab88fccdb
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 3bb92a1865a14f9096a7aa7158ff9a12
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:216
# b4dbe0d2bc1442cc9d4d4b3311b14d93
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 32193dc0db6c4c3bb0e3a86c3d8b998f
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# c72f812709c54beab9f9dfffc5cd37c5
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# a72e5b295a2449ae98c01e9265139573
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 798ad669a197479aac9bad4e28c3db47
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# ab8dd60dd16648fa95ce9b11d7c21ce0
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# b0b5f875a38840a181dd6df68fc8726d
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 99adb2c919b4449d9e3f085026a5c10e
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:220
#: ../source/chef_shell.rst:391
# 6a9bd6b5b35b4943b0e78a5f293e00b2
# f3971af149e94372956262c4eaa19a72
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:221
# f589d61df9094ccfaec8a9f13b9c098d
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:223
# cfb896a5795349e0a515193ba66da629
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:227
# 759f25100744465c9720bdd141435e43
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 420c3dc8b1884da59b1d10b240b79728
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:232
# 645e5ed7210445009059ac493f4da563
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:233
# da88864d6d97458c80127d60f0756d5a
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:243
# ceb86d2224174afa9d67555ef0508277
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:254
# 0397c871eb474949a6d91cd924aca94c
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:261
# 81afb7bf968a4f0295cfc9ecf0b3c729
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:268
# 59d6c22f63034f919e57554ae5fe4c5d
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:289
# 10f9a94ac81c4cc98fe0003c33755331
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:296
# d10ecc877ecb4035a469f6a2fe86759e
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:313
# cf7459972127470592f076a0e64bd972
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:314
# 37e73dea24f54476aa7e660b207f2772
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:333
# bf4d2d0e72954f38a5c1887e298034f7
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:342
# 55cc9f280a9f415ca460b386ae5eb5e1
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:350
# 8cff0a545c3f41bda735052ac94bd5d6
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:353
# ef9d605e3cfa40bc8c988a0b1e13d2e6
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:354
# a2488e0c7ec04e66ab14606145a5f170
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:364
# 5c7cf9c626ea443cbe2ea3ba9cf51a15
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:387
# b815e266e9d743f0b2c597f818fa6f6f
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:388
# 03680e95536f40039a0fc8ea83266b2b
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:392
# 7d7528d39ff9469d94ceb17d53a31364
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:395
# 292cbcc6f1c14d81aaf6656aabc5aa60
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:396
# 9278f4dce6e740c29fd85ed3831bf5c6
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:398
# 04093fc713e14e98a2f5f6bb665512a4
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:417
# 5a5e3e87d79343c7a97b9daba35ab576
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:424
# ddab626cfe7a4e12bb854681477cd86c
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:457
# f78d33dbb34f4d96952c261c4e653340
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:467
# f78f9ad8012248b1841237f66b083d99
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:476
# c531317866a04c028564b39c8f8dd84e
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:484
# 1617f04b73424185be3cecdbe77b55b1
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:497
# 16623be1988948fc866f11769e2b365f
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:507
# ad647545117e4995a90bfbc97ba11e5f
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:508
# c606f29d186d4677b577fcd015a46569
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:514
# 9acd3411d4b146068047fac91e4514a1
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

