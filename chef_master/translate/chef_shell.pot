# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-06 00:26\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 4032d33e75214af5a56fe392a5f58cb6
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# c2d728bad9074005b34d0cd1c737d279
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 788f10452f924471ab8d14c95d9fc14e
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# ef2e11da3e2d43c98bdb58f417f8aa94
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 35e5dd503c0b4e749d614a486baabf38
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# afae76ae77e04f0f911f3fa686e36860
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# b25a482414264ac3a884bd1f046f8a8a
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# fb39b6cf746e457b9b80f3b35d875b9c
# a79b3a5ff43a48d8aac724c399de5ed2
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 058dd2ad26534f39904e3d1ef8161d50
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 7e57216d7ab248618c9ec2489fd67da4
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# b2d02585d5dd449e8b3afaf50ba657e3
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 564c96f2837b49fba5e7c2a6df43d795
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 28bf7809d00948bbb3db510ce7548652
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 4227d516b19a4f82a05051032a72bd16
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# ad5ed2b0d29b40cb90ca8ea5b59bf16c
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# e25707ae06a04c7393b2b145e6fd9943
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 84be8d2447914888ba97598ab1581cd6
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 4aed305059a24a6b81bfdb1043f2b0a2
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# d9da358019c647aa8d62ca9fbcd6daa8
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 1cfc0d3774684080b54daeb31ce27f86
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 3a0595787ffb41498502679161a962a4
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 5824548937cd42b1b41c129bd3bfa60a
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# bca0dea521954b818ee665a8db7e2006
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# bd4e702cfd054bf7aa0fcb32e1d2be1d
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# e659d25ffee346d9bf539d8494b5a959
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# b4934bbf84b546c48b50a3b32357568d
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 8fc1924be3d54c49b6eb9ad3dd23f8a0
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 80350fd4423d45f7858ebba73106e197
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 77c25711105945efb1ae7b47fdd319e5
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 1d112bf7699243669968a916e97dec59
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 1b18e078298b4fefafef77b3dd3fc0e6
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 126d29feb0a64c69bef0e21c1ec1ce51
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# f4a797218e6b4a3b849f6369e5f7732f
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# efa6ffb00f5f4d6584de2caca6a3c265
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 74262701bf8f4a1ea7f78337ed08c3bd
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 0f8b40b2ecfb4c3fb85afb801eb4842e
# 4d2ebc7d36cc4e4bb3f7e5ffb33b6a18
# 031a06e360fc461cb9a14e74dd0175e2
# ef2e168fb4784a1daca12d30115f0ce6
# 6f430bbf020644e2b428c0d402ca3234
# 75e818f9b7c142ffba6281c3f03e006d
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# a6bd59a714334ac393ee539e636d3c53
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 489d77e006b54c61b29b93c346ef22ed
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 6cf314c7ff224928b39bfb945f7749c0
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# fc1fd8fae078499fb1356b00b3e53cbe
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# fb793736c095418f95a8c3e834a1b325
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 2ebc8a23857c47a481985740a30232bd
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# d8ec7b35f9424b8f82743636eb6105ff
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 462969b84fc240f58e469206e69ad2cf
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 11bc7879fcba4dbcb8b5274c6cb2603b
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 1b587c8224b44697964241ecb9c57ca6
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# c6ebb05211284252a15e0b0b879f2533
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 1b26564a031f4ed6ae31056797eaa322
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 48fd8a9f8d334dfb8227f267221902e3
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 36dca350915d4fce90d346b7c40e2c6d
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# ed3cbbfeff6247e88d43c0fabb28bd19
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 6efbfd87e7db4fd9ad4c58834e75b3f8
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 4f4fd069b8ae44418b136555152f10f1
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 4847cf8d28d84fa8a5c6b4962bca61e2
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 5e31fe623f314cc0887e74b45be748a3
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 6b97a0bf5a20419c9666dbeb5dedb195
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 2154d53e599848359d66a4a3779edff7
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 0cd69eac20584254a7662ca3f3171b28
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# de96ab14ba904d0580a084144b0ff621
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 3d33de3a044246bb9ccb4fc9b5bf7ca1
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# e398ff28442043439daba0c7f80e462f
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# dae622caed744287a04ded950bcafa81
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 94940a9dc7384005880c24be62daa594
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 695841bb54d843228d086df9b3a2a438
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# f74507a1ff814102b19e477e076aaf2a
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 21fcce5accdb4b9d8f2b91780fd22701
# e4d86a9399cb48bcb6736904bb5f16f3
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# e67a655cdfaf45dca8bc5bfbd73b2667
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 3e79a14cce7c4060a72915e4bb6d9dc3
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# e82793cf97104709b855d23c8a9fde6e
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 93422adce4cd4bcfa3db30ad879c3c5a
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 061c84fdcc464103b327ef8f6d669e6c
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# eb4e0c1bc273475e95e966ebd98d2c93
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 1493233150ea49f3a8b5e4c1a5bb9fed
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# d3927f5e028842d6a20dc325868e16c1
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 4157dd3f98c64403a5565200d8b60910
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 075faafdc2e94769a3b77f38bbc11e04
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 392ed12961814ad0b23bade3cda0b1dd
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 169eff5adbaa4c2a9a96e33f878827a9
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# cb2e75ccf9444659afb75f402b60198c
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 157adce82f904ecf9e9a62d9c41008a2
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# bfd5b79b505945ec913148da7fb3f907
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 671c4656043547f092da41d8ed94144b
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 3a53a06a1f164c3495b62a7a95038714
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 549ebb926d5243b29a2c495c3640b2c0
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# b62170899e314ec08838b4e206f9d512
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 428f8b9964b84516b1a8bb5af6dff9a8
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 6a16b077a2334345a8c8ec475c15bc3f
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 3d4adc6e2d974e759c5453cab2c4625e
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 131016f1344a45a1aafb99018bb94ce1
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 6ef83ecaae0e4fb59a2214cef7ce8794
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# a11e4b8b198d4554a3cd323850f74a29
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 3f7cd009db09498cb5764a6ce31e0970
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 05475e72723542b482c0c14bdd8d4360
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 3fd8dc3720c5474fba65d5d514be0c1b
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 0dd44735195d4292a9b0e7ce4b760b94
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# af1534713e26433cb679a699ba9c9ced
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 36fac528ce5441789cdaa42fa6f92417
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 55f22c97a3de432883e2d67b11d60e19
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 687660fee3d24ee3bb8adc7d555dee1c
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# f9f794e20ba64c28b69e3fd4a28547da
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 01d7378cf8c14a04899c9ea4b39c62a4
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# e07390d91a46461f9cd4e74717138fa1
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

