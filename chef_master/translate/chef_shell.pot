# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-12 00:21\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:33
# 83b2e8a986fd43f087083cb123407851
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 32e7fca7d96744d1bf7506dd614ff7f8
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# b1ef3c6e8faf41bea95949d601d38a16
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:37
# 3f6f9ffc3936411e83bcdc5cf98ceda2
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:40
# 1484401c19434515bc270dd4a316d0f6
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# a65dfb1afa8f41d6b20b23762d2f646b
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 12e705b616284afdb91401d3a0968990
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 0f754819e1c14940b38c0766157763db
# 867fc96386d84503ba5b321cbc97686e
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 3a99f08d36514fe28e2c81fcad39f5ee
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 3fb0b01d2df84a5494097a4a17dc26d2
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# ca7804f4baa343f79acf269e0209b924
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# b31a6f9d161d4201a08262e985e07768
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 13a4202c6cce487eba39735c94a35e8c
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 1b6bdeb1135c4d1d993958817d908fef
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:44
# 3e3e78707c1d47a48c1d111271596889
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:45
# 1ed63ec454794b0cb511ff6727ebb5e1
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:47
# 38d5a928bc4c44ff87d1139a4c26fa4a
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:48
# efd5cb34bc4540fe8f27b9d8b1f46e34
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:49
# dcd4bc9030e143829e5cda6f8ccb0c71
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:50
# 05f802e5e98e4035b003019f3554dbb5
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:51
# 61e10472b4024033a3e1ab4f94aa36e2
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:54
# 5792fa48c82f4d81a6084b996dd45a4e
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:55
# b0bca6f108594500a7e9dd8e4e934b50
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:63
# 0d92302354fa4714a4f331ea30c6e3df
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:66
# a230f5b81fe441058839b1b53400af6f
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:67
# 9c714272244a4d05a51ef7fa9aff17f4
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:69
# bfc503e77e574e7ca3dd7aefbef67d18
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:76
# a9ced4aa6cee47d0a4419bb2946fa952
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:77
# ab96c09b65a147b98a6a54c398b46e4b
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:79
# 16138d47ef974a7681f00304ce6fae57
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:85
# c13768b7316040cca736b0ffdffc45b9
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:87
# 522d507780fe4108a0bc44720ab5180c
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:88
# 695111ddc6a54f20bd713e6563c51ab6
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:89
# 4d904c789d70463fb8d3918924b8a29f
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:91
# 31ef26d6a22647a4adef10f6270f2b71
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:97
#: ../source/chef_shell.rst:118
#: ../source/chef_shell.rst:134
#: ../source/chef_shell.rst:146
#: ../source/chef_shell.rst:164
#: ../source/chef_shell.rst:184
# 2b64a269c1124549bba7aee6aad460f4
# d95d91b6042644d480420167e6327e4e
# 7c747b1431e24d9bb2ef089960f0249b
# e3f7501cb7c345ee9e13d0c78f00cf39
# 33fc147fb8e8475b8cb621d84fa930a6
# 24ef567806ac495abccde5a6b9097d81
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:112
# 4297c518886d443a93f9dbeb94825566
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:128
# 182cfdbbd6ce4936908a9e0e3a906951
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:140
# b6821e24d8a64b3eb712404d7a2386aa
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:152
# 5e6dff27058b43bdb42ff18b136fae80
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:158
# 3fecec4060f9411cb96157a2a9d3ea08
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:177
# 6c47fb0b0e864afd8fae35c0e543000a
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:195
# 984ee2e0401d4b55ae2eee8511219d26
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:197
# 28c6512890e54b168b0fcfe6324b453f
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:200
# 02b6f7d909904a63a105542b52b5b503
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 36f70310e9fe4d7ab6b1d7eb6accb65f
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:204
# 74413c520a2d4173bfbbeb75c11a031c
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# edf1b58be9fc4012835d18da7d286001
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 30b3ef1a45b6475dbd4efaef288110bf
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 00afb63c7f1c4807b1e9d29fe28c23e8
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:208
# facd44c083dd4f30b0a89cb643669128
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# d6f1e4f8e65843faa3628324704c4437
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 25dac2a6b2da4122a6c28bd56f6afce1
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# c76f60337e6246d7b1ebab8cbc924419
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 81be4a888e5a40c8a5c61d6546b83127
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:212
# aa19e7465d9548f4ad3c5f079cd3c8c0
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# db56dc7642764f79b86e04ec0af5f33c
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:216
# 00583777066f4d1e8a6c1e94aad57ed3
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# ded6a132ce2342f698532ea04db92118
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# ee1a6452e4e34b579fc536c5ae37939d
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# a4c2bb0de556407caff388d2c943aaac
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 304c4a5a8b834b45aa700164a34e3880
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 59933c2755cf4013b2761d5fbca09104
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 62fe6a905db144be904e57ed3a947524
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 5737f8b39b7b48638a8bea90f186f007
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:220
#: ../source/chef_shell.rst:391
# ba6996a8dfca4ec2ae2d207c7499390f
# 55413f442301491488575ef7c1097f24
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:221
# 10329a915aae4b328849a80cfd0e8fa1
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:223
# 95a4c75461c44f2ebc47a2df581b4869
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:227
# cbca63b6549a4b8e966ea28a6bf0a40b
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 1a030ad352f6488b8b2b5793caf73beb
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:232
# ad7d708fdc8c4644b5c580af16280d52
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:233
# c12d6b31c7074dd1805b81be7b6976c9
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:243
# 4b0f6e9624924a7a8a1492887426f885
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:254
# d47f91749c7040189dd119106749fa4a
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:261
# 805d26e2458847e987b1c8595c4b2d6d
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:268
# 8d8e8586ba4c4443b41a5229267e2b5d
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:289
# d9d89caacac1413a807fdace861fce71
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:296
# 0da0a9da61ea4d87914e0db600c0f300
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:313
# 413a3fefd22f4a8db4ce740a3d148d19
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:314
# de92ee732d444fd4bd638de2fdd295a6
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:333
# 54f0261de3fb41879dddb4764ce406aa
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:342
# 0617eb1185874349ad5330ef8d170519
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:350
# 5073bab2dd6547e2a9f66dd8b6cac9c6
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:353
# 4fa6152d16304a6aadce2e15e2e798f7
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:354
# 1fe32ff5ec434363a5ad8af374704a8b
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:364
# fa0eee83093749359a614a9dd992a542
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:387
# 0d92c58829ee426aa561023a17a3cf24
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:388
# eec948f2f0764479b65658916cf882b0
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:392
# 727a0ca5b30948239310506ae3f7341f
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:395
# 2b9bb2a163d149e89b657355fd7b4180
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:396
# 11e7587922334dfeb4f3298732f86a72
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:398
# 5000772f596a415da197ecbad610a9c9
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:417
# dee9ee42503e47bb8df929383be2f1e5
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:424
# 8077fadccc5642a990d8990f5e2502ac
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:457
# 68f65f652b0f426999ebb0819002a046
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:467
# 9a6455f90e354c2f8088b8ae4e1e8dc6
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:476
# 26e4a76ed78a455cb4b74cabb107610b
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:484
# 5b4c2d94e87642ba909b673185436512
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:497
# 4e894d8e778b4b1fa62a7f1fe8b93b8a
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:507
# 707e3bfa957049d0969da70968102f2d
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:508
# 1d56657ea305439588fc2dc9c613e857
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:514
# f9174d1164154252a28be53569e59489
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

