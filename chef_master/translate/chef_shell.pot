# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-27 22:25\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:33
# 4ba36e1c52a041b19eaba64db1111e94
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 85d138737f6e41c89ee497026128a5b6
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 135027463ca04cd7a6e978c62e8b4ae9
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:37
# 9a9ebcfd646a4c7c81e9191ec0a3dc06
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:40
# 042dae45458a4b43a750e160721599be
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 6f3b79827c574b54a40830a9913683f4
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# ab7e85e7664e416e865a04c0360a789f
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# c130f326c26b41eba6c32ae9068e75d2
# 7f9b072ec5f945fa9a8197b0687202c1
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 7859e6a86ab84fb199372fa2885c4dc6
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# dcadab113dba46d29e53eba1240d149a
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 7ea9004cc8b941209a092bc4528d8d7d
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# d87feab678a94f238daa5214c3c4489c
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# a52e75fa037c4e9b93ff31b530794673
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 5d48a32b5fdf4ba89b01ab4ab18cff92
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:44
# b9473233557846aaac0183b40ee16224
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:45
# 7e66e7015caf4b62919a236a6974fc06
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:47
# ca0163714d8a494a9bb3ab5e1c33b193
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:48
# d26066b3468a408a9e18ed4a8c82eb41
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:49
# 320755a272f34371b62ff19b7b074566
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:50
# 3dd8891fb4a242f5b4763d0c37715b12
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:51
# c06cb09eb8d6456b8eba59eff320d263
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:54
# 80f5748bab9d45748bb967306113e8e2
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:55
# 6f461df290924661a7c6c905f0a4c412
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:63
# 420548ed0f974a9d83b21064a096bedc
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:66
# 20f876c557c0490e90f8e1ca02e9c54a
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:67
# 8db47dde966643459010d20af9f96021
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:69
# 679d915fb754466a85d549d6de2c4671
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:76
# 24f57459e1d14972add44cb2599616f1
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:77
# 5e859b08827e49669488c6d4b65e005b
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:79
# 12cd451dba69426e84dd6e29d38bafca
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:85
# 44111cab57db4ee5b28123fdd4179e93
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:87
# 6289569d6fcf4b21aee55d1cbd0ee900
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:88
# e6c6c746f74749dca19df3b5a4ac7585
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:89
# da194677c51d419f8ca89efefa3fcafb
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:91
# a00637302dca484f80d282487115d0e0
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:97
#: ../source/chef_shell.rst:118
#: ../source/chef_shell.rst:134
#: ../source/chef_shell.rst:146
#: ../source/chef_shell.rst:164
#: ../source/chef_shell.rst:184
# 6a6dd0a378414503a15a2005fb955d71
# 19e0c0cfd6824e0e9e287c8373dcc3d4
# 8171cd399687451faff12e468d0120c9
# 2ff304153a9b4dfe9ca13657d3359d72
# 81910ce5861940b986e2e5ad79379e22
# bb2e517712da40fca411dd7f2d1fb03f
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:112
# 11911df6877040a58316e80aca19b00f
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:128
# 2961478cfef9439b9caf75e3035652c0
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:140
# 50c08467dd6743d9b6f79e8e5ea661d4
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:152
# c7b793a180d642e281099839c9f38a5d
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:158
# fb0a15a343e242b6b87a93f889b2b0db
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:177
# f0096c63b0f84e0ba0146c8cf067e3ad
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:195
# 615e1a3a26674f14a1bd79ae8ea8ad78
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:197
# 59e2aa7ec13047f9aea1a9d87fb79123
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:200
# 8ecf8c8ea42646fba63e400b4bd803e1
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 53403df654e74784bb31e57db3a3424e
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:204
# 755cdc7d929b4175a6aba5a21e559ba2
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 79984d06af65449694b21f551da538f5
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 7042f0c20bd04b9ab1f6bb6f067ec79f
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 277c37b7e7db4c64837f42948bdd4e8e
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:208
# 416be321d9d3401e86e5dcf3524b3f3e
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 9ec956ae9ece43dba7f3889f2f2fbfb2
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# e1bc65d35d854c10a1857af54c72718d
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# eb1bdaaf3b134f0ca0e3cf5bd6803d84
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 3ff3dc7261ea4dd18ff2eba1c740e38f
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:212
# 602ea6b628d447ee9db5ead7013530d9
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 987f48ab23204b10ad84959c8160be72
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:216
# 41969b5a48134a85b25808bd28535ad4
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# bdecd147e2a44bcca4e0c5be5784ec2b
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# c438f2b879c94a15b1be53dcea4c1c7b
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 325f2995da5246928712f401d20ac1ef
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 63f4770276a7481fbfb0fd2caf48ddf4
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# df90d6315cd94741a55c0f4a15085a48
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 2483cb690bf14d2cbb61bab8b4ccbf05
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 0d5435052fab40ba8c0fcc9748c6fbfe
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:220
#: ../source/chef_shell.rst:391
# 079a01956f9b43cfa0180e6c14d534ad
# 351ed1325dd641bfb329ca2036091311
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:221
# d76552cd9dfc4992b44b7f458089388d
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:223
# c46736af29e24bfcbbc5d8c1a1641723
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:227
# d195b4d6318b4dadb2b499b3a605a30c
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# c003a6c5903d4fe0b1892a944e0d69bd
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:232
# d4dd974dbb624106bc8410940604a55d
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:233
# 2cea313af2da4729abce4f2580595f42
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:243
# 00a1d1e120034f59b3c615279cb62aa3
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:254
# d4ddcd72e945467abc99b1694e5c9c3e
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:261
# 6f016f5edbf743a9b744821811a9e04e
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:268
# 261f730a1ed34ffc845635b941181ade
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:289
# 08490c10ae9a41b1ac444c3547e7be10
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:296
# bf9e83eee1534444a7eb44748405de73
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:313
# 271dbe7861524089b82a7469fac116ce
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:314
# e65f8813b8a44228afed2ec164c86641
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:333
# 61d06f1400ec430ca701fea176f1329b
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:342
# c739935725024e749302df7912a93c8d
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:350
# 4677787e736e46c489abd4af086d3688
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:353
# 975f7cb367bf4fdc82046d2a229d53fc
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:354
# 0eda2f1d93484eb9bdbfac8b386c424a
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:364
# 28b0c9d55a8b407aa4093b55e7795502
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:387
# c07035f63bac4cf8881f96e4d7be8eb0
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:388
# 0e2eb71163d94c6aad0d5d94a1cf9dd2
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:392
# 2c72af887466479598018ba5684808f1
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:395
# 7dccb1971d284d91996dbbb18ff8d19d
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:396
# 89c0625c2f4d4154b5e73b3d5f7030aa
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:398
# 44b3163c3b3c4bc19389bb5533a28e70
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:417
# fb5af2333d5d4350b91d1ba94e2b158c
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:424
# 73016718edbf49a0ae015dda9f8ba44b
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:457
# 3d5571b93a3a47b5b0d708b2bd38fc06
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:467
# d197ae8726cc4d96afa34df6b3625f37
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:476
# afd80745617a45f9807252c3bcaa6468
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:484
# 2abdf54f55ed4872af86503eb39ea879
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:497
# b3d593b557484691af8adae65bc07407
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:507
# 8c55e49816904db6a5c1ac7b2c51b0e7
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:508
# 0d3cd59731014d59b4010b6c9abee4e6
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:514
# 1462b7f1fff64ae7953b621b40fd25c7
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

