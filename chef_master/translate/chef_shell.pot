# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-06 22:07\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# f1110c98bc944eed813a3f518d27baf4
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# afccacf938f745f194706d9b924c5b08
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 565e8279ca334bbc8086dc403a396f7d
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# f1aa22b036294265b3ffbb887de33ae4
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 59fb4db2ee254cfe907f5b0e501889a8
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# f096e1c22ebc4eedaa6ef2f2478ecf69
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 16e6a3892e7946918b3662134a4ae525
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 4498682c165b41129a229e6f6652b198
# 56fda91c54c147beaa79b72d937e2948
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 7a9e739a1fb4483c9ac91e1344a6e0e7
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 0eee26f8880f494bb42caa1ab48c088c
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# f50caaf187614a6095b61123a8d53c42
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 25d087b5d2534a6f83ea10bde071a155
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# c215c82bc71b465293e0156a66c8024c
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# a44515e8091b4985b6aa213aaf2b9bce
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# f816168393e547929986383154b53ab6
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 7855c6fc3e68491384685a9c659bdd98
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# dd2f573456944b4f843807f1d2efb2e6
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 537e87f02533481ba9793e407dc7f50a
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 35319d6c38354ce6a45977d2f05b4ac5
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 11fe858334284491b3ceaa713e3fb2c6
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 978d4623e06b4902ad58fffd0c2a37b2
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 3676d58c16d1493eabba9ec2d79a1036
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 4ec46eb6ac2e438da38c11cf35aeb590
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 511f04e4cbc24fe6977a1dae02d91fdb
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# d9810c0d80c84380a89a82061e3ee022
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 11e470e736ae40cc9313b4c885e59ce6
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 319cab6d98a24f3fb372e0880f14a4c8
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 28765e919eda437da9082c7e973815a6
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 99eded761ac64047bc48d8df5499f61d
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 622c6704ebd14c5b8bd79169809a564f
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 0f37f7ce5d1444b4a5f58555aa7d47b8
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 54ea01007e904cdeb1da38ac350b2fd6
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# acf1393bb26d436ca9d0a1725fc78b2b
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 2ef9b8ff3fd64891a66d11a400de790e
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# d55556d41b2a467b8b094f0e98962d19
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# dd340c44e4ab43238cf9760cebbe20c2
# 6b7b7dce204e4a7dacfadf4d8c8182ad
# 0ebe05cade43421f9450c3500a07b334
# e48a0eefd61d442f983ae9a1067de63e
# 171abf76c44d4c4783203fad24e21ecd
# 5670829907c8431aa88d1e9ff396287d
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 9907269623344d95b3b2b561ea8ce90d
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 824772ef95214c3ab7cf02a50e10539b
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# a20e162cc183488399df5a6c34f9b601
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# b3289fd00a4240758c3f0a4b131d0a98
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 2d49f5c5bfaf4ff5b9aa004b97b53ed0
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# fc71e57af8714a22a6ea6085b0105c74
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 5542466b8bfb4a698810cdb61ae1fcd8
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 5cb64c712ee347a684e53dc6f3b940df
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# e81984c339484c9db276996be00d7f16
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 96558f4dd1e54e6e8418cad616d0a59a
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 87e78b351cd8472098a33eb119d2efc3
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 23a5778bb94c4608a486ee61f8dea3f9
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# ea2d29e18e704bae99136b96287647e9
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 422dda2f80614049bf2417904aedba71
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 554dd2e04b574543aaf664751dbe8d78
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# e4dce5b496084aabbf7191ae676a773b
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 44898a8f418948ea82730fb5b1321999
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# e0be0e538ce243c78b5e1ae4334e3f11
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# fb11d22a80ca45c2a4b185a9112cb79d
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 01eda025bee047d791bd1fc755a1668d
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# b43cd492df654515a2ff2e46ab52a168
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 3ad29ba0b3e5477db9c41bce74e7513f
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 26ec84ce5fd043d5a7a8c4a0c3206863
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# aeef1301cef34eb8897093d4cf5a3b21
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# d462d6a5392f4a8686b934892b39de9a
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 28670fd3cb6f42b99e2c0992c89b39be
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 388b43dc22264e7daebcce1e06850561
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# c8f34520a8f94439a053bd3295c4db87
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 26beda8aaf0d4a5aa3d8282d2b9a2356
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 6ea651cfa761448d8c46dc379af7eb21
# 231f9b450d9c4b7caff2fabbe64ba914
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 83729bf0926441dbaf086f5d423237b3
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 1fad9ff541214361b78bf92ab09e7e61
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 4ccb92c30b1540be92004a4cd2be98ab
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 47d1278ba09b4ff192800374abb1db77
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 3dd72088622348108b6d746794a9e96f
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# a5baea56749c4515bfed58a1571451b2
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# fce43aa858ea47e2bdf436885cf829a4
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 57a54994724f4c4fb061325584f4a6d7
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 459e4118b5c14ebd9db9107d14912006
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 646bfa8e4e664c36a6078adb9f149b10
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 8a0bff8dd8e341fa9ab4345e7b9741fd
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# eb6ecda782bd4fb7a077a3c4f8b05965
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# f3eeb9c916744d14a3b5e2a56d90c31d
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# f66eb1fb3c824a7dae413257920ac4dc
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 20f13a4381844eb1929099469a35cb33
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 7d5f7a817af8452e83db3f8c8caeb7b0
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 22f3c8e0eb134173a3b2a9c2dd5c8b34
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 2f4cb1c481a149f6b150520a926a1adb
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 2790d992a87b4523a71692688a427fb2
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 0449bf73f2dd4447bb9996e40a93397c
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 5b91dc9883184bf2951572dcd539f756
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 16ea9500880c4b43b62ee19342bcd9ea
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 62b8d51b96b34e9989ddc184bc180a45
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 89cba34d9fcf4ac8a0d23d664c8a4e87
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 6ba4f08827e5423da3fdfb82ee23e8a5
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# cca218a0ed144fd789d85897102ae7e1
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 89616fed31d04e52a7883c997467aafb
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 96dca25bbb394274964f508536c1670b
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# dffc4c64d28d47a19fa02abc8a7d795d
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# fd122bb1289f45488a7e7308d66dcb4e
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# d6e115430755445e95da22a8b7623a79
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 804d3627be084b55996fc52b781f07cf
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 21c9535d9fe94875acb35effe9b22b4d
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 3139abb3c68148a19ab85492fb713e54
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# c085a78020114632a32a3d3a2dbc5e10
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# c3573a78aba141f0a952dafc26abe6f8
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

