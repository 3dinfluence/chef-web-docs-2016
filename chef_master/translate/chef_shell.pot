# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-01-22 15:49-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 6f658d0abdec4417afbcdb800eaf62ea
msgid "|chef shell|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 5539fca02f2048888eda86a1f06ae1b8
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../source/chef_shell.rst:12
# f7ee04a665584f669ac9fa784546f163
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 71cd3b035506445e93487dea08ad95ba
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# b10e78527fa24098906a8b9714a6cb0d
msgid "|chef shell| is tool that is run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 8f01fe484de14f91bf6e52dc83a5ead6
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# bf8cc0c0c1c54c1da477677ec3c115d1
# 637f5eaad91d45c691f3bfb87bd24dc0
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 2d4cf867b91246d48f0526a45f8bcf46
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 1927e70f29a649eebe84f8ceb95de6a2
msgid "Default. No cookbooks are loaded, and the run list is empty."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 6b012668897f45878c4bde4b001e6c7b
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 3ac621fa5fd7481eafb4489457f12df5
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 6cab1ba2244442c0ac2b09a691fd44f3
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 6e61d2541a9f4c39aae74a90f96a0da5
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 43f7a876ac694c00becd57f88c8efa47
msgid "Configure"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:5
# ec1c9e0413d441e9a7d4a526a416b274
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:7
# 4a1e061349d34bcfb238ca78b642236d
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:8
# ccd951c409af4046bc1d6316b270a6fc
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:9
# dd8983e0b37243d3b78e838f8a4d877f
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:10
# 16d65d7ad1004f63b47c967a0c9c820e
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:11
# 7942dfd80d8f4f9f9b2e045044bdd2d3
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:23
# 1f56777e35064cad88c4351dfcb3f8d3
msgid "|chef_shell rb|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config_rb.rst:5
# 75a2c49da0fe44768ce18bbde5fb9117
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config_rb.rst:13
# e0df7f3a0ea6462e9f13e752eac0cd0a
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:27
# dc61d68a5bb94247b44efdfd4ce10171
msgid "Run as a |chef client_title|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_run_as_chef_client.rst:5
# 706b588a4eb8483791180608cb10edb1
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_run_as_chef_client.rst:7
# ce0c9e235b3d4380ad524ecb9a7a305b
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:31
# a9bf73752e2e487db7b154fa0407a9fb
msgid "Manage"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:5
# ae0de15dee5543958f369621f5db34ff
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:7
# 0f014b7cd893475882cca0bd59838ed4
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:13
# 79ba3c05f0af470eb1c324b40eac42a3
msgid "where:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:15
# 7893be309f5a46b58ac22ec2876aecb9
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:16
# 620ed4aed9014ffda23c12931bd2d17e
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:17
# 2d081f38be6146a2ad9ba5cdc4faf6c1
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:19
# 2033d3d4c3a84944b4ddaa9b98ad47ff
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:25
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:46
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:62
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:74
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:92
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:112
# e8306f228f2547259f6f39a0dc15e04a
# 9fe50d12d33b402288c4378cf890f3d4
# 9c78e47a299d40f985dd7d3c144e8e6e
# 5474e95cb5af4a8f92cc8b5183bd83bb
# 1aab3a51a5c244c698627553ca209fcc
# 2c283a80b9c1433ab822fb000acc0fbb
msgid "to return something similar to:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:40
# 83f58ec5b21842c788e4f1699a184f42
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:56
# 22ed0375adf044ef941918d4bf3b66b8
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:68
# 53356465cdf4424e84967893ab14f5f6
msgid "or:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:80
# 9ef0db5667c249fbb8a5b60ea480a316
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:86
# 31e5ba67f7f64fec93bde7e3ceb3b82f
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:105
# ca71adae8d874cf691a65c8262c068f9
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:35
# 02849428cb7d48d9943b401065e143b0
msgid "Use Breakpoints"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_breakpoints.rst:5
# dbad142425bf4e19b20beac017b4aee8
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:39
# cb234e81b20d406489e140e75d9fd192
msgid "breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:4
# 148ecda0422044899c1240bbef18215a
msgid "Use the |resource breakpoint| resource to add breakpoints to recipes. Run the |chef client| in |chef shell| mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the |chef server|."
msgstr ""

#: ../source/chef_shell.rst:43
# 1317e4606e9445fabc0fe008c7578c34
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# c4d8428805d14add840a750cc98e3a5c
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 48bb6b0fadf34e5ab748dc487f2242a4
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 39697a7a59a1489e910bca93e8ac031f
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:47
# 23dad2dbdc544730a801b472bf3ca93a
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 96782f4d56054095b769966c807c29d3
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# c3e77e7f82eb4f90b3d8c05423bfb7d7
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# c2327f3ee01f4aabafde0329e1384335
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# eacabb49b96a48f1932ab519eefdfcad
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:51
# 78523b3720a04dc897a34c50be00b34d
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# bb4c1a4e8c1248149cace385ed8101fd
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:55
# e7877fa454b44763bc0afae0d35c2aa5
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 61415083250a4feeb3f6aad7328d6f4f
msgid "This resource has the following providers:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# ad6b07bb70e24b9eb5ca0999faa84bb1
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# c544fd9ee63f49cb8ec197d29d165742
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# c4a6c549443f449ea2015e8782b1d629
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 8e58532f425f4e9b97e12b7aadbbe0b8
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 03faab8796a948d1bcd6bc15eade97b4
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# eaf9c65dda5540d3abc4b5a34a3b8339
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:59
#: ../source/chef_shell.rst:83
# 7a382661a0b84779b6c3906786eecff4
# 585466dfb2b545358c54d756831a0cb1
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:60
# 208c1174da654366a26f418b90cecb7c
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:62
# 86daee26f48e4e59816b59e0267401cc
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:66
# 26053d64397a49d8a166702af7c24d18
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# c6ce9aa43a5e4191ab7de358dd8d5377
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:71
# 7a0169272a724b85a26e279decd11ca9
msgid "Step Through Run-list"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:5
# cd7f281f88564cea91b7f04a383e9914
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:15
# 6896ef999a2149db9649f84cad13f48e
msgid "and then run the |chef client|:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:26
# 1a64aa747a124ca0a762258342a03b6e
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:33
# 02f9720a82f4455e9db15583049e7fbf
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:40
# 67a3adfb78d14e4d9fe6c5abcfeb3749
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:61
# 6919a0ad61b1451b8881aab08ea298b0
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:68
# 299e25f38ee84fdfa9aa3eba0af969a9
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:75
# 4a1c4d9b8663451ca79eaa1099956b9b
msgid "Debug Existing Recipe"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:5
# 9478a5a3d65948b49b5b88290f27219a
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:24
# f3d054ded1254c7cb8b744216f0b1b78
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:33
# f7f37f6af21e4d229ef93b329d3411a8
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:41
# 95217d3ede034f3c84a90a869f4d6c08
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:79
# 42120e6950cf48cea3d9e631718d4b66
msgid "Advanced Debugging"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_advanced_debug.rst:5
# fd79e48e217447f0a5928ba0b7138f97
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_advanced_debug.rst:15
# 6138abb0ddf346ac96bc1d97816cd623
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:84
# fc63f633601740a892cd2eaaec537e6c
msgid "The following examples show how to use |chef shell|."
msgstr ""

#: ../source/chef_shell.rst:87
# 21e303d9c54d4d808361435ba9a4a782
msgid "\"Hello World\""
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:5
# 50f311a95da0470bb8e43bdd49993948
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:7
# 06cd740b2dc0414f85a88e71ac21e8ae
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:26
# d4f41f435e9b4bf48ee86352d4ad9f43
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:33
# 6bd0482501074f0e9c4eae453faac032
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:66
# 485bca85976446fab8da583b69c1207b
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:76
# 5933203069e14fa5bf27e252ca128651
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:85
# fba2f981475843c98210d378ef75690b
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:93
# 688b2e9ae2d64bd9ad41389e70e8d89c
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:106
# 514f79958f5e4791a74fd7bedbf2d153
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:91
# b4a129d23ed74fc59f5121d8dc4939ce
msgid "Get Specific Nodes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_get_specific_nodes.rst:5
# 886ecd1295c94cf79ba120da679e05a5
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_get_specific_nodes.rst:11
# 4876541c01f04aea8b8e310e427f4c58
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

