# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-05 23:30\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 96d77f72bed44c809c0e2eec661fb2f9
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 1551dc5491df4065a16a35425651d9ba
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 26037f1059cf4ed88df4875d70d5145a
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# ef4fa86cb74b448e865d2c7de0d0abf4
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 70e322ac1214413e90101072e78f905f
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 7de22b8e71f5459aa32421b03428e830
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 839b253897a843979847ebca2c6dce57
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# c378d38114e842258f64e1dbb86de90c
# 3fa83c5205524da6bd28b2193bd17a37
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# b3a30e53aecb44ef99c2051aa96cceac
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 36a7e49d8e1c4e12aa36fcb13484ab5b
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 8ab54985633a45a98752806a42948f43
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 363bbc1ad23048bd947ad0d4bf208fee
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# c0498adc29854d658d2638290dd588a5
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 7df713b39a9a49988aef1fec44512b81
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 54da23633edc4146a90b73fd67a35ac0
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 34f0a93759e346cbb927d204cd1fc39d
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 11f3e921bbea4055a6795b11bef3825c
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 92e5a3c7c09441a393d5c6a521701a1a
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 9d49a98ef27045cbb700ce08537471d7
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 17403bc283d5420db51add0cfd4b0818
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# cff9c20971f24f11a52b733a7a1fd20c
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 547672d1e0dc4e42ba6697fc2da441d1
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 9200d745903c45749ae73780c2cb31f3
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# cd10825b2c9e4987bf8efcb3e5016df7
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 4bf080aec8ce4710b78223716af7432f
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# f3d77163544645818747223eb131bf59
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 1893974e21364c93a163e20d18464b3c
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# a54b2c13ae674c0ca33a8a9476393bd1
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 80ea866d1b484f49b7d25d4e9489b320
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# f1bc79c4c60e41958fde4dc8f7c3f8ce
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 4f47a1c4358b486ca2784b5e858c2b28
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# b40d0d58e9ae4722a2f4254bc346aac0
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# 9fab693acc01499497dbac8269a38cb8
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 381fd26a662947f8ae36266f865a0984
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# b266e31f773440059504017596c31e3e
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 0bc48dfa0816455aab61d434e50180fb
# f7c2f451b24341dd91c07fe4be3dd896
# ece8eb057e384bf998b90f21242377f5
# f798e30c3e404417ab309ba54d9c6c30
# 2ce57eb166ce4bafaed791b09e15d11c
# cef7a5ef715b4b8395c9821c35f0f695
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 78a5487d523349f996a4064557fa54bf
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# fcf678221ea1460093c43844e035e48f
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 32d89fa150e24c62b56166af01e26c68
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 9d7cc3a7db734888a727d49be8601413
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# af2b44bd48fa4fa3a17f8d43d64486c8
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# c193128402f74d32b72909b0d4d79db9
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# e106adbcbda84b29bdd1eab78f5e31da
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# fcebd22c89224e3380682a12cfcffb44
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 1c5bf5a4e7a5448cb43380f4bda1a8c4
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 6d63e81319804347a8b3a52c5a90d737
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 7f0a5970b3da4ef6bcc0b56107c28c3f
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# b1e38b30264145c2b41a35dd6beb8a6f
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 52c3278bdba44476b7831f3b3f17d805
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# afec70d20fa64ea0917130c862a26b71
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 65308f7dedf94c8c95241150bce90875
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# edec433acc8d4efdb670f3a53fabc6a4
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# c5126dfdf03d426e9cdfa5d8543e9857
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 2ab29e9dc4dd4c3e8176a225bc6823fa
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# ad170d3130f149a2a458e75bc260f784
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# ab7b86ff66fc49d3bac538dc3d78bc5e
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 6841641170db4bb0b25f97a112983722
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 8325557eb17843b9ad977a3855b463c8
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# fdb3b0d5281d423fb6308cb34f0be3ce
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# a511daf7e206415da09454be3d4753cb
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 4fae1351cb0a496e9464b00271f3dcea
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 41f47b429a8449e5b60496f0680ea8cf
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 8d6679c4f2964015b7d5f605c7ce6393
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# a0e569ccb60446ef93e68a4eac733a27
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 8fc1be6931b840ba93a27a2c4627c6a4
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# aad840f78b5c4c78b57fa7a49cd4218b
# d05e5d4bbc954c598f75262d3a3e76a5
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# bf815340879b4be480b4ef19c16652e8
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 9f1322000efc4cc88ee79b11ed55c577
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# fb9dfd8018754545a012d0e3e1b095ef
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 4848442b1be340fea3c03d4ba6e9d21b
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 845e8a1746424538ab7b33d2e89cd3cd
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 66a932cf91234ebf981a7327dc2e2993
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 002631111e6c42ed842a0c436d1c5bbf
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# bb8cfb43291540219cf92528e36322ae
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 4415a386a5a8409da59862795541c0b6
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# e6adebea68234e1cb6ff241f74b9ca1a
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 6faac8b34b7643a8983c659baebdf962
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 3e793444216d4be1b4c8a6b9790cdc2e
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 046958f1f87543f1ab8729bb9b3e59d6
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 6346add6f6b9473e86dceca32dca378c
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 84f5bea62c814995923e993212e9a605
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# ea58319fca314b838859f9c6406bc705
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# d954738d6448428d8dea81a5659dd0f3
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# afd5dc8215e94bd69beba411ff541399
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# d3d8a6510e0f4e8da7125ce4a4033b9c
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# e7bb29146da04a1fa298c7583a86723f
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 3659fdfdf5954cbe8d5020acccefb0c9
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# de1cc3fdcc61476c9aaed1a93670b1a7
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 41e54951164446f8ac3a2b6022e0af99
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 1e769782abfd41fea96df02d89aeb385
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 6e3f6757757d466b869c1ef7c726ddb9
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# a42a1647c599402dbf381ec3b4532fbb
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# c011a77db3bf4f62995eeaf1023a2ff9
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 9100db69772e4297a29cf335da3d2abb
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# e429544509404b9282e0ce873395e583
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 5588a74c90e5466cb1ef2095f3778cad
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 77fb8c50d5c34bf38ecc2c7cbb9e35cf
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# d793f7f1c3584fa1adf9bfaae13022ef
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# a8952684340746b19e8541e7b9abdbd3
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# ac06e086ef9d4cd6bb8291c22a1de476
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# abca151f27f24cc1b947b1b6981e6926
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 87f15359ad954b3cbb042bae903dfc00
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

