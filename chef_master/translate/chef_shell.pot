# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-12 15:43\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 79ceb49a1bd343d5a3bbee8987a27124
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 3181bd2cbeae419883f310ef0eb1bebe
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 0cd50c28606b43cb92181d692d5e7523
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 122302fa76a54dc9a76320b30f8eb815
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# cc8f7980edd84e5ab0d3284bcc00efd8
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# d6aaaa7d97f44336ad65ea1766197797
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 0bb074ddcc5940f5a97a259a24bb7620
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# f7007ad005454c8dbdd097c5676f19ec
# 47e14c7f9e2c4ba0802d525c6fc97081
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# d3bddd9a4d7a4785ab4937c1ae95016f
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 1a491e13f87845148a158fd74ec705e8
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 81dcc13a5ca24aee94984825f8ee7f9a
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 9573af9b72994e11b56792399de6f8d4
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 55579f16dda04a809bbb243091412df2
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 42f28a3376ba478a92d6c45f27f8908f
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# d06860fb2026452a8f3e19fd31ea1fcb
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 23243659f1ab47bc98c35f55791538a6
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 8a5252c3fafe4210b3e13ec090cf0e15
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 2f076b025782451488106f7cf868d5b1
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# cb3e0be4427a4cc2afe7c878a7e6a53f
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 1ace46e0af7b4ab7bd378fcc0e63e739
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 80b2ebe87b534e4da6c6c581ae8224a7
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 64a2355b6cf548fd9433065b1c8b127f
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 5565fbe32909470b9f3bc0e868717ce9
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# a3c447c963884ce58ba008b8e67c607a
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 76b652095c954b01bdc04e896db0cdc4
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 92c6527259f943408a4fb9ad95dfb6e3
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# d097dff9f2fe476cbbf747a83b12c949
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 419c76fb52ab4c6192469e140addbe21
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 7f3054a01c644f4d84d5768b2d61dccb
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 9ac62c0533504b9bb7a378236ce89d68
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# d1719b06585f42d39927a793bc6b923e
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# f20a022687d04887accc5e18aad261fd
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# f6665640a9ec4323a3b90d2084e9c06b
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 9a68189021bf4f0ab50431db218f394d
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 31069ec399254003bff8b2feb6338652
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 735cc9dd479f4bb29ef9c18fcb53c0c6
# 93c16ae1bcc24449bce215b3cf1076aa
# 4f7ef125207d4023aaf47d847e473da7
# f28863cbd60242f3ae96b4eae2ef1592
# fbfb71a28d25488784d79fd1783bfdc0
# 4aabc157a8934e43bff57f631c41686d
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# d5ba6fc2095a477db7aa9b2689393cf3
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 17033f3339a141d69cfa492bbfedeb7d
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 0429e3f123bb490caca909c163227e66
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 14f71fa01c4d49d2be4ed6ea4326a54f
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 743b1f73ef794796a74a994f480f62aa
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 852c37fe57fa455bb3aa05647df305c9
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# baa9badac1614ae1bf66397ebb95a93b
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 3b9fa9cddab74bcd99e0f547b6548b26
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 16a708573fc947ed8c1ab575f86c1249
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# dab7358f3bf74316a94f0f9efe2a7406
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 929da2f0700245baab6ec243d275e73d
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# b56d3b47732642d08ef827952149df9e
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 11ab4644ac854763abeb349aa4aba32a
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 09b8afaf869f44bda9b17d048cd49517
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 9d358d321df54f5592b8bfba5a8ad34a
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 76b3d7857e154aff989a5f6dd0238909
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 6d4b8836d1104d29af25c673672045d5
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# b11d5a4165bb45b8863452b81bb12e04
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# a4ec3139f0c54a84a597b8750a8f9e3d
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 419df2e2b26c4335879ddfc581c71de8
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 0095300806f3443f9cacf334062d1aa7
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 44d03cc6856d443abcaaf6a547a16781
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 4881303b8319424185f72fb07072b096
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 156f4a7389b14b3d814fdf24d759fcc7
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 3a77fbed6a8746babb6fa04914e50b5a
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 29c8ee1909664a969f6cc4d0a3aad0e6
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 8dcc898a9c3d49a0ae5eb27eb60841b9
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 7abd16cee326483d80bf185f5bfe2c74
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# ab76a0478dc24ab68e989ce05de6b137
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# bc6af9c8c4784dcdb835f037d192693d
# 6e195d3f1e734dfca11f8f04ba0c2b8d
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 56f97b59182d4f41bc961b47c3b319e4
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# a3109569292d4f288a1b7717e2274b65
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# a30655732a914142b5e4d5bc0cb2f94f
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 80c27ad35d7442248bd7cee3726e6489
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# ad8c5ddde0084f5ea5a4f1af316579ad
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 823b90e4a452427ebc2a5625f5a5b290
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 2f58930dd1654404aa400de553aafa1c
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 5d178be4c67e4f9591b041fdda07d0d2
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 192c2f13562e49c5bb75a768d3207904
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 9cb8a4c53b00406cb423bf84ae423b19
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 14b1deb46d434fe183d6db0ce39e5855
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# b0cd9ad798c14b5bb102356ba93fa42a
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# f6ad563d8bdd4c30be2480c11760e229
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# ec9535682f1b4f76be73707a7d81820f
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 6df87d62b6f543729614a645c55e18ee
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 1684d0b2d49d4f838e00158555de6343
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 4ac06188fd534099b5603b927b3367c7
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 5ea449ea7b4649028fa36ead7593484c
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# f39041b21c9645399c640c75d0ca1ea8
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# eea9da2458d94500ad93932e485b2aac
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 42909d105f144a7ab7127d6497e13ca7
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# e54f20dbdad2484687ecec6a0b18b539
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# eb34dc6614b44c09aadc6544fc00251a
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 5bca95de0d7b47909424de2834fb749f
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 012f8738b14d454aadde1a3a0c682b77
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# dfd4b876512e4c5798584bfa8756e020
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 136182d369174cf3850efca227270b8c
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 6576897d2cfe425b9ab464b7b1d7f797
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 35f873dbd83d4618ae5da04795740b8f
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# ed0d7da56bc14d58a5e529e141be3df8
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 5393ab06550046ff9f1a3ffbf1d4188f
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# c5d9b4b7e58341f58354f275e477579c
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# c0ae1d0be3174e6b96592c3aa765b0ba
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 74bb69015e084bc8ad0b744721b9f1f0
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 31b7f7d11e1a4d61b4fa4a6ae3856465
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# c5ffe693d7b54945965b9d548a575f0f
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

