# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-02 15:47-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# bf69e248a2d94323b59a14e0569d328f
msgid "|chef shell|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 0fb813ee329c4af2accee69c108ab386
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# c8908fe0a124461393b8c66c57ec3682
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# ebdca34ce6ac46749ebf07d63eb83e77
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# d854b056fab64be78abd5e56d8521223
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 5160abcad1a84bb6b548daa82602e0d4
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# e723c17652aa4aab8d344484456f49ae
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# c0a2a529bf6047bebc49b9f7b136b3cf
# 7ceb169c4221480aadb72c9cd6defcc2
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# ae32ccfc87474707a332fa749d00c373
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 3b6b31f0f8e3498fbfa02d64b98ef8f1
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# a081692565c04c838b35c82b0f2f832c
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 9f6f73ff40b94250a4b57fb61bdd0001
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 7b5aa4e15de9461ba4884341aeaa6a75
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# edb3d1f5bcc7411e87e431262df727ca
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# aac28aa899d047babf3e4139919f4771
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# d9a84d6974444b4b9f43ec5bb11b8d79
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 2517301576f84c4db1d688963c849ef4
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 56d136e744b64ccdb76cf01b9902073d
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# a17af159ea53473ea908c91b7b5bbdee
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# e141147031fd4972823e856869a0a1aa
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# c0282713407c41f88f46b15c9d31e958
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# be21fdb8ef3d47a3be8289ac4fdeead2
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 0da6e268be6843e9911c99f15c19958f
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 939e2f34fe09413a86e6a79a1cb5406b
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# ad7f685de34b485085d548423733152b
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 94eb6a947eab42ab80b0b33785173070
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 70460c48217840d39ade74432dde6513
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# cfaadadb498f48c1bef792f506044c52
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 19eb73dda4ff4dff919708c86da0a319
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 5db7aee644c14046ad5f8b3045ae0e2a
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 1e9266a2d5044db5993aebf81ed76773
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# b54fc2e8881344e5b0874475a486ac64
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# d25268732d7d4146a7420821ceefedce
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 304f48e7e0f04acd88ae402360326642
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# f0da654e7e764ecfa552a47dc9c70c75
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 9376f55f8d9346078bc4bc0d09851a9b
# 30de889785f14cbab4c906e945d04584
# e7a142abf367461ca0692b953f323147
# 291cbf023ee948bb903b653381e4afeb
# d4b4ad9e3e9b42a3a2b02eaa5435dbe2
# ff72a465fc914ca896d82eb16f2ff6af
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 142f8405c89d47879c6fb024131fa4fe
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 2dc9c02123b84d5da3c43ed4512420cc
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# df05506b0eb541edbbcf54d1fe34ff45
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# d2aed37e04734f89b8d0b30d6d2112ab
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 8879b7c9a2f14ab58e734aaef89f9399
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 9fed492dc2394cfca8591cea2f4344e2
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# edad9736b0d4451fac7d0890aed2c84f
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# a98a05f4892f41d39e25b85f7c3d4a6d
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 993ada26fb784612bc57fc8c28147cca
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:4
# 9dae794eaea444b083943c84a3adc312
msgid "Use the |resource breakpoint| resource to add breakpoints to recipes. Run the |chef client| in |chef shell| mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the |chef server|."
msgstr ""

#: ../source/chef_shell.rst:179
# 098f28a24b0f44d8a98b78dc13a1e8bb
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# b5263d99da604d3e9cc98eecbcc95c4b
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 538f2783f7944bf9a3fdfc3bac5a2676
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 6fd23e2ece054ca889658f63ecad2295
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# fd87947434844767b64bfa8bc27e51e6
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# f40394a962eb48d39f830406bef84213
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 2fc232b185074cb6a9f6657332e93944
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 1d39c85590034a9cac0c5fbdc9ed782a
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# c65f7e23b9344e8ab6e3eb95ca61ac5a
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 9361c1de1d12438585f3d0bff4b10a28
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 705fdf10e2f54258b79ec55f1e340986
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 578c576c503a4550be454737dfd0188a
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# a028f495b026435bbea460968a8780d8
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 47b66d6261f44b2e8f3ae46eec96df96
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 7e5327f501694281813487d104f2fc44
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 9d94d4cacd6545b9be92da596c23abb1
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 66cb4565161d48c5b12cc0918129c19f
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 710d57880dc3485e902536ec9955d8ef
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# bd927a103f0b4caaa4cf9d33e445b747
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 1f6e668551524ec5933054d85cefacb4
# 2c004d4861c14180a9a1fef539931c89
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# e3f10c6f0634400cb6784cd329bdec79
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# fcdb05b56f5d43d4bc63bf983535ce80
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 9ad33c055f1e47ffa44fe267a5a1779f
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 43b63584187e4bdea44465459546cf83
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# fb2833bda5e14ceaaa7b39e3ecf6e41a
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# efe08ad6b1004f15962fcbf2e5f9c28a
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# a3d3927d8af14cfdbdec92be308f093b
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 46abb9f1669e43cfa1287c70e28368f1
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 49b6674b1bc6454e992c4759fb0f7f9a
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 82c25242c9f640ab9c64b8c9d2b62d28
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 3df30f0117f84cc7be3ccc265c07b93c
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# ab419b8b170d42bf9519325ed27eb040
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 943e8c676dbd413d94e1604244eb4dce
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 212afac6ae9a438e962c3ba530c75b0a
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# e82b079090a54af6a1dd548dafa0fd76
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# c7aeac06a4934011b80317e7729da517
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 3d69a5ef5e5d4e5c89234584b2c73f31
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# d387ca9cebe446f1973e270b2eb1a982
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# a6c3ea96c3da4299a85edea6779750ac
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 0242118765054737a39271651802795e
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 973141380b4a4f3cbaf8cf5616c9d847
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 4725f52ede9649ffaeb98234d9671125
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# a266833576884baba0b65a51d4285d39
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 24f56634e9d84a979eaf90b35712e286
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# bb3c1fd4f20b4009b76dbca761f8f054
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 6479d275b9c443ea98b4406fb94c5cdf
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 29a7e2b074d74102932b6e3a440e4e77
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 3bb7026520ca474d831446916ec20e51
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 7a5a96c7f5ff4f92bd731f2ed3928ea6
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 2d29cb8481b54a36a43994588fbfd65d
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 502b6a80d92d434b9a9c2a1bd0e6abb8
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# be9ac75f46c248b79426618afb20a8e2
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# ed14e7a81dbc44fdb3b61a7c501420ec
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# b15f2bac8bb843f68566a33d595626a9
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 944dce61dd7540399c9d6e5eb0f23d5b
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 1631c2513f6141368702e1d87c102aae
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

