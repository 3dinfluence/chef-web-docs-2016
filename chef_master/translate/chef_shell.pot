# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-04-06 21:31-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 38386d9ab3be4a3ca0ce8c0be751627b
msgid "|chef shell|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 35eb8a64b61741d68101f991e1d3c742
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../source/chef_shell.rst:12
# 22c097d22b264e5d9aa2b2a65e14bed5
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 9111a550bca94411bff90fb12455cd97
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# c93c77e516cf45899252317c2aed1666
msgid "|chef shell| is tool that is run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 833197e5af7f4a75b64464072032c5cf
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 88365d946352492dbb3aa7c6548b1afb
# b5427355cf1143aebd53447aa0da6c74
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 660aa963c80243b8ac8762bfa36238da
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 61914447add24c11819182aecd232f0b
msgid "Default. No cookbooks are loaded, and the run list is empty."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 4deefa84796b4c8c816a5a28bef5ee2c
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# c3efabba6b05459186e4a477f3834ff0
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 0b7ea52e68484726a36ce8ae104f5827
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 2ceb1ee63603453aa7d0abf7b2abd2c7
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# ad7529b6367149b8a1c22399a2ae65f1
msgid "Configure"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:5
# db19087131e547088b9ef960a5993996
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:7
# 674355a6ad35441c8e026f09514e1710
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:8
# 0f9ea689f844495194ee045c68854a3b
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:9
# 01e3f15732fc4648913a1c0258189440
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:10
# 8f9871b3584d42dfbb2c1d473218fe50
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:11
# 1f0630d82f2f41879adc2c125a8d79d2
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:23
# bb580f587be446de8c5206a0ddb3db39
msgid "|chef_shell rb|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config_rb.rst:5
# 66941aa7d9794117931c722d610beb9f
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config_rb.rst:13
# abb5931eea2d4c6f96d9e16b51101e5a
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:27
# 580a4e6d0aac475f9049f3f99f4f1057
msgid "Run as a |chef client_title|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_run_as_chef_client.rst:5
# c15683aa2ca6420da0caaecc38520563
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_run_as_chef_client.rst:7
# 777892636ca24a0a8de5f5ed6e127680
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:31
# 9d1fa8f615624a5cad0b392be15ce114
msgid "Manage"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:5
# b4061114abb04fd88a3075dde181a355
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:7
# 28369d28090a410ca46d30f62b0cab1c
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:13
# c21ddb2bd58a4181a614b1f432ee1591
msgid "where:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:15
# 39360f2f788c4284bfe5358996d2c732
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:16
# 3f630518f3764d409c671a7728300a4a
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:17
# 632de3680a53466f890acc4a24268bc3
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:19
# 11270efc634045ab924e8329eeed4bb4
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:25
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:46
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:62
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:74
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:92
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:112
# ee3fa11378554e53bb5b0be7912cc109
# d3bc8abf1a594b55becb1759135c1a90
# 51b06f6249954264a7b195ba4b530724
# 55b571cd9b034a3db97413cd6dbf43ed
# d71f239a17ef420a99d087596f4eb3d1
# 41f2f1fcffff4b2ca090cfe82985d661
msgid "to return something similar to:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:40
# 5d4c5fd2f9584e298aa5a5228a915526
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:56
# 2534186a118541bb83a54c0ac20cc080
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:68
# e9ee2b734b394ef79c4144083aeacacd
msgid "or:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:80
# 8b9937677f804a57b3aef55b0c0ee87c
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:86
# 5f124506126941f18cac71bce4a98049
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:105
# 6e9c4ad067004f82bac7f8750c1e45e6
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:35
# 1e6e2859cf844cb3becaaa70178299ca
msgid "Use Breakpoints"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_breakpoints.rst:5
# 4905e3a5d8b846b4b0dafed08e22c8c9
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:39
# 10a7badb55e04a678adeafeab3590ad9
msgid "breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:4
# 23845c83ad8e43389616ffeb8d85de63
msgid "Use the |resource breakpoint| resource to add breakpoints to recipes. Run the |chef client| in |chef shell| mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the |chef server|."
msgstr ""

#: ../source/chef_shell.rst:43
# 384ba523234949bc8aade814d7bbe132
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 0fbe04abc0634578988c9b78e43a287e
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 639db86d04684b85b7dfefaa8f960946
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 18496c4e58b64bbf829d5211b6cb1aaf
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:47
# 9a493123a51049b79867eefa461259fc
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# d05d689a77b742919012317967410700
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 96a49a91f7a041b4b33f54e3cfa1c7dc
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# bbb7f58d929245b58ae0a2ff53b73c14
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# ff72f81b6eeb4c69891480732dfa98ec
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:51
# 95a2340e52c642e2bcde4074ba89f26e
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 08e895e2090c44f9bc0fff08feadd5ec
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:55
# 2a91566201d54a30af6c08354cbabc1e
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# d7b4d03ae2ba4c5e9f6a697268878edf
msgid "This resource has the following providers:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 7969000afd174ccdae3ae5085a3ff013
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 0aeccd6c53d644b7935416945d9066e7
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# da6deb6196d24c30a59bf186b19c9b36
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# faad5b5e670a445f900ebf2315bf4d64
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 33a3638d50ac4867a2192d9078f2834c
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# e3bf024abbf8463799d7aaf77f4c2919
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:59
#: ../source/chef_shell.rst:83
# 904a743b7f4b40fea8dfb85cc30f5411
# 9cc5ba3e9b4443d8a3d935f4a85e870d
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:60
# 7a7ecd6fe57e49aa891cae06e82ece59
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:62
# 0860aa44062544658a99a605f921839f
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:66
# c13107097c2446f584429b93b4ae86d3
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 6ac84dab9088445f919fb09c69ed495f
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:71
# 4d2b82114475490cb5507e816d6e3e3d
msgid "Step Through Run-list"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:5
# eb7e98918c6a4bc7854f622949fb27d7
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:15
# e72c37d6d1ce4a02978cf9026f72a446
msgid "and then run the |chef client|:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:26
# 52fd0c3abf794b32a4d359eb7dbbb695
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:33
# 6fc30496a1a64888bd6c4fe2b3dd2740
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:40
# 309679fcabe5450cb3c5a52b5508a246
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:61
# 258132ce82ee46f8ab55a8101ec17a99
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:68
# ac4ce32803bb488789d095e2c91b04e1
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:75
# 7d2ec157bed74f52a99f221ac41f5a1d
msgid "Debug Existing Recipe"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:5
# c56449459878488e83b9b6a1a36680d4
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:24
# 461f77ded2c848028d888c347a09011c
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:33
# c6664b6a317a480596a1325ac376d594
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:41
# 991646fe578c4cd3ba3582b598542ca4
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:79
# 9839c5e7bc7245cf890c13d283a2bdaa
msgid "Advanced Debugging"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_advanced_debug.rst:5
# ad01f0b9b15c48d690479fe67a47037d
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_advanced_debug.rst:15
# 12f1321bdc8345e3ae46dc3421d1bb54
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:84
# 5da455fa73bd4e3ea82e1e1a05f0f1e4
msgid "The following examples show how to use |chef shell|."
msgstr ""

#: ../source/chef_shell.rst:87
# 01a7d9ffe91442c2a858b79a948fca8c
msgid "\"Hello World\""
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:5
# 70db0279ed264a1b9dd7197675f26497
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:7
# 75ad3e90a9304d1d87a881d375fbf4fb
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:26
# 6ce3218a2c9d48c6bd370def44e57fb2
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:33
# 237c8d8776ea4445a8ef28f271058083
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:66
# 0648819671a242228cc10dcc3cc7fa03
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:76
# 2feaab92744d415a9ba7f3a23c43f13d
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:85
# fd2fa6f88a874ae8bbda876cf0eb1b32
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:93
# 1cd6050f26e74759a1b045cc8d81cce0
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:106
# 3b6a93add06f408c9cc4344be7091334
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:91
# cf109d583fd9488fa7e134ebeeb86524
msgid "Get Specific Nodes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_get_specific_nodes.rst:5
# a78ba17640414137b7e07d4817b1c2b4
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_get_specific_nodes.rst:11
# 464bb9eaaa354c4fa80359cf3ab6b524
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

