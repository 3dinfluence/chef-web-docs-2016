# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-02 11:38\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:33
# 3754eb2c9f7149ec949b7cb7d863f1fa
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 1973a9e7269e411894505f7b2aebd348
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# d94d2bbda9c3487b8c0dce109da366ce
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:37
# 4fde4fd0ed2d494498899e22ac0b62b4
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:40
# f4a5c898b91e42f1acfc00dc6945e3d2
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# f38c96c9d974401ca3ac6485d49a7e01
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 6850b3603e314826bc2ed1b7ba873639
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 6b0dbea45f7c445d8d61b29e977a3697
# 2a0ebd332beb4027bbd0747b6ca65a0e
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# ceddf7191d224428af52d83391c98d36
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 1dd2e90014f043b883d6b958676b79a3
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 5cc6751f41b54276aaa0ab23ff9a9adb
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 6b3df66ce851467696d0118d6aa9026d
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 07514745158747b694667a97b503ecf3
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 844c8cf97ff14fdb90c80725832ea568
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:44
# fe3e46323fef4aebbc0de85ea017ccd9
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:45
# 8943f4938d754691a6a9c261555269dd
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:47
# 4fcc955b92b54810b71510f79d494d5f
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:48
# 12efdb74df284184ae536957f24ee6a7
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:49
# 2992fbbb85ee48c3be1165f35b49a117
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:50
# a969cb84f2324cf2af286ef5c834b2fb
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:51
# 3a3c73f4c0ea4732b753df5e4d07ffaf
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:54
# 9c07c4f693e040838a8104bbbe2901be
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:55
# 148cb5fb585f4313a32a80fba667ec4d
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:63
# 112288716aa242a2a4ae3f8c2955466d
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:66
# 3fa5e156c3ca4974a8ed92536ca5d761
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:67
# 65b88cf652304479a1b115553062862c
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:69
# 0cd60871da7742c09d1ab1670058f4c7
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:76
# 61cdf5ba9b3e42c28a14112f266f1819
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:77
# 6a59af6de960468ea37ce20220cff158
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:79
# f3ff41541c394bcd9d113163bab50ba7
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:85
# b33b98a9099e4ee5afed7424b2620512
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:87
# bab842fdb87247b6b90d34a589a62a5d
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:88
# b3a3dac1ae544f9bae87972571c4928d
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:89
# 0eb03b7388734c568c5f59f48194580e
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:91
# d9fa69bddec54099878319a724265390
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:97
#: ../source/chef_shell.rst:118
#: ../source/chef_shell.rst:134
#: ../source/chef_shell.rst:146
#: ../source/chef_shell.rst:164
#: ../source/chef_shell.rst:184
# c50f11d2cd9c45b0928112e2d2d136e7
# 91c43e591e2c4be18ece355426196586
# 2b17c104ef044be3a2f5b304b59130cf
# 4a4d727f396f411bbdbbd053c8a4b9c5
# e6f04d58c85140ab942ae7888db6692f
# 0d80f8e469384f04b6ef84cc5bffd09d
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:112
# 19dbdd8fcfbe495192b3c115320aaea0
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:128
# c8db1a17fb7f4e26ba387e0bdcc67edf
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:140
# 3a62004b7c4c4a71acd6427730c43214
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:152
# e873b097414640cfbe1101ef38f238a2
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:158
# 2acb5bcd6b8141728d9cabda24acb8a0
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:177
# 1b72e287f7834edc8ce7771405969ee6
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:195
# 7fd6fe3d7aef4741a86a7430d000b5f1
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:197
# c9863f1e07a044d7887d378150261ada
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:200
# c1fe4f4006c34233ba17473b2a2d2d24
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# b6e66936842e4e35a175d885c7f5d355
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:204
# 883549d588254f7fb8f47179b3c1d649
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# d8df2814102c4e86ba30a2e04c2a40cc
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# e6f2d215410e4a158d98f31eaae540ca
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 63812ea56c114214b1d6c03aa8665f83
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:208
# 23cf05f8277b47a2a573c31a3d0613fc
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 8a36876dd265441396a8a6eba5891ce8
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# cb7f8f6953a74abca97597f4e89514fb
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 951b8a96266b4e4ca303bb957041f91e
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 725991db4e0b474eb26bf83bf60d55f1
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:212
# 4a5f965e928d4cfdac8349a08f655f9f
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 2a5b2c27de5b467a99b14962739156b6
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:216
# 50cc979053d04a4ea448b4d26ec86928
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 229f012d0c364cc8aec5f831a95043c2
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# e903373d51f243b3b2f0bb541f0739a0
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 9938897c0d0c48178ea9e8093046b201
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 943c6c5a1f5c40ecb66449fe456741ee
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# e79412a5672c452b8eb502bec0e5d4eb
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 9703fa61eddd49b4878b83d5ec76ea53
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# f45cab1efa184ca4a7f6bb1f302b5e6e
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:220
#: ../source/chef_shell.rst:391
# 0c54084965fd4560834a33e6d5d1d233
# 2078a32ae9e746a19677b4b39f4dccd3
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:221
# a45e02dd94b642beb1e026dad1d38083
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:223
# 013938a452414a87924c9b73a32dc3fc
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:227
# 3844ce2c100543e88f82e4cf9488a3d3
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# b6fc0081f6a84c54901dedba9906502a
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:232
# 765b9f62aadf4a71bfb98cca0509b4ac
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:233
# e9c0c78d8d214ff49f5599598914e85c
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:243
# 7221275cabf74251b7b1d142cfb17ac4
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:254
# 67addc39d4714165817d2e1eda6d40d9
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:261
# bccf04e22e6f4031b14653629d4991cc
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:268
# 54582c769bd94d75840e20684a17d587
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:289
# c60d9ea54d0746c790e89e8b2db954f4
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:296
# a76402af0fc344d38e366cc50b7a9c26
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:313
# ee09f18a555a49cca0579803a1a1e6f3
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:314
# 0960b1f117ec49518bef7bfda11d3bc5
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:333
# 6983d5893a3545b3aebb26755138082a
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:342
# 95b36690e23c475fa5c0bd7c81dc6c06
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:350
# 5f3b9253f3b14ef7a1a2a37516d2bf83
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:353
# 5bec427fb0df4d178352cdce10b4edc5
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:354
# 118da744ebe8464db6f5f20346c8e416
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:364
# 0036d1b33ce248219bdd3f6dbd2ef39c
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:387
# 086b36e59bf1426b9ced56ac24550816
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:388
# 0e1abaf064ee467abf24e969a9f1598b
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:392
# 4d3ce9551869461b8f78cd789cf6e7e3
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:395
# 783e76b413ba4e05ab00977df7017bac
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:396
# d2e8b9f194e94533b6f60c907473c037
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:398
# 1acd244a341d4c078468367b87aa1d80
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:417
# 5967a674a1ca449ebc436a7600ec2f25
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:424
# 97990bc0ca0443218648d0d9b41fa463
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:457
# 947b3216a79c40c7b825b3c52816d6a8
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:467
# ed0d0517ffd34bfdb030658de477831c
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:476
# 264c730e26384b549b59dc3739694a6f
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:484
# bd733ebc533a48a79066977b2bc7e8d9
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:497
# 5d636c45f2e14c58a93bdfecb59b5ad5
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:507
# f0b7df2f959e49038734d0c49adcfbe7
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:508
# 0d041b6d0b9c4a07b024f436dccca482
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:514
# 773652a9d7c0466182fda0d39ed02e53
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

