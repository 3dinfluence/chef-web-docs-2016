# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-20 14:08\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 1f8ac4bc574d433daff218962c1edb36
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# ffdf79205b8f41ca94b8a6ccec661c41
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 27bcce7e74c84e4a997bdd197a04ee8e
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 8de315c4b14b45db885def9f349dc340
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 1e07c103902048b1bac5962ed9548eb3
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 3ba12b90b1f3477a901cad58ff167a69
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 169ddf804aa04538aaabca5e6f63aff4
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 49c7d6d528a647daaf06df6b64e34a2b
# be9d010c4ff04c77ac1ef57c1f1339f9
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 17e1863cf9d74a1f97b165fcca707ad1
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 7002ec7e4331446ba8e810ca6add0728
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 13d98f8a8d3c45eba10173324573c188
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 076be25651484d6ab30543fa48b6dff8
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 2775ae4d41fc4c66860dd7d234a43b9a
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# d052fe3bb8904cea9be3da93811bd06b
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 707283f3e8864cc9ac0ead5759d46fcc
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 14b28d2e44fd40dea06980f6f8f2cf3b
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 85df89a7a7ed44ab87a43d6cf57a6773
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# d78140dbe7aa44e8aab28fc537670068
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# bb70e1dbda804f45a3428dd88ea22604
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# e449fbeb16504e539917f5f97c17066f
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 4d573811093248d6944df617db4f5a78
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 85165f466b9a4ed191b7b3eed0b3c551
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# b62a36deed704ed08d70faba94c4382a
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 97b82cc2a3834f2780f079b0b6762487
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 985744d68a01458e8c6b98aab4057323
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 2daf59978527406f845edd7b5469560c
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 874d3cc5a8c4439bafc29308f7cce210
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 606bde2a083c468781d32b0260a68dec
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 25dcad8dc2f24869bf0fed67c7ec42bf
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 66c265f0b277422db08cf0954f71fa03
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 305bb30ef70f46a085dc6b6abc91e509
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# d55ab005b9414bdd8d8beb302b2a310c
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# 4c216ee4df8542db9de08d3860c58928
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# ed677da9fcb1407e9207608d3e96483d
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 609012eb3e9d4693bc9250f16bfce421
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# f312baed4d544361bb6875a1a979628c
# fcd5b1c1a669443ab6fb1edae353b34b
# 7694ded3c70a4268b089a34219c4e45d
# 53ab42ddfe124ee38359e416e3444b2b
# a4a6c393356d400eb90f37e21b397875
# d4164e960dda4b9cac5f6acdccd3e8b3
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 8d5ca8ebf24a44b896ea5f414c25e989
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 8e1d96480d614db2ab4f9763eb30d76f
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 8ed65e4aef904755963389207a76fb30
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 176aa6bf4eb14fc49cbf742475050a19
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# d5cb61c8bcd44aadb0c2f1e602f0c88a
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 829db9b71dee4168809b70413e2ab4dd
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 1af1fd9a5af84a458b189ab7863fe913
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# ce50f1b2e70c49e88471ec5498a5de56
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# cb3e8d5723724e04b6d18ffb8a103aa3
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 87439d3025a44c4981815846e62ce900
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# d9faafaf9c714a5e87c8078bdf04aa9b
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# eac393d15ecf4eb2a1e35daf09aded7c
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# e519c153b2004c9db5801cf479ddc22f
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 50b7cf21bf374a75996d2a20ea81373d
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 647dbd1527f54fa0947bbed9228aec50
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 0b43e2976aa248848382b389c81e6476
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 725f9da11e794b1896bef357b6844a87
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 561af35adcb549969dbefb0376e38636
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# b2b3826fdd794f05b799426438eb0a04
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 47a057592e404162bc9f6b1f2fee5f78
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# ffebcdd7e8d643d3bb482081744c04b6
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 3c811b91fd7b4bf687d64522ca342059
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 84795e8a6fea48269a6fa50398358d9e
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 09e0e087c2d74817aae59475a6c97a8b
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 5f6ae0e859ae4752852314175e0f5f5d
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 8c99e16d4919464ba537cddb25bb94e8
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 4224211543264c829beab365a5434277
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 4a174891493e4aaba06e220b50126d9d
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 1a66e29097924776ad6ed0868903ac80
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 27aaf04adf424fba929b27ab23a60076
# fbd5d5cb45804bb1a4eaf69a953fb43d
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 5ba42520662648b483eb2c37e5c92d1f
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# ce5c2aaac49e4a48a62bbc09707bf99f
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 966cb29c73b4497daa6c357c4ed48ea0
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# db5fc52bc91040ae940dbb25a8d2cd42
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# c919efedd3214b2da91131ccf6c6813d
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 51c925c5e05c4971af29954164744b90
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# dd987311a6024f99bf24bab073b3575f
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# ed90ccfa220d40dcbcd665d254298ad8
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# b662e38dc8e647e2bac521371430c727
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# a83235d30e334a538950f9597da0296f
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# c99cb0e4dfc343a1a6d598b394b9865f
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# fcbdf9c1a4be40a39952070d235603dd
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 443dcc4dacb14824b0f92f8a9ff022f1
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 14ad55d502c3494e83b264bfa7d907ce
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# bd8be0ec84594e24bae57f9a80fa0a59
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 960f8739970643e7b77403dd6c323194
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 81147dde03244454b2a4bb4daca02ade
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# ca72c1a2aee845e0a36cdade97f558bc
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 6f9e13399188447b8bb68ddc1562415d
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# c97c5252a61a48a0a7f01e450cc4ef15
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 83ae11d78eb945c18348823f49d381e4
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# c078c1511da146a889d547696e19d15f
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 4544c27856614a1e8d012eb19f4ffa01
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# b1c471b34df143b89add77e15e19a663
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 13f79ea78fe94857ad4bd5b1b89ff81a
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# e8395a8c1dab4680875fe537b3dcb897
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 0e76f8534acf4f32869c939ef8baf7b4
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 9444adf55a124d6ab687ac110d75d484
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 1c5519fb99ff4e3da5ff5479f1bd81fc
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 23c7de6ce77448978849b84bddc4e6f9
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 94dcd74c50a3442aaf5d48dff5de6767
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# d21e0ec366654a2689d9e2604204c0e7
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# bc464e495a7b49679ad1e45f574cbd31
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# f63bf26107c548dfb1fd98980f86e7cc
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 41a02224f08e40af976ad1541a227afd
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 3a4d13a105374595adaeb09fffc5d4c3
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

