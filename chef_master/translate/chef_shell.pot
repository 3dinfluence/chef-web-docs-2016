# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-09 21:45-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# b87c072954fe4477bb82155dd80938a9
msgid "|chef shell|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# fb699fb430334b45abb46ba8883deab0
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../source/chef_shell.rst:12
# b8aa2b1349554c73baa6a0522cc3a346
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# d7707e89293147a2b1f37df0fab851d8
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# ac6ef6fc065645b4a5fe81084383e26d
msgid "|chef shell| is tool that is run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# a161c8a7484b4bce8ca81a94519fff95
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 870b53ec4b8d4ddabcb5e1ee0b60fffc
# eda4883c97d145e19ffd9c5411a24904
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 2264297d3e594dada095d7142c51a5e7
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 1d35764a8b6d443695e0ffeced098284
msgid "Default. No cookbooks are loaded, and the run list is empty."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 2e83938a0d5d4b4792b11f6569e4d709
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 3431427d74b944ccbd5b502f2e8f57b4
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 416ff0a810ad45fd9fa08ff72da3ed4f
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# e412fff8153548af86d0a55bcd695791
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 15604e1399d94703bf373e8b18bc497f
msgid "Configure"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:5
# ed52527231de45448c5c80ee068166d7
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:7
# 5d0382d90bd24fcc9fc127176c332653
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:8
# 589e7379af0f4a0183baf3cf7b40b6ec
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:9
# e4c471ac238f4a22b4f82f1493efe698
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:10
# 9a730c65387947469c8495f2fed6c0bc
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config.rst:11
# 63464d45672e43c7895c0ef938a2e99d
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:23
# 29452a1bc5274cc5af737c8644031c2e
msgid "|chef_shell rb|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config_rb.rst:5
# b22e6cd2ee894332894a70656fba4622
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_config_rb.rst:13
# 95661dc8a2fb4e5d9c470a45583da1ab
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:27
# b5b44deef81b4b2b93c190e1a83e9ab9
msgid "Run as a |chef client_title|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_run_as_chef_client.rst:5
# 5089611ae7984f2daf9e45cb317ff450
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_run_as_chef_client.rst:7
# fe32097c5ae64ddea0e0318337ba9cc2
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:31
# 2efef64f40d94ccd88a291b18914582b
msgid "Manage"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:5
# 95696c3d5fef4b3292e7ef531379d6b7
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:7
# 0c5b5b79420948b6b60b483e9783725c
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:13
# 5792bad87c2d411ca49365af5f3dfac9
msgid "where:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:15
# 474d1ce7fa9a459198f9d6124ff3f7f0
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:16
# fe400aaf6fd844de91b9c6abe4347d25
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:17
# 343f8f6690534b8aa4121e7f1934cb80
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:19
# e44fef6fb3d443ce9499c9b7dabec3e2
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:25
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:46
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:62
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:74
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:92
#: ../../includes_chef_shell/includes_chef_shell_manage.rst:112
# ac178678e2874974b7528e15221655d3
# c080afe340594f11a22f65962659a64e
# f215a092572b41ad89dfde0ead003204
# ce7670244d534d0da1fa17117c46ed64
# 37866fa33efa4f3383b16b804a6f7aae
# ff8f901e60174b5d99d468122b785d14
msgid "to return something similar to:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:40
# fbcc384bb974433fa0e137880b65d7f9
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:56
# f50479fe141f4a9abf14f27df34c5ff8
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:68
# 989182cc0fba4d1bad28cfb257b17614
msgid "or:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:80
# 2fcf0f9ac53a41ab8d0cc92090fe3e73
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:86
# 5c5637c623484f7982b68f03daa438dd
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_manage.rst:105
# 91de0b413bd1478681b370cfe43542b1
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:35
# ef405c90294846318791eb0647c15930
msgid "Use Breakpoints"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_breakpoints.rst:5
# b0b766718ea845b6884b8fb1e6d0f170
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:39
# f4ef61061186498eaf2745d0af540aee
msgid "breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:4
# 4cf58c6749384fecbf7637310838c343
msgid "Use the |resource breakpoint| resource to add breakpoints to recipes. Run the |chef client| in |chef shell| mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the |chef server|."
msgstr ""

#: ../source/chef_shell.rst:43
# da2e9fd529bc41c0a1c65029201e885e
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 0d2f4b5252384b909e8cb243566a34d1
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 014bde2eb16440c2a4fdf5f0776d73f4
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 5c0a9f813ff64fb3bba5005678fb4623
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:47
# b4242027dcba4ad9816cbf8c10cadb34
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# eb2694c9cc764d37a93704a5e250a05d
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 05b750d68e634fd3a39628c83a050802
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 031108f3b6cf43679d490775f2e69bcb
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 8c9ef179a0514f1fb68edf4eb81d5ee5
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:51
# f62aa344963d4b95bd4822185633dfc3
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# ee31b28fa1944a71a8178feeda60872f
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:55
# b2f6d8bb4d704a149a06ac2bec67ab39
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# a641ecee74144a5291b2bf90196c05f9
msgid "This resource has the following providers:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 74407e2cfdea452c917a366572b424b1
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 307a55b392ad40949a5095bf5be3cdad
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 935e33f421454708ac45244cb56624d3
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 8d6efe6d45bf4d5ca4e0f9a84095e396
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# d54a128bab784011afb6329c509b8835
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# d4b27648808e43efa6ecb24e66b3bd00
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:59
#: ../source/chef_shell.rst:83
# 5f6642c8815940f4b33af616300f3502
# b0c09fe58ecc4468b80bef6182834ea4
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:60
# b09470098c7641c882413054b0e2e100
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:62
# 39a52df358b84544a556e280b7763b59
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:66
# 501dc021579e4707a9cdab4cfd370dd4
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# ec1fe64310d8413abcdd937f38346c77
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:71
# 9ff35a9b22a147ccb50f784e47481f1f
msgid "Step Through Run-list"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:5
# 8a387d41ed6045e1ab31ef27f3201279
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:15
# 62a2e7d329f84daf9f486c548c359907
msgid "and then run the |chef client|:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:26
# 20804d76f0ae4c4bbbb9f6518c4b4952
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:33
# 54d989fce83b486191a2c2dfb76ee8a4
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:40
# 0658f4bc145d45f1ad432ca2276001c8
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:61
# ce722680c16b41e0876dda58213500c5
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_step_through_run_list.rst:68
# eada823791b44067b0e4124de8c2ccb7
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:75
# 736d6c0c86d043efaebe1433de3d2fcd
msgid "Debug Existing Recipe"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:5
# 1d515d2e7e1e4f9aa899be3c7f049eb1
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:24
# 6fca64a9fdc14029975ff2d41e924f42
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:33
# b126e746a42242b08b7915d823c0a4f6
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_debug_existing_recipe.rst:41
# a3321aa85a4c44e8b89335cdb58252de
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:79
# 01767a52f23c464fa5a05c991983d7da
msgid "Advanced Debugging"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_advanced_debug.rst:5
# 275f45c9cb9a445fbb0ddcb97272bc1b
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_advanced_debug.rst:15
# 6470ca1b499441dfb927d3a1f783ede1
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:84
# 6f0f24fc1a3949c98f38270d7fbbc4a3
msgid "The following examples show how to use |chef shell|."
msgstr ""

#: ../source/chef_shell.rst:87
# fc026a41ecd24c26bbf6545eab507748
msgid "\"Hello World\""
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:5
# 616157db5928465589bdc0dab5190f59
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:7
# a3236133f2aa40099a98a2a744c29e8e
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:26
# 6545e0a4b6964981b209b3a449e89a6e
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:33
# 6b160374e8ba4632b300b7a0224e0415
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:66
# 8c5e3586ee6846388d617891434bcd4e
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:76
# 5433aa7ef804431dbb7b487ff138beed
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:85
# c7fff5cc086c4790810370b31bf72885
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:93
# ebc4f57c7f3b40fc931d87e7e49375eb
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_hello_world.rst:106
# ed3b35af47dd4446843d5738e763556a
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:91
# da1820ec9c084da8982e511281939e5b
msgid "Get Specific Nodes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_get_specific_nodes.rst:5
# 063e040a6a2940fab26594b69b4dfd52
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_example_get_specific_nodes.rst:11
# aab67381540e4fe4a036ba957107c214
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

