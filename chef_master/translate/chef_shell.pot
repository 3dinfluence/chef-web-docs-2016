# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-25 09:45\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:33
# ab8222471a4d415ebf01b6666aa971d4
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# d6bd596fc63e4bf1b61105395793ba4d
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 557ec46fc01e4d96abb221502d58ffb7
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:37
# 25342643b34a40c19d94e75f57c79f71
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:40
# d42d05e68ee240ab90454afcd43b3d7e
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 54487525411a41948d401886e937229d
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 62639055a6334eab93318612002c4813
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 07c59cb3c4a446e39f25003c0895fd6d
# 12126495d79f464ba991107cf3e93819
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 9f395c516d334291bdcab42d325d4f24
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# c12068716f23423fa5cadfdd126617ed
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# d3f9310d17134f1e8e80fe499380ab31
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# b5694d6ee09443a4a95281aa740cea8a
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 89ae150f9d2545b1b46e09e6d6aebb0c
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 3186b168d3d4442fbc065ddd73b38ab1
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:44
# a3bdd80d2fe24303bb32b4b4bf7a514c
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:45
# 12d8fbc36bdf4d91a9a0c3cc5baffd40
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:47
# 73300317d8a447859727514f92083e05
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:48
# b899f007b3374437aacb8aa8bf9ee09d
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:49
# 28c13d7a0418497a8b5a6dfd9a5fa665
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:50
# c4e17b1cf59b40ec8665b742e1fd586a
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:51
# 2cf6513f7ea7457babefde634ea14da5
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:54
# 32138b23bf3541e7a3d1e29236fb1f9b
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:55
# b1112b960d814317a82563c424109bbc
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:63
# 5d0d0209677f481ba2aaca800c4a72ab
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:66
# b5de56c27e6f4724960b72ea0c093ec8
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:67
# 470208dcbe1c459f856ffbde9e7e440c
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:69
# bc5c5452ea654847a44aba54f5ce24ec
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:76
# 7c96e8fc60274c1cbc8b5b87a9378666
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:77
# 3eae98b09d2c4d189918cedeed83a095
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:79
# 70239ffe0f1e47b494cadc2327b4035d
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:85
# 846be969112540ef9c1d30b0f4c12ae4
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:87
# 53d0b90ffa404be4854d8f30c034bc90
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:88
# b0e62a9e7c254bff9487bf741ebc3357
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:89
# 2a7f2b0858324de791d84578be130e13
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:91
# dd9a8e9fdce74dbcadec55edefdd8b16
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:97
#: ../source/chef_shell.rst:118
#: ../source/chef_shell.rst:134
#: ../source/chef_shell.rst:146
#: ../source/chef_shell.rst:164
#: ../source/chef_shell.rst:184
# 63319ad946614128916a7bdafa95c7a2
# 6660671294654dfe96ece35cef81e4c3
# af6756d1b0504f76b356f1983b9a83a7
# 5e1b5665709d4bf1b540c4cd0d2d9417
# 77e2acdc0c2c4a299e5124684834651b
# d3796d817913408fb08d9452467994a2
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:112
# 618991ce6d774dc2b705a67ec09f43c2
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:128
# 323dfa40e3984046b1ca0092093e77ed
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:140
# 7e93ddc4cf0e4dec99d85f242a787fff
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:152
# f10581d70a0046648bb4819ba5d3f893
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:158
# 505cec8cd9bd4258b74dbbd336a0e9be
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:177
# 86e4d3b523064c38b60c22301d314458
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:195
# df2c30fdcfc44c95bcb883fe72004bcd
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:197
# 454449aad6474a4db50f9137489dfd18
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:200
# 08f2efa65e7848368c71d66afa187bf5
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 058783e94486430fa09bcfa45a3cfb54
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:204
# 73d7fa94f1e4475e9c0878279e771853
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# cd440e512fc44af18f768cf80341ba1c
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 195e35ad70fe4b1e80c634b83407ed55
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 6f5683de479548de93dd85ae9cc17144
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:208
# 570b31c1161a4ea3be5c91d8a70035ec
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 838abb8eea1345ffa650b9162ee4a4b9
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# c5e0b6c5f3bc4dc1b9bc4c7b4cd4676a
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 3f4cded57aac496dbc0221c8782e0a59
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# deb6f391988c4e5ea5fee89cc8501282
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:212
# 1ebe199a734846b3a815a6b945134efa
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 491680a518e3434a9b70719b44b1ccb7
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:216
# 5f9a5de8d3124299b1320466b1cdaef3
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 06ae951e6c16422a94a08d0b033c5e8d
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 83ad2539307e4a4c9280105ea8ce89ec
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 8f6cf7b8a4a946a79ef70986884f827a
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# dbec9594847944a9a25d6b6b7991ae8e
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 893ff5231d7f4d059d5989062445e8f1
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# f2dcf9afe4144eb8b645131e8d558e42
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 07658d73743b4c23bb07069c8d2c373e
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:220
#: ../source/chef_shell.rst:391
# ca84d3da40294f6fa9df610d298a8113
# 0453d43fe7bc4255a0832ae4484cbdaf
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:221
# eca8ae8d1cea49f6a3c4724dc2deedaf
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:223
# 52361e958fad4ddeb4514a1e86c3576d
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:227
# c496e75cb7d048ba9e55dd906fb41c8f
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 0a77edbf7d0e440887cf4b217953a92b
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:232
# f3d505fcf2a848d3a06cf34b0f60aabf
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:233
# 91f1de531c6b43fbacd4cab4052b2dc9
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:243
# aa83a1cc9f204dfb917a3f0e8d55c92e
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:254
# 1296b25a882d47cb85a42f25a297ea3a
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:261
# af0f89c15ade4bee9235c3dfa5f53718
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:268
# ebe1f94ac89f4bfdbd3894e5cebfc4aa
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:289
# 03560ccac657406bbd683edda95ab84a
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:296
# 8914ff0fadb84a3e8a0cb98e33739c8a
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:313
# a78f8651e800462fb34d2e46eba81653
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:314
# 0701adc9c3b147dd9baaf50ebdb81c32
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:333
# 0d44b1889928479887a9596ace25e7d0
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:342
# 5e3d053ad9bb42fe8f93e7ae35ca65fb
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:350
# 34a1b9cc3d154de1b423756b30ea435f
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:353
# d978659198014d88ba767fd15aa5658e
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:354
# bd92d4f84b3d4ee0b8dc4f7dd2295268
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:364
# 387d0d8c56154e378b1292baf949a61b
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:387
# d4e99344f7b94d2e9a11394ad2dbdb6c
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:388
# d12e8702bc36467782d8b63eef59d294
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:392
# 9bc7f146073747de91fe1b66c3e0144c
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:395
# 0ef80a36e5564b82b0b063402bbe7539
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:396
# dc33cc485a684496b7780d8b822e39ae
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:398
# d1ca595334da4c9bb8eb90252786bddb
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:417
# 64a7e329b8ce4be1a77182e2e4f54f7d
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:424
# 67e002701e70415e8e33ff612fdca315
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:457
# f646819d27e94563b8235ed98e6d89c1
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:467
# d5af3f4b1b374388a7c914f536628346
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:476
# 50f7cf2acd23462db65d0f268000ced8
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:484
# 89956eb2bd744275a7c2c880eb5026e7
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:497
# acb56e1313f94f439f68551937f61758
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:507
# c5c985076065451aabb3c257e0e4ff9e
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:508
# 13856f5d90f1477186837e72f14db457
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:514
# f51b5ff71f94426197fcd5ae4ee7af88
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

