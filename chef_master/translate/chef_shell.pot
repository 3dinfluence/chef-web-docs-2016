# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-09 15:33\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# dfef8c8cc9e24447ac751be17d048640
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 838284517d8749ad8db74068c3033bbe
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 4b94e8333d204b94b788c15ad4161eb6
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# f87441b57e0e4f41839b71021f9e2553
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 2235466a63b4412fa014c2bd0e0059e3
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# e6cb29fafd094d258d32531b732651dc
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# f3b24bc2af734d66be88e02905723e3f
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 4add27f6a77e4a84b6d0c15663eedce2
# 1ec6b88db0414fc2b6ca184533e4ca46
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 73816f3ab0d3415bb207a99385158b5c
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# cd6dc78f04bb45c5875990f40213c0de
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 84d24b5d05174cf1a8001585fe3eb211
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# f25643a55f0e4e18b7020b13c61a4ced
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# cfa1af9c6d1f43f8b16069a9b501a521
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 34eb00ae83cd41ee9a13420cd1d25bd9
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# adbccb2921f546528ef456781d7bba27
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# f9ec1dcf597044edb4f7de07cd54b6b0
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# d340fd70fbe6436c96f34559c8c9c62e
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 4a17ae06951440e7af3fd8989a1d458d
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 4b44626c48894deb9ca8d9c67f123017
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# a56b9bff5f0142a0afac23518dd29a33
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# cfd2402537224408befb2da739b149cd
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 0e8679b454894c729c6aef2d4eb02410
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# bf67c58a9cc948da9c976519c0039fa5
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# eb91174ff52b45eabb4f61bb9d4fc17c
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# dd5c2548f3454056b5be8b447553e731
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# be903bebfceb4e9f9a0c8b49dda54caa
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 5e6bfeb21f97458e8c0f054d038371b7
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 76685b0f13744f818bc5b3f6fe067d20
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 452d58ab9f3e4c73bedceb279c3ce1ae
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# b9a159de5be94151ad95ca65b8c3e189
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# c74ec5e0b34348028bf74f20ccfc2d79
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 1028d0f01ab44942a00f80cac41a9424
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# f14f7d35111f430799b5ce4aa4e577ff
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 17c8fcf366f14cfcb9f41952275ba1d8
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 189d00387bf24912b992acb9dad3f4ed
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# a86c91660d8a4f20b30ae336ae180446
# 91f7d22963f445e4894ba5b4529515bd
# 7421c11f266545c1a9987b0e36996ed2
# d83c41dc7218417382c4a9c1f622f192
# db47dd101a2b4c938683c9e1de2157b9
# dafa5e50068d4eb18192f6b34b56c91e
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 774141a40a744edd99297ed7778513b2
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 5789542e18c44ea0bbdf596215ee20af
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# af2a27c8a6f04c4091973079d6dcf58a
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 53da13693bc542bf94f8daf747d75b8b
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 8a816bb8d46a48eb9de50a9dbc6ade4f
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 50a76bfca09647bfaad2921b934b09da
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# e54bd944aaf04db79ced3a610e5b926a
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# a22e3905bd0247c59cea6cc0ee0ccbda
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 2ae87b3ceba742fca46a4a31b078cf8f
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 542d8589a1134ff7b16f3236495143e6
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 7d7993f59ab243e9ba780bdb12df1ba9
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 071d25bb50fc4308ab7d61daf5ed32c5
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 20558866181644ca81523012ac47bce5
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# fd82d22859da415b821a0feef27c566a
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# cff6354920804f608e51f4a996476de3
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 0a157cf753584ad789cce28c38c42ef0
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 03e809008e6c4f719f5c4d373f13172f
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 7b1c550feb164059be6c112b404ff95b
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# ab3a94dbc98843cfad99daff6af40a17
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# eaa1150e54864e9d9e7bc5ca9355622f
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 7199d72fb86a4aa99d321319d449e59c
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 9d203fdf45c24cc2819457043bee13e4
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 8bd8b8bb26f74d0c91e89554d52b699d
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# e83ef6a0e801438491a3f3e1bdce79b3
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 607cab44bb7f49648f1d46ccda5b2a3b
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 31b4e4bce56b4783b410ca3857d85902
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# c6478d17e7ea41f4a1fa53f8c8f15fa5
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 8ad1af0a4cbd4a78b071bbe3f91231ff
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 2324109ba1114563bb2ac335ae25ebb2
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 3014592e696447df918d7fce780530ce
# 49c94e3ee57f4a4d81cf8f51c4d6b611
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# a2c5358ae72d4475b5742bdc12ed6c77
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# ffa428715dcf45668f569d05131a0bc0
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 37528d8913b24a28b19c4b0a22190199
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# f8977f663403447ca13f30a7497d3cd1
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 114009ff3990428a9b3ddd3c476332f8
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# ec33ca531c9b45049a2de0929112c22b
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 2d12c2a6f50d48a782edbd797ac6ccdb
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# b9b227acb69a42138116193c0b151e2c
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 4c1b4a712fe04951884dec3f0b22e4dc
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 50bfd9404f9b49439bdeaccd02807033
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# d8c7f87a9b7f44f88960a906ea668a6d
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 7d95767eaaf745918e2f578568045a59
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 23651127c776418bbec19df91a053796
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 284a25fad012441e9d15e06e9cf3679a
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# dd94224d8ac74270b9a0bcc39ac1862b
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# d124fb8ec2bf4b5b964eb532568ef75c
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 2d6d1adb3571469c99d8ec65bfc8498a
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# ae5693d629cf451398ae249851890804
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 0499cb0fd66b406199527bfc59ff6d04
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# bdbdd37d46884960ace0f1cbda2cb382
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 740de112c2d54ae2a2a30d9fca98053b
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 5bbac882df314271bb521189525041f5
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 289c4f0108344d0aaef8c6e097b25b40
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# a52d9b86cdcd4508aee20c4fb62681b5
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# b4885427bb1046928b7d3735912c5412
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 622cc366dad941a29cbfaccf6af86cc5
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 51c7915b3fba41cbaeac1b38d32fe902
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# ba23db59a66c4e04aa926584d49f28f2
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 3127cff23f68431ca871971eb1c391d4
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 3728405a35144bb88a1fdd49de81e9bb
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# b9b356823da84034a0d03a79a503c1d0
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# a93f634a76fe4d0d9d79ad76151074c6
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 33e56309a0fe4500ae16dfc89926a871
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 192429eea148459e89c50941ee4173ea
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 177c1dd7de27489a8aa76d0769330322
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 1dd6eab90b234bb99e64fd9f8740609b
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

