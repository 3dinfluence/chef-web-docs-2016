# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-06 22:47\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 38875510e29142048cb3066f8418ffe5
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# e224eccdde4f4e63822d90e6b1285064
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# fe037c1999444b3088b0e47d6cfd377a
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 6ae702f278d34b129c4473044ab6ebf9
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 65ae0def24d84c9a8674e1d623747087
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 65d959f02cc04e8f990e74716b7baf0c
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 4fa39f898c5441d4a58deb75fe6871fd
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# f06923ad64de4a27b7e4485d9b71a61d
# 0a7d15311d4e44ec9ae6af8abdf4f8ed
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 2dd0925f27a04d578b33d9154a35addd
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 35aa9fbcc988429abe890dd034ef5f00
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# df9e0075e2ec4a7684aaba67e5d52a72
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# c2cf93f8165046b7bc4e3a11c7f68d4c
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 34f54320838148a482790a718cb80298
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# e6aa2d3204434d48bd1305e31857cb72
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# e4d706eff18f4de1b5b067b2d36e7907
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 1b51f77aa8c84afdbe509b7d1cc75224
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# b20814a2a14f474f96f26cc6e571bb7e
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 236fd093ebbd4000be08fbaa18916d30
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 889d5a2060324eaa946709690b334230
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 6bb2c3c81f5444e5b11422d12b743f9d
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 57e650a5f7ce4d0dac1717d54e9e6ef0
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 8b96c4eb486d48c68523e3f1894a9cc8
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 3866d5d6a97e4d3f82f3b5882e1e0054
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 6bc89916ab3c4362be52e38c15ab8196
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 26fa01e85cc54accb7bee33985db5b06
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# de93e0d4cf3f4be3bf8a4f7e826e0c7b
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 8634fa41c2d748e6bc6c142d37714dfd
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 015e37b76bbb45a28662303879f45bbd
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# c193bfa8a8134ce6a39fec1f1ae0ec68
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# f6c5441325ea4b868fbfa5ad360e04a3
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# ffaec9599dc14f1bacf96e0af4efcca6
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 692c56ae421247408f4af0ebb446cfad
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# 245a7bfc1299457d9c7376e058f3096b
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 9fa572a4594446a8a0342ed0105ad3f4
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 5815028d790842078e06aa4b9043ff2b
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 1de46f9d7baa4d2197e7e731b3090099
# 64684dda5d194585a99fda3c9be0e5a3
# 91cacc5d8caf4784bfcca5fae692deed
# a438b3945835429c94b024b09264d98c
# 1ddd6a06f27d4f589bb420bd03170f0d
# 179eec39b7ce442bbf38cdd1eaa62ca5
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# ab90c27e47254cec8ae0e394ab115ec7
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 6b3c176ac9c14bdb97919ff35f276b88
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# d2c5f7c29c764119bb0ab98b60d6a978
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# f6b897b119a94997b935cc69a6e9ef7e
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# f181dda201604f489c5beb465ecf6983
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 6703cbecd68c4650bed82f3df6e27e0d
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 6aabfa32af0d40578706042c080c537d
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 957eae801b8b4090b3a7baa39a7efd5a
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 6ae6c9843bf64726ab1f48b4c80412dc
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 16af91e9491d4bcdbd38eb811fbc8e63
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# f066693337dd40b7b03642e5965786f0
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# ee26a4648db847f68921860a37ab316b
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 28b27f1cec8146fc9ccbf59ce39513de
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# f970308dcf7a433baf6b811f25e71b73
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 6722a9a322b44c6985528e17d827c56d
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# cc6c83b6014d49279dc06a40ebb3141d
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 1f734b9cfb404893bcc69c8619540e7c
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 3a33e6c90e3e4f1580f64ab2d34a9550
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 0e608397716f46e98c86472c68b587c4
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# d5170540f92042a783e444e57de41a8f
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 9dd91051834741f7880f6ea703fe159c
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# d9d4724251d342e7bee3e209b1b846e3
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 282b8aa1b46b4beca2a4b1d7c82aae76
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 94a4a435c36c433e834f0d8a94e54360
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 42c1196d6bb14b10af930a536f432b33
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 697a7c55cc5b4236a2c35236d1a004d2
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# ca1af38418ac41a3aac3945949276dea
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# cc15ddc43d724e6b99786a88b665d0d1
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# a12b0c9ddb1c4874aa5fd1dae7a1308d
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 7a376ff3c2394bf284b77d9b0fd90134
# 586c8e80685d41a5b0bd94f87edb3623
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# fee606cee68140c9b6aaec6582212eb7
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# fdc30b3dd5604d6e8f9e175df90f55e2
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 9774327d179641e3a98fe266e37275b1
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 8b71aede0e9d4d4db2aa2acf9087ca3f
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 7676d703df2b40ce8e934d43f07ad737
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 5862bee8e4294c9aa91116d45d4ba185
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 47805b9c08a14189bb49005207117aaa
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 7af139d1e5364c62b2df7a72c651d306
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 00ed1ee772e342cb95919cf99d2264ee
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 349c87e7968e4866b923196fca8db853
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# d080c35bf90b4cbb90f2c0b61bd98c82
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 9a040d7e1ebf48ecb54a19a34bd5e566
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 00fd5d052ed54ac6aff24b4e074d035d
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 7cbf48c5ead34c4186c1c394578ee1f9
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# fa402de2993346a98cd40c2bbba197ab
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 050f9e928ebf42f98b4039b9302c1e38
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# c89521f2b03d46c4bfe51557df1e1baa
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# fccd02c0c1904fb2941dd0d2d76e8243
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 09f1e0b482034a9d8d6b171ae0f49bb2
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 84d4b97a03c640f7b38be69b0fb3827e
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# f1c672b8f924453fbf321f5605c17206
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 9964c8bd44d34dfd83783b67ad612547
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 663d99cdc361407a96bf050af74552de
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# bfc2de6d943944eb8db59820c3718af7
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# d674854c9cff4daeb61eedb5da9c1c49
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 6310ad558e1249bc9a3980c827ec2c93
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 89729b03b0a849bbb1afbf890ab25049
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 83f1dbd396e245ddb0a70771e820ccc0
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 6dac60ef3b264108ac3a1bc211b61a27
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 969844a4ac224a6aa2489e4a0cc5471f
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 26eff27aefdd4c78bebf994394fd0950
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 640f50fdea3d40aabeb76a03cec45ed8
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 25a376e6ab8e46a5ae9f4e8ba788402e
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# ae0a659b7c9c4810a4dfc470ebd413f9
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 67ce3c5d9f624b6da0d222d11f57bc87
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# a0a983a04396425cbe12ac0e60080f9f
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

