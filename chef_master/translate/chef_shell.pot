# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-14 14:12-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# c573a3c59d4441ffa2214628095d3e57
msgid "|chef shell|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 641fd30f7f7645ff82719cb259130560
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 0ccd107ebac7482a98a4759e403345ec
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# cbcfe10c45fa4e41a8be5b36007abeb2
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 346e9b05403f44939328f4dd453b8bc5
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 58e4e447a06143138f5e9e7966556eeb
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 7aa7bbda8ef74a40b514e11c7eb0cf77
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 56b458e2b6d145a5bd1ad28620b3bb53
# 27e6425e132f4ba3a591b251580f41d7
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 3d6a9ceb4dcd49f7852d04d14f16beb7
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# acc9de4580c84441a159c1cdf0b60d8c
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 49ce24655b254c45aa9d976fad7f138c
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 91aafdcf40884b7aaf451bf26b7532a4
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 535c71e69d1a4cd2a663be8df52f676b
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 4b01dd5afc924b28a8ce2be10216be61
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 40e4a0b5f2424115bf4db6b6c08acdee
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 45d4df3c20d6422d8122c92cb59679ad
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 798c12b6802545dd9204ebd1a7e4de71
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 8790d63d1aef463f9e28afe51913869f
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 6db3d11f6ebb418da5ff7cf504a79431
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 91e7f2bcfb6946bfa4991ff5837e6379
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# cfba77ab4b054aadbb416b7c5b370f90
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 37154cb8d1854b0f92c13e7a1e0ecb28
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 9b52c598d5d94c98bbfe7d9a877e5731
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# c202c7c5c8af41f7bc43245a1c4d7bf2
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 7b74bc87b55e45c9a3bd530e0c12764a
msgid "Run as a |chef client_title|"
msgstr ""

#: ../source/chef_shell.rst:42
# b2c94e6eeb584bb1b4d04c0cc0e45377
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 35431a46e2a74297bdf958a7f2ff6f5d
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# d82971dcc11b4cefbe4367b7c55f5a24
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# aafbce5761e148db96f0f9accb6deb63
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 4a4c0e5886a84bf491f1a558612f7a57
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# fb45d36ac0234575b195ed28d2581767
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# ad90cee8ebb543db9e2caae0ae20c82e
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# 1619c23d27a7417bae74d2c24cd84713
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# c36933c747f247f9b6e2acb07741ad61
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# cce0ba2df90d48bd90fba693bb1624f0
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 32423ece5a81451abab6ce6653254b9f
# 1ae426ec326c47ddb1fe983599cebc96
# e96cf113b7454dedbba88829bb813fdb
# 01cae630736f4be8a2ada2eea15881e4
# 8143be7e68fa4ecca21ca039fd78c83f
# 9d6ac5ab53724a6fbe9ccd559580c304
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# cd5b6af6f6864af08fcd28f607a63d46
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 810c61c48f0742e184548c1d5af1ec0b
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 0bc90250528c4252bf769c016a84f36d
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# c5238ca2239c47eb9031965ba75c425a
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# f20d4541afea4a34813ee87124b81e4b
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# c56aad3aaefa4cc496f1c39b4990e273
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# d214a713dad74cf2ba37652b18f8bc01
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 392a88184b2748c6a21c467b61d6ecf0
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 6b56259a3b78435ba594a85cdc5f08f8
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:4
# 7722afbb9b2d4ba897225c3b6e5f29aa
msgid "Use the |resource breakpoint| resource to add breakpoints to recipes. Run the |chef client| in |chef shell| mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the |chef server|."
msgstr ""

#: ../source/chef_shell.rst:179
# d8e45f3c64f54f96bedf82686546239f
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# debf501e98944f07b887094f46a7f545
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# fcbc957399a144b7a5082c27fe5dbb88
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 437b083be6d346ee919c0bfa1415e9bf
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 0366e046333349519cbbd14a6d63ad68
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# f1975dad9282420f93a09ca5fa7f67d2
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# a80efdc35de14960b314af774a66da27
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# c475c229ebfb4c12b1d5882863f1fa9f
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# ef1ffcfbd1c44bcdb30028f8f94fa931
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# bcd300d02a584033b11197bbed91b8a2
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# bb36bac995e94449ae234542363c27ae
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# daf92d09df0c42b78474cfeab907923e
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 912636646f7340bf8974c11d5583ad5d
msgid "This resource has the following providers:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 9947021146a84430ad699c7b7dcd98c3
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 6355182d27e349eba168819a4d43ce6f
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# bd9360ccc0904ce4bd7b6059a14f0518
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 63041e584be047d0bb69aa4f84bb2c65
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 6ef6ab234a3440889a5cdc66ffe0017b
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 7bc86ddd932349bbb87a85c5f361487b
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# cf73a3366b284a2a9c9c5d96a90ccd84
# 09713f616b684730bf0ae5859efe87aa
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 2cb3d1c1793f48cea00102295f60af3c
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 1caa9cc986964c228bf6be58a757c9ad
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 889d6f9445b149e8b7c6a348b2028bb7
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 4b4a4ab4a1524e31a9c1fd66d578367e
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 646159e35c924b0c90c82fca1476d5c2
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# ba6f595637ef478d8357a32630777140
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 8bca359bf3954656b8ac0c410012582f
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 8afa593a679f40f5ba0a97cea6138364
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# e6d040758bb54a009584138564c4b0a3
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 17ebaacd84b24f98921fcda3d7ea7d5c
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# b822a833036c4cd38cc2260658797d5e
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# e2189e40a46f462688d8e81947b8aa5d
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 9fcbc40b6e134a83a4b68b7504b7411e
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# b2add94ea07c46aa8087e43460727a35
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 3f8bc1b17bf043a6bae7045fab1e9f78
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# a4132ceffb77475fb2c6ba517745199e
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 1e91191affe84473a6808712a0ae54a1
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 1cf8a142afb24b6981a714e6cf3bc039
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 762b3d42c7284a4fbe08f5b89f78a53f
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 4706ef23540b4de58f37eb0863465d93
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# f44c4988e57841dea4ab4792009b5115
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 487fdeaf1409485ca1f6931853341aae
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# ad314e62f8654f85886e3834133b28ac
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 116bba0dfe2e4a69811ca4a663072947
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 2faef79cc9de4cff94ce2420f149f6f0
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 2dcc4a1ea9f34f54b8074e12f61baac6
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 0f2669dd42a94919bc0e058e3996c76a
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# aa719f51c80347079b42720314e1519c
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 00d51691d08645d78ef1e358fe449de0
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# a3b270ba15c345d1960bace1e01a86ea
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 62ec405ff924456dac78f10ff03745c1
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# ca02efde32414f3b8148aae11527c2f9
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 80494ee357cd4ba7999a0c06cffa0968
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 0620e8ab6e5d479eb5a6dd6fe102ac48
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 64b76bdbaf9b45388490ed14ea865ac6
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# cfda5d86dcab46d18aab3fa7dc2d1bab
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

