# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-04 13:03\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 61d6728eb0be4623a813fe3a66502f00
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# b39582bfff8841e09906b00992dc8afc
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 94f4ee27d1444dd9a88c27f73474cc86
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 348dd7577e8b486da745ffc576a14714
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# f66af2bbb7104019880960fe02f13e9d
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 04cd500942eb40e58f146cf0a7d213da
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 4c397274787f4de7a1bf280657119301
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# d4f35e50291c46239023abc21b45f702
# 0f86d230ab8a4da2a5f2c567b8839ccd
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# d83458657f11485dbd5fc085add49f60
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 3b3d0a7190df48ddb2ebb010cd194ac6
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# eac41358d6474f2ca4ae4a930b572b10
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 3d4332fba5f44c95a75df8ab8d51a7dc
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# e9a32899b4cf49d3b66adb024abfc406
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 8295222685344b63aa6271ab2131d75a
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# e38140bcd6bc4957b02475469dbaf4a3
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 3cb3f27b264b475885ead04cdf153a5e
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 4c34497e73d3444b821061e16f8b357f
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 936ae7c74bd04a019eb7c529b2f4698d
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 11708a9ddc684e758ea536c59b98bd93
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# 94d9e366887a4647bd53147a432d1bba
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 5d666a7635d040a3ae42e09746aa74ad
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# 3f11019ae811426da432a867143ec933
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 86743c55c68346a1878e7ca63b120334
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# 8c63d3382c654106a04814f2cfbdb31f
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 257e506f44dc4d5c803c8e47646722b6
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# e34ba88d2fc64034924c8603141d5dff
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 2494ab5b18ff41eea8cb30a467130418
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# fd201b0e2cb54f1caecabcb3a125acac
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 18efdb94ba5645b181cb0e5408f9a617
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# c5f8b96195a74db8a7273322e555b59d
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 4df71e17bd9a47f5b8b1284d1dab1d3e
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 1444df6bc15940d48cedf6181092f6ea
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# 41ba333843cd44ad9d518a406377e6e7
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 69ef5f58049744b3868d848d31d412d3
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 711da10de0da446c97ba1f4dffebacde
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# db74b5b0de6a4a649ecdbf820d77bf13
# 6193f1714ca442799400c25be2d3e1bd
# c140ca940df04cccba85b78265cbcc5e
# 0b1c9eb6f27b4546980d9cb67e71a33b
# 54c955aa272548ea8d0f01a02aa92430
# 15b4dc07e7174150b8d61086371645ba
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 8ef4027415b24d2489519039ed14c3a1
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 949746c39ebe467b9b8ed11d9fba2e80
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 386e06f0e687487cbd3741f9e6471fd7
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# eb782f030d674ab4b04fcc4572e1b2d6
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 4c14d101e7d5447aae32ad3a3933c3d5
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 5d561964f09f4918aba9acd7dc8323e9
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 0900967ee6684386a484dccd6914fc82
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 49db745b25af4ee0855f54618c59b299
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# a62c4d7b1e1c4566bdf95763221b64fc
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# a054020010894186b998c15d9c3edc63
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# 5f6e6519cc814484af949f463ee63a32
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 4b35c9f893a14676a03882e98fb1e097
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# c2399ffb25494ca5a3e43f204eb2fb4c
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 5c0d6fce65a44b5083730ccd68337231
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 7e6b7ed64c0442c9bcf769c75c454590
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 07009bf47e524873843af0553c3baa7e
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# e0a0db7dc07a480695a620f038ed5823
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 5e8d455051a843fbaa10987fab42be42
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 1c3594d32e1f47debe9687f572d6f60e
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 4d1bf624bdca4ec087d2cbcc59c2a372
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 657af522d1d8448ca14f893409a3c1ed
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 9ea7a6eaf5ce41119835ccb0535ff412
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 7e7f5ca7fd5044f5b3e0328b88f8bd2c
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 97914899a1d544d095711fbff123b458
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 7d686f8743624272a69764c7443efe46
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 8745582b09a3484aba0c2c454370ccab
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 5dca35bcc48e4311a6919b12add4a00a
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 7de97a8582d3423b88596953fd2a085d
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 048ba4e7959849a89cfb2b98e8cc592c
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# d3e5d357bbb1428b8abf42b59ebf6fe3
# da1a0932eca749049f5031cf30389be7
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 86007587172e420b8b782c2fa310282d
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# ab4bd87cae184a34a44ae25defaef78b
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 251ba6102b384c76a4eded5417fd1b3d
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 3afecde6c112419e97609f8083d8d8ac
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 55d7ec9554564094afe2085a4da07b47
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# ac7e1c84031c4f6d8eba741711be72ea
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 572691500cf741d586b69eac89796dcf
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 2fc5fa28d1ae49149529eceb2fefb834
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 169d5c2f5c264fa0996705de3ee70ffe
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 6168065ac43847ac84e4d8cb7c671ee1
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 45f40a0c8e2b485a920a617eba016f66
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 28428a023fcd4e3991927fb18ac36965
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# c71ae0835ca84131ac0066ae41ee3166
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 1995182c7f4f44f18c8ca370e89d0f78
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# dca6de3501464eafbeade3c8a83acb2b
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 36d51df9095f479cb3a3672f9b317868
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 6cd6831cc15e4fe188ac1e058758768c
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 65915e85317b41c3a429186c8873b15f
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# d7e9a45033f347c6b591e24434fa62ec
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 20aa0bedb59747af853a5bb1edc2c545
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 8c544d3705fa487d95dda22abdb2fb47
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# c393f93adc67469487a16b39b69ef001
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# ddbf7894262d4ce1885c285d72a5878c
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# d2f555001680474491a1242d4c813999
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 4a6c0ce5bf664e12bbc3a2cca2379a6f
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 647a20192e6045378d706bd09a2ed6b3
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# dc9bab0f9e624a51843157e71f8f2c1a
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# da06bd3699844f49ad953ad059605469
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 4877bd8b5ce44e0786f8b9e04332b053
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# a1b0818c4bc8422795eae54677aa2189
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 83e5a380be8e41d59f4c48d01f0ee4cf
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# c8ddc2d839974d33acd3d559bd212c39
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 142b71e333484c5c8fb0f514bf07bb59
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 071d49f6ff61435781c07900b24d8dff
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 06775139029147aab349afd0622e8556
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# bf6b366d19e1472eb996c14c29b9d29e
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

