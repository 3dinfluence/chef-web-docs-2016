# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-06-07 08:08\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:34
# d419e8c6c72844c4bc8d95b4f6c59c64
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 3eca6a34c66b41219943f4e89459fc19
msgid "|chef shell| is a recipe debugging tool for |chef| that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# e2c63540634d4bcea104163b1bd11aaf
msgid "|chef shell| is the new name for |shef| as of |chef| 11.0.0. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases of |chef|."
msgstr ""

#: ../source/chef_shell.rst:39
# 43e127b9e451407a8641c002b5103591
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 91794768a2594e738bd78f5503a5f5f9
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 5df35404bded451897da2302249d2af5
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 0fbd8e8c11984f568cee292ba8ad6d04
# a74e2cc5d9c94be6b8f1305af142be5d
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# c08afb99481d491e964c834ecc8794a5
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# d47d46eaea6043b19f99f61b9883d574
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# ab9b9fe41ab547ccb6ed17eb705f58af
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# a0dc588d126d4928bd0595f13356ae11
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 9efde0cebaba4a408cb3f4ca6e755374
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 6f0e01b5fa7646d0bd0fa91ac3641757
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:43
#: ../source/chef_shell.rst:230
# 3b42202465cb47c580482690d4955849
# 21c3a2d9974644d19d4ee46001b70b0a
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 8d0ab5b011684daea877dfa7ee205c97
msgid "|resource desc breakpoint|"
msgstr ""

#: ../source/chef_shell.rst:47
# b405cc88e9cd4a27a0c790e4889d4878
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 34a1d947407e4287a9bf1f5c792173bf
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 5df2bb73107643bea1941211dd32fbf4
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 79a982b3759046ffa07ec4d08450c106
msgid "``:break`` will tell |chef| to stop running a recipe at this point when |chef| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:51
# d2aa971ed87647e5ae31bd86e947fe1a
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 5608bea18c21462cabbc764043273b1a
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 5e409f4e2d1f49d2a526680538c4942e
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 4401034aa7214bc39560846ff254aeb8
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# dedcfad309aa4b03895f5b79f0ccb042
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:55
# eabe0e29a47b48f99642caea694e8e04
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 682ee225e9c44356a2c30b53c21fe214
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:59
# 70c965716c8e4a17bf36b7bad903d753
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 6075e536acfc49bc8a6ab2bc88e8d05e
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# c863e2c6fafd4526b3141088d88881db
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# ff3ab633e9d2477c8f0725f8363c20f4
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 3c4d3414620344c08061b5181db86bb9
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 60e2c675912b439c84c0dd6ea0423973
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# bdb9b46ac48248a099e90ab095818a2e
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 03e308e8e1404dfe9632bf7fd6ac7fe7
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:63
#: ../source/chef_shell.rst:406
# f1ddfcc0232b41f69a02b20216deb9fb
# 42ff694d3b434372b2e5a67825b70d1d
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:64
# 32005b70645a4592a3b1ef0222c6f8dc
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:66
# f00d7d80beed4e25934f995ee8b3bfae
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:70
# d27af0f156f44741bd5c03bc123ecdfa
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# e11debb98a104480848371e415406828
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:75
# d0607241887044a381f27c6230ced398
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:76
# 398c6723e8c140949d6319c280c8e11a
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:78
# 9bcc2daa8f1746049f80c6d01b1520d4
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:79
# 68c14d277754470dace1a65c81bd04a7
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, |chef| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:80
# 263d958e2fbc4d6488ef98a91001054c
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:81
# faca74e68f1346fa83a1d7ebe27a8d3a
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:82
# 5c0cb9b70af644eca7a47f5313c520ce
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:85
# 8aaae4c4152e445a98f156872476db6c
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:86
# 7f3d5c5a3f3c499e822ea4c0ff5b7b0e
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:94
# fb8f7b0b530a45bb9e7055d0e066003e
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:97
# c57ba69a97cb4b55aacdd70d6655a021
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:98
# 8e7cdd6fac6e471c8a50579e32baa115
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:100
# 78e22d7340624854bff2e09d21ca6f94
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:107
# dc75822564604beb973e9e67ce7dcc67
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:108
# c86aee40a1d642a7882fd2a5d20193a7
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:110
# 82bf0436fd85466a9bdc4a7d54d78905
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:116
# 43da93d621bb4e4cb7af4d414f20764b
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:118
# 54d0d69c4daf4d97b4b94b12dae32e12
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:119
# a4d4cebb78f648d3a028e041deef6409
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:120
# 84b06e9111db4da9b97dd7e1dfa59dbc
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:122
# e3468b6f7f704e72b854d507b7c9b2ac
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:128
#: ../source/chef_shell.rst:149
#: ../source/chef_shell.rst:165
#: ../source/chef_shell.rst:177
#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:215
# 75e948eaf6984e3b8eaa93738fe2ff1f
# 4eabba90a9c149469034cfd8421e1b9e
# 50f8fa76b07b476ebe247df1cc908ffb
# ea1952197ecc41748c0db755f6d8958a
# beb0058ad6014c93aee0311481963e8d
# 98867de369ba49ae86252124edf35b2f
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:143
# 18e790119bdc48f19aae718151a2025b
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:159
# f5be1387e1e24e72b065c16bcf3a0661
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:171
# 220e327672b64081a1f4c452e817978d
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:183
# 132006eb37a546e29c09b5e02204504c
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:189
# 99f6dc84789a4505946a3fad9b4be0a2
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:208
# 7e051912e7ad4c9ba678ee63aca47fd2
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:226
# dcb0c0fa41eb4651891cb9d30bf3eed8
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:227
# d48e719a70a640b794a176320c76f7bb
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:231
# e8274b34c92f48cc9f7d09936572af79
msgid "A breakpoint is implemented in the same way as any |chef| resource. The |resource breakpoint| resource does not have any attributes. Its default action is ``:break``. When this action is placed in a recipe, |chef| will determine if it is being run in |chef shell| mode, and then if it is running in |chef shell| mode, the |chef| run is paused. (When |chef| is running as the |chef client| or as |chef solo|, the ``:break`` action is ignored.)"
msgstr ""

#: ../source/chef_shell.rst:235
# 7c38a23f6e0b4d30a338b2410c47875b
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:236
# bacf92b9e1284103b1c050f7219150f3
msgid "To explore how using the |resource breakpoint| to manually step through a |chef| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:246
# 181a1bd439314675b4e0699be8131d11
msgid "and then run |chef|:"
msgstr ""

#: ../source/chef_shell.rst:257
# f92ec49e5a174eafa7c8b8e1b2d2ab3f
msgid "|chef| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. |chef| attempted to name the breakpoint after its position in the source file, but |chef| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef| run:"
msgstr ""

#: ../source/chef_shell.rst:264
# 772e9dd633b641409366bdd77fb4c8c8
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:271
# fc0493cfa47f41d1957cfd5217ca9b05
msgid "The |chef| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:292
# 8294f29691d54d2ab512caf6ee852c39
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, |chef| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:299
# c5650f73a3b047e58bc663967be10970
msgid "Rewind, and then resume the |chef| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:316
# 29d5272cd83c4f409c3ec0c64276b31e
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:317
# 9d11a6234304463597ed26a965444692
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:336
# c5032bc5f96748b8a03f41330214ba8c
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:345
# 5750307525f3413e838f718993002ecf
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:353
# b947ebf2e33349e29300d5693ac6b30d
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:356
# cb63b32c26404da9ae8cc0bf1c278a25
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:357
# fa4458edb3c04c66bc6bda6a5ddba511
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:367
# 39b99539491248b1a3f142192bf25cd4
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:402
# 207f305cfe2249cead7a8f04df9b9da9
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:403
# f343ff5af4a54316af0e3f534cdace07
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:407
# 8d331eb1f38b4c8d8a65d1dd206f519e
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:410
# e4e7d1cb83d24bcd83c9df7070578501
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:411
# cb535fe5caf64daca1229caf4a7eb9d4
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the -s or -z command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:413
# 78e6c08aa8ff435f8863a5e4ad1cee75
msgid "When |chef| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When |chef| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:432
# 303476c809064a13b307df61a75ecdad
msgid "(Use the help command to print a list of supported commands.) Use the recipe command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:439
# 0a253f8fa706476282e471c196e0351d
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:453
# 3d2ecae414354b80b0d227a3fe08869c
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:463
# fd80d6417b3640229b39e02ae0436783
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:472
# 42e04feb5a864528b11865c57f83e693
msgid "Switch back to recipe context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:480
# 0cd51fa73ada45c6acab072b12b23b7a
msgid "Now, run |chef| again:"
msgstr ""

#: ../source/chef_shell.rst:493
# 22da79dfe87f436cbc706c271009ba1e
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, |chef| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:503
# 5e6c5d6e826142b08d58a254991a0ac1
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:504
# 26d4542e1c344510b2dabfa866bed900
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:510
# 669b8df3f2d141219aba95fbb8f179e6
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

