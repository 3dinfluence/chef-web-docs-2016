# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-29 10:22-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 5e24237fc98c43bdb9a443775cfcca27
msgid "|chef shell|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# 76450c447b734ca394c28230be1611ca
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 4a8deda50bf64f7abf2e366d72ecb8e0
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 31ecb7594e914e20a23e7b7325af8841
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# c8d0e1e4509f4efd9ec13ce352ab3d38
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 5c82c59bb9654d569ebb51684d7d3b6b
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# c31d95a0891e44afa394feb68e675233
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# d6740ee5bf0a46f5aa0e99068457ffb9
# c4f93cea8b2645ca9262d482368e90f5
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 75b74050a0904ecf9dc82c956d71c240
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# 54200eeefa874375bb624edd8cf33ab0
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 58746ca754694ec0aa7ba5d8016d31fa
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 154fc5ee36134eea8809754a5a663de2
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 5f1db7659c4b46869b8efd16cf2e070f
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 49ae45cca90c4b88b4eb13849168e235
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# c7e9e3f6fb2846e3a0d52f2616c3c8fc
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 586e1fbd62b64c9194bf9d9bc9890669
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# fc41b513f41b47a9b00846f06f6fb740
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# fd8761b46da34976a74dec0d8a6a8dca
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 112be4bb5e234e71b9451807a73bc7eb
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# c46610d3a7834b8685d0cee4d41894f5
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 07e1a012edcf4cd8b93cbb230b96521e
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# eb60f75cb9d14d7aa65d105ebc7b6cc4
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 14aacfece01a46c4a5e6da28dbf44e38
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# ca4c5fd211d746e79ae66f4e22488f87
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 7a0380a8f80440a482fafd8148dc4bcd
msgid "Run as a |chef client_title|"
msgstr ""

#: ../source/chef_shell.rst:42
# 1839639dac184ac887c05dc015e7285b
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 5f13cf1973a445f28885b450fc839f27
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# af72f215dd294108b196d3ac3e582479
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 95bfc3a511904a37aedbf6c661dc0f8c
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# bc04ae3616704b89b0a1af9be839f08d
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 8cfeeacf8a2f461cb1a6bae237d31cf7
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 672f14ae37b84a5f9483377b04359305
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# feea38879896464dab2c34835dcf46f4
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# c268ea4d1509463393ca665170e35ffa
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 3d83d54b44c0457a92eed55c4c89b1b2
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 3d24cbd8e8cd491e945df40098b533fb
# ff6ea48fb48f409caa13df81391b4855
# eb3090a4ad554f109b87c198c28044c9
# c217d2fbfdfd439ba3992b2537cfe1b7
# ba0ae540820e462ab1cf5ceb7356d165
# 1698eac585134ac6ab390669ec0aeabe
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 5312045ae3164603b7406bacbc6552e2
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# a2c31883d1764cc5a65b0aea118f88c8
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# dc2bbfa28b6d4fb5b2ea1e7d0568e825
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 570a8aceeba94c0a9e61e2a9745c4708
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# f25fd14490be40189a4e68415d43687b
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 7a7e5d457db04c1087602463674f0efc
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# b7af4bcf56f5400abf3bda6599704a28
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 30c4ef4f9a6e4177a561e886141f01e6
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 85d272b5f1074ecfb02f1b7c241a8b9a
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:4
# 437dea96090d469a9d3a881efbb09696
msgid "Use the |resource breakpoint| resource to add breakpoints to recipes. Run the |chef client| in |chef shell| mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the |chef server|."
msgstr ""

#: ../source/chef_shell.rst:179
# aca629f40273456cb7d042e87294ce1e
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 85309b40f2be4f538e01489e8bd6ef87
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 5b20dade0f6a45fe8bdbe39ea1bbdcdd
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 26dbcbe8ac64471eaf005305183c6f5a
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 66a003579d5046c492d04d5d3e083c59
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 6babdcf9feb94a2abdcac281bd07c007
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# e85dd496c4194d76b9667940b6f2492a
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 75a845880c9247b68e2d89ccf1557b83
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 8fd859c64ef14da4b82a502a7ce3d0ae
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 4030b1c737b94cc0ac0f1d1e8962126b
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 426d4a7524e8437f9aaff6f28bad391e
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 1d148c4006e3412a81c265008f31d995
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# d46f0adb22a9499d803b00cf86b33fc1
msgid "This resource has the following providers:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# fdf02ae6a3914ef5951ef3ac683e87f8
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 1f3648703e8a46f88f3b50cc9a53efab
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 9e298a3e334f4afb851d7fe4065fa7cf
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 66d1150e1d7e459eb81be755eb5121a3
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 4cbe14a3530e4d4abaeaad8ff81f7fec
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# f09d46352b664016954e52c67a9aa4b2
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# f225c927858b4f3bbd27f1940542d8f1
# 719af1f8fd5b477a830f1c8a259708b3
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 583f84fb353949a8841facbcb1748772
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 95c78901dacd4897a18d1ed4b5e678e0
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 718634ac7b3a4dc2b4856c6f2539fe29
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# ec595e585a4548caac10b2aa41ee403a
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# 23c6e2b2d0604432a5344485f28bb6a5
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 3a59ad1a3b564533844d77b40b86e3cd
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 2a6ec7f636084be8b882a224b221df65
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# b69477bb2aa541ffaa82f840775752a7
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 70b91cb1a96f471ba90512ab68538029
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 71c402392ddd4dc99befb0ee29b10527
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 9ccb97c3cffb44528208e8e487590f90
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# fc9780b092d44de6bd61fc2ff2c15170
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# f1d703a10bd44e97a1a3bdd9332a8d6c
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 8346b2e6450a448cb1fbf7851e19de11
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 51157a8587ae4d47bd7938273c775686
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 40f29c79eda24e64ad108a028cd81176
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# e7ab096540be48908c320c230172b929
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 600c09016af74071bae614930d4bf730
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# c375138345c24d1e8a7a1f190e67a200
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 2a1dc39c715a428380240f3fa2a0ab69
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 270edeb860d644b29653c74031554b45
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# 298bca0ce35748abb7bfd142316303c9
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 67e8989580cc4fdba5124343ce8a1bb5
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# aecab047643f45a5b31f7e3d3ac5012f
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 0f8fd9d02d1d4f07b66f1e5140da8320
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 559e47de82834308bb6bfcf2efb04894
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 480e0382cc554089abc78b337a6d71d4
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 7606cbe8eaaf4554b5c2123aa5f6bf50
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 02cd98d738ff4be3b04ff7a1376ad025
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 6ed59f29188247ed9426857c3d60bd77
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# ef515b3cc91f4914b8839de220848a44
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 591d0493feae4f0696df53718d17e910
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# d562cca36c514adca21718b3a00f08be
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 13a16f3f3cf04a0c88692b7d574f71b2
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# ab90892a0c664e56932d522dc24c7551
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# 319c400c9af94caf913568e204b4cedc
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

