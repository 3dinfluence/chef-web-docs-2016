# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-27 12:28\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:33
# 93302713d222419b9f7ec0415dbf766a
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# ab0514233f0441c1866e1dd3dc551990
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 2856b53a09c54da4873aa77abbfe7be1
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:37
# fbd711a4766748d29898b8717fb69e57
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:40
# 8abcb6bc082b405aaa324d202a0bd895
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# e80c2e7fc66c48ce9d1628d5ac621c6e
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# 1b6d061adb3344739b95d4be10e74fa1
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 794e43a3314b48909687e5cd11012f71
# 069afd74d0ab47168392035e46d1a1fa
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 86d986ac85ac4a49b2ab24c723ca16a0
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# d1e159506d21434686a32cfcba5205d5
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# a67964da33e94557b51ae54cfa2003aa
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# 308ca800ca3c4565ab2f1b4fa2d0ad2c
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 660897762f074f5d9a2a1efa8701a9b4
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 7bfa9a99972a463d91ebba92c69ed81c
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:44
# b1dba5abf3ed4bddafc23856c4724027
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:45
# 61f18784184b4964866ff8837de879d3
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:47
# 7f7b26798fa2450d8e7394170b0b7d3e
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:48
# 14627c96c31f409b94e8d2d4b52540b9
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:49
# f35a5782b2484e4683741ea5cbfbd729
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:50
# d13ffcfddb1a46d58817169e61d68539
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:51
# 6dbb2fe9e4f543d6866659d0138ea721
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:54
# 152a63d5267142d7a854e1b751985e66
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:55
# 3ec42efa9f1b4196b0690d2ec9f74c02
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:63
# 7fdedc393539430ea9e66ac03e9675b9
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:66
# 3bc4f4ffac2240c88624ca635b6ec318
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:67
# aca5ed87d3e04f46adea623722a14655
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:69
# 82a069b068ff4f5b974dd2e547445f18
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:76
# 87cb037bd3a648028ab295fc57a8e57d
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:77
# 2c1ab393c36d41298536dc94281371bf
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:79
# 5ed778d083e844fa9fe6e6514512ee49
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:85
# 226f868bdbd849e2a98c15894e2aba6a
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:87
# 2ca24ad84a8c4f76b02b1a96d5c14019
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:88
# fad15ebf09724b679dd87e8958cb8bf0
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:89
# e8d02929bdfd4957bf812473d51443ae
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:91
# 80046e75fc464422acb3368e3219ee96
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:97
#: ../source/chef_shell.rst:118
#: ../source/chef_shell.rst:134
#: ../source/chef_shell.rst:146
#: ../source/chef_shell.rst:164
#: ../source/chef_shell.rst:184
# dbf28737ef1d484e90bed80a5d15a48d
# 86d1754073a04005ae8dbefeb5a5ae82
# f06e7dbaaa994233ab70da6f30cfae22
# 2c3c12d81e424eeaa085a6f31ca8c045
# 5218728323114db8bfbaefa68504d60a
# 12468aca90bd43cc9d0181639a431b38
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:112
# 681f6c91add44fc7a4e69760bb978fca
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:128
# 3c2935c115db4da8870a95e6faee34b0
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:140
# 2007c8c13600408699ad9cdaa6aca974
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:152
# bcd6ffaba38d460ea9cb85b7c0d2230d
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:158
# 784f8373a4874f8a9b6956333adffd7f
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:177
# c2a9d1c5679c4e8ead5e18667d0f7359
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:195
# bdb5859cec7a417d98e293372f1a7b9f
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:197
# 0d1467be12084f5bb36ba3e1ef283a8a
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:200
# 8f4095492b4c471a90adffedc60e390b
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# cefa3f06eed943d6bd417b2e61015c61
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:204
# 90aa50ce97d244ea930bf049ee708e74
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 7f39bbc51bf841ce9b16b340e0655a9e
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 83da849fb5fc406388b7a099a91f5e54
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 3d4838da85ba4c5daaa7ed6c2fa345c8
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:208
# 8e5d0702717e4164a968ab918a77c029
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 56fc6b29c1ad4037a108a985a2b80b0a
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 3a30649c4eae492b8eb7ebf27eba7d56
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# bf9b8d4328244551a1d46f596f8a9a1a
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# 84a5f1dd35754738b01e6ee144136ea2
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:212
# 3988f8cb0c5347f0a8edf81ce9605fe3
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 170a24ce18c844c28bb9866b13a1a41e
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:216
# 9ce671558a22487a975a869e9190b22d
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# eabb65ce18a741298b46f6b79d8e62d4
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 5895518154244bec9c0679998ab2f92b
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 6d4e2d814b9447fcb5595c8f6e56bcd8
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# 2dfe11ef0d7a4807952200242d79bd43
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 9439bc652bc64e7795df9bc0c9bcf342
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# d3fb04d264b34855bafe9a02d22aad7b
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 97a34a7809fc4913aa4b558cba702233
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:220
#: ../source/chef_shell.rst:391
# 2367f5062b564f239404be817325844b
# 49b2e7fea8d5472ea04c2ba1dd25d116
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:221
# 92a945a97ab54216a06f8fa87b1846cb
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:223
# 6022726159f34b50a2f820efcf237082
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:227
# 8c2329bc7e5f49c5ba05f970c18517d2
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# 02b3a08254ae4ba9b0ba5e68c7b798b7
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:232
# 533086bd74364fe9bdb4ecb219825365
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:233
# 5e43f33dd3204ca686baea8c07272786
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:243
# 04cc5aae25804f0eb94a25c996e8b493
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:254
# c6d263922f514faeb9cf1bbfc12a43f2
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:261
# d10ab30cc1d242f2924affc8df827bc3
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:268
# 0d99350499b24a0897c551d48b394edd
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:289
# bc7f2aedcf71476e82c8833ccabf88b0
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:296
# 5745df19739b455195f7feb20e46e298
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:313
# 20f529d8b7d74acb92cf54c1100d8218
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:314
# 7fde69d710c34271a48162fc5c5e6167
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:333
# 09499eda6e714b8ea9e3016a4c8a1a34
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:342
# 58d4755ac10e438a9777a3d61ad4aa4d
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:350
# 2d586babacb04d08ae71e4ac00bd3f7b
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:353
# 29cc44f7c5c44e9fab6581a164ac6e66
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:354
# 8f72e93e5e4e452d9eef7db99a6ebd12
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:364
# 5e385afa92cf4706bf4d48afc11d5faa
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:387
# 6782b1774bd941ffa93954eb3d49c46e
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:388
# 2f638d8264b34ed38358f3cf7af46eaf
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:392
# 7853e05e99e34d31a2ed2b3720302a77
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:395
# ef2d282ceb6e446daa5a4ff5bdd9a127
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:396
# 9ea3ec1dc2614b5e80bba246435afe3b
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:398
# 7d1b4acb3dc141ed98f8227b918e54c6
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:417
# eae438ceb7ce4b54b07eddce8350ea1a
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:424
# 2402db3367024fad9ecd3902a1e105ed
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:457
# eccabfaef2224560966bd56f4ab46f76
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:467
# 99e66f2e003342ac81a7ecc8530bb623
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:476
# 1e5a01c0af2144aeb8b90b4a05eeffcd
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:484
# 11e8d97946f04ac8abf9f604b00113e0
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:497
# dae9cd9144c34834adf73edd2d6eb5c6
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:507
# 3aa45e86d5e8452e89a36e8a2545d89b
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:508
# e79deb491ad0498db1d99bb56f1b84d3
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:514
# 43dc6510ed6c48ff86a29a4ed28cc61f
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

