# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-21 22:07-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 96d5cd50f5bd402e954cae99f779bae7
msgid "|chef shell|"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# e0a6031611374525ab7d08bd1c1f35be
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# 3eca4350ba644ba397516887dab9fda3
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 950be65e2fc84a28a4ffd4b75ad68977
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 566be3bce8164d139f0df19f1dc41b94
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 65cc852a3d154021ba2b806fb3f2f295
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# f8d16d8b457d445da6bc1c3d322a402b
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 7e7bdedc3b334a14be98b86df9c4a10e
# fab4aca8350c43a489a4ea1d15204138
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 40c5ad7d061b4e15ae21c72ed6fb9832
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# dc87ab09d2e34bce8b53318f2f1ef7a2
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 09550208cc0b47bd9cb9b832b5958a6b
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# a972809e64ca41dab9cd7992652f754e
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 4a85174cd2b94108a610f134055f8e19
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 302f4913e4e745c7aeaaed5f36273fc1
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# a8f5381a8562496595c2b4e80dc648a8
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# 0dd1975c7ae34a09b36447ef923c486f
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# 12cda5e58ff346fab8c0c71fa3034232
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 5863b0a296684f52af49893645574854
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 6d0c560dee2e4d27a4637ee09be9155e
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# db9716415e714380b5d0e3f6e22c7e41
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 5d3d51d0871a4ffd8bc7c41f1bab2c85
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# fae1bc617f014c92bc449b998ff00ade
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 68ba30ae0b064c219d3dfad3e1eaa178
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# cefd3611d1b245f6be9b9f651e05266a
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 7d895b9bf39945aeb67f93ec4574aaaa
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 0fa37dcf45984e14b97d176cb9e6064d
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 2071fbeeb57a43c59be13a4913dcf452
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# 5cc04a3a52844922882a01842678da76
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# 2ce85294400b41d4844a0ecb8750188c
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# 568431f5d8e04c789321f98af0ca824f
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# 44056373992e4404a91a4bbc4a9eb5cf
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 1fa7f927b08f4c328074de8128feaca4
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# bc19c23fef0d41b8af74185fae4547d1
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 33d9de8d7d4e4ab4962259d06c9484b3
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 760ad338ecae40d9ad904084abbdc687
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# b1ae8f69e0c047da8b1d20060f68a046
# 233d73e2bbec4938a197203cccdae164
# 03cc44299d3646c68021d77e01a16861
# dc45af39605b4e8fa4d60ea4eed0386e
# 72062b180c324607ac6a53e1f680774e
# 88a2e842cc51466fbaf6bff480b5e55d
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# 4249d25bc4754e1a8ec2868c91fa0819
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# 762def735ca74543be1c3a22d07aaf37
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# 18e53edc13624e5abbae04430fb7b487
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 6afdae7ac5e04be9b96f610a724b367b
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# b735cef3d40b4aa8b958fa6614289f64
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# fed55d6cca4e412b8995a114b14fbff2
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 60ef8a908b4342538935f6e690fcdacf
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# cdf4c0bfd7304e77b304ef370a234781
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# 6fe30677968a4d1daf0a0b89261080c7
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:4
# f22a1d0701c5484dbebf6375af7cc809
msgid "Use the |resource breakpoint| resource to add breakpoints to recipes. Run the |chef client| in |chef shell| mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the |chef server|."
msgstr ""

#: ../source/chef_shell.rst:179
# 912c848fd4fb410fb1cbe28499043b29
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# c3134bd439334dd08eb5e1de47f9c868
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 95c9d42ca2ca45c28aeb744946626806
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 3fd47782257147199be32c17a07ea741
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# 9120c855ab2b49dfb716c7aee6c6bd3e
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 66cfeaf22c864e7db3f664070a4eca15
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# 1f861abcfc0a43b9a4a603a8fe82c73b
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 626a4f1e3c14443eae7c347400d09c12
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# e1d01d9ac9184a389ca42e35e8c0e5f7
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 7578d051cf7546b4b2c49d515884dd1e
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 92341881977348c0a948ee5b4155d53b
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# fd0fb4cfd8c743bdbffd9e3df77c58f7
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# 3d11ca87ec104e2fb8ef3fde305537ba
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 50a81240465b49b5b9d41061e179198d
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 5a64ecc785244813abb3a7376f2a3084
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# e08cefbee247441ca563d3b7c870d152
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# 6f389e0ad1d749a28723c84a092cd6c7
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# afc3f52f320a4e09be3daf5ebb7108a1
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 7a977bd72fb54078bfdd461404eb1555
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# c34f4db504cc46ec826ef956a2c20717
# 94f5af1863ef466380a52013937c871e
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# 4850c756ced245cf808d3e31c6bcb6ee
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 616f41efa83a4c8596b781a7fad7d4c7
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# 223481b2c8704c1f8a85957dc59c17ce
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# a387d4ad61294571ad493abf674b2387
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# daaa5c808f534f48a06e889050610149
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# 9078d2de48284dc3b7a6422cd304734e
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 78032437d9704d4981aaaa9b854e043d
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 81ec0ee8c18d4f6ba571cbeebe4a0b4a
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# b436103306b84089b8b170a029c91b8c
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 72af7fcbba9f471391f8a4d785eeb0f9
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# 62cf827916f74778a89a26d19250a9d2
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# fde9b6ae30624826848b36151fb5dc56
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 83d42b063bb3453fa2e6d4011b36dab7
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# 768d66402cb340c5938395f5e8bb366c
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# 4fa57b9bc8c04b468b3d674b4d26e722
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# b94e041d76e94f47a83841ac675f3009
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 1e89564cd4f84267aa6b81f5bdab5f59
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# b4f669c2aae4433e864b9f25f8559b71
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# d261dfbe9e364a00a3fced4e7a8be14b
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 748159f49988467e9c086f831e283093
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# 9a97ec155952496b92427977308f8bb2
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# f7351c712e7344e882a0199db2d5756b
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# 05e5caa9b03f4cbab0e0613de681dee4
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 243a75c063e94257b5ab00b715bb1504
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# c7b8bfd81d35458fa2423f3a01bd29c3
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# b9929bf5756f4aa4aa8d0c40d0d1c53e
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 58f1f20327f8466ab3f30db2f77f96fc
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 5d69e3dd06264187ae066d3d52eb5f1b
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 002208e657324801a62f482fc04255c1
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 2b9d385b70324d7f8df11990dda4a597
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 4d7589b75d0b41e5958d0c1e94693a30
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# e0360569c7fb4036bdd86da3adc33ace
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# 08fa499213dd4d2f8bfb8a8b7cb0225f
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# d2fa008502484da7b1c97fc5f5c09336
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 33885b85f1344ea3b21b165bae983abe
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# e0d160c78ae9454b8f29dfd731495095
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

