# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-03 23:17\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_shell.rst:8
# 65472ceec04e47df82af011101f751ca
msgid "chef-shell"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:5
# c01327caaa234e728f5f040e63efafb5
msgid "|chef shell| is a recipe debugging tool that allows the use of breakpoints within recipes. |chef shell| runs as an |ruby irb| session. |chef shell| supports both recipe and attribute file syntax, as well as interactive debugging features."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell.rst:7
# f58f82dc6fa64e54aa0ddd27508531a8
msgid "|chef shell| is the new name for |shef| as of |chef 11|. |chef shell| is backwards compatible and aside from the name change, has the same set of functionality as with previous releases."
msgstr ""

#: ../source/chef_shell.rst:12
# 55a3aa5a2ea6441a8cc3659e9bde0f4d
msgid "|chef shell| is configured using the :doc:`chef-shell (executable) </ctl_chef_shell>`."
msgstr ""

#: ../source/chef_shell.rst:15
# 8118c4378c454f2fa0b395a18dfa56ba
msgid "Modes"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:5
# 851a353eb70144e8ae362a5f13be0722
msgid "|chef shell| is tool that allows |knife| to be run using an |ruby irb| session. |chef shell| currently supports recipe and attribute file syntax, as well as interactive debugging features. |chef shell| has three run modes:"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:11
# d2158d4ce0214ba085380ac1572c8da9
msgid "Mode"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:12
#: ../../includes_resources/includes_resource_breakpoint_actions.rst:11
# 155d7e5782804acb89dc00149a61a3e8
# 5789a7c9f9444ed5807ae0ccb9a87187
msgid "Description"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:13
# 300f65459c4e418aa2249bb30f360b6e
msgid "Standalone"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:14
# fe47ea7d7d2e47648380fd00cc9c32a6
msgid "No cookbooks are loaded, and the run list is empty. This mode is the default."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:15
# 7b1d3c7d646d426096f57a54ada33001
msgid "Solo"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:16
# ca6a43d7d93245c9822a04ad5c98e1f6
msgid "|chef shell| acts as a |chef solo| client. It attempts to load the |chef solo| configuration file and |json| attributes. If the |json| attributes set a run list, it will be honored. Cookbooks will be loaded in the same way that |chef solo| loads them. |chef solo| mode is activated with the ``-s`` or ``--solo`` command line option, and |json| attributes are specified in the same way as for |chef solo|, with ``-j /path/to/chef-solo.json``."
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:17
# 7d0af17c05cb44b692f6e5dea2bfed2e
msgid "Client"
msgstr ""

#: ../../includes_chef_shell/includes_chef_shell_modes.rst:18
# 5cdeeb54455d47aba0facf6142119cd4
msgid "|chef shell| acts as a |chef client|. During startup, it reads the |chef client| configuration file and contacts the |chef server| to get attributes and cookbooks. The run list will be set in the same way as normal |chef client| runs. |chef client| mode is activated with the ``-z`` or ``--client`` options. You can also specify the configuration file with ``-c CONFIG`` and the server URL with ``-S SERVER_URL``."
msgstr ""

#: ../source/chef_shell.rst:19
# 899e30e9e6a940878480ae80089bfddf
msgid "Configure"
msgstr ""

#: ../source/chef_shell.rst:20
# e37c36c13657419aa82bac0c11975c54
msgid "|chef shell| determines which configuration file to load based on the following:"
msgstr ""

#: ../source/chef_shell.rst:22
# c2c08a7f73d44ed28936e0427dd7b309
msgid "If a configuration file is specified using the ``-c`` option, |chef shell| will use the specified configuration file"
msgstr ""

#: ../source/chef_shell.rst:23
# 2908a5b28a2243dabd39149b416770da
msgid "When |chef shell| is started using a named configuration as an argument, |chef shell| will search for a |chef_shell rb| file in that directory under ``~/.chef``. For example, if |chef shell| is started using ``production`` as the named configuration, the |chef shell| will load a configuration file from ``~/.chef/production/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:24
# 9daeddcbe9cd450595cf7590a8488e4e
msgid "If a named configuration is not provided, |chef shell| will attempt to load the |chef_shell rb| file from the ``.chef`` directory. For example: ``~/.chef/chef_shell.rb``"
msgstr ""

#: ../source/chef_shell.rst:25
# cc9a561c8e93430cb07f24f967ca1f65
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |client rb| file"
msgstr ""

#: ../source/chef_shell.rst:26
# 8bd19d91a41e48a5aa3ddf90457908fe
msgid "If a |chef_shell rb| file is not found, |chef shell| will attempt to load the |solo rb| file"
msgstr ""

#: ../source/chef_shell.rst:29
# d4b65100660b4dddb8dec97ffe8ddbf9
msgid "|chef_shell rb|"
msgstr ""

#: ../source/chef_shell.rst:30
# 7c06f00485544925884a4cdc391471b6
msgid "The |chef_shell rb| file can be used to configure |chef shell| in the same way as the |client rb| file is used to configure the |chef client|. For example, to configure |chef shell| to authenticate to the |chef server|, copy the ``node_name``, ``client_key``, and ``chef_server_url`` settings from the |knife rb| file:"
msgstr ""

#: ../source/chef_shell.rst:38
# f8f99d67f4ef4446b5e360470a304e4c
msgid "and then add them to the |chef_shell rb| file. Other configuration possibilities include disabling |ohai| plugins (which will speed up the |chef shell| boot process) or including arbitrary |ruby| code in the |chef_shell rb| file."
msgstr ""

#: ../source/chef_shell.rst:41
# 8b57dcc9f7e24019883c9b029391c2aa
msgid "Run as a |chef client|"
msgstr ""

#: ../source/chef_shell.rst:42
# 836cf5e1d4f9436fa0935319377c4a26
msgid "By default, |chef shell| loads in standalone mode and does not connect to the |chef server|. The |chef shell| can be run as a |chef client| to verify functionality that is only available when the |chef client| connects to the |chef server|, such as search functionality or accessing data stored in data bags."
msgstr ""

#: ../source/chef_shell.rst:44
# 139c8a11f71a48388fe525dd7e8638bb
msgid "|chef shell| can use the same credentials as |knife| when connecting to a |chef server|. Make sure that the settings in |chef_shell rb| are the same as those in |knife rb|, and then use the ``-z`` option as part of the command. For example:"
msgstr ""

#: ../source/chef_shell.rst:51
# ac242685cf064229a90568de1c63fdcd
msgid "Manage"
msgstr ""

#: ../source/chef_shell.rst:52
# be07f0d07a244bee81a1baea23f0354f
msgid "When |chef shell| is configured to access a |chef server|, |chef shell| can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags."
msgstr ""

#: ../source/chef_shell.rst:54
# cbbf1e2d69cf48e1ba5b4850239369c2
msgid "The syntax for managing objects on the |chef server| is as follows:"
msgstr ""

#: ../source/chef_shell.rst:60
# c7780f4c99b04f5dab38f0d5c23ec4ad
msgid "where:"
msgstr ""

#: ../source/chef_shell.rst:62
# 8b56fb8d4e984d46bb867e822ed1ea42
msgid "``named_configuration`` is a named configuration, such as ``production``, ``staging``, or ``test``"
msgstr ""

#: ../source/chef_shell.rst:63
# ec80f81e03514808a4fa867d444e1954
msgid "``items`` is the type of item to search for: ``cookbooks``, ``clients``, ``nodes``, ``roles``, ``environments`` or a data bag"
msgstr ""

#: ../source/chef_shell.rst:64
# 75f51c705be647b9bed504feb7d00d76
msgid "``command`` is the command: ``list``, ``show``, ``find``, or ``edit``"
msgstr ""

#: ../source/chef_shell.rst:66
# 82141ed2ad2644bf916e4d27dc659532
msgid "For example, to list all of the nodes in a configuration named \"preprod\":"
msgstr ""

#: ../source/chef_shell.rst:72
#: ../source/chef_shell.rst:93
#: ../source/chef_shell.rst:109
#: ../source/chef_shell.rst:121
#: ../source/chef_shell.rst:139
#: ../source/chef_shell.rst:159
# 385939a7a1c64d579ead86a7d1e4f71b
# 8670684292d54335b37d334c19b49e1e
# d1b79f1ddc744c20bfe7320fd9bd0ea4
# 32740c5772984949ac9c1c9d13eab0fc
# 59c0c159bb9842ed9d77061a270efbd5
# c8b31e0ef08041a1aadcf7e024710b0e
msgid "to return something similar to:"
msgstr ""

#: ../source/chef_shell.rst:87
# bcd1f30bbd094d839ccf3bf2b791f58c
msgid "The ``list`` command can take a code block, which will applied (but not saved) to each object that is returned from the server. For example:"
msgstr ""

#: ../source/chef_shell.rst:103
# bce45ffc5ae64dcfa112610569e5f769
msgid "The ``show`` command can be used to display a specific node. For example:"
msgstr ""

#: ../source/chef_shell.rst:115
# b56e80ab73dc4a47829af1ea5e60143e
msgid "or:"
msgstr ""

#: ../source/chef_shell.rst:127
# 8f2ddb80f72048569e311e6b2eb617f6
msgid "The ``find`` command can be used to search the |chef server| from the |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:133
# 0d3936d64b7c4b2f8bfad33054b1ee3b
msgid "A code block can be used to format the results. For example:"
msgstr ""

#: ../source/chef_shell.rst:152
# 4d7f89289cee466a88c5c3f314cf93f6
msgid "Or:"
msgstr ""

#: ../source/chef_shell.rst:170
# 1e5dd2e8e228437690d12ee58498cac9
msgid "Debug Recipes"
msgstr ""

#: ../source/chef_shell.rst:172
# 52d40f806c8c4c7a9de41c317d02bacd
msgid "|chef shell| allows the current position in a run-list to be manipulated during a |chef client| run. Add breakpoints to a recipe to take advantage of this functionality."
msgstr ""

#: ../source/chef_shell.rst:175
# e6349a9224484a12a39613d9e9772712
msgid "Breakpoint Resource"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint.rst:5
# 53e3ef1e499e42bc902ca045da7dd0ef
msgid "The |resource breakpoint| resource is used to add breakpoints to recipes in the same way as any other resource. When the |chef client| is run in |chef shell| mode, those breakpoints can be used to debug recipes. Breakpoints are ignored by the |chef client| during an actual |chef client| run.  In general, breakpoints are used most often in a non-production environment, for the purpose of debugging recipes. After those recipes are debugged and the desired behavior has been tested, the breakpoints are typically removed from the recipes before uploading the cookbooks to a production environment (even if the |chef client| ignores them when building the resource collection during an official |chef client| run)."
msgstr ""

#: ../source/chef_shell.rst:179
# d50ebfb5c8084eb7a076bac1a406bd48
msgid "Syntax"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:4
# 0badd431c3df45b2be7a0fd064a8265d
msgid "The syntax for using the |resource breakpoint| resource in a recipe is as follows:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:12
# 6d331639ca244a6c82c57fdaf4c3bc89
msgid "where"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_syntax.rst:14
# 29607462b6f74f0b93da4583f1aaa916
msgid "``:break`` will tell the |chef client| to stop running a recipe; can only be used when the |chef client| is being run in |chef shell| mode"
msgstr ""

#: ../source/chef_shell.rst:183
# ddda84da897042e9892ae002478f2014
msgid "Actions"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:4
# 8d466357db5f45909c4ce6becc29a7d1
msgid "This resource has the following actions:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:10
# a4213e59d7b44115b9517c2762917497
msgid "Action"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:12
# 42946a6cba7c4a1f9f96643a8b4b434c
msgid "``:break``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_actions.rst:13
# bcbd5d1ba9a0406a9660173dfaa23e46
msgid "Use to add a breakpoint to a recipe."
msgstr ""

#: ../source/chef_shell.rst:187
# 35cd7d40d7fe4e44a47adbe107fd4ccf
msgid "Attributes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_attributes.rst:4
# 9b965aa0ba3c471cb1516503ef39298a
msgid "This resource does not have any attributes."
msgstr ""

#: ../source/chef_shell.rst:191
# 0250049b2f174840a1aee47057fab2ac
msgid "Providers"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:4
# a5e4d1a144b041debc23d25f859864b1
msgid "The following providers are available:"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:10
# 76a1a8cc622b4f9fa4e288958dd4ebb5
msgid "Long name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:11
# 0f05c368b141496aa7758a37f2a98b20
msgid "Short name"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:12
# a400a4053cab43ad9db70a960758ec67
msgid "Notes"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:13
# c1bd4faf141345e1b504179f0a591cdf
msgid "``Chef::Provider::Breakpoint``"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:14
# 028e2386f22448f8bc61be71ad76d206
msgid "breakpoint"
msgstr ""

#: ../../includes_resources/includes_resource_breakpoint_providers.rst:15
# 962f9f420f394c768ab8bddf514e25ac
msgid "The default provider for all recipes."
msgstr ""

#: ../source/chef_shell.rst:195
#: ../source/chef_shell.rst:366
# 69e243bba10d488fb936551ca4323d47
# 81ee8d4f97b7434994db0b151d747e4d
msgid "Examples"
msgstr ""

#: ../source/chef_shell.rst:196
# dc9276a79a434e0395d0a76fd45848c5
msgid "|generic resource statement|"
msgstr ""

#: ../source/chef_shell.rst:198
# 5d6c38949e274f079a7153d43509af9f
msgid "**A recipe without a breakpoint**"
msgstr ""

#: ../source/chef_shell.rst:202
# e5c52ec2cde04cb68d450326958e2715
msgid "**The same recipe with breakpoints**"
msgstr ""

#: ../../step_resource/step_resource_breakpoint_yes.rst:37
# f4eee48815fa48dcb84788ea4ffa3414
msgid "where the ``\"name\"`` of each breakpoint is an arbitrary string. In the previous example, ``\"name\"`` is used to indicate if the breakpoint is before or after a resource, and then also to specify which resource."
msgstr ""

#: ../source/chef_shell.rst:207
# c4d40608aca04c4c86d7a1adad730ea1
msgid "Step Through a Run-list"
msgstr ""

#: ../source/chef_shell.rst:208
# d7ac657f13ee4b88b4b3bae5c4823a81
msgid "To explore how using the |resource breakpoint| to manually step through a |chef client| run, create a simple recipe in |chef shell|:"
msgstr ""

#: ../source/chef_shell.rst:218
# 61c070764e9342ffaa2b6b9d6f5296ec
msgid "and then run the |chef client|:"
msgstr ""

#: ../source/chef_shell.rst:229
# 03127c7db24a45558f113ce390af1902
msgid "The |chef client| ran the first resource before the breakpoint (``file[/tmp/before-breakpoint]``), but then stopped after execution. The |chef client| attempted to name the breakpoint after its position in the source file, but the |chef client| was confused because the resource was entered interactively. From here, |chef shell| can resume the |chef client| run:"
msgstr ""

#: ../source/chef_shell.rst:236
# 5c43faff6abb46d0ae3461384674dbe7
msgid "A quick view of the ``/tmp`` directory shows that the following files were created:"
msgstr ""

#: ../source/chef_shell.rst:243
# 0ecce34a760c40aaa870e8f664a5e239
msgid "The |chef client| run can also be rewound, and then stepped through."
msgstr ""

#: ../source/chef_shell.rst:264
# c1d55c7fe4c94d799d834f22a8ca2775
msgid "From the output, the rewound run-list is shown, but when the resources are executed again, they will repeat their checks for the existence of files. If they exist, the |chef client| will skip creating them. If the files are deleted, then:"
msgstr ""

#: ../source/chef_shell.rst:271
# 1bd1b615cccb4f53bfc4c514f4c6bb5c
msgid "Rewind, and then resume the |chef client| run to get the expected results:"
msgstr ""

#: ../source/chef_shell.rst:288
# 106b7c50fe184261a457bc978d3340d4
msgid "Debug Existing Recipe"
msgstr ""

#: ../source/chef_shell.rst:289
# ae3b68d7de1e475fbbf6beac248d99d9
msgid "|chef shell| can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting |chef shell| and then used for debugging. |chef shell| will report which recipes are being cached when it is started:"
msgstr ""

#: ../source/chef_shell.rst:308
# b89ac46f4f544a9faeec804bd5293af9
msgid "To just load one recipe from the run-list, go into the recipe and use the ``include_recipe`` command. For example:"
msgstr ""

#: ../source/chef_shell.rst:317
# 6785733272b14fd9814ee68c37fe7d12
msgid "To load all of the recipes from a run-list, use code similar to the following:"
msgstr ""

#: ../source/chef_shell.rst:325
# 21435f6e4ac7472eb36c549441ab8744
msgid "After the recipes that are to be debugged have been loaded, use the ``run_chef`` command to run them."
msgstr ""

#: ../source/chef_shell.rst:328
# 94ab4bbd49af464591ed53c631fb58ad
msgid "Advanced Debugging"
msgstr ""

#: ../source/chef_shell.rst:329
# 63e0db5dcdfc4e12b0b03f214a15f942
msgid "In |chef shell|, it is possible to get extremely verbose debugging using the tracing feature in |ruby irb|. |chef shell| provides a shortcut for turning tracing on and off. For example:"
msgstr ""

#: ../source/chef_shell.rst:339
# 2f6a272ce0784c8e8fd67b05e3c49f41
msgid "and:"
msgstr ""

#: ../source/chef_shell.rst:362
# fba7523a65214d04af6f393791b980da
msgid "Help"
msgstr ""

#: ../source/chef_shell.rst:363
# bb6708d7a8ef48a69c2701a684ea1327
msgid "Use the ``--help`` option in |chef shell| to view help."
msgstr ""

#: ../source/chef_shell.rst:367
# b0c77d515c814f56b4f5416269b0fb8c
msgid "The following examples show how to use |chef shell| to debug recipes."
msgstr ""

#: ../source/chef_shell.rst:370
# 46979129314d491bbca1d0afb717ce6a
msgid "\"Hello World\""
msgstr ""

#: ../source/chef_shell.rst:371
# 7748d80ec0da43a4a82b55bcfa67b2e5
msgid "This example shows how to run |chef shell| in standalone mode. (For |chef solo| or |chef client| modes, you would need to run |chef shell| using the ``-s`` or ``-z`` command line options, and then take into consideration the necessary configuration settings.)"
msgstr ""

#: ../source/chef_shell.rst:373
# 6ae04f4a6a874e4ba7598a20b666738a
msgid "When the |chef client| is installed using |rubygems| or a package manager, |chef shell| should already be installed. When the |chef client| is run from a |git| clone, it will be located in ``chef/bin/chef shell``. To start |chef shell|, just run it without any options. You'll see the loading message, then the banner, and then the |chef shell| prompt:"
msgstr ""

#: ../source/chef_shell.rst:392
# 3070b6a690464137b1249ae50866c7cf
msgid "(Use the help command to print a list of supported commands.) Use the recipe_mode command to switch to recipe context:"
msgstr ""

#: ../source/chef_shell.rst:399
# 9dad12309f7043b7b47a8dfbbe46bab6
msgid "Typing is evaluated in the same context as recipes. Create a file resource:"
msgstr ""

#: ../source/chef_shell.rst:432
# 78cf966ebf754cb99cc87ec24b7aa9d5
msgid "(The previous example was formatted for presentation.) At this point, |chef shell| has created the resource and put it in the run list, but not yet created the file. To initiate the |chef client| run, use the ``run_chef`` command:"
msgstr ""

#: ../source/chef_shell.rst:442
# 35a722b1b43c405fb2f69ba373b4b39c
msgid "|chef shell| can also switch to the same context as attribute files. Set an attribute with the following syntax:"
msgstr ""

#: ../source/chef_shell.rst:451
# 18c43baf84ad436ca482e5b81d5d21b0
msgid "Switch back to recipe_mode context and use the attributes:"
msgstr ""

#: ../source/chef_shell.rst:459
# 1e04bfbaf82540cd8ca47fde59e1dee6
msgid "Now, run the |chef client| again:"
msgstr ""

#: ../source/chef_shell.rst:472
# e3bce57d7fa04f8fb579ea8072d527ee
msgid "Because the first resource (``file[/tmp/ohai2u_shef]``) is still in the run-list, it gets executed again. And because that file already exists, the |chef client| doesn't attempt to re-create it. Finally, the files were created using the ``ls`` method:"
msgstr ""

#: ../source/chef_shell.rst:482
# 9db80c02c0d047ef81a06cf71b45ed13
msgid "Get Specific Nodes"
msgstr ""

#: ../source/chef_shell.rst:483
# 42f7943207f54605887bf33365d75f1f
msgid "To get a list of nodes using a recipe named ``postfix`` use ``search(:node,\"recipe:postfix\")``. To get a list of nodes using a sub-recipe named ``delivery``, use |chef shell|. For example:"
msgstr ""

#: ../source/chef_shell.rst:489
# a200746e946340339fce1716108b98b1
msgid "Single (' ') vs. double (\" \") is important. This is because a backslash (\\) needs to be included in the string, instead of having |ruby| interpret it as an escape."
msgstr ""

