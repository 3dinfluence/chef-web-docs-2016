# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-23 12:10\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/server_types.rst:34
# f9fe291998cd43329bb55417dea5af3b
msgid "Chef Server"
msgstr ""

#: ../../includes_chef_server/includes_chef_server.rst:4
# f447f1ae859f46f2a8ac6e49f6021c19
msgid "The |chef server| acts as a hub for configuration data. The |chef server| stores cookbooks, the policies that are applied to cookbooks, and metadata that describes each registered node in the infrastructure. Nodes use the |chef client| to ask the |chef server| for configuration details, such as recipes, templates, and file distributions. The |chef client| then does as much of the configuration work as possible on the nodes themselves (and not on the |chef server|). This scalable approach distributes the configuration effort throughout the organization."
msgstr ""

#: ../source/server_types.rst:38
# f9b7059d475a446a9b2a67fec4da20b6
msgid "There are three types of |chef| servers:"
msgstr ""

#: ../source/server_types.rst:44
# 8440d79105b942bf923ffab2b3d4730b
msgid "Feature"
msgstr ""

#: ../source/server_types.rst:45
# 24ffd6e291134284910b298560ad6300
msgid "Description"
msgstr ""

#: ../../includes_chef/includes_chef_hosted.rst:4
# f87b20dd961648db9fcd45e3462056c8
msgid "|chef hosted| is a version of a |chef server| that is hosted by |opscode|. |chef hosted| is cloud-based, scalable, and available (24x7/365), with resource-based access control. |chef hosted| has all of the automation capabilities of |chef|, but without requiring it to be set up and managed from behind the firewall."
msgstr ""

#: ../source/server_types.rst:49
# ce4ecf4d2aed4c0694d5784cd2f2f8d2
msgid "|chef hosted| evolved out of a need for an infrastructure management tool to be built around the notion of API primitives. By using an API to talk to a cloud provider (such as |amazon vpc|, |windows azure|, or |rackspace|), it allows the freedom to think of those primitives as building blocks. |chef hosted| evolved out of this idea. |chef| only needs to know about the desired state, how it should get there, and what the proper functionality of that desired state should be."
msgstr ""

#: ../../includes_chef/includes_chef_private.rst:4
# 6d14b52a24cd4f649e5016ecb7319cb1
msgid "|chef private| is a version of a |chef server| that is designed to provide all of the infrastructure automation capabilities of |chef|, set up and managed from within the organization."
msgstr ""

#: ../source/server_types.rst:53
# 29e40fde6e9f4bfca9d64ffd87ccdf63
msgid "|chef private| evolved out of a need for customers to have the same functionality provided by |chef hosted|, but located within the organization's firewall. |chef private| is the same as |chef hosted|. |chef hosted| is the largest |chef private| deployment in the world."
msgstr ""

#: ../../includes_chef/includes_chef_open_source.rst:4
# 78485916d5b348a0bdd1d9e4c7914956
msgid "The open source |chef server| is a free version of the |chef server| that contains much of the same functionality as |chef hosted|, but requires that each instance be configured and managed locally, including performing data migrations, applying updates to the open source |chef server|, and ensuring that the open source |chef server| scales as the local infrastructure it is supporting grows. The open source |chef server| includes support from the |chef| community, but does not include support directly from |opscode|."
msgstr ""

#: ../source/server_types.rst:58
# 54040562ec4f4520ac2e29b65bc4bb35
msgid "Policy"
msgstr ""

#: ../../includes_chef/includes_chef_policy.rst:4
# 5791e8f12ed44b858eaaa7d5a854bb39
msgid "Policy settings can be used to map the capabilities of |chef| to business and operational requirements, such as process and workflow. Roles define server types, such as \"web server\" or \"database server\". Environments define process, such as \"dev\", \"staging\", or \"production\". Certain types of data, such as passwords, user account data, and other sensitive items can be placed in data bags, which are located in a secure sub-area of |chef| that can only be accessed by nodes that have the correct |ssl| certificates."
msgstr ""

