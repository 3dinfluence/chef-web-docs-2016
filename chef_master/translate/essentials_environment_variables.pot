# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-06 22:47\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_environment_variables.rst:8
# 16a889bfe149483fb9bc3467799a0741
msgid "Unix Environment Variables"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables.rst:4
# 2c9ec9ea3d6c4a8f9176b0fd42624c55
msgid "In |unix|, a process' environment is a set of key-value pairs made available to the process. Often, programs expect their environment to contain information required for the program to run. The details of how these key-value pairs are accessed depends on the API of the language being used. This article explains how environments of child processes interact with their parent process and how to ensure that services and applications are started with the proper environment."
msgstr ""

#: ../source/essentials_environment_variables.rst:13
# bb5d6081187b480bbd2514a7f77ea358
msgid "Child Processes and Inheritance"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:4
# 68d6450c66874ccc94a515c23d8b4118
msgid "Child processes inherit a copy of their parent's environment. In |bash| (and other shells) the environment is accessible via shell variables. Shell variables can be added to the environment that is inherited by children processes using the export keyword."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:6
# 9fdcf0434a2e453d974664602d6321a7
msgid "Consider the following example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:24
# 1ddcbc7936cd4e2ea67c29c7c1ca1480
msgid "As mentioned, the child process gets a copy of its parent's environment. This means that any changes made to that environment do not affect the parent process. For example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:39
# 8d3feaffd757498e9140d6ccc63b7c26
msgid "The principles mentioned above (a child process receives a copy of its parent's environment and cannot affect their parent's environment) apply in |ruby| just as they do in |bash|."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:41
# 1c67a4e9c88e4dffb833ddee6df30750
msgid "In |ruby|, the current environment can be altered via the ``ENV`` variable. Any changes made to the environment will also be available to child process started by the |chef client|. For example, consider the following recipe:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:52
# 98ac6ddd3bfc46bd8c5dec869beabb46
msgid "When run, the |resource script_bash| resource will correctly ``echo \"bar\"`` to its standard output."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:54
# 8f5db47d97ab41508a1dac47417baea4
msgid "However, just as in |bash|, changes made in child processes have no affect on the parent, and thus no affect on subsequent child processes:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:70
# 82769e5ac216487a9725424f1e6c4a9e
msgid "When run, the second |resource script_bash| resource will not cause anything to be echoed to standard out as ``BAZ`` is not part of its environment."
msgstr ""

#: ../source/essentials_environment_variables.rst:17
# 27ce1dda52434336b3ae07e218946daa
msgid "Managing Environments when Using Chef"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access.rst:4
# b9ab57a324584bbeb8f55606a59f3212
msgid "Services and other processes often look to environment variables for important information needed at run time. There are a number of ways to ensure that processes have access to the environment variables they need to run properly."
msgstr ""

#: ../source/essentials_environment_variables.rst:21
# 0095775d1ca14007ba952260d5d5b2cb
msgid "Using the Service's Init Script"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init.rst:4
# 86d35ab59a464f9d8837ef818c36653f
msgid "Ideally, a service's init script would contain everything needed to properly start that service, including the necessary environment. Ensuring that the init script itself contains the necessary environment changes ensures that the service will start properly whenever it is being started using its init script, whether that be from the |resource service| resource or directly from the shell. In classic |unix systemv| init scripts, the environment can be altered just as it can be altered in any other shell script, by using a shell variable marked with the export keyword:"
msgstr ""

#: ../source/essentials_environment_variables.rst:25
# 31765932db554e84909fd66b33bc0391
msgid "Upstart Services"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_upstart.rst:4
# 14d23780999d43b19773d78ffb0aad70
msgid "For services started using |upstart| (the |unix systemv|-compatible init system used by recent versions of |ubuntu| and other distributions), their environment can be altered using ``env``:"
msgstr ""

#: ../source/essentials_environment_variables.rst:29
# ac9620cfc56b4cc799903896b21de624
msgid "Systemd Services"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_systemd.rst:4
# d08c5c68e1ac4a8fb197c2ead75b157b
msgid "For services started using |systemd| (the |unix systemv|-compatible init system by the recent versions of |fedora| and other distributions), their environment can be altered using the ``Environment`` or ``EnvironmentFile`` options:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_systemd.rst:10
# 9265b0fa98164426b2cc73b3b73fc706
msgid "If the init script provided by the package does not include the necessary environment variables, you can manage your altered init script using the |resource template| resource."
msgstr ""

#: ../source/essentials_environment_variables.rst:33
# b2ed7a3b09a7442d8ba198c02119a383
msgid "Using ENV"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_env.rst:4
# e74370a080244c58ab5c6cd9556972ea
msgid "Another method is to use the |ruby| predefined ``ENV`` variable to set the environment variable. This ensures that any child processes (including the service that a resource may be starting) have this value in their environment. While not technically a |hash|, ``ENV`` can be manipulated as if it were. For example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_env.rst:15
# 50a45b179b0e4ae88feca55afdda1f43
msgid "Changes made to ``ENV`` only effect the environment of the |chef client| process and child processes. Altering the environment in this way will often ensure that the |chef client| can start a service properly, but will not ensure that a service will start properly when started using other methods."
msgstr ""

#: ../source/essentials_environment_variables.rst:37
# d95a06e8dbce4321b815b8536aa9b0e9
msgid "Using Resource Attributes"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:4
# 46d1e0cbf4db42bd8628922b70f2a7e0
msgid "If processes is started by using the |resource execute| or |resource script| resources (or any of the resources based on those two resources, such as |resource script_bash|), use the ``environment`` attribute to alter the environment that will be passed to the process."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:15
# 25650a11a28c4b2e854e72a71d8cc905
msgid "The only environment being altered is the one being passed to the child process that is started by the |resource script_bash| resource. This will not affect the environment of the |chef client| or any child processes."
msgstr ""

#: ../source/essentials_environment_variables.rst:41
# bba1151971f74401bdc7570c44d6deef
msgid "Other Issues"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:4
# 18fc34a7d1d24dc7a860343b54396cea
msgid "**My init script works fine when I'm logged in but not over ssh or when launched from the chef-client running as daemon!**"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:6
# f0f62eff9cc54a8087de8e421b72ab3e
msgid "Shells commonly alter their environment at startup by loading various initialization scripts. The files used for initialization vary based on whether the shell is started as an interactive or non-interactive shell and whether it is is started as a login or non-login shell. When a user first logs in, most often an interactive login shell is started. When a command is run via |ssh|, this is often a non-interactive shell. This can mean that the process in question is receiving different environments. Ensure that a service or process is being started in a way that ensures its environment has the necessary key-value pairs."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:8
# b5f18ca157f74c12ad214c0be363e8bb
msgid "**I want to change the environment for every process!**"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:10
# 9958a231a2b24447b605b81c3aa9ca7c
msgid "To change the environment for new processes, alter the initialization scripts for the system shell. These scripts can be managed using the |resource template| resource; however, there are a few caveats:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:12
# 498b7367a976407f805edbb0631e0a09
msgid "The environments of existing processes will be unaffected"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:13
# 2bb7a642e39d4fc79c621b0d6cbcd43d
msgid "Shells look to different startup files when started with different options. See the shell-specific documentation for the definitive list of files that need to be altered and whether it is possible to alter the environment for every possible invocation of the shell"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:14
# 19dee6a93b5b4597b86e14f448a61046
msgid "When a shell's initialization file is first changed, it will have no affect on your current shell or process since its environment has already been initialized"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:15
# dfd5ecc7c9c340d6b880ee599c868668
msgid "From a shell, the source command can be used to reload a given initialization file; however, since child processes do not affect their parent's environment, using a script or execute resource to run source from inside a recipe will have no effect on the environment for the |chef client|"
msgstr ""

