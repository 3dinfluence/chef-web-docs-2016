# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-19 11:19-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../desktop/chef-docs/chef_master/source/essentials_environment_variables.rst:8
# 81060a275fc041f89eb65a0e5e73a500
msgid "Unix Environment Variables"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables.rst:4
# 9e526bf8bea64b1c9c31b8f4eac17b54
msgid "In |unix|, a process' environment is a set of key-value pairs made available to the process. Often, programs expect their environment to contain information required for the program to run. The details of how these key-value pairs are accessed depends on the API of the language being used. This article explains how environments of child processes interact with their parent process and how to ensure that services and applications are started with the proper environment."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/essentials_environment_variables.rst:13
# de4c9267da7e485185e64835d40d3587
msgid "Child Processes and Inheritance"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_child_processes.rst:4
# 18f5c3dc2a1b49e6bdc8441d93bc18ef
msgid "Child processes inherit a copy of their parent's environment. In |bash| (and other shells) the environment is accessible via shell variables. Shell variables can be added to the environment that is inherited by children processes using the export keyword."
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_child_processes.rst:6
# 05b0f9de1ea249f4b49e8277dea86026
msgid "Consider the following example:"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_child_processes.rst:24
# 6acbc7826eee4ea3b84449ef33c1a0f3
msgid "As mentioned, the child process gets a copy of its parent's environment. This means that any changes made to that environment do not affect the parent process. For example:"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_child_processes.rst:39
# 290b8ac1d04e4a4489de9ab9ec723864
msgid "The principles mentioned above (a child process receives a copy of its parent's environment and cannot affect their parent's environment) apply in |ruby| just as they do in |bash|."
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_child_processes.rst:41
# bac3cca6c38c445eb4d020329c7de550
msgid "In |ruby|, the current environment can be altered via the ``ENV`` variable. Any changes made to the environment will also be available to child process started by the |chef client|. For example, consider the following recipe:"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_child_processes.rst:52
# 4674fc0b0e034f3a8c868b409c74b1fd
msgid "When run, the |resource script_bash| resource will correctly ``echo \"bar\"`` to its standard output."
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_child_processes.rst:54
# 25f4cf7153b94372aa890c1e1d66e209
msgid "However, just as in |bash|, changes made in child processes have no affect on the parent, and thus no affect on subsequent child processes:"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_child_processes.rst:70
# 5bd9ab2b4c034376be295df6654d5a2d
msgid "When run, the second |resource script_bash| resource will not cause anything to be echoed to standard out as ``BAZ`` is not part of its environment."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/essentials_environment_variables.rst:17
# 6b8ccb69d6d046f3bca99d2faba3289b
msgid "Managing Environments when Using Chef"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_access.rst:4
# 1fb45af7c73548e8990b276f2c6599da
msgid "Services and other processes often look to environment variables for important information needed at run time. There are a number of ways to ensure that processes have access to the environment variables they need to run properly."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/essentials_environment_variables.rst:21
# 849badad25d04d4889acdb3cb225f34f
msgid "Using the Service's Init Script"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_access_init.rst:4
# e83831660c1848c49cc5854b4ac28271
msgid "Ideally, a service's init script would contain everything needed to properly start that service, including the necessary environment. Ensuring that the init script itself contains the necessary environment changes ensures that the service will start properly whenever it is being started using its init script, whether that be from the |resource service| resource or directly from the shell. In classic |unix systemv| init scripts, the environment can be altered just as it can be altered in any other shell script, by using a shell variable marked with the export keyword:"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/essentials_environment_variables.rst:25
# 9826fb48c6784513b1b1180f652703ec
msgid "Upstart Services"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_access_init_upstart.rst:4
# c55ad4537e724fb7b8ea27b5589276c3
msgid "For services started using |upstart| (the |unix systemv|-compatible init system used by recent versions of |ubuntu| and other distributions), their environment can be altered using ``env``:"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/essentials_environment_variables.rst:29
# 96eb211c7835490ea87c37465d6d3df9
msgid "Systemd Services"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_access_init_systemd.rst:4
# ad47dbbb979240bea029677068d56033
msgid "For services started using |systemd| (the |unix systemv|-compatible init system by the recent versions of |fedora| and other distributions), their environment can be altered using the ``Environment`` or ``EnvironmentFile`` options:"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_access_init_systemd.rst:10
# 5ac12edbff6f44adb55f1f0cad526179
msgid "If the init script provided by the package does not include the necessary environment variables, you can manage your altered init script using the |resource template| resource."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/essentials_environment_variables.rst:33
# 4559cc7afe9442b695cbe328d6606ef6
msgid "Using ENV"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_access_env.rst:4
# afe1608bd2ba4dcfa454858334c594eb
msgid "Another method is to use the |ruby| predefined ``ENV`` variable to set the environment variable. This ensures that any child processes (including the service that a resource may be starting) have this value in their environment. While not technically a |ruby hash|, ``ENV`` can be manipulated as if it were. For example:"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_access_env.rst:15
# be9cd0a2f68b48258377425667937be4
msgid "Changes made to ``ENV`` only effect the environment of the |chef client| process and child processes. Altering the environment in this way will often ensure that the |chef client| can start a service properly, but will not ensure that a service will start properly when started using other methods."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/essentials_environment_variables.rst:37
# 7589e347851642fdbd2416f7bc22d738
msgid "Using Resource Attributes"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:4
# 31d0aadbbd1c4582a7d2ec16ceb7f13e
msgid "If processes is started by using the |resource execute| or |resource script| resources (or any of the resources based on those two resources, such as |resource script_bash|), use the ``environment`` attribute to alter the environment that will be passed to the process."
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:15
# 3f5a62a6796b460e827a124096bdab51
msgid "The only environment being altered is the one being passed to the child process that is started by the |resource script_bash| resource. This will not affect the environment of the |chef client| or any child processes."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/essentials_environment_variables.rst:41
# e6368d3e2c1c43b6b213d5163c6dae42
msgid "Other Issues"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_faq.rst:4
# 0b85d7b8d9a945858ec5b63362a9e7cc
msgid "**My init script works fine when I'm logged in but not over ssh or when launched from the chef-client running as daemon!**"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_faq.rst:6
# fdf8b6bbe4ac468484b92be16d78d29a
msgid "Shells commonly alter their environment at startup by loading various initialization scripts. The files used for initialization vary based on whether the shell is started as an interactive or non-interactive shell and whether it is is started as a login or non-login shell. When a user first logs in, most often an interactive login shell is started. When a command is run via |ssh|, this is often a non-interactive shell. This can mean that the process in question is receiving different environments. Ensure that a service or process is being started in a way that ensures its environment has the necessary key-value pairs."
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_faq.rst:8
# adc71dae2c8f4fc09762d4399741b710
msgid "**I want to change the environment for every process!**"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_faq.rst:10
# 906c6f404bec4bbda6ef3bd944d3cc05
msgid "To change the environment for new processes, alter the initialization scripts for the system shell. These scripts can be managed using the |resource template| resource; however, there are a few caveats:"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_faq.rst:12
# 689f7abf608b4c81a9b215e179bd6ba9
msgid "The environments of existing processes will be unaffected"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_faq.rst:13
# 1fd213bc69a14b2bb298fd9ae3b5c455
msgid "Shells look to different startup files when started with different options. See the shell-specific documentation for the definitive list of files that need to be altered and whether it is possible to alter the environment for every possible invocation of the shell"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_faq.rst:14
# 2f0c41b0fbaf420c93394e5a91936e88
msgid "When a shell's initialization file is first changed, it will have no affect on your current shell or process since its environment has already been initialized"
msgstr ""

#: ../../../desktop/chef-docs/includes_environment_variables/includes_environment_variables_faq.rst:15
# d32d57434b1c4e44a26e2b1aaa33242b
msgid "From a shell, the source command can be used to reload a given initialization file; however, since child processes do not affect their parent's environment, using a script or execute resource to run source from inside a recipe will have no effect on the environment for the |chef client|"
msgstr ""

