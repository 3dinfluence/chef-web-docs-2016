# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-06-07 08:08\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_environment_variables.rst:34
# 5949ef21dfa14ba39bfdd0af738ad6af
msgid "Unix Environment Variables"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables.rst:4
# e7666841d7694ecd8bf643327955ee76
msgid "In Unix, a process' environment is a set of key-value pairs made available to the process. Often, programs expect their environment to contain information required for the program to run. The details of how these key-value pairs are accessed depends on the API of the language being used. This article explains how environments of child processes interact with their parent process and how you can use Chef to ensure that services and applications are started with the proper environment."
msgstr ""

#: ../source/essentials_environment_variables.rst:39
# 1852ed7c786e4001b7e9f065cb49493c
msgid "Child Processes and Inheritance"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:4
# 851b6dc67c4a4517a6df44186150878a
msgid "Child processes inherit a copy of their parent's environment. In Bash (and other shells) the environment is accessible via shell variables. Shell variables can be added to the environment that is inherited by children processes using the export keyword."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:6
# f1fccf1cf5844dacabc48ae7644bf21e
msgid "Consider the following example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:24
# 7b49abb9be4f44bfb0ce7cde4e60537b
msgid "As mentioned, the child process gets a copy of its parent's environment. This means that any changes made to that environment do not affect the parent process. For example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:39
# 1308dc4b5bc341a78b7ae254a6aa4b98
msgid "The principles mentioned above (a child process receives a copy of its parent's environment and cannot affect their parent's environment) apply in Ruby and Chef just as they do in Bash."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:41
# 8eecbb87aeda493d9ff396ae17b0aa10
msgid "In Ruby (and thus Chef), the current environment can be altered via the ENV variable. Any changes made to the environment will also be available to child process started by Chef. For example, consider the following recipe:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:52
# 59422c72a5ec424793414c14b653782b
msgid "When run, the bash resource will correctly echo \"bar\" to its standard output."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:54
# 26ef698d974b4cb8ad74c48ae8eb9227
msgid "However, just as in Bash, changes made in child processes have no affect on the parent, and thus no affect on subsequent child processes:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:70
# c8e169d4182d40d7b3a53403c976fc90
msgid "When run, the second bash resource will not cause anything to be echoed to standard out as BAZ is not part of its environment."
msgstr ""

#: ../source/essentials_environment_variables.rst:43
# c2901bb0816c49d6a32eeba3154c123b
msgid "Managing Environments when Using Chef"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access.rst:4
# d55f0b7deee14c44868aaa1498f269eb
msgid "Services and other processes often look to environment variables for important information needed at run time. There are a number of ways to ensure that processes have access to the environment variables they need to run properly."
msgstr ""

#: ../source/essentials_environment_variables.rst:47
# af0ba3feea624ccbb4aebba3c0f6188b
msgid "Using the Service's Init Script"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init.rst:4
# 68b741c32d5648c7b20b346d57c3fddd
msgid "Ideally, a service's init script would contain everything needed to properly start that service, including the necessary environment. Ensuring that the init script itself contains the necessary environment changes ensures that the service will start properly whenever it is being started using its init script, whether that be from Chef's service resource or directly from the shell. In classic System V init scripts, the environment can be altered just as it can be altered in any other shell script, by using a shell variable marked with the export keyword:"
msgstr ""

#: ../source/essentials_environment_variables.rst:51
# f6fec182c72c4c00813fe06a4b897757
msgid "Upstart Services"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_upstart.rst:4
# f074afc251264eccbbe3b37ac31cb78d
msgid "For services started using Upstart (the System V-compatible init system used by recent versions of Ubuntu and other distributions), their environment can be altered using env:"
msgstr ""

#: ../source/essentials_environment_variables.rst:55
# c35a472ebc024d4cbbc2d499ce3027be
msgid "Systemd Services"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_systemd.rst:4
# 09cb1c4dd6ec43eaa8ac63d3ad518eed
msgid "For services started using systemd (the System V-compatible init system by the recent versions of Fedora and other distributions), their environment can be altered using the ``Environment`` or ``EnvironmentFile`` options:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_systemd.rst:10
# 81b4c0edf15942cba8ef93ef9a824920
msgid "If the init script provided by the package does not include the necessary environment variables, you can manage your altered init script using the |chef| |resource template| resource."
msgstr ""

#: ../source/essentials_environment_variables.rst:59
# 8c731873f8464b3cbc8b4205d31ae71e
msgid "Using ENV"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_env.rst:4
# c908918696db43f794600651e05f2114
msgid "Another method is to use Ruby's predefined ENV variable to set the environment variable. This ensures that any child processes (including the service that a resource may be starting) have this value in their environment. While not technically a Hash, ENV can be manipulated as if it were a Hash. For example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_env.rst:15
# 4fc88b6e95cb40c380fd7f346cdd7f11
msgid "Changes made to ENV only effect the environment of the chef-client process and its children processes. Altering the environment in this way will often ensure that Chef can start the service properly, but will not ensure that the service will start properly when started using other methods."
msgstr ""

#: ../source/essentials_environment_variables.rst:63
# 55c08ab6397c44619911a78f051b9290
msgid "Using Resource Attributes"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:4
# b32d273825d94a1a89417992ad498798
msgid "If you are starting a processes by using an execute or script resource, you can use the environment attribute to alter the environment that will be passed to the process."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:15
# 3a7128e5ec79440baff8534e4d1368d4
msgid "Note that the only environment being altered is the environment being passed to the child process being started by the bash resource. This will not affect the environment of chef-client or subsequently started child processes."
msgstr ""

#: ../source/essentials_environment_variables.rst:67
# 2079b321f97f43cbbc6fc547644da579
msgid "Other Issues"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:4
# 20b1994d4fdd431790aa6b5825759638
msgid "**My init script works fine when I'm logged in but not over ssh or when launched from chef-client running as daemon!**"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:6
# 01bb38dd72214d5f848f417f0490c4d0
msgid "Shells commonly alter their environment at startup by loading various initialization scripts. The files used for initialization vary based on whether the shell is started as an interactive or non-interactive shell and whether it is is started as a login or non-login shell. When you log in, you are likely starting an interactive, login shell. When you run a command via ssh, it is possible that you are starting a non-interactive shell. This can mean that the process in question is receiving different environments. Ensure that your service or process is being started in a way that ensures its environment has the necessary key-value pairs."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:8
# c347dfd3795d467fa7c4e8b21b1ff356
msgid "**I want to change the environment for every process!**"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:10
# f708244f6fc344c482d659c5f1e3c559
msgid "To change the environment for new processes, you will need to alter the initialization scripts for your system's shell. You can manage these scripts using a Chef template resource; however, there are a few caveats you should be aware of:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:12
# 28f94f5b0eb2411c93dd145055ab999b
msgid "The environments of existing processes will be unaffected."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:13
# c807ea4b8df94024a9f744c97415d80d
msgid "Shells look to different startup files when started with different options. See your shell's documentation for the definitive list of files that need to be altered and whether it is possible to alter the environment for every possible invocation of the shell."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:14
# 7293b116fcff4181a1c6581a67e7029a
msgid "When you first change a shell's initialization file, it will have no affect on your current shell or process since its environment has already been initialized."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:15
# 5d5c502740ce4959b9e2c6b28aa2a19f
msgid "From a shell, you can use the source command to reload the given initialization file; however, since child processes do not affect their parent's environment, using a script or execute resource to run source from inside a Chef recipe will have no effect on chef-client's environment."
msgstr ""

