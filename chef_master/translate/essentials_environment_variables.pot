# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-06-20 12:06\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_environment_variables.rst:34
# 1642fba7165c4d58acaffe963bf4317f
msgid "Unix Environment Variables"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables.rst:4
# da930b3260c7414091d96914362952d2
msgid "In Unix, a process' environment is a set of key-value pairs made available to the process. Often, programs expect their environment to contain information required for the program to run. The details of how these key-value pairs are accessed depends on the API of the language being used. This article explains how environments of child processes interact with their parent process and how you can use Chef to ensure that services and applications are started with the proper environment."
msgstr ""

#: ../source/essentials_environment_variables.rst:39
# d3cd6bb469494e14827c1255366a9fd6
msgid "Child Processes and Inheritance"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:4
# 297a7931367144cca836a525ca88cc6d
msgid "Child processes inherit a copy of their parent's environment. In Bash (and other shells) the environment is accessible via shell variables. Shell variables can be added to the environment that is inherited by children processes using the export keyword."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:6
# 66d7bc5408294487940cdf9d83a95f6f
msgid "Consider the following example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:24
# 25e1de211b344dc9b483b29555f111d3
msgid "As mentioned, the child process gets a copy of its parent's environment. This means that any changes made to that environment do not affect the parent process. For example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:39
# f78d3519541b488cb4863389a4d03fb1
msgid "The principles mentioned above (a child process receives a copy of its parent's environment and cannot affect their parent's environment) apply in Ruby and Chef just as they do in Bash."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:41
# 9bb5505230be4030a00c1f635905260b
msgid "In Ruby (and thus Chef), the current environment can be altered via the ENV variable. Any changes made to the environment will also be available to child process started by Chef. For example, consider the following recipe:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:52
# 9c0c22426d96432dab39ce2cfadb2ba7
msgid "When run, the bash resource will correctly echo \"bar\" to its standard output."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:54
# f2d6292f4ca5486d8ed365c1eb79010e
msgid "However, just as in Bash, changes made in child processes have no affect on the parent, and thus no affect on subsequent child processes:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:70
# 29d49bf507864f06af137e07c4a2e6e8
msgid "When run, the second bash resource will not cause anything to be echoed to standard out as BAZ is not part of its environment."
msgstr ""

#: ../source/essentials_environment_variables.rst:43
# bff61df502914356814acbfaedaeefef
msgid "Managing Environments when Using Chef"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access.rst:4
# e2926773dc3e41b885d176ab70bdcea2
msgid "Services and other processes often look to environment variables for important information needed at run time. There are a number of ways to ensure that processes have access to the environment variables they need to run properly."
msgstr ""

#: ../source/essentials_environment_variables.rst:47
# 051d4900663a43afab83b4b38a5d7039
msgid "Using the Service's Init Script"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init.rst:4
# 79a5a877762a452ca56372f43977107f
msgid "Ideally, a service's init script would contain everything needed to properly start that service, including the necessary environment. Ensuring that the init script itself contains the necessary environment changes ensures that the service will start properly whenever it is being started using its init script, whether that be from Chef's service resource or directly from the shell. In classic System V init scripts, the environment can be altered just as it can be altered in any other shell script, by using a shell variable marked with the export keyword:"
msgstr ""

#: ../source/essentials_environment_variables.rst:51
# ed630c57d5a04c02b11ea5087bf0b16e
msgid "Upstart Services"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_upstart.rst:4
# 46566e243468457dbae5303ec994d265
msgid "For services started using Upstart (the System V-compatible init system used by recent versions of Ubuntu and other distributions), their environment can be altered using env:"
msgstr ""

#: ../source/essentials_environment_variables.rst:55
# 464e6ad7ba834dc89f0654a28ba0ba52
msgid "Systemd Services"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_systemd.rst:4
# 2543c500fefc48099a8971e146afe563
msgid "For services started using systemd (the System V-compatible init system by the recent versions of Fedora and other distributions), their environment can be altered using the ``Environment`` or ``EnvironmentFile`` options:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_systemd.rst:10
# e995a1d0d0174e4db1f18c572bce30f2
msgid "If the init script provided by the package does not include the necessary environment variables, you can manage your altered init script using the |chef| |resource template| resource."
msgstr ""

#: ../source/essentials_environment_variables.rst:59
# e2efbe6a11484b96b352d153a35b953e
msgid "Using ENV"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_env.rst:4
# 8795c6d24b0d4c4980fb4ad0b0ce4c81
msgid "Another method is to use Ruby's predefined ENV variable to set the environment variable. This ensures that any child processes (including the service that a resource may be starting) have this value in their environment. While not technically a Hash, ENV can be manipulated as if it were a Hash. For example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_env.rst:15
# 89b3ecfd847d4d15a6acac42e07fb17d
msgid "Changes made to ENV only effect the environment of the chef-client process and its children processes. Altering the environment in this way will often ensure that Chef can start the service properly, but will not ensure that the service will start properly when started using other methods."
msgstr ""

#: ../source/essentials_environment_variables.rst:63
# 7fba1b0afa324cca952c9c0c4e952431
msgid "Using Resource Attributes"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:4
# e8ade81e43af4de7b9cee302d0deb1af
msgid "If you are starting a processes by using an execute or script resource, you can use the environment attribute to alter the environment that will be passed to the process."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:15
# 749474b8994946f6b0d3b5c2a53e20c5
msgid "Note that the only environment being altered is the environment being passed to the child process being started by the bash resource. This will not affect the environment of chef-client or subsequently started child processes."
msgstr ""

#: ../source/essentials_environment_variables.rst:67
# ff70e21cda544866826cc2b098c4bac3
msgid "Other Issues"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:4
# cf94b83233224c59aff1468a5481df50
msgid "**My init script works fine when I'm logged in but not over ssh or when launched from chef-client running as daemon!**"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:6
# 89e7fd4e2c9d47418ceba4f9a5b983d7
msgid "Shells commonly alter their environment at startup by loading various initialization scripts. The files used for initialization vary based on whether the shell is started as an interactive or non-interactive shell and whether it is is started as a login or non-login shell. When you log in, you are likely starting an interactive, login shell. When you run a command via ssh, it is possible that you are starting a non-interactive shell. This can mean that the process in question is receiving different environments. Ensure that your service or process is being started in a way that ensures its environment has the necessary key-value pairs."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:8
# a547dd39519a414db31192ebb1540e39
msgid "**I want to change the environment for every process!**"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:10
# 490db419d02d492bb9b301c7cb39c1f6
msgid "To change the environment for new processes, you will need to alter the initialization scripts for your system's shell. You can manage these scripts using a Chef template resource; however, there are a few caveats you should be aware of:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:12
# cae4e289a0d04019833d3e87c5602350
msgid "The environments of existing processes will be unaffected."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:13
# 0a15402954b8465da77ee114d190f0c3
msgid "Shells look to different startup files when started with different options. See your shell's documentation for the definitive list of files that need to be altered and whether it is possible to alter the environment for every possible invocation of the shell."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:14
# 6492319dfecf4a738cd13e8cf5f052bc
msgid "When you first change a shell's initialization file, it will have no affect on your current shell or process since its environment has already been initialized."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:15
# 574352203c154900be3ead252fd63dc6
msgid "From a shell, you can use the source command to reload the given initialization file; however, since child processes do not affect their parent's environment, using a script or execute resource to run source from inside a Chef recipe will have no effect on chef-client's environment."
msgstr ""

