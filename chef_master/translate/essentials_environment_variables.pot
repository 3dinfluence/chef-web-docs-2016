# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-14 14:12-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_environment_variables.rst:8
# abf4cc8c87b3442a8ffe0c56c0fdacab
msgid "Unix Environment Variables"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables.rst:4
# 078b2c6fb6774ecba5fcf1b0e239acd4
msgid "In |unix|, a process' environment is a set of key-value pairs made available to the process. Often, programs expect their environment to contain information required for the program to run. The details of how these key-value pairs are accessed depends on the API of the language being used. This article explains how environments of child processes interact with their parent process and how to ensure that services and applications are started with the proper environment."
msgstr ""

#: ../source/essentials_environment_variables.rst:13
# 625a380a32714f629c6c91c9225c96a8
msgid "Child Processes and Inheritance"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:4
# 977e25dde175479e9a526e5caecf88ac
msgid "Child processes inherit a copy of their parent's environment. In |bash| (and other shells) the environment is accessible via shell variables. Shell variables can be added to the environment that is inherited by children processes using the export keyword."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:6
# a9b5f01915de47e2839b56bb848fe573
msgid "Consider the following example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:24
# 6752cacb323e48fcbb7efacc2632d596
msgid "As mentioned, the child process gets a copy of its parent's environment. This means that any changes made to that environment do not affect the parent process. For example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:39
# fbeb84ea7757411d9fab6afe08ef1102
msgid "The principles mentioned above (a child process receives a copy of its parent's environment and cannot affect their parent's environment) apply in |ruby| just as they do in |bash|."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:41
# d8fe509a52a944bfb47bbbac0c5905d1
msgid "In |ruby|, the current environment can be altered via the ``ENV`` variable. Any changes made to the environment will also be available to child process started by the |chef client|. For example, consider the following recipe:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:52
# 8e62c56f89264abd8ed593fa89d659ae
msgid "When run, the |resource script_bash| resource will correctly ``echo \"bar\"`` to its standard output."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:54
# 1b3c03c04b6e4b92a72edda561b2883c
msgid "However, just as in |bash|, changes made in child processes have no affect on the parent, and thus no affect on subsequent child processes:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:70
# 481ecf685ac74c7883ec331a3e1adee7
msgid "When run, the second |resource script_bash| resource will not cause anything to be echoed to standard out as ``BAZ`` is not part of its environment."
msgstr ""

#: ../source/essentials_environment_variables.rst:17
# 08628765d32f46b18a89aa244f6b4e03
msgid "Managing Environments"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access.rst:4
# b5f8be883c0c4a15a29b85bd3518fc2f
msgid "Services and other processes often look to environment variables for important information needed at run time. There are a number of ways to ensure that processes have access to the environment variables they need to run properly."
msgstr ""

#: ../source/essentials_environment_variables.rst:21
# 19126638e61147bfbf5fb63a1be39e86
msgid "Using an Init Script"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init.rst:4
# 86fb6bf6591e4e9483678e078a836b41
msgid "Ideally, a service's init script would contain everything needed to properly start that service, including the necessary environment. Ensuring that the init script itself contains the necessary environment changes ensures that the service will start properly whenever it is being started using its init script, whether that be from the |resource service| resource or directly from the shell. In classic |unix systemv| init scripts, the environment can be altered just as it can be altered in any other shell script, by using a shell variable marked with the export keyword:"
msgstr ""

#: ../source/essentials_environment_variables.rst:25
# 3ae049446733415387f0a95922dac566
msgid "Upstart Services"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_upstart.rst:4
# 565c846a07494b769845666f0b639a38
msgid "For services started using |upstart| (the |unix systemv|-compatible init system used by recent versions of |ubuntu| and other distributions), their environment can be altered using ``env``:"
msgstr ""

#: ../source/essentials_environment_variables.rst:29
# 005eaa566a964533842b45e1ff2eefed
msgid "Systemd Services"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_systemd.rst:4
# d20c6f86f25e49de8799cd068abddc7b
msgid "For services started using |systemd| (the |unix systemv|-compatible init system by the recent versions of |fedora| and other distributions), their environment can be altered using the ``Environment`` or ``EnvironmentFile`` options:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_systemd.rst:10
# d176a44a13d5491dae3e0606259c71b1
msgid "If the init script provided by the package does not include the necessary environment variables, you can manage your altered init script using the |resource template| resource."
msgstr ""

#: ../source/essentials_environment_variables.rst:33
# 8ca971dfb052490dbf08f051faee78bd
msgid "Using ENV"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_env.rst:4
# 8b3cb71dd4fc4f8c928b36d1d2da6370
msgid "Another method is to use the |ruby| predefined ``ENV`` variable to set the environment variable. This ensures that any child processes (including the service that a resource may be starting) have this value in their environment. While not technically a |ruby hash|, ``ENV`` can be manipulated as if it were. For example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_env.rst:15
# 84a73799f2334c8a9e2dfb8ddfce6f90
msgid "Changes made to ``ENV`` only effect the environment of the |chef client| process and child processes. Altering the environment in this way will often ensure that the |chef client| can start a service properly, but will not ensure that a service will start properly when started using other methods."
msgstr ""

#: ../source/essentials_environment_variables.rst:37
# 32483cc9e27e44f0a2303d5020246340
msgid "Using Resource Attributes"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:4
# 46643464cdb046c68c2b131dc1eb3d65
msgid "If processes is started by using the |resource execute| or |resource script| resources (or any of the resources based on those two resources, such as |resource script_bash|), use the ``environment`` attribute to alter the environment that will be passed to the process."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:15
# 1477fb07b97849b8938d05a900f0d7d2
msgid "The only environment being altered is the one being passed to the child process that is started by the |resource script_bash| resource. This will not affect the environment of the |chef client| or any child processes."
msgstr ""

#: ../source/essentials_environment_variables.rst:41
# f79f170889cc4258bd5f5f28d8b1799e
msgid "Other Issues"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:4
# 391ad1a19a40497ea7e6ca29af382ff1
msgid "**My init script works fine when I'm logged in but not over ssh or when launched from the chef-client running as daemon!**"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:6
# 5c6133d2a79b4778a74802584476d108
msgid "Shells commonly alter their environment at startup by loading various initialization scripts. The files used for initialization vary based on whether the shell is started as an interactive or non-interactive shell and whether it is is started as a login or non-login shell. When a user first logs in, most often an interactive login shell is started. When a command is run via |ssh|, this is often a non-interactive shell. This can mean that the process in question is receiving different environments. Ensure that a service or process is being started in a way that ensures its environment has the necessary key-value pairs."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:8
# e66823fa516f4d5db2515b59b28fdfe0
msgid "**I want to change the environment for every process!**"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:10
# fb9b287915c74891970886002451b6ac
msgid "To change the environment for new processes, alter the initialization scripts for the system shell. These scripts can be managed using the |resource template| resource; however, there are a few caveats:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:12
# a4f151fbe65d464496a1777136caa100
msgid "The environments of existing processes will be unaffected"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:13
# 66a3830b3bbe4a8fb820f091c1012f3c
msgid "Shells look to different startup files when started with different options. See the shell-specific documentation for the definitive list of files that need to be altered and whether it is possible to alter the environment for every possible invocation of the shell"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:14
# 35a9bc45d3374694a8228829100abd70
msgid "When a shell's initialization file is first changed, it will have no affect on your current shell or process since its environment has already been initialized"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:15
# 78c888f4fb8a47d0bff747e0f29b8376
msgid "From a shell, the source command can be used to reload a given initialization file; however, since child processes do not affect their parent's environment, using a script or execute resource to run source from inside a recipe will have no effect on the environment for the |chef client|"
msgstr ""

