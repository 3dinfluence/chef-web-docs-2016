# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-21 10:57\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_environment_variables.rst:8
# f7710fd23e07490bb32b47d8ad1df778
msgid "Unix Environment Variables"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables.rst:4
# 63f258d692c84eb59a5005967c9e943c
msgid "In |unix|, a process' environment is a set of key-value pairs made available to the process. Often, programs expect their environment to contain information required for the program to run. The details of how these key-value pairs are accessed depends on the API of the language being used. This article explains how environments of child processes interact with their parent process and how to ensure that services and applications are started with the proper environment."
msgstr ""

#: ../source/essentials_environment_variables.rst:13
# 35216839b0244ffeb0173c0729925522
msgid "Child Processes and Inheritance"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:4
# 026cb226389440ceb1046acf8758c004
msgid "Child processes inherit a copy of their parent's environment. In |bash| (and other shells) the environment is accessible via shell variables. Shell variables can be added to the environment that is inherited by children processes using the export keyword."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:6
# 355f08d1b31a4b679828dd57df2f9362
msgid "Consider the following example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:24
# ebd4b750cf2d4e5d880b96b7c23d05fd
msgid "As mentioned, the child process gets a copy of its parent's environment. This means that any changes made to that environment do not affect the parent process. For example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:39
# 7388cfe76b194e1a9928a6d4c0a23c67
msgid "The principles mentioned above (a child process receives a copy of its parent's environment and cannot affect their parent's environment) apply in |ruby| just as they do in |bash|."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:41
# 7e50e09b231844fd990c62c3b5da3af6
msgid "In |ruby|, the current environment can be altered via the ``ENV`` variable. Any changes made to the environment will also be available to child process started by the |chef client|. For example, consider the following recipe:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:52
# 3666d954b0044d98b02e65d650fe4608
msgid "When run, the |resource script_bash| resource will correctly ``echo \"bar\"`` to its standard output."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:54
# 608db1f1c8a046848736b3cc3a2dcdc3
msgid "However, just as in |bash|, changes made in child processes have no affect on the parent, and thus no affect on subsequent child processes:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:70
# 8dab206624054628a96fc509d342e5ff
msgid "When run, the second |resource script_bash| resource will not cause anything to be echoed to standard out as ``BAZ`` is not part of its environment."
msgstr ""

#: ../source/essentials_environment_variables.rst:17
# 7e801609d3ab4b1ea7079ab10ce1e15e
msgid "Managing Environments when Using Chef"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access.rst:4
# 8fa7953fb10f44d1bd253508af982a8d
msgid "Services and other processes often look to environment variables for important information needed at run time. There are a number of ways to ensure that processes have access to the environment variables they need to run properly."
msgstr ""

#: ../source/essentials_environment_variables.rst:21
# 01456b03a0a24ff1a1cff8ea585ea733
msgid "Using the Service's Init Script"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init.rst:4
# 543cb4974a764566b11f2648fbd190ba
msgid "Ideally, a service's init script would contain everything needed to properly start that service, including the necessary environment. Ensuring that the init script itself contains the necessary environment changes ensures that the service will start properly whenever it is being started using its init script, whether that be from the |resource service| resource or directly from the shell. In classic |unix systemv| init scripts, the environment can be altered just as it can be altered in any other shell script, by using a shell variable marked with the export keyword:"
msgstr ""

#: ../source/essentials_environment_variables.rst:25
# fbe6a290da5945c4906937ade1e20455
msgid "Upstart Services"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_upstart.rst:4
# 6b555dda4f1445bf98dcd5cf3f2e15ab
msgid "For services started using |upstart| (the |unix systemv|-compatible init system used by recent versions of |ubuntu| and other distributions), their environment can be altered using ``env``:"
msgstr ""

#: ../source/essentials_environment_variables.rst:29
# 7e16037132c44d60b4dd6e01632693c6
msgid "Systemd Services"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_systemd.rst:4
# 287a0946fe154494b115e4d51aff3a67
msgid "For services started using |systemd| (the |unix systemv|-compatible init system by the recent versions of |fedora| and other distributions), their environment can be altered using the ``Environment`` or ``EnvironmentFile`` options:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_systemd.rst:10
# 5ab8c442857440d69fec5642acc52419
msgid "If the init script provided by the package does not include the necessary environment variables, you can manage your altered init script using the |resource template| resource."
msgstr ""

#: ../source/essentials_environment_variables.rst:33
# 4d03941e93bc4118a01febb5c866dece
msgid "Using ENV"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_env.rst:4
# 4500fff11e334ebba042b33b3dd84d41
msgid "Another method is to use the |ruby| predefined ``ENV`` variable to set the environment variable. This ensures that any child processes (including the service that a resource may be starting) have this value in their environment. While not technically a |hash|, ``ENV`` can be manipulated as if it were. For example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_env.rst:15
# 45265c18e05b4508b9be26986070170b
msgid "Changes made to ``ENV`` only effect the environment of the |chef client| process and child processes. Altering the environment in this way will often ensure that the |chef client| can start a service properly, but will not ensure that a service will start properly when started using other methods."
msgstr ""

#: ../source/essentials_environment_variables.rst:37
# 25be6b4a3dbf47f6b424673fbf92a05e
msgid "Using Resource Attributes"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:4
# 11c957e183904142b7f6b12fc721f1c4
msgid "If processes is started by using the |resource execute| or |resource script| resources (or any of the resources based on those two resources, such as |resource script_bash|), use the ``environment`` attribute to alter the environment that will be passed to the process."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:15
# 6f25e55d21f14eddac786bc59b4a9c28
msgid "The only environment being altered is the one being passed to the child process that is started by the |resource script_bash| resource. This will not affect the environment of the |chef client| or any child processes."
msgstr ""

#: ../source/essentials_environment_variables.rst:41
# 19cd7649f13d4431b9810410d148d45c
msgid "Other Issues"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:4
# 0bccb0c71c0a48249050f7ec5366dcd5
msgid "**My init script works fine when I'm logged in but not over ssh or when launched from the chef-client running as daemon!**"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:6
# dcabdb1abdd84a81b9223876f83cffd1
msgid "Shells commonly alter their environment at startup by loading various initialization scripts. The files used for initialization vary based on whether the shell is started as an interactive or non-interactive shell and whether it is is started as a login or non-login shell. When a user first logs in, most often an interactive login shell is started. When a command is run via |ssh|, this is often a non-interactive shell. This can mean that the process in question is receiving different environments. Ensure that a service or process is being started in a way that ensures its environment has the necessary key-value pairs."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:8
# 043f84ee88a640d9b80e3deb041a6692
msgid "**I want to change the environment for every process!**"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:10
# 54e08441176c40388826d83f66270e2d
msgid "To change the environment for new processes, alter the initialization scripts for the system shell. These scripts can be managed using the |resource template| resource; however, there are a few caveats:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:12
# 835f99c581184c99963607877c80eb99
msgid "The environments of existing processes will be unaffected"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:13
# c30c05b0a5e444a38fbbcf3f1220bf2d
msgid "Shells look to different startup files when started with different options. See the shell-specific documentation for the definitive list of files that need to be altered and whether it is possible to alter the environment for every possible invocation of the shell"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:14
# e6c97d695fa14d0e8422e079e7f0994d
msgid "When a shell's initialization file is first changed, it will have no affect on your current shell or process since its environment has already been initialized"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:15
# 0e904b90825241e28b927c80beeafa02
msgid "From a shell, the source command can be used to reload a given initialization file; however, since child processes do not affect their parent's environment, using a script or execute resource to run source from inside a recipe will have no effect on the environment for the |chef client|"
msgstr ""

