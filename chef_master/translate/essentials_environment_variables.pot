# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-07-25 18:13\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_environment_variables.rst:34
# 79116c2227e14db0ab4e865aedab8c42
msgid "Unix Environment Variables"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables.rst:4
# bbf4d574a1194602a0dcdbb64ac1e113
msgid "In Unix, a process' environment is a set of key-value pairs made available to the process. Often, programs expect their environment to contain information required for the program to run. The details of how these key-value pairs are accessed depends on the API of the language being used. This article explains how environments of child processes interact with their parent process and how you can use Chef to ensure that services and applications are started with the proper environment."
msgstr ""

#: ../source/essentials_environment_variables.rst:39
# 3885aa175fe44d2da55a7f690cac58c8
msgid "Child Processes and Inheritance"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:4
# b3018a7972324ab78a7bf909edad1fdb
msgid "Child processes inherit a copy of their parent's environment. In Bash (and other shells) the environment is accessible via shell variables. Shell variables can be added to the environment that is inherited by children processes using the export keyword."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:6
# c10a50ff8202402bb78cc704c23a96a7
msgid "Consider the following example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:24
# 00ec0b76b5314d7c80e0447a5d100bde
msgid "As mentioned, the child process gets a copy of its parent's environment. This means that any changes made to that environment do not affect the parent process. For example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:39
# a828ebeeb2d146efab13670414bde509
msgid "The principles mentioned above (a child process receives a copy of its parent's environment and cannot affect their parent's environment) apply in Ruby and Chef just as they do in Bash."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:41
# 43f4e933bde846408e6e18c8f282408d
msgid "In Ruby (and thus Chef), the current environment can be altered via the ENV variable. Any changes made to the environment will also be available to child process started by Chef. For example, consider the following recipe:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:52
# 99bf87dedfd344e7b3256542f033c1f6
msgid "When run, the bash resource will correctly echo \"bar\" to its standard output."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:54
# 2ea9f596129f4771a8eb456b3d1d1f87
msgid "However, just as in Bash, changes made in child processes have no affect on the parent, and thus no affect on subsequent child processes:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_child_processes.rst:70
# 886f10d34c2245a68f1cbcd2e88b093f
msgid "When run, the second bash resource will not cause anything to be echoed to standard out as BAZ is not part of its environment."
msgstr ""

#: ../source/essentials_environment_variables.rst:43
# 34c17c7118c842ea845b520eb252468d
msgid "Managing Environments when Using Chef"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access.rst:4
# 29683daccf8e4e2aaf0e96de395c5b05
msgid "Services and other processes often look to environment variables for important information needed at run time. There are a number of ways to ensure that processes have access to the environment variables they need to run properly."
msgstr ""

#: ../source/essentials_environment_variables.rst:47
# e6deff46587b4d2682bc1c19894faa2c
msgid "Using the Service's Init Script"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init.rst:4
# 8c111760de69410b85ec4e4d754fd97d
msgid "Ideally, a service's init script would contain everything needed to properly start that service, including the necessary environment. Ensuring that the init script itself contains the necessary environment changes ensures that the service will start properly whenever it is being started using its init script, whether that be from Chef's service resource or directly from the shell. In classic System V init scripts, the environment can be altered just as it can be altered in any other shell script, by using a shell variable marked with the export keyword:"
msgstr ""

#: ../source/essentials_environment_variables.rst:51
# 020629f7b5f44e9daeb5f9827fd65b34
msgid "Upstart Services"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_upstart.rst:4
# 58e2bfd4710e4d469b367939e494a159
msgid "For services started using Upstart (the System V-compatible init system used by recent versions of Ubuntu and other distributions), their environment can be altered using env:"
msgstr ""

#: ../source/essentials_environment_variables.rst:55
# 74914906621e4702b03f63e9f6766047
msgid "Systemd Services"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_systemd.rst:4
# 14f88709557f48c58339bee071719b2d
msgid "For services started using systemd (the System V-compatible init system by the recent versions of Fedora and other distributions), their environment can be altered using the ``Environment`` or ``EnvironmentFile`` options:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_init_systemd.rst:10
# 70d3e9ec5da9485dad66bd91034ff7fe
msgid "If the init script provided by the package does not include the necessary environment variables, you can manage your altered init script using the |chef| |resource template| resource."
msgstr ""

#: ../source/essentials_environment_variables.rst:59
# d7cda1206915475b8b090fca8de7d8d8
msgid "Using ENV"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_env.rst:4
# 131be775888646799348184d94ecb5e7
msgid "Another method is to use Ruby's predefined ENV variable to set the environment variable. This ensures that any child processes (including the service that a resource may be starting) have this value in their environment. While not technically a Hash, ENV can be manipulated as if it were a Hash. For example:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_env.rst:15
# ec34bb7e322c447aa0a084d380466bed
msgid "Changes made to ENV only effect the environment of the chef-client process and its children processes. Altering the environment in this way will often ensure that Chef can start the service properly, but will not ensure that the service will start properly when started using other methods."
msgstr ""

#: ../source/essentials_environment_variables.rst:63
# baecc764b72349a5b3fba5c5169be8be
msgid "Using Resource Attributes"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:4
# f79132d0303c4b4f8fc3bc34c44ef87e
msgid "If you are starting a processes by using an execute or script resource, you can use the environment attribute to alter the environment that will be passed to the process."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_access_resource_attributes.rst:15
# e3a079a1ed9c4db2837b3c8a20e7c983
msgid "Note that the only environment being altered is the environment being passed to the child process being started by the bash resource. This will not affect the environment of chef-client or subsequently started child processes."
msgstr ""

#: ../source/essentials_environment_variables.rst:67
# abd12c682edc4b4bbea5b42305b08593
msgid "Other Issues"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:4
# d993d272227e4fb5b23f61c5c669c913
msgid "**My init script works fine when I'm logged in but not over ssh or when launched from chef-client running as daemon!**"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:6
# 799c63ad63694a92a2c0f191e5acc3f6
msgid "Shells commonly alter their environment at startup by loading various initialization scripts. The files used for initialization vary based on whether the shell is started as an interactive or non-interactive shell and whether it is is started as a login or non-login shell. When you log in, you are likely starting an interactive, login shell. When you run a command via ssh, it is possible that you are starting a non-interactive shell. This can mean that the process in question is receiving different environments. Ensure that your service or process is being started in a way that ensures its environment has the necessary key-value pairs."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:8
# 2686f55987814c2d932852b0f6b6c9bd
msgid "**I want to change the environment for every process!**"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:10
# 2b94eeaaf9044d55941db8b46102db2c
msgid "To change the environment for new processes, you will need to alter the initialization scripts for your system's shell. You can manage these scripts using a Chef template resource; however, there are a few caveats you should be aware of:"
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:12
# d9ceb21942e241ada3b64eb403964ab5
msgid "The environments of existing processes will be unaffected."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:13
# 388058ea46d64d0b8eec6b923355f99a
msgid "Shells look to different startup files when started with different options. See your shell's documentation for the definitive list of files that need to be altered and whether it is possible to alter the environment for every possible invocation of the shell."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:14
# 0b716598637d4aa6b928db4f795c4dd5
msgid "When you first change a shell's initialization file, it will have no affect on your current shell or process since its environment has already been initialized."
msgstr ""

#: ../../includes_environment_variables/includes_environment_variables_faq.rst:15
# e96d9eab28ef4b44843c84d3fb72631f
msgid "From a shell, you can use the source command to reload the given initialization file; however, since child processes do not affect their parent's environment, using a script or execute resource to run source from inside a Chef recipe will have no effect on chef-client's environment."
msgstr ""

