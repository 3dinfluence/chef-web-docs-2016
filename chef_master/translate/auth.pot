# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-29 14:53-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/auth.rst:8
# 065863d946ca4d4ea479126f9620707c
msgid "Authentication and Authorization"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth.rst:5
# 6f40cd4351784e5abfe3732442e03dbe
msgid "All communication with the |chef server| must be authenticated using the |api chef server|, which is a REST API that allows requests to made to the |chef server|. Only authenticated requests will be authorized. Most of the time, and especially when using |knife|, the |chef client|, or the |chef server| web interface, the use of the |api chef server| is transparent. In some cases, the use of the |api chef server| requires more detail, such as when making the request in |ruby| code, with a |knife| plugin, or when using |curl|."
msgstr ""

#: ../source/auth.rst:13
# 3ba60c87718941ee8beb8dbfdf3205d7
msgid "Authentication"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:4
# a670899ab6c34b1199a54e999e1f519e
msgid "The authentication process ensures the |chef server| responds only to requests made by trusted users. Public key encryption is used by the |chef server|. When a node and/or a workstation is configured to run the |chef client|, both public and private keys are created. The public key is stored on the |chef server|, while the private key is returned to the user for safe keeping. (The private key is a .pem file located in the ``.chef`` directory or in ``/etc/chef``.)"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:6
# 5652d397eb3341688b69db08e0b6ceb0
msgid "Both the |chef client| and |knife| use the |api chef server| when communicating with the |chef server|. The |chef validator| uses the |api chef server|, but only during the first |chef client| run on a node."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:8
# db705928968b45f8b552157e5abad881
msgid "Each request to the |chef server| from those executables sign a special group of HTTP headers with the private key. The |chef server| then uses the public key to verify the headers and verify the contents."
msgstr ""

#: ../source/auth.rst:17
# 3284d668423247a4883b0427f3ab903f
msgid "|chef validator|"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:5
# ae574802e9df4eab8cf11c97305aa7cc
msgid "Every request made by the |chef client| to the |chef server| must be an authenticated request using the |api chef server| and a private key. When the |chef client| makes a request to the |chef server|, the |chef client| authenticates each request using a private key located in ``/etc/chef/client.pem``."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:7
# dd30ed8f731d4f78b554efd05744f3c2
msgid "However, during the first |chef client| run, this private key does not exist. Instead, the |chef client| will attempt to use the private key assigned to the |chef validator|, located in ``/etc/chef/validation.pem``. (If, for any reason, the |chef validator| is unable to make an authenticated request to the |chef server|, the initial |chef client| run will fail.)"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:9
# 81482b623edc4feaaadf8ad45b579683
msgid "During the initial |chef client| run, the |chef client| will register with the |chef server| using the private key assigned to the |chef validator|, after which the |chef client| will obtain a ``client.pem`` private key for all future authentication requests to the |chef server|."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:11
# ec5fee08cd78496da4df813d966b4e3d
msgid "After the initial |chef client| run has completed successfully, the |chef validator| is no longer required and may be deleted from the node. Use the ``delete_validation`` recipe found in the ``chef-client`` cookbook (https://github.com/opscode-cookbooks/chef-client) to remove the |chef validator|."
msgstr ""

#: ../source/auth.rst:21
# b7c4a6f2029f467c86734730c676b90b
msgid "During a |chef client_title| Run"
msgstr ""

#: ../../includes_security/includes_security_key_pairs_chef_client.rst:5
# 47733887334e478281b6dcd780e214ad
msgid "RSA public key-pairs are used to authenticate the |chef client| with the |chef server| every time a |chef client| needs access to data that is stored on the |chef server|. This prevents any node from accessing data that it shouldn't and it ensures that only nodes that are properly registered with the |chef server| can be managed."
msgstr ""

#: ../source/auth.rst:25
# ca3e8c67245942ee82ebb3e3d1cf2076
msgid "|knife_title|"
msgstr ""

#: ../../includes_security/includes_security_key_pairs_knife.rst:5
# f386897546714197bae6d0f38e98dd7c
msgid "RSA public key-pairs are used to authenticate |knife| with the |chef server| every time |knife| attempts to access the |chef server|. This ensures that each instance of |knife| is properly registered with the |chef server| and that only trusted users can make changes to the data."
msgstr ""

#: ../source/auth.rst:28
# 5252ffdf12014c7894ad7f03c887c3dd
msgid "|knife| can also use the |subcommand knife exec| subcommand to make specific, authenticated requests to the |chef server|. |knife| plugins can also make authenticated requests to the |chef server| by leveraging the |subcommand knife exec| subcommand."
msgstr ""

#: ../source/auth.rst:31
# 1d00a12e7f5b4307bf31875b4d7cfb54
msgid "From the Web Interface"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_webui.rst:5
# 7dc69ec9e3bd40cf818e7f4c54c0a4df
msgid "The |chef server| user interface uses the |api chef server| to perform most operations. This ensures that authentication requests to the |chef server| are authorized. This authentication process is handled automatically and is not something that users of the hosted |chef server| will need to manage. For the on-premises |chef server|, the authentication keys used by the web interface will need to be maintained by the individual administrators who are responsible for managing the server."
msgstr ""

#: ../source/auth.rst:35
# 3e6b19b83ed1460b80f787eda390f7c3
msgid "Other Options"
msgstr ""

#: ../source/auth.rst:36
# aee79d48738941bfb4705afe034e04fc
msgid "The most common ways to interact with the |chef server| using the |api chef server| abstract the API from the user. That said, the |api chef server| can be interacted with directly. The following sections describe a few of the ways that are available for doing that."
msgstr ""

#: ../source/auth.rst:39
# 1f2fa340fed7446c8b10c5ffc8858c51
msgid "|curl|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_curl.rst:5
# 111b5647aaef414e9327e764f7134fcb
msgid "An API request can be made using |curl|, which is a |bash| shell script that requires two utilities: awk and openssl. The following example shows how an authenticated request can be made using the |api chef server| and |curl|:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_curl.rst:87
# 1f4075709e7c4442848680fae06783a8
msgid "After saving this shell script to a file named ``chef_api_request``, use it similar to the following:"
msgstr ""

#: ../source/auth.rst:43
# ba0573629be24d35af79fd880e81666f
msgid "|pychef|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_pychef.rst:5
# 9532df474206448ba23fce6c1642a3c9
msgid "An API request can be made using |pychef|, which is a |python| library that meets the ``Mixlib::Authentication`` requirements so that it can easily interact with the |chef server|. The following example shows how an authenticated request can be made using the |api chef server| and |pychef|:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_pychef.rst:17
# d09dd250ba8b4a64b35f4504f4d13f67
msgid "and the following example shows how to make API calls directly:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_pychef.rst:26
# 0cc9a6184fdf40c581a7ba222f8ef697
msgid "The previous examples assume that the current working directory is such that |pychef| can find a valid configuration file in the same manner as the |chef client| or |knife|. For more about |pychef|, see: https://github.com/coderanger/pychef."
msgstr ""

#: ../source/auth.rst:47
# 0bdfaa24f4b04f7ba15ebef6f98b15ca
msgid "|ruby|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_ruby.rst:5
# 865ee25eae034714a777117bb09ba408
msgid "On a system with the |chef client| installed, use |ruby| to make an authenticated request to the |chef server|:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_ruby.rst:21
# 4c7303687dc2466e842dbdafaa8964c5
msgid "or:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_ruby.rst:108
# 7f47ead824194a1680be2c3e24cec562
msgid "Another way |ruby| can be used with the |api chef server| is to get objects from the |chef server|, and then interact with the returned data using |ruby| methods. Whenever possible, the |api chef server| will return an object of the relevant type. The returned object is then available to be called by other methods. For example, the ``api.get`` method can be used to return a node named \"foobar\", and then ``.destroy`` can be used to delete that node:"
msgstr ""

#: ../source/auth.rst:51
# ff37afc014064c37abd16d8700a02fea
msgid "Debug Authentication Issues"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:5
# bb2c48bb6b854664b9e0ef56d7821121
msgid "In some cases, the |chef client| may receive a 401 response to the authentication request and a 403 response to an authorization request. An authentication error error may look like the following:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:12
# 98ed949796ba4eb894e91dab8ddb71c3
msgid "To debug authentication problems, determine which |chef client| is attempting to authenticate. This is often found in the log messages for that |chef client|. Debug logging can be enabled on a |chef client| using the following command:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:18
# e0829b3e27fb428f9434ef3827af4bc1
msgid "When debug logging is enabled, a log entry will look like the following:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:24
# 1bb3ab43bf084c49a0dbf2280926a11c
msgid "If the authentication request occurs during the initial |chef client| run, the issue is most likely with the private key."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:26
# 1655145c7642476385800b202761ecb4
msgid "If the authentication is happening on the node, there are a number of common causes:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:28
# 6176878028094a75814030959e8f3617
msgid "The ``client.pem`` file is incorrect. This can be fixed by deleting the ``client.pem`` file and re-running the |chef client|. When the |chef client| re-runs, it will re-attempt to register with the |chef server| and generate the correct key."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:29
# 190a4a584f1e49ba9220f97e68cdb270
msgid "A ``node_name`` is different from the one used during the initial |chef client| run. This can happen for a number of reasons. For example, if the |client rb| file does not specify the correct node name and the host name has recently changed. This issue can be resolved by explicitly setting the node name in the |client rb| file or by using the ``-N`` option for the |chef client| executable."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:30
# 79a4eeff654c4247864aaa77550ba2fd
msgid "The system clock has drifted from the actual time by more than 15 minutes. This can be fixed by syncing the clock with an |ntp| server."
msgstr ""

#: ../source/auth.rst:55
# 780babef7e9c4bca926f346165d4e287
msgid "Authorization"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authorization.rst:5
# a549a15e1f14477a92c50b5333303ba1
msgid "The |chef server| uses a role-based access control (RBAC) model to ensure that users may only perform authorized actions."
msgstr ""

#: ../source/auth.rst:59
# 827758c743de4bfe8c8c22163ae0ffce
msgid "|chef server_title|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac.rst:4
# a46419bcee814f2793d3c2e12e3bde58
msgid "The |chef server| uses role-based access control (RBAC) to restrict access to objects---nodes, environments, roles, data bags, cookbooks, and so on. This ensures that only authorized user and/or |chef client| requests to the |chef server| are allowed. Access to objects on the |chef server| is fine-grained, allowing access to be defined by object type, object, group, user, and organization. The |chef server| uses permissions to define how a user may interact with an object, after they have been authorized to do so."
msgstr ""

#: ../source/auth.rst:62
# 23c89b7110084dc09f72554037c8a4d0
msgid "The |chef server| uses organizations, groups, and users to define role-based access control:"
msgstr ""

#: ../source/auth.rst:68
#: ../source/auth.rst:131
# 2fc13c937e024aa69d7b4a501c782348
# a2285f6723ae43a9907117f872e8cabe
msgid "Feature"
msgstr ""

#: ../source/auth.rst:69
#: ../../includes_server_rbac/includes_server_rbac_permissions_object.rst:12
#: ../../includes_server_rbac/includes_server_rbac_permissions_global.rst:12
#: ../../includes_server_rbac/includes_server_rbac_groups_default.rst:11
#: ../source/auth.rst:132
# 43e984d2cbed47939d227d4c6d387d09
# 289085eca6314c739f10c8ef2628a3dd
# cbdfbf144193467087238f7d84ee180c
# 3b905d9058a04321a3f430de69fe0f0e
# 69ebceca7dfd4ba4af522d2648bf8cf7
msgid "Description"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_orgs.rst:4
# 66aa79aaf6a243bd98ffbe083d3b97b5
msgid "An organization is the top-level entity for role-based access control in the |chef server|. Each organization contains the default groups (|webui group admins|, |webui group clients|, and |webui group users|, plus |webui group billing| for the hosted |chef server|), at least one user and at least one node (on which the |chef client| is installed). The |chef server| supports multiple organizations. The |chef server| includes a single default organization that is defined during setup. Additional organizations can be created after the initial setup and configuration of the |chef server|."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_groups.rst:4
# e683c1e4a83b4b5c9fc0415a5c609e15
msgid "A group is used to define access to object types and objects in the |chef server| and also to assign permissions that determine what types of tasks are available to members of that group who are authorized to perform them. Groups are configured per-organization."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_groups.rst:6
# 39e3261a78a64ca49a13ab3d31a6b6a9
msgid "Individual users who are members of a group will inherit the permissions assigned to the group. The |chef server| includes the following default groups: |webui group admins|, |webui group clients|, and |webui group users|. For users of the hosted |chef server|, an additional default group is provided: |webui group billing|."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_users.rst:4
# 6da8c74ca6ab44b3a1d51875480e9c0a
msgid "A user is any non-administrator human being who will manage data that is uploaded to the |chef server| from a workstation or who will log on to the |webui| web user interface. The |chef server| includes a single default user that is defined during setup and is automatically assigned to the |webui group admins| group."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_clients.rst:4
#: ../../includes_server_rbac/includes_server_rbac_clients.rst:4
# 0239167495404b168cc69c57d04dd2b2
# 54c7a2cdaeb74b58a3db9f1726915d1c
msgid "A client is an actor that has permission to access the |chef server|. A client is most often a node (on which the |chef client| runs), but is also a workstation (on which |knife| runs), or some other machine that is configured to use the |api chef server|. Each request to the |chef server| that is made by a client uses a private key for authentication that must be authorized by the public key on the |chef server|."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_workflow.rst:5
# 14aa1ddb424c45dda3410e069b2c012a
msgid "When a user makes a request to the |chef server| using the |api chef server|, permission to perform that action is determined by the following process:"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_workflow.rst:7
# 3292ddcc18bf469f9d3e53a547f4fc1d
msgid "Check if the user has permission to the object type"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_workflow.rst:8
# 2909ccc935624eaab952a32b187195c9
msgid "If no, recursively check if the user is a member of a security group that has permission to that object"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_workflow.rst:9
# 67193e1271b24069b9753a2c6d8149d0
msgid "If yes, allow the user to perform the action"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_workflow.rst:11
# f5c9b9791287472d9d92b712a864c3fa
msgid "Permissions are managed using the |chef manage| add-on in the |chef server| web user interface."
msgstr ""

#: ../source/auth.rst:82
# 29529c2de4214b65bdb60b5a00b7670d
msgid "Object Permissions"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_object.rst:5
# ea58b5e1adbb4db7bcebd523bfdcea91
msgid "The |chef server| includes the following object permissions:"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_object.rst:11
#: ../../includes_server_rbac/includes_server_rbac_permissions_global.rst:11
# 3318e54494f74abe9676bbfe611e683b
# 08d7848936e34cfaaa2151de36b085a9
msgid "Permission"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_object.rst:13
# a31e6037f69e450fa54c2747b80de71e
msgid "|webui permission delete|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_object.rst:14
# e3cb4c475d004d599f027f1161f61c7e
msgid "|permission delete| This permission is required for any user who uses the ``knife [object] delete [object_name]`` argument to interact with objects on the |chef server|."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_object.rst:15
# a011c8b76b7147859e0a92ae03749711
msgid "|webui permission grant|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_object.rst:16
# b10afdef599c40cbaaa585cdd12f4edf
msgid "|permission grant| This permission is required for any user who configures permissions using the |webui admin| tab in the |webui| user interface."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_object.rst:17
# 77f4a3d672f64f91be2e2f361ecf9a48
msgid "|webui permission read|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_object.rst:18
# fdce1ab7f8f04b648a361ce630eb99a1
msgid "|permission read| This permission is required for any user who uses the ``knife [object] show [object_name]`` argument to interact with objects on the |chef server|."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_object.rst:19
# cd7e5e35a8644a3fb33a01299dbfe629
msgid "|webui permission update|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_object.rst:20
# 5a976769ba3246caa1c6bffba83167f7
msgid "|permission update| This permission is required for any user who uses the ``knife [object] edit [object_name]`` argument to interact with objects on the |chef server| and for any |chef client| to save node data to the |chef server| at the conclusion of a |chef client| run."
msgstr ""

#: ../source/auth.rst:86
# 4a59d583792f4189bf9a3e88bd00efb3
msgid "Global Permissions"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_global.rst:5
# ffb93e93f0c548299351783439fa3a72
msgid "The |chef server| includes the following global permissions:"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_global.rst:13
# df9d54c3d9e7496e8f25f00f4187a8a5
msgid "|webui permission create|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_global.rst:14
# 1787ac6fbf9a4b3b9acbde64f0021484
msgid "|permission create| This permission is required for any user who uses the ``knife [object] create`` argument to interact with objects on the |chef server|."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_global.rst:15
# 2699643be4f04022b3eaadbb328f7454
msgid "|webui permission list|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_global.rst:16
# 02722aef93fe481ca7dfc3430164597d
msgid "|permission list| This permission is required for any user who uses the ``knife [object] list`` argument to interact with objects on the |chef server|."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_global.rst:18
# af0e620b7825408f8a3fbe9804197973
msgid "These permissions set the default permissions for the following |chef server| object types: clients, cookbooks, data bags, environments, groups, nodes, roles, and sandboxes."
msgstr ""

#: ../source/auth.rst:90
# af2275984f734f21911b3dbaad4433fa
msgid "Client Key Permissions"
msgstr ""

#: ../source/auth.rst:91
# 9e7056e129c242758786fb086f66553f
msgid "This is only necessary after migrating a client from one |chef server| to another. Permissions must be reset for client keys after the migration."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_key.rst:5
# f118da939ad94d93b33fedaa4e9a7e5c
msgid "Keys should have ``DELETE``, ``GRANT``, ``READ`` and ``UPDATE`` permissions."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_key.rst:7
# 3362b2e6773e46e1aa3c7ee5714bc351
msgid "Use the following code to set the correct permissions:"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_permissions_key.rst:28
# d37e1c7246134ab7a23298f327ac6565
msgid "Save it as a |ruby| script---``chef_server_permissions.rb``, for example---in the ``.chef/scripts`` directory located in the |chef repo|, and then run a |knife| command similar to:"
msgstr ""

#: ../source/auth.rst:98
# 733ab7075e154d268302a0416daf0340
msgid "Default Groups"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_groups_default.rst:4
# d1d8bae39c00463daccd4e65021f547c
msgid "The |chef server| includes the following default groups:"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_groups_default.rst:10
# 718083348b1245d2b2f7ab26266e512d
msgid "Group"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_groups_default.rst:12
# a5e3c54e22254a75be97f1a92df91559
msgid "|webui group admins|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_groups_default.rst:13
# 6e9d4dcb6d014e28abb1bd60b5248ee8
msgid "|group default_admins|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_groups_default.rst:14
# 128dd30126374e109054eb010ff252ac
msgid "|webui group billing|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_groups_default.rst:15
# 1f1c4586e46d4716bbccfb8da47e0be8
msgid "|group default_billing_admins|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_groups_default.rst:16
# 79b853e40b124c7b83dda6f41962a27d
msgid "|webui group clients|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_groups_default.rst:17
# ef222b31016346ff813ca1f71d3fce41
msgid "|group default_clients|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_groups_default.rst:18
# f85ac52d81b74f71abf62b2e94741c3b
msgid "|webui group users|"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_groups_default.rst:19
# a61c90341fa04d8588b80edd7ac4a00c
msgid "|group default_users|"
msgstr ""

#: ../source/auth.rst:102
# fa3f2cf79bcc47188c9b353859f18528
msgid "Multiple Organizations"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_orgs_multi.rst:4
# 56c2d3ffc9ed4063828cf2f51f5bb0cc
msgid "A single instance of the |chef server| can support many organizations. Each organization has a unique set of groups and users. Each organization manages a unique set of nodes, on which a |chef client| is installed and configured so that it may interact with a single organization on the |chef server|."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_orgs_multi.rst:8
# 562cad2296ab493d871ba1a60788c830
msgid "A user may belong to multiple organizations under the following conditions:"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_orgs_multi.rst:10
# f3ccff962282498cb35c729998a32ba6
msgid "Role-based access control is configured per-organization"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_orgs_multi.rst:11
# ab4536ac49e340528fc7ecc465a29d88
msgid "For a single user to interact with the |chef server| using |knife| from the same |chef repo|, that user may need to edit their |knife rb| file prior to that interaction"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_orgs_multi_use.rst:4
# 17a4997a18644a0aa5fa66e83bf8046c
msgid "Using multiple organizations within the |chef server| ensures that the same toolset, coding patterns and practices, physical hardware, and product support effort is being applied across the entire company, even when:"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_orgs_multi_use.rst:6
# 857bd77743744155b1cc92f27d3d7c46
msgid "Multiple product groups must be supported---each product group can have its own security requirements, schedule, and goals"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_orgs_multi_use.rst:7
# 561b57abbfc84447ad874f11401131f6
msgid "Updates occur on different schedules---the nodes in one organization are managed completely independently from the nodes in another"
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac_orgs_multi_use.rst:8
# b3c59faed3624df19ce7ce0b7e409ff9
msgid "Individual teams have competing needs for object and object types---data bags, environments, roles, and cookbooks are unique to each organization, even if they share the same name"
msgstr ""

#: ../source/auth.rst:108
# 85c6a68d4d86441e9d15f632216152dc
msgid "Many Users, Same Repo"
msgstr ""

#: ../../includes_chef_repo/includes_chef_repo_many_users_same_repo.rst:5
# 4c9cf249627e4345bccaa7a6f2a7d70f
msgid "It is possible for multiple users to access the |chef server| using the same |knife rb| file. (A user can even access multiple organizations if, for example, each instance of the |chef repo| contained the same copy of the |knife rb| file.) This can be done by adding the |knife rb| file to the |chef repo|, and then using environment variables to handle the user-specific credential details and/or sensitive values. For example:"
msgstr ""

#: ../source/auth.rst:112
# 2885806eaaa44e7fa486bf5e9a7ee5b6
msgid "|api chef server|"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server.rst:4
# 9f65ecd3cbed495999f6d57fbc13fff2
msgid "The |api chef server| is a REST API that provides access to objects on the |chef server|, including nodes, environments, roles, cookbooks (and cookbook versions), and to manage an |chef api client| list and the associated RSA public key-pairs."
msgstr ""

#: ../source/auth.rst:116
# d4a5755695e241079c541794d366a935
msgid "Authentication Headers"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers.rst:4
# 489db8ffb9de4b918c344a99ba0de0e3
msgid "Authentication to the |chef server| occurs when a specific set of HTTP headers are signed using a private key that is associated with the machine from which the request is made. The request is authorized if the |chef server| can verify the signature using the public key. Only authorized actions are allowed."
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers.rst:6
# c505e4f65965449cb1e962d4ef53e0c2
msgid "Most authentication requests made to the |chef server| are abstracted from the user. Such as when using |knife| or the |chef server| user interface. In some cases, such as when using the |subcommand knife exec| subcommand, the authentication requests need to be made more explicitly, but still in a way that does not require authentication headers. In a few cases, such as when using arbitrary |ruby| code or |curl|, it may be necessary to include the full authentication header as part of the request to the |chef server|."
msgstr ""

#: ../source/auth.rst:120
# 3195153950554cdba9e504b6497d4bf0
msgid "Header Format"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_format.rst:5
# 9444022ba5864c11b9e5de7ec04eab74
msgid "All hashing is done using |sha1| and encoded in |base64|. |base64| encoding should have line breaks every 60 characters. Each canonical header should be encoded in the following format:"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_format.rst:15
# 190627b6704f4f22961ecca7c7be7e0c
msgid "where:"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_format.rst:17
# c80d3a54e4114aeebc3f8a475675249e
msgid "``HTTP_METHOD`` is the method used in the API request (``GET``, ``POST``, and so on)"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_format.rst:18
# e4928384b84c4715acb5622dd27812a4
msgid "``HASHED_PATH`` is the path of the request: ``/organizations/NAME/name_of_endpoint``. The ``HASHED_PATH`` must be hashed using |sha1| and encoded using |base64|, must not have repeated forward slashes (``/``), must not end in a forward slash (unless the path is ``/``), and must not include a query string."
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_format.rst:19
# 54936ee6274f47b69d17ddfadabf03c8
msgid "The private key must be an RSA key in the SSL .pem file format. This signature is then broken into character strings (of not more than 60 characters per line) and placed in the header."
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_format.rst:21
# 2317beeb09bb4d0ba53e4b23111b5ed2
msgid "The |chef server| decrypts this header and ensures its content matches the content of the non-encrypted headers that were in the request. The timestamp of the message is checked to ensure the request was received within a reasonable amount of time. One approach generating the signed headers is to use `mixlib-authentication <https://github.com/chef/mixlib-authentication>`_, which is a class-based header signing authentication object similar to the one used by the |chef client|."
msgstr ""

#: ../source/auth.rst:124
# 43c81149e382401996799d1848dcb8d7
msgid "Required Headers"
msgstr ""

#: ../source/auth.rst:125
# 3b5258c4ce1641b68aefc0577e942728
msgid "The following authentication headers are required:"
msgstr ""

#: ../source/auth.rst:133
# 6c3f43963f41496e8e8f5cba44047b96
msgid "``Accept``"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_accept.rst:4
# 3deb3629c00c4bf3a17e44ef813c9771
msgid "The format in which response data from the |chef server| is provided. This header must be set to ``application/json``."
msgstr ""

#: ../source/auth.rst:135
# 7539336d0b504069a0367641e26aa576
msgid "``Host``"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_host.rst:5
# 30e646427bc54d4b863dae470aef5ce9
msgid "The host name (and port number) to which a request is sent. (Port number ``80`` does not need to be specified.) For example: ``api.opscode.com`` (which is the same as ``api.opscode.com:80``) or ``api.opscode.com:443``."
msgstr ""

#: ../source/auth.rst:137
# 4161366e16e746f38aa36df87f8cf86f
msgid "``X-Chef-Version``"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_x_chef_version.rst:5
# 88f57410cf4148d48ede121a29fa7bdc
msgid "The version of the |chef client| executable from which a request is made. This header ensures that responses are in the correct format. For example: ``12.0.2`` or ``11.16.x``."
msgstr ""

#: ../source/auth.rst:139
# 834ecf3a702e4f8ebb5fce2ef84c7c66
msgid "``X-Ops-Authorization-N``"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_x_ops_authorization.rst:5
# edb1cb284d5245289b85183ee12543a2
msgid "One (or more) 60 character segments that comprise the canonical header. A canonical header is signed with the private key used by the client machine from which the request is sent, and is also encoded using |base64|. If more than one segment is required, each should be named sequentially, e.g. ``X-Ops-Authorization-1``, ``X-Ops-Authorization-2``, ``X-Ops-Authorization-N``, where ``N`` represents the integer used by the last header that is part of the request."
msgstr ""

#: ../source/auth.rst:141
# c480b90fbd544fda9e79f9bc00f4786d
msgid "``X-Ops-Content-Hash``"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_x_ops_content_hash.rst:5
# 0136e136398942ee92164b9f418ce149
msgid "The body of the request. The body should be hashed using |sha1| and encoded using |base64|. All hashing is done using |sha1| and encoded in |base64|. |base64| encoding should have line breaks every 60 characters."
msgstr ""

#: ../source/auth.rst:143
# 3efa0d0cb97e48b8b4d2db24bf4e0f2f
msgid "``X-Ops-Sign``"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_x_ops_sign.rst:5
# 95880370224e4ff8a27dfb6fc4e59d4e
msgid "Set this header to the following value: ``version=1.0``."
msgstr ""

#: ../source/auth.rst:145
# 9fe9fa15847e46129933b2006ae129ef
msgid "``X-Ops-Timestamp``"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_x_ops_timestamp.rst:5
# c97936307b3a480e92a61d4bccbbe809
msgid "The timestamp, in |iso 8601| format and with |utc| indicated by a trailing ``Z`` and separated by the character ``T``. For example: ``2013-03-10T14:14:44Z``."
msgstr ""

#: ../source/auth.rst:147
# 805d8c1adf8e480893b6530808643bb5
msgid "``X-Ops-UserId``"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_x_ops_userid.rst:5
# 62114aad81aa45fb958254395cc2a608
msgid "The name of the |chef api client| whose private key will be used to create the authorization header."
msgstr ""

#: ../source/auth.rst:151
# b5b3e8d1612f4912a29bbd35afa17329
msgid "Example"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_headers_example.rst:5
# 152597af66dc4db7afd33aeec9e94664
msgid "The following example shows an authentication request:"
msgstr ""

#: ../source/auth.rst:155
# 046ebb16025d4021be888f4cd72bf18e
msgid "Endpoints"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_endpoints.rst:4
# 5a54401b97d346349ab06435ace4b60e
msgid "Each organization-specific authentication request must include ``/organizations/NAME`` as part of the name for the endpoint. For example, the full endpoint for getting a list of roles:"
msgstr ""

#: ../../includes_api_chef_server/includes_api_chef_server_endpoints.rst:10
# 5d83396937c44b4fac80d211cf919f5a
msgid "where ``ORG_NAME`` is the name of the organization."
msgstr ""

#: ../source/auth.rst:158
# 4775c5038ae6438cbf2a2bdd8f55dd6c
msgid "For more information about the |api chef server| endpoints see :doc:`api_chef_server`."
msgstr ""

