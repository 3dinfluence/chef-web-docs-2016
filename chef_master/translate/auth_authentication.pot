# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-12 00:21\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/auth_authentication.rst:33
# 5a46c244087e47a78c93712f8d5a8299
msgid "Authentication"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:4
# 0dedb6133209433e87a95e96b552cb73
msgid "The authentication process ensures the |chef server| responds only to requests made by trusted users. A public key encryption is used for all server types: |chef hosted|, |chef private|, and the open source |chef server|. When a node and/or a workstation is configured to run the |chef client|, both public and private keys are created. The public key is stored on the |chef server|, while the private key is returned to the user for safe keeping. (The private key is a .pem file located in the ``.chef`` directory or in ``/etc/chef``.) The following executables use the |api chef server| when communicating with the |chef server|:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:6
# 9a92f898c28547a7a1fc7697502797c9
msgid "|chef client|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:7
# c76434e9bb3942c0bc3bc1a0f6d5cb80
msgid "|knife|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:8
# a5026aad8c984e6eb376e7611cc85257
msgid "|chef validator| (only during the first |chef client| run on a node)"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:10
# 617f8c5216be4830aaa8329237bdbe5e
msgid "Each request to the |chef server| from those executables encrypts a special group of HTTP headers along with the private key. The |chef server| then uses the public key to decrypt the headers and verify the contents."
msgstr ""

#: ../source/auth_authentication.rst:38
# 32827c8caaa1448d944d0ce17df33684
msgid "|chef validator|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_chef_validator.rst:5
# 567c50d1a7724f3086ae1f1a8aa99d00
msgid "Every request from the |chef client| to the |chef server| must be an authenticated request using the |api chef server|. When the |chef client| starts a |chef client| run, a check is done to see if the client key exists on the node at ``/etc/chef/client.pem``. If the key exists, it is used as part of the authentication request to the |chef server|. If the key does not exist, the |chef client| will use the key assigned to the |chef validator| (``/etc/chef/validation.pem``) to ensure that each node can make an authenticated request to the |chef server| during its first |chef client| run. The key pair used by the |chef validator| is created when the |chef client| is installed on a node, either manually or using a |knife| bootstrap operation. If the |chef validator| is unable to make an authentication request to the |chef server|, the |chef client| run fails."
msgstr ""

#: ../source/auth_authentication.rst:42
# 01f19a0a8a874cf89897a6fb8dc1361a
msgid "During a |chef client| Run"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_chef_run.rst:5
# 29767865ea8d45a89bdff26133f27733
msgid "As part of `every chef-client run <http://docs.opscode.com/essentials_nodes_chef_run.html>`_, the |chef client| authenticates to the |chef server| using an RSA private key and the |api chef server|."
msgstr ""

#: ../source/auth_authentication.rst:46
# a590159a350141889b290f5897da461c
msgid "From the Web Interface"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_webui.rst:5
# 4f01b53a8d1e433a9b8381bb57f8ff06
msgid "The |chef server| user interface uses the |api chef server| to perform most operations. This ensures that authentication requests to the |chef server| are authorized. This authentication process is handled automatically and is not something that users of |chef hosted| or the open source |chef server| will need to manage. For |chef private|, the authentication keys used by the web interface will need to be maintained by the individual administrators who are responsible for managing the server."
msgstr ""

#: ../source/auth_authentication.rst:50
# 86dade7c637b4d249208dbe37b3a3cf9
msgid "knife exec"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:5
# 8b0308176539455a8382ed57db3332e4
msgid "The ``knife exec`` subcommand can be used to make authenticated API requests to the |chef server| using the following methods:"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:11
#: ../../includes_plugin_knife/includes_plugin_knife_using_authenticated_requests.rst:11
# fd48de74232e4276999901d99830c93c
# 95f8d6e83f754e13ad69ab00b1b5ee3f
msgid "Method"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:12
#: ../../includes_plugin_knife/includes_plugin_knife_using_authenticated_requests.rst:12
# d5d6917ddb864f148eedab16368f8ad6
# e7627018b74246bea32805ca8724a2bc
msgid "Description"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:13
# a01c0e7951ce44b894b6e2a21f5dc486
msgid "``api.delete``"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:14
#: ../../includes_plugin_knife/includes_plugin_knife_using_authenticated_requests.rst:14
# 48da6fb2e65f4648998b9702e5773ce0
# 647573573f2a4dd3bc8afbd8bd9417dd
msgid "Use to delete an object from the |chef server|."
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:15
# eecc4e00e3ad4d50994df9552740131a
msgid "``api.get``"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:16
#: ../../includes_plugin_knife/includes_plugin_knife_using_authenticated_requests.rst:16
# 6d297188d6fe48fa8673c91f97b38683
# 714c0857f2e449e5a43fcae3b740785e
msgid "Use to get the details of an object on the |chef server|."
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:17
# 929496396c394f15b79689972808b9bf
msgid "``api.post``"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:18
#: ../../includes_plugin_knife/includes_plugin_knife_using_authenticated_requests.rst:18
# 95c261f60cab43c5844ba5b314170c20
# bf67b82e5d6845e1ac0989298a82bcde
msgid "Use to add an object to the |chef server|."
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:19
# cc420a7b85d141f7a48c1e3cea096e9c
msgid "``api.put``"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:20
#: ../../includes_plugin_knife/includes_plugin_knife_using_authenticated_requests.rst:20
# ec2bacfaa5f443198d759d5db5103506
# 4d3a6996134a4adc9123f89a3f68ab2b
msgid "Use to update an object on the |chef server|."
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:22
# ea8bf1ff941a4fe0862768eb3c37b260
msgid "These methods are used with the ``-E`` option, which executes that string locally on the workstation using |chef shell|. These methods have the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:28
# 1373968fb048445791ab62f02ee2ccfa
msgid "where:"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:30
# 1204af830eaa42009aa7314f00ab98d9
msgid "``api.method`` is the corresponding authentication method --- ``api.delete``, ``api.get``, ``api.post``, or ``api.put``"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:31
# 549b35b7df044a97b93310ef14d9b656
msgid "``/endpoint`` is an endpoint in the |api chef server|"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:33
# fac5e97c874641149bd175329600906a
msgid "For example, to get the data for a node named \"Example_Node\":"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:39
# 51651a8f3fea437886fd32b8baceba00
msgid "and to ensure that the output is visible in the console, add the ``puts`` in front of the API authorization request:"
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:45
# 352a21d0398548e4aed2926a0de6f1a3
msgid "where ``puts`` is the shorter version of the ``$stdout.puts`` predefined variable in |ruby|."
msgstr ""

#: ../../includes_knife/includes_knife_exec_authenticated_api_requests.rst:47
# 99dec499b2034e47841d9c09c7891826
msgid "The following example shows how to add a client named \"IBM305RAMAC\" and the ``/clients`` endpoint, and then return the private key for that user in the console:"
msgstr ""

#: ../source/auth_authentication.rst:54
# 30503dcc39224636bd8c6308ed443e49
msgid "|knife| Plugins"
msgstr ""

#: ../../includes_plugin_knife/includes_plugin_knife_using_authenticated_requests.rst:5
# 54ef8ce6e783467fb5559ba56f21903a
msgid "A |knife| plugin can be used to make authenticated API requests to the |chef server| using the following methods:"
msgstr ""

#: ../../includes_plugin_knife/includes_plugin_knife_using_authenticated_requests.rst:13
# 243950651352451584b39cce0b61e34c
msgid "``rest.delete_rest``"
msgstr ""

#: ../../includes_plugin_knife/includes_plugin_knife_using_authenticated_requests.rst:15
# 3737eb6774ab4ecdad1912f9262f7d58
msgid "``rest.get_rest``"
msgstr ""

#: ../../includes_plugin_knife/includes_plugin_knife_using_authenticated_requests.rst:17
# 7c49c7947b8f4741a6419dbe31c6d97d
msgid "``rest.post_rest``"
msgstr ""

#: ../../includes_plugin_knife/includes_plugin_knife_using_authenticated_requests.rst:19
# 7144c8b2d22f4080ac09d37623086347
msgid "``rest.put_rest``"
msgstr ""

#: ../../includes_plugin_knife/includes_plugin_knife_using_authenticated_requests.rst:22
# 29a003dbb72f49d4b70fcfa9c4dcb36e
msgid "For example:"
msgstr ""

#: ../source/auth_authentication.rst:58
# 7dfe027fb2014509a95aad8bdecd4bb2
msgid "Other Options"
msgstr ""

#: ../source/auth_authentication.rst:59
# 9be2fd791579403cb407f8f8e17532fb
msgid "The most common ways to interact with the |chef server| using the |api chef server| abstract the API from the user. That said, the |api chef server| can be interacted with directly. The following sections describe a few of the ways that are available for doing that."
msgstr ""

#: ../source/auth_authentication.rst:62
# a14679c5d07f4437a30b944f40c36be5
msgid "|curl|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_curl.rst:5
# 622d5c678da54fe2aaa1d928568fdb40
msgid "An API request can be made using |curl|, which is a |bash| shell script that requires two utilities: awk and openssl. The following example shows how an authenticated request can be made using the |api chef server| and |curl|:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_curl.rst:87
# 5a3c61ab87df4360b18af119057acf6f
msgid "After saving this shell script to a file named ``chef_api_request``, use it similar to the following:"
msgstr ""

#: ../source/auth_authentication.rst:66
# 3a59cf89fbe84dc3b09cf42baffdaf4b
msgid "|pychef|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_pychef.rst:5
# bdf85c320bb74a628fb032e9dbecf2fa
msgid "An API request can be made using |pychef|, which is a |python| library that meets the ``Mixlib::Authentication`` requirements so that it can easily interact with the |chef server|. The following example shows how an authenticated request can be made using the |api chef server| and |pychef|:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_pychef.rst:17
# 1f3f30ebaaf043ba9bb339c35038d56f
msgid "and the following example shows how to make API calls directly:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_pychef.rst:26
# 1100f380abf744068c9efed65ecf1d2c
msgid "The previous examples assume that the current working directory is such that |pychef| can find a valid configuration file in the same manner as the |chef client| or |knife|. For more about |pychef|, see: https://github.com/coderanger/pychef."
msgstr ""

#: ../source/auth_authentication.rst:70
# 9966212623af4fd58f66a0426dea7feb
msgid "|ruby|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_ruby.rst:5
# 0a28a373b7e347fba908b2a2dafbd3ae
msgid "On a system with the |chef client| installed, use |ruby| to make an authenticated request to the |chef server|:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_ruby.rst:21
# 24515b6678c3470a8180196d7a95a824
msgid "or:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_ruby.rst:108
# f36455e48eda4a6493c844e71d001387
msgid "Another way |ruby| can be used with the |api chef server| is to get objects from the |chef server|, and then interact with the returned data using |ruby| methods. Whenever possible, the |api chef server| will return an object of the relevant type. The returned object is then available to be called by other methods. For example, the ``api.get`` method can be used to return a node named \"foobar\", and then ``.destroy`` can be used to delete that node:"
msgstr ""

#: ../source/auth_authentication.rst:74
# f8f4cbd8f9df48faacddd2dfe4cabeaa
msgid "Debug Authentication Issues"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:5
# f163d31d1a384f6498ea4a5bb46bb825
msgid "In some cases, the |chef client| may receive a 401 response to the authentication request and a 403 response to an authorization request. An authentication error error may look like the following:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:12
# 3ebf6d5b2bd34f3ca88a9a162925e7c6
msgid "To debug authentication problems, determine which |chef client| is attempting to authenticate. This is often found in the log messages for that |chef client|. Debug logging can be enabled on a |chef client| using the following command:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:18
# 3d7eb2fcfabb45fe8292fe18ae923529
msgid "When debug logging is enabled, a log entry will look like the following:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:24
# 38d41a0f0c5843b0a5fe4633d1e0d45e
msgid "If the authentication request occurs during the initial |chef client| run, the issue is most likely with the private key."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:26
# f961aeffa7984f719e75e5c449b5126c
msgid "If the authentication is happening on the node, there are a number of common causes:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:28
# d308f7aae5174328b972a0d489f0ca0f
msgid "The ``client.pem`` file is incorrect. This can be fixed by deleting the ``client.pem`` file and re-running the |chef client|. When the |chef client| re-runs, it will re-attempt to register with the |chef server| and generate the correct key."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:29
# 219601a793b54c11b0a27d2bdd56f4e4
msgid "A ``node_name`` is different from the one used during the initial |chef client| run. This can happen for a number of reasons. For example, if the |client rb| file does not specify the correct node name and the host name has recently changed. This issue can be resolved by explicitly setting the node name in the |client rb| file or by using the ``-N`` option for the |chef client| executable."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:30
# 3ef9cc2fce914d459d96622b33965d8d
msgid "The system clock has drifted from the actual time by more than 15 minutes. This can be fixed by syncing the clock with an |ntp| server."
msgstr ""

