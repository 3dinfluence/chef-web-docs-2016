# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-03-21 17:35\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/auth_authentication.rst:34
# a006f33421e74d4f9aec80de22543faa
msgid "Authentication"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:5
# 7c0edae8fc4a4c4da1861e6e0d76927e
msgid "The authentication process ensures that requests to the |chef server| are made only by authorized users. |chef| uses public key encryption for all server types: |chef hosted|, |chef private|, and the open source |chef server|. When a node and/or a workstation is configured to run |chef|, both public and private keys are created. The public key is stored on the |chef server|, while the private key is returned to the user for safe keeping. (The private key is a .pem file located in the .chef directory or in /etc/chef.) The following executables use the |api chef server| when communicating with the |chef server|:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:7
# 3e22a706e75a46b6b2bff67572d79800
msgid "|chef client|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:8
# d3f9d1130b424a65b5cf11176bc7bac5
msgid "|knife|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:9
# 65e13d9feaf3402aa47c5cb926b8517f
msgid "|chef validator| (only during the first |chef| run on a node)"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:11
# de17584be4a5438aa218ab53d8c300f4
msgid "Each request to the |chef server| from those executables encrypts a special group of HTTP headers along with the private key. The |chef server| then uses the public key to decrypt the headers and verify the contents."
msgstr ""

#: ../source/auth_authentication.rst:39
# 91e9b6887b82427e9f5d3460454e46bd
msgid "|chef validator|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_chef_validator.rst:5
# 339ff26cf81c4c808c473a09c0f9a86d
msgid "Every request from the |chef client| to the |chef server| must be an authenticated request using the |api chef server|. When the |chef client| starts a |chef| run, a check is done to see if the client key exists on the node at ``/etc/chef/client.pem``. If the key exists, it is used as part of the authentication request to the |chef server|. If the key does not exist, |chef| will use the key assigned to the |chef validator| (``/etc/chef/validation.pem``) to ensure that each node can make an authenticated request to the |chef server| during its first |chef| run. The key pair used by the |chef validator| is created when |chef| is installed on a node, either manually or using a |knife| bootstrap operation. If the |chef validator| is unable to make an authentication request to the |chef server|, the |chef| run fails."
msgstr ""

#: ../source/auth_authentication.rst:43
# e044c88f31ff40a082c628b3cde8528b
msgid "During a |chef| Run"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_chef_run.rst:5
# e752ec5a90cb44faa88ee05434608198
msgid "As part of `every Chef run <http://docs.opscode.com/essentials_nodes_chef_run.html>`_, the |chef client| authenticates to the |chef server| using an RSA private key and the |api chef server|."
msgstr ""

#: ../source/auth_authentication.rst:47
# 0881568214d34bb4a0c6d34b9fc26a68
msgid "From the Web Interface"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_webui.rst:5
# 92e3e4504d0449b5ba97cad17158603b
msgid "The |chef server| user interface uses the |api chef server| to perform most operations. This ensures that authentication requests to the |chef server| are authorized. This authentication process is handled automatically and is not something that users of |chef hosted| or the open source |chef server| will need to manage. For |chef private|, the authentication keys used by the web interface will need to be maintained by the individual administrators who are responsible for managing the server."
msgstr ""

#: ../source/auth_authentication.rst:51
# 05648776cabf4f5e9dbe00e00b3a592b
msgid "knife exec"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:5
# a32a85881cf341d0a058e7c550d9315c
msgid "The ``knife exec`` subcommand can be used to make authenticated API requests to the |chef server| using the following methods:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:11
#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_plugins.rst:11
# d18e896df189433f84d41b5ba1872ea5
# 9820681ea97b4522afca48dbb544621c
msgid "Method"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:12
#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_plugins.rst:12
# a30880236adc4b31ac991c1023336ac0
# 5066d9d302374988a221f12f5a535c23
msgid "Description"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:13
# be4df21aba9d488cac5356228ee2e900
msgid "``api.delete``"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:14
#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_plugins.rst:14
# c017262ea96f4319a1879fc995e8e7ee
# 2793699438444917ac72adf7e68a7945
msgid "Use to delete an object from the |chef server|."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:15
# eba87201b1884427bd154ec5facedd37
msgid "``api.get``"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:16
#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_plugins.rst:16
# 893c6520f5e54f218db9bb63e4b849aa
# 56e5b69b270842778e4aeebbc4c2b5b9
msgid "Use to get the details of an object on the |chef server|."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:17
# c5319359296a4558a0606058cd6755cd
msgid "``api.post``"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:18
#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_plugins.rst:18
# d0c96485bc824f2388b7e24b140f0bcc
# f5d1de0f77464237b74231e660f0b98e
msgid "Use to add an object to the |chef server|."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:19
# 750a09d097fe41dd9b75063692baf2e5
msgid "``api.put``"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:20
#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_plugins.rst:20
# 08b39152283347719520ce9e2b5ec8a2
# f0393e85e3d44d259573168a7db553b6
msgid "Use to update an object on the |chef server|."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:22
# dee159d31ed348f6a3297c9a55b5eebc
msgid "These methods are used with the ``-E`` option, which executes that string locally on the workstation using |chef shell|. These methods have the following syntax:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:28
# 702c7d48a5024d4d94801e73cbb4127b
msgid "where:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:30
# 38138e681b3246aba05c5a4fb86a1c33
msgid "``api.method`` is the corresponding authentication method --- ``api.delete``, ``api.get``, ``api.post``, or ``api.put``"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:31
# e0907144566e43848c67ef23b5e0431c
msgid "``/endpoint`` is an endpoint in the |api chef server|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:33
# f0457fe018bc4249a96a003216da7653
msgid "For example, to get the data for a node named \"Example_Node\":"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:39
# 41bffe7b3d3e40ea9a08d08f51be98e5
msgid "and to ensure that the output is visible in the console, add the ``puts`` in front of the API authorization request:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:45
# 722a26fd38cd4c04815bee2cab13cc52
msgid "where ``puts`` is the shorter version of the ``$stdout.puts`` predefined variable in |ruby|."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_exec.rst:48
# baff2007af20439eb67c02f122038119
msgid "The following example shows how to add a client named \"monkeypants\" and the ``/clients`` endpoint, and then return the private key for that user in the console:"
msgstr ""

#: ../source/auth_authentication.rst:55
# 5503f1c67b484da6a681ebbf819d02b7
msgid "|knife| Plugins"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_plugins.rst:5
# 1a2fbe5470764381a15b27de615268fb
msgid "A |knife| plugin can be used to make authenticated API requests to the |chef server| using the following methods:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_plugins.rst:13
# 2fb11d5f618346ff851a20b8aee79a28
msgid "``rest.delete_rest``"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_plugins.rst:15
# 97bfd03cd3fc423581637772625b5637
msgid "``rest.get_rest``"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_plugins.rst:17
# 6fd17d029d6b4c988b8db720b5297769
msgid "``rest.post_rest``"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_plugins.rst:19
# ecdbc1bb2f3342398b1525ce2148d14e
msgid "``rest.put_rest``"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_knife_plugins.rst:22
# 610e9c7192de4c2dbdea2ee469b8f4ba
msgid "For example:"
msgstr ""

#: ../source/auth_authentication.rst:59
# 341515802da84f349ed256fb67721b9e
msgid "Other Options"
msgstr ""

#: ../source/auth_authentication.rst:60
# 5209db6ccb994f869df1d2367b1d84f8
msgid "The most common ways to interact with the |chef server| using the |api chef server| abstract the API from the user. That said, the |api chef server| can be interacted with directly. The following sections describe a few of the ways that are available for doing that."
msgstr ""

#: ../source/auth_authentication.rst:63
# 1166ab92d7264ff1ac9d0638ffad109c
msgid "|curl|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_curl.rst:5
# 2dfef09e41484ec6acf6f5ee2bdc0974
msgid "An API request can be made using |curl|, which is a |bash| shell script that requires two utilities: awk and openssl. The following example shows how an authenticated request can be made using the |api chef server| and |curl|:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_curl.rst:87
# 95f5a87f38a74d7896e9d0f8a9e6bfe3
msgid "After this shell script is sourced into the local shell, use it similar to the following:"
msgstr ""

#: ../source/auth_authentication.rst:67
# 57ab940b9c6141938bdebdfb43547858
msgid "|pychef|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_pychef.rst:5
# f6dc9bd1e2d346d9ac6b53ac8bebf502
msgid "An API request can be made using |pychef|, which is a |python| library that meets the ``Mixlib::Authentication`` requirements so that it can easily interact with the |chef server|. The following example shows how an authenticated request can be made using the |api chef server| and |pychef|:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_pychef.rst:17
# ca64ca625fcd44bb8377d45084edf8e1
msgid "and the following example shows how to make API calls directly:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_pychef.rst:26
# 7c278d5a472948c587eee9dbe46084e5
msgid "The previous examples assume that the current working directory is such that |pychef| can find a valid |chef| configuration file in the same manner as the |chef client| or |knife|. For more about |pychef|, see: https://github.com/coderanger/pychef."
msgstr ""

#: ../source/auth_authentication.rst:71
# b525c5e1f6b34bae9d4260e6ca49f083
msgid "|ruby|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_ruby.rst:5
# 33c6570b9c6f43aa8da4f2ae9ecf50ec
msgid "On a system with |chef| installed use |ruby| to make an authenticated request to the |chef server| using the |chef| libraries:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_ruby.rst:21
# a7ec88fc8fbe4c639b1c874fe86a3a88
msgid "or:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_other_ruby.rst:108
# 28d80d8873364bae834b67e5d8ff277f
msgid "Another way |ruby| can be used with the |api chef server| is to get objects from the |chef server|, and then interact with the returned data using |ruby| methods. Whenever possible, the |api chef server| will return an object of the relevant type. The returned object is then available to be called by other methods. For example, the ``api.get`` method can be used to return a node named \"foobar\", and then ``.destroy`` can be used to delete that node:"
msgstr ""

#: ../source/auth_authentication.rst:75
# ea68716223aa4010a775ac85af53cad4
msgid "Debug Authentication Issues"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:5
# 7af94b9af632415ca054caa230964e14
msgid "In some cases, the |chef client| may receive a 401 response to the authentication request and a 403 response to an authorization request. An authentication error error may look like the following:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:12
# 4d186f61198c4ae9ada00f03d73ed206
msgid "To debug authentication problems, determine which |chef client| is attempting to authenticate. This is often found in the log messages for that |chef client|. Debug logging can be enabled on a |chef client| using the following command:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:18
# 709c4e3fb5e54f33847e205b0bae9d04
msgid "When debug logging is enabled, a log entry will look like the following:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:24
# 3b6ddc54e34240ef93713f17e15c3376
msgid "If the authentication request occurs during the initial |chef| run, the issue is most likely with the private key."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:26
# 1ea89eac1ad647faadc06fefd6ff7fdd
msgid "If the authentication is happening on the node, there are a number of common causes:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:28
# a751d3a57aec47089d740f71aa714d7f
msgid "The ``client.pem`` file is incorrect. This can be fixed by deleting the ``client.pem`` file and re-running the |chef client|. When the |chef client| re-runs, it will re-attempt to register with the |chef server| and generate the correct key."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:29
# e6fbbf8427954ec7b5651252a2901ce6
msgid "A ``node_name`` is different from the one used during the initial |chef| run. This can happen for a number of reasons. For example, if the ``client.rb`` file does not specify the correct node name and the host name has recently changed. This issue can be resolved by explicitly setting the node name in the ``client.rb`` file or by using the ``-N`` option for the |chef client| executable."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_debug.rst:30
# a075dc0027a24d559da78ccd556c3778
msgid "The system clock has drifted from the actual time by more than 15 minutes. This can be fixed by syncing the clock with an |ntp| server."
msgstr ""

