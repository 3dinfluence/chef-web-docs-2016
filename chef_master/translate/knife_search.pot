# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-17 09:47-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_search.rst:8
# 42f6f44e3a304a1aa0d2b60a1a724495
msgid "knife search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 834b6bcf953d40f4a13e305710bdcf3c
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 32e480fc69864dd5b517a660ae21fbbd
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/knife_search.rst:15
# 27312b0db7454548b2f6023a0cddd74e
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:6
# 1086abd2efb34d25976ac131c992e760
msgid "This subcommand has the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:12
# 65dc4f3f3f7e46b381afca990d3c7e46
msgid "where ``INDEX`` is one of ``client``, ``environment``, ``node``, ``role``, or the name of a data bag and ``SEARCH_QUERY`` is the search query syntax for the query that will be executed."
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:14
# 1c95319bf60e43c1bcf5a681fde6d2a1
msgid "``INDEX`` is implied if omitted, and will default to ``node``. For example:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:20
# dde4415b2dac40a8b24c74b306a9a454
msgid "will return something similar to:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:35
# b0ca2210d0464b2e89b2278d0159d736
msgid "and is the same search as:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:41
# a4b539bcb2514829bd4cbd03e6d92dfe
msgid "If the ``SEARCH_QUERY`` does not contain a colon character (``:``), then the default query pattern is ``tags:*#{@query}* OR roles:*#{@query}* OR fqdn:*#{@query}* OR addresses:*#{@query}*``, which means the following two search queries are effectively the same:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:47
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
#: ../../step_knife/step_knife_search_by_recipe.rst:9
# 1c7dbac67aa64b41b20a13d954e20a72
# cc9d46fd684c4900a4c7d4b8b72d846d
# ea241a10ecd24d8ba2a56823a8f3ff70
# 78a94bd2fd8f4e7b958936c686b2abfd
# d96b9dbda33b429d95abe0e29d946907
# 5e5bb00683e54100a4e2e5df37d96155
# 619f28dbd9e9483d9fc750d20db7dcca
msgid "or:"
msgstr ""

#: ../source/knife_search.rst:19
# 98f22d8581534b8c80f9be63be3bb8a6
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# cca64015693a4e1da6b2f635ce57823b
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 5a7a9393b8054742a00e57f216f07e7a
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/knife_search.rst:23
# 0db8322144914d61b966279af99c606f
msgid "About Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# eef5df4dcade42779d63072afbe9a277
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/knife_search.rst:27
# 1825e5306ec84da0bd66d07dfb9dd463
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 2514f3c2944d4f8fa6d450b7d6b9fc2d
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 46c6037eb07e45e4b805f0dff3b587db
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 44aa16dddd5344ee80ae07131cc6d64b
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# ffeb44f6575b40feb976618ced5d9896
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 7fd5647810f342929b52433e4f42297b
# 71b57645f9424067a96c3bcb1d3adcbc
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 2a9a655a1518426b93b7bde5c3c72d6a
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 15c57763907540b5ac19874c2bad2e48
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# e3427dfd3e7e4948be27ae240e85ff09
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 7e9b4fb0348b4baaa928fd9d45f5ffb0
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../source/knife_search.rst:31
#: ../source/knife_search.rst:105
# 450d825bcee24234a63e1528f190e69c
# 3fd1785d0aa54634805d4cda99e1be53
msgid "Examples"
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# b63249b829fd49f1813c55dcc56cf46d
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 911fed76a29b4b8da34a981442bcaed6
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# fe83234fc9274171b69d491cd67cf4ef
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# de7ec22379aa49ed87f70b791304c7f7
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 289e5c243f024075aded502d318ac9f0
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 6797a550e2434c92815e88c4b6853de6
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# fce50740c8664e11a2c01c9e24321d57
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# b9d8a4540eb74477b8eef6e66a599875
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/knife_search.rst:43
# 7cbe1cf4e58c46ad82acca3c31ee5cc3
msgid "About Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# b74c74980cb64b21b3142be4ee9a8b41
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/knife_search.rst:47
# bd684b9c14c849ecbdac32aeec0c2a36
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 0da034369c534859a4030e19996011c8
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 78a1ec852cad4c5fa189595066d80f4f
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 48c3a972b13c48a6bf33641ad13ab65a
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# c00451ebbb1b44cb8cd868c88d45b017
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 315569fe490c43d19fd457b35a301352
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/knife_search.rst:55
# d9b0d2d96ce64ce1a69867ce57f281e1
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 11b92a368d48458e923e33fc0ba2d4d9
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# e1be388eda254e32acc20cdbb406fcea
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# af2f4563b5e54833a65c5394464738e1
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 6dba6e64b3df4f369c6f6900baa6981e
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 1ae35ce8b5124c3e8ca7892df795a355
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 7acd96a0d72a496ea9918d29421e3018
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 7d205b91d6a548eb8645aa7fc5d0cabd
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/knife_search.rst:63
# dfac2388695a4957a9f7eb91dbda0f78
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# be341531ef9745799d71bde17a4f589c
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# 7612ac5acb6d44e483e0c4366550b931
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# f0a0bfc859d34943b33940bf0d789772
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# ec2cdebd823f4e65ae67534b96d00ff4
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 1f346c60fc2e4c1e957aac6383216e1e
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# ce4ff1a39715432cb7ad7999f8321d73
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 919354bad0344dac92348cdfc92053ae
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 6354d469056c4f2eba1225a29ab81923
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/knife_search.rst:71
# ea5eb81a16664014a68801155e9c8947
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 168b5fd0ab5e48689f4e85c8f4927c63
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# 51fd848e693047bd8f831feb6f48580f
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# db0bca340589456abdd47b0bdf41ab2a
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 6e3d339c89a945df95f48bf21ca8900f
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/knife_search.rst:77
# a97f7b41c8824bd283c6bacf5b2ebb50
msgid "About Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# 739d21a1621648fca1b03d41eb8c6806
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# 4baa8c158cba4704854f5842f0827ac7
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 9d6f2a70d81549ddacab230d0482a97b
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 643f67256e434e6ba317ed3311a77661
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# dca8d5785da244c38741cf121f1902c7
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# e707dab072504f44b2c64d46119f4892
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# e636131cc6f74e61bb59898e64ebb0e7
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# dc2bd880afc74f3cb9471bea66f72789
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 1ae0de840a7246d5ad3cdfef0145c892
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# 428075c5986a4bb0b5cdbef6829b8941
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# 701e279d9c36413081b86971b8e6403c
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# dcf0d1c0694e4a2bbefb1f853be9b358
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/knife_search.rst:83
# 6b1a7f8261b2451492c92c03103f876a
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 1b533e927ca94d7ab9ed15aab8b31db9
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
# e29825705a7a481cb758fa8b7af86b85
# 280bd65435a64892ae4f5a8fee68589b
# f23d2a195fb1431fb4a60d8297333b81
# 214e346b4d9342bda1b499e2d2a09d35
# e850ce15a35b4af099cf1dd792711fbc
# 734e8140c90c470785ecc3f7e6280728
msgid "to return something like:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 2d885f3a958040599a80e9bfd5598023
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/knife_search.rst:87
# 8ac5c296305a492e90df6ea15bbb5cff
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 9be1d48c88974489b3d080a69a0de17c
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/knife_search.rst:91
# 2bcc6a30f9f14673afc67d4f9f34ea70
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# efb6cb9761a84fc6bfddb4e59afcb5ff
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/knife_search.rst:95
# d6c4a8318e6c442c94c58ab1ee55e615
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# ac39f759ab0b426f9cedf9616fe1948a
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# 785db74ae4dd45d2a216e9c25dce102f
msgid "For example:"
msgstr ""

#: ../source/knife_search.rst:99
# 4d206270566147d996e390d0b67d98ba
msgid "Options"
msgstr ""

#: ../source/knife_search.rst:100
# f3afa38c513e446e87227f096c595037
msgid "Review the list of :doc:`common options </knife_common_options>` available to this (and all) |knife| subcommands and plugins."
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:6
# 057f6830f3bf4d6ba567accca53ac845
msgid "This sub-command has the following options:"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:9
# 27c660207c4545108c1cb7551ce0727e
msgid "``-a ATTR``, ``--attribute ATTR``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:9
# 158f1ea9028e41e8b66d6682e673293f
msgid "|attribute_show|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:12
# 87290f6653a1414a9ee8069cbe3b3514
msgid "``-b ROW``, ``--start ROW``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:12
# b5877da93c664baa8a88f0b53f3e2b0f
msgid "|start|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:15
# 3c0146f8697f4916898fde3918d87676
msgid "``-i``, ``--id-only``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:15
# 58de4100cf98495097cabb822e7b5cbf
msgid "|id-only|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:18
# 8abdbdb06a9c4dd1b96626f8b13f726b
msgid "``INDEX``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:18
# 1113d76012ce4ba8a8d9f0797988e651
msgid "|search_index| Default index: ``node``."
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:21
# a9b68fc1fe7f4467ba2eb45853773f8e
msgid "``-l``, ``--long``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:21
# bdead5126ebf4c13b758a654147c6215
msgid "|long|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:24
# 5a58ed9619fa45b6949495a3f26ac884
msgid "``-m``, ``--medium``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:24
# b102de7af1904f1fbd45f45ca0a6ecd5
msgid "|medium|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:27
# 8b9db589991942d09e12e75066aeadda
msgid "``-o SORT``, ``--sort SORT``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:27
# 1d835f47f54a47b4879da4ffc3aca29c
msgid "|sort|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:30
# 70bdbcf099094bb2ad150420d333411a
msgid "``-q SEARCH_QUERY``, ``--query SEARCH_QUERY``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:30
# a358e053b4ea4b1d846fd0528eaa8039
msgid "|query|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:33
# 29d30592cc9d45518f9269983f78b8c3
msgid "``-r``, ``--run-list``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:33
# 12a1c27b24ff4abc9510b39f28608c71
msgid "|run-list indicator|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:36
# 8dd572491c9e4aba9d9d36c6d6885372
msgid "``-R INT``, ``--rows INT``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:36
# 1e01780a48694ccdaadfb713ca4f121f
msgid "|rows|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:39
# 206635d197e9488d95291cf009a864ac
msgid "``SEARCH_QUERY``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:39
# cf14d6e09122403b89543ac9fad645bd
msgid "|search_query|"
msgstr ""

#: ../source/knife_search.rst:106
# a3e1838c819e4cc1b0863356e99e3ce0
msgid "The following examples show how to use this |knife| subcommand:"
msgstr ""

#: ../source/knife_search.rst:108
# 7c49d24469ff4040a7b4602446c8153d
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 8dd8c7745b144baaae5314d9e89ab772
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:112
# a12bb40bf9b24a9380ba479749f8c814
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 19ce37d09d704f4c88bfb2cf7884a01a
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:116
# 5dfd381fff434027bc18b559cc34c0f7
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# 7c72269a4d0440c1a5fda2bfb30c8d21
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../source/knife_search.rst:120
# 6e76a2cc66f5491eae7f85cb570b7ca8
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# b6e9abfa08ea46eabcc48707ab707d0f
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/knife_search.rst:124
# 15b1dab29a4d4bc794122be79c3c51c5
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# ab5474e53ca34816949e11f9c5f2df81
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/knife_search.rst:128
# 065870b607cd4333b23e8ccc7724338f
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# aa9bdd4564844a2c9d02c0c8ce8e1f94
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/knife_search.rst:132
# 446d9487ec6e43cc8244216ff314e039
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 0c79bddc3aa74770b77372e8d10401f8
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/knife_search.rst:136
# 370f053013f84d808a2e9d8d041bea16
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 79d49486bce54630beac07a6c9ff219a
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/knife_search.rst:140
# f6b4360cff674d5f97cef79c22239e0d
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 9db12efb4ae34e3280f0ec315d238085
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# facce8476386420093adff22a1a37328
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

