# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-21 13:50-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_search.rst:8
# 9c5bd37aeca1488ebbc778f687fbee7e
msgid "knife search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 89e017879ac1473ebcb0e4406c0ef084
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# d5e7bc68b823430089512459ad97898c
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/knife_search.rst:15
# 1af9f8415f35472697fb7a4cccd66979
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:6
# f08cd70404c74f6088cfef591835ec32
msgid "This subcommand has the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:12
# 49a43263e8034873b0c57914259ea762
msgid "where ``INDEX`` is one of ``client``, ``environment``, ``node``, ``role``, or the name of a data bag and ``SEARCH_QUERY`` is the search query syntax for the query that will be executed."
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:14
# be84b1e5e2c240feb5c677fa328f00ea
msgid "``INDEX`` is implied if omitted, and will default to ``node``. For example:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:20
# 74ed37dc93104d8aae4f727eb65623d4
msgid "will return something similar to:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:35
# 1856140b83d246debca3b90580761d0e
msgid "and is the same search as:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:41
# bc24aced35ad406b8b3d1ac9a033eb1c
msgid "If the ``SEARCH_QUERY`` does not contain a colon character (``:``), then the default query pattern is ``tags:*#{@query}* OR roles:*#{@query}* OR fqdn:*#{@query}* OR addresses:*#{@query}*``, which means the following two search queries are effectively the same:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:47
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
#: ../../step_knife/step_knife_search_by_recipe.rst:9
# 2360a36ddf4c42df85dbc882922ddb7f
# 11434840214b49fca6e5a82a03d5d79e
# 1f39a23303b24f0f9327820eeb5e5570
# c1924f197cfd46929110e50f02d69ca2
# ce5e1e02f1ae4255a8264624cbbcaed5
msgid "or:"
msgstr ""

#: ../source/knife_search.rst:19
# ad7f6b6134ad47dcb8fba39d239065c4
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# eda6c116353b4aa9a651523b6f856139
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# bb0d7b31934248488d7c13b5e229c007
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/knife_search.rst:23
# b974dd3a411546ae912c37f1138b3e35
msgid "About Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 657fbc49a45d45e09716f2dc750db821
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/knife_search.rst:27
# 83b47885aff74d1c99b844b7d5ac5cd2
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# a0271ca4de1345fb9e0150b83812b338
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 5d874c1659d040c3a699eb48234a480a
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# d44cb2defa2d488080a1582dd13bbf88
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 9813bdb5e7ae4c52979da3fe1837e8d5
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# e446a7f19133406a8b3260b57839e2f8
# f8fda734d15a439a88ee21bb33ce9698
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# cece8c7c204c4763b99892f04d3de206
# 9b549b48a3974910bdeda892971ff944
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 8b51a9ccb43f4528ae5ca60c7ddec7dc
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 2803558c2b504ae6bae11268f6f44366
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# ca3552dd6aee4367a5e27e35e253e163
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 0a902c2ff4d84636803291baa33e4711
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../source/knife_search.rst:31
#: ../source/knife_search.rst:103
# f3f64691526d45b288bf990d16141bab
# 0c6fe266f0ca4c16bc59743d51c98d02
msgid "Examples"
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 9e7ed6be7bb24d2a9644760150c7b4c9
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# a2722dda3b6d4ea99743760321af09b0
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# dcb8538cd5814361bfd045dc8da21a9f
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# e8139c419e8043978d9b1a0a8294a0fb
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# abc3668a8b6d4c10afa11d0c0ccb9843
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# c347109dfead474ba5f8b8e043203d90
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 5920e1fe680e41d797c1090aab521ec9
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 128377585e08409d854bb163475d9890
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/knife_search.rst:43
# 1d2d5d6adc3b4251bbab2fcdbc659830
msgid "About Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 005c1bca65ad4d6192506ed5ca02f39c
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/knife_search.rst:47
# c7a259ce19964b8da60ef8a271817d39
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# fdb3d3f5920a4c90a35b32eada0d1948
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 8f5a39545fc84281a262eab856673fff
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# b4cfb9ca6d884e10bad9fa335042e783
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# bf1fa1f99dba4f1c8582dc5b22a3ac63
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 102e928ea4de4db5bc03f996466ec0a3
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/knife_search.rst:55
# 3c54696e1f6647d2a3e342c306ab2608
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 9c8ba8418b3e47fca4ec97001ee717e8
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 5bcc3b6f8e144e678989513fdfe243bd
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 64eceab4984a48d3a6fe560a93e05895
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 53fadc3a8f9e4cb58ad228887429ceb5
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# a9a89f185bb4414183d139639907204f
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 2fa413851f684bf0bc7302c2a90601f1
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 1148f9ac2dc94fa2a074292e1ae6215a
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/knife_search.rst:63
# 7afc7afea7514b93b39dcdf00edcbb02
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# f0f4b685d2974a2088db41e2628e20c7
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# d2e13881d07547faac510521e499e20b
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 7ddac4b3317c4c7591e269e95803a5f5
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 8f536ccc2938406cbaa15ae15c377808
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 4bc3164dc800439fad1007f04c25bd65
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 65bda7d92e164f46abf2b8310e743f39
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 823da5fa2c4f425b9e20884ededc2d0a
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# a43a68a5916044079caf04b539fdc056
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/knife_search.rst:71
# 0e7ea64bc96743a5aa02ad80e36db5cc
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 8e6bdcce92c54922984a84821e7adb7a
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 15857b8507af41cbbf9ad3df1584f1ac
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# d56d380d29ba415fb4937745117e1b60
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 2ed2970727a5419fadee93160b4b1d87
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/knife_search.rst:77
# 7b39bec531aa442fb69f34bd721ea7e8
msgid "About Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 22ef4894c57f46e3994e53dcdd75a707
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# e00b8b1963d74ffa8d95282a75c8146e
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# feede4bee87448089e86aa4647635b62
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 6b29002dfa0a45a4aaac9b45e2bca38f
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# e1cfeb7de423400f90efebed39466318
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# d419efe6a96e4b269a6f9c95de19253a
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# bf01d71e01864c75a2911830101f4478
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# a9aa8582d1c643a1869468405ff24101
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# d4626424956a4d3f90d6889d9365cc1d
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 6b9bd9ac72e84b7ab8862265a5a72b9a
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:22
# 3378778ed0d44a129e4148dd022f3b10
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:30
# 9648ddb29d8a4262808cca3c606cbf42
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/knife_search.rst:81
# e5174dedecd54a448dbe81ce311a209c
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# a24e6f77b69d41dbb6ffc7d9db9a741f
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
# 119f8358a1b8479db91f608388ce4aee
# f22fcce0d2b04d4b8516c12b8dcc0ae0
# c2d30fe0dffb449196ad839f9fccb7f1
# 069af6ae640344719b686d46a61d7096
# f2b2cba14d8247c39c4db915745bd503
# 66e183a359084033b47930701822772d
msgid "to return something like:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# cee075b6437944cdb5f81d0a8ece8d96
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/knife_search.rst:85
# 47a95ca1138d45fa8121ca2536217c0f
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 0da11ae9dcdd4fe0ab02d59d6b65fc38
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/knife_search.rst:89
# 8c06019ea2bf4773bf4f035bf94da9c7
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# ee510ffd0c934f3f827928e483e28b2a
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/knife_search.rst:93
# cbeb0e33b1e5405a98e7d19d6b9466d7
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# d8f0be16f77a4796849fb58e56973b84
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 3b99ca47f0624bfd8364a11c34fa51c4
msgid "For example::"
msgstr ""

#: ../source/knife_search.rst:97
# 67a7a52ff45647ad9729bcf1fd8de278
msgid "Options"
msgstr ""

#: ../source/knife_search.rst:98
# 47f9b5e1086147beb5c770c45829aeae
msgid "Review the list of :doc:`common options </knife_common_options>` available to this (and all) |knife| subcommands and plugins."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:6
# 84cf4d66a3cc4b9fae82ed9903cb2616
msgid "This sub-command has the following options:"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:9
# 77d243843450445f9405d51541f27e88
msgid "``-a ATTR``, ``--attribute ATTR``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:9
# cf8be9957bd44b969ac413740aa46070
msgid "|attribute_show|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:12
# 7ad512f73a604c608dc5a05b72fd1f9a
msgid "``-b ROW``, ``--start ROW``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:12
# ce2a3443cd5841d28d145c7ba6b4fa9f
msgid "|start|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:15
# 2ff55431b9cf418893aecf1df1129661
msgid "``-i``, ``--id-only``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:15
# 6085389fd2124aeda402d5cc0701215e
msgid "|id-only|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:18
# 369e4f298b7a4da1ab8e52366523da4b
msgid "``INDEX``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:18
# f00b80e94ac2480eaee60f803928cf49
msgid "|search_index| Default index: ``node``."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:21
# 9682ef0964034332a6f7869dd205956f
msgid "``-l``, ``--long``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:21
# b93450e653d645df90e5473f5b2f27c7
msgid "|long|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:24
# d6dc8e50c30e4fd2ae09489395c4f58c
msgid "``-m``, ``--medium``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:24
# 2455581c193744179ac879c9966cb655
msgid "|medium|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:27
# 746a06796534450292a3c675a4a2793e
msgid "``-o SORT``, ``--sort SORT``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:27
# 58312f55e3374510819626bdd4f7462c
msgid "|sort|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:30
# 49d8741086ce453c8ebe7f83b0536554
msgid "``-q SEARCH_QUERY``, ``--query SEARCH_QUERY``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:30
# e5284550031e4b7fbf8117230f73e1b7
msgid "|query|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:33
# f279f406aa0e48f3abf9a4299f7e3726
msgid "``-r``, ``--run-list``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:33
# 29e61fb7d47e40da9107bd36109c4ae3
msgid "|run-list indicator|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:36
# 1ed97cf2ea474623b29487e5c9349a5e
msgid "``-R INT``, ``--rows INT``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:36
# 3820c025f02d4a0ba41fb58ddda034a2
msgid "|rows|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:39
# 9793e4f77bdb4f749f34994df3fb9d88
msgid "``SEARCH_QUERY``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:39
# 5b421d02a17141abbb06d44c8d47c9b8
msgid "|search_query|"
msgstr ""

#: ../source/knife_search.rst:104
# c1ef73678b634d48bbce67d9ca8c2b92
msgid "The following examples show how to use this |knife| subcommand:"
msgstr ""

#: ../source/knife_search.rst:106
# 3b3ce50c9d2e43a295ca5e678b7e39dd
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 07391a0235aa4dfd8bacdff8c69539e1
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:110
# e0712d51c61944dab1941e0c1f0eab56
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# efe88556326f41aa92a99b53b275193f
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:114
# 0777d0745e19434d8e289a610699a3bb
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# 98466011d2584c188925cba49a9dc49f
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names. Enter something like:"
msgstr ""

#: ../source/knife_search.rst:118
# 20fdf1a04e314f7095b7c014b6b08dfe
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 3882f1f6ebe1494091fdcfd180975d11
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/knife_search.rst:122
# 716ad9b8671b4ed984f9490dc1924567
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# 51af51115a544512954d124b86eb2920
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/knife_search.rst:126
# ce48e78593814de1b90a2b2f219830f0
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# a96baad885aa43d182de17cc21bdecdc
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/knife_search.rst:130
# 3d63c9e71d744264853c116d1a07ac10
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# f79750128a8e43f2809a260a7287ecae
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/knife_search.rst:134
# 9bf04e03c54747ab8dae62570ca333a0
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 282a7c03d4184d6ab46298bb0c178735
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/knife_search.rst:138
# c7d7e5dcd9f64bc1b6eda54719f29b87
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 2bb5d7a71952466996f85b2399967899
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 6b070d2e50e847a3bea40f1667f535f9
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

