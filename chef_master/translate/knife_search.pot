# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-13 21:44-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_search.rst:8
# 1a36dceb13ac4ba69716c6a48cc50621
msgid "knife search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 1c90add1e2db491195f5990601296311
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 2247336acd764a768408e5b35b44dd4b
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/knife_search.rst:15
# 99aca02fccfe42808d7e718084664313
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:6
# e66cd2c7776a49c9bcb987aad4cb756a
msgid "This subcommand has the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:12
# 2ab8ca1fa9cc468987625cd05185eb82
msgid "where ``INDEX`` is one of ``client``, ``environment``, ``node``, ``role``, or the name of a data bag and ``SEARCH_QUERY`` is the search query syntax for the query that will be executed."
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:14
# e673590272f54668a4d4a0ebeace792a
msgid "``INDEX`` is implied if omitted, and will default to ``node``. For example:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:20
# 62dbc01f11e34c5fafd8f59b41f5ad65
msgid "will return something similar to:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:35
# 3275880947c3441d8e01a0879fe12db1
msgid "and is the same search as:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:41
# f75787b5278c4812be025ff8d22b869a
msgid "If the ``SEARCH_QUERY`` does not contain a colon character (``:``), then the default query pattern is ``tags:*#{@query}* OR roles:*#{@query}* OR fqdn:*#{@query}* OR addresses:*#{@query}*``, which means the following two search queries are effectively the same:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:47
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
#: ../../step_knife/step_knife_search_by_recipe.rst:9
# aa43ec1f88e5417f9f2f8a4a733bbc43
# 96107de951e14f649496e85834e1e29b
# 6aaa3f1a94ff493e8c97434b0282b59b
# 288d271287aa44aba23ebb395919dabd
# 983f6e513bc84bfdb810258d5dc88bae
# 1f9df1b537614633bbfd82ae7907e23a
# 4e48920495934baf963181e2f5c87579
msgid "or:"
msgstr ""

#: ../source/knife_search.rst:19
# 102ca629d33b420fbe54c87abf2e2cbb
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 7fc9186517db4f3eaafc1172ad47965c
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 9e127e70206546939dd9ae52e3008d20
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/knife_search.rst:23
# 101dd67b01354814b0efffd4c8f47963
msgid "About Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# a96b1c7faf3c4d04903ad3a8a12dd614
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/knife_search.rst:27
# 2320c0f895e240e4b73b7ec74b92af51
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 311a3d98426f47fe83ce273ffdb13462
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# fe2c0b5d08d94249be5053e5d097d9a9
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 9a7cd6d6edcb4cd39a8752ccf6059d6b
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# ba5d19528d62431cb5327942795edf6b
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 2e475dd97675472bafc67db202647733
# f0a6ffc20f574871bebf0f14af6c3d06
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# ecd05b1196f043d69f2f55c5016d5ac5
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 7aefeeaecdc446e684dfd90dd958edae
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# e2b4f1ca4ceb488c95aef2f91aaf446e
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 7c3bfbfeeeee41c7b6b378d8a99ee1a4
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../source/knife_search.rst:31
#: ../source/knife_search.rst:105
# d9e3ed0f0b324cadb734982918b3dc5e
# 108f8526fcca415393d6f1fefa7c5d60
msgid "Examples"
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 37027bb65321479fb9ac16a03958dcf3
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# ae055ebd17b0440ea280e620582a24c9
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# d8b4aaa9aae24173bdff65567de8baaf
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 21c06514b1e6416b8bd63cc19c9fba1c
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 553142d458f8474e8b6ac3cf767099e7
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 3682f99700474cf5803283a1ff57e727
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# ca4b99aa8cb34aa292781842d3ce8d07
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# a24c8ed77edc454d8b91d1b49b0e772e
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/knife_search.rst:43
# 3c93ae8e0b5b4a969b9aad4020a28222
msgid "About Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 08c3e02595454cfdba2c0653315f8c09
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/knife_search.rst:47
# da9d55fe66dc42fa80a37d1059c669b7
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 0b9389c1879e4ed29b567f4ff61bd0df
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 9f1058de10ee4c0892eede76a04613da
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# b124f4f2cea64c6691bd6eb0429b3cdb
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# fed381f93d4f40cf9e66c80d7f8e87bb
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# dc0249c77e3c408d9ad0540d4b9bb9d7
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/knife_search.rst:55
# 7a869643141142deadd18fc0543327dd
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 61bb8dec6902438588ee9ebb955d320b
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# ebfab613045445c2b58499bfe3cf7a08
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# bba7480c8cd3473cb47d145b2438d49d
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# d6ca5026adae4d1d85f3ec9c73b4a04c
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# e9b3df08f04d4c6c8d8ed5f6ac0bf9b0
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 936d69db42fe4ce48e88da9f572a6d26
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 2cdb3ea4c3f24a1dbbc307821175c9ca
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/knife_search.rst:63
# f11d3c08a950446b92ab8ef340655942
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# ec7cfc5b16a144bfb5af0333f4a002a5
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# 37f4d8c811e243fc933193d55dfb71ab
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# c951eadae78c4acf975986fa21329316
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 462df548e75340db88211715cc0437ce
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# ecd1244413db4b4fa23ce34dd3d901c8
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 58e6b6f0e4564764a7ee2ccd31ef038f
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# c30f0ce7dbf541f790f2173a28e3a616
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# b9c61498518d4242814df8e3d1503cd1
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/knife_search.rst:71
# a7cc339c1367460b9f1001e4f4500b30
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# d165792d04a04a7a883552b9567556a3
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# bda347599818460e80e43bd136640fbb
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 01e691f6a20c445b9c3623a88209a788
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 892b304633fa44d8b822ed8e582c5c20
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/knife_search.rst:77
# 2555c321489443408f00170f2d9da5a0
msgid "About Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# e052f52d20c94476a1363b3f88feab54
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# b1281854dd104781b0343371e8a27dc7
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# e7af1e0c869948a3bf349085d611d853
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 56540bc92cff4de6ade3e07a6d78fde2
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# c30c6abe2954483295789bca97939338
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# ed1266a1e9a84e94b29da6d8d578e4f6
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 6c2d6397f73b48b8b7f419eaf6fe2175
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 2b8ce0baddca41e594b0aaf14b555869
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 720c99c35652451596694cc7b4434315
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# a0fe2557ec994c688e629e07281ec873
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# aa3fc08e675a481d96a45d3800bc5227
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# 32877e8eaf12466f88da64f8d2be0d88
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/knife_search.rst:83
# c2f7167a119e479e94f5625edb44182b
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# b9fa942ee4744d2a9fadbcea3eb162d5
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
# 5bf8d50c5b284afd9be0f0c6d2f0018a
# aac119b4d36349f6831968b3349418ff
# 006fb9eeaf25410f87b128169e611d35
# cf984e84539b436a8780f62f06f759f3
# 6b2587d02cae4451bbdb5a4a943f3933
# 3559b247b68844649136959d2f03ec12
msgid "to return something like:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 2266d1dda12a42c588664ca53c9f311d
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/knife_search.rst:87
# ce33350e453141ef8569cf0f39cbfac9
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 19627b258da1414690d512b7e5bce11f
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/knife_search.rst:91
# b57eafda70304256ae5d509d82b3f30f
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# e4407c5242924cd3a8d42efd27403e4c
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/knife_search.rst:95
# 96ceb6c8420d48f2931c22b584e69bb0
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 01af15e77f9941d9a56fb21241b82cd9
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# 787c4d8c5add455bbc530bfc99096a0b
msgid "For example:"
msgstr ""

#: ../source/knife_search.rst:99
# 9da7e9c147fc4ee1b672739245019458
msgid "Options"
msgstr ""

#: ../source/knife_search.rst:100
# 6e9e2ff95ae3463cac7bf1833552d96f
msgid "Review the list of :doc:`common options </knife_common_options>` available to this (and all) |knife| subcommands and plugins."
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:6
# 7cc1553ed40c49b1a24848b6ec841bdc
msgid "This sub-command has the following options:"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:9
# bf6e77b025e841e89dd813ee5f1bd2f5
msgid "``-a ATTR``, ``--attribute ATTR``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:9
# a7ef96de5675418e803a0f58b1a5031c
msgid "|attribute_show|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:12
# 2f69e2a07ff940c5970dd91c8fa7709f
msgid "``-b ROW``, ``--start ROW``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:12
# 2a88ddc0f01d446790d18ac1b4caca7f
msgid "|start|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:15
# e53b65de488243389cc63e735285b420
msgid "``-i``, ``--id-only``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:15
# 269f6660b0164fbc9d77de4663c9716e
msgid "|id-only|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:18
# 6f7e01d943444353814272f82de2b662
msgid "``INDEX``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:18
# 5b2c707768a04859b1c3f2b29ee8122b
msgid "|search_index| Default index: ``node``."
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:21
# 541346d8efaf46d994d5c940adeae1bf
msgid "``-l``, ``--long``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:21
# 1362d4530a07427a848e2393ff261593
msgid "|long|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:24
# 6ceb1095877b44619472a85c8efe3031
msgid "``-m``, ``--medium``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:24
# 18eb89f74db74c8f9ce090cb1f687d36
msgid "|medium|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:27
# b401825c47a843dbb390ec8ffdd272fa
msgid "``-o SORT``, ``--sort SORT``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:27
# ba5444f092494040a80f4bfbadf47ba2
msgid "|sort|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:30
# f63b5ab446c94179b07b90a0e486a26b
msgid "``-q SEARCH_QUERY``, ``--query SEARCH_QUERY``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:30
# 5792a6a856ea491ca4630ea389d34d74
msgid "|query|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:33
# da74d97786254814beaae987d89c5423
msgid "``-r``, ``--run-list``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:33
# e7d66d77d26542918a84fa3ea74048f1
msgid "|run-list indicator|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:36
# 4f2a2f9f329d45458cca03c008289bb5
msgid "``-R INT``, ``--rows INT``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:36
# 100f9d9d07fb40e89eb0f74d7ea22d84
msgid "|rows|"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:39
# fedd3e0f5cad40c1b9f478dda6ca7326
msgid "``SEARCH_QUERY``"
msgstr ""

#: ../../includes_knife/includes_knife_11-16_search_options.rst:39
# c1be4eda11bc46038885b27c5341ab23
msgid "|search_query|"
msgstr ""

#: ../source/knife_search.rst:106
# dd9220fc553048f8b26f1f22e27bdf1e
msgid "The following examples show how to use this |knife| subcommand:"
msgstr ""

#: ../source/knife_search.rst:108
# 87fbfba4a3de4469a3be7ce87f207487
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 658398769d9c489b9cae0d1ea1eb53b3
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:112
# 9ee2be02d33b4be4a4bc46a596d1ca02
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 65e735d8707f4a54b17a1d72ee702727
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:116
# 472cbeddb3c84568bdd3a3e434c54fb4
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# cfaf114c83c24029a9eff38bcc8ea704
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../source/knife_search.rst:120
# 3917217e1a3249bda687e93e8549cc6a
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 6911c45193bf4176b6988f1d7f375615
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/knife_search.rst:124
# 775b36d583f846a3805d7e1bcae41d78
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# c90bfc8afedd4a56bc59f33278be8456
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/knife_search.rst:128
# c8bd78a271c8488caa8111629c72130a
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 1c86c4a6e98244058e2ef8238b2379ed
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/knife_search.rst:132
# bf0855cbadfd4db1a0f8376db1008c0e
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 14d6ec51eb4c4a64a8fcc460111e75fc
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/knife_search.rst:136
# b523a57c5d3543eb85493d75923c7ab2
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 4b59ad21546041098f2dfae4d1df2d50
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/knife_search.rst:140
# abe6e9d3cb0c4955af538319a97bf757
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# f2b285cc43b44fa09331f428e60909dc
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 486c0c1276c6478eaf950c36c54662bc
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

