# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-02-10 09:43-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_search.rst:8
# 107f720b680449308da75dbd2e0be21e
msgid "knife search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 4b592c47ebd84404ba6047780cc7082a
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# d046e5b16ce740ecbc0e95a48e65373d
msgid "Use the |subcommand knife search| subcommand run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/knife_search.rst:15
# 5f9b7fa0a6ad4212bfce945ea166c3f1
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:6
# e4e09e5fa6964f048ee297957fbc77da
msgid "This subcommand has the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:12
# defbafc1947a4ec19b76bdd7347dd405
msgid "where ``INDEX`` is one of ``client``, ``environment``, ``node``, ``role``, or the name of a data bag and ``SEARCH_QUERY`` is the search query syntax for the query that will be executed."
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:14
# 9bda6e94d4e64abbbca98505f9625e21
msgid "``INDEX`` is implied if omitted, and will default to ``node``. For example:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:20
# 83b17d8779a448e7b6b6baf30e45b748
msgid "will return something similar to:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:35
# f3d70a3bc5554404bd19ade9e5a7411c
msgid "and is the same search as:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:41
# b6b6f4f4726f4755b41864bde66fda47
msgid "If the ``SEARCH_QUERY`` does not contain a colon character (``:``), then the default query pattern is ``tags:*#{@query}* OR roles:*#{@query}* OR fqdn:*#{@query}* OR addresses:*#{@query}*``, which means the following two search queries are effectively the same:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:47
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
#: ../../step_knife/step_knife_search_by_recipe.rst:9
# faf3665e733f4379b5ca714e9b9d7532
# a60d8b2419ec44dd8cc7ed55d0e3b483
# 92769bcfe00e4ccd8cb70b1e32f26651
# 33ec4a08c39f46ba95a99b3ed3c0870b
# f8fa2016981d4041b4184234b4eb21cd
# 38593d822031455ca149d24e26b9c4a2
# d8f531cb4e1c428f85f65b532d65e255
msgid "or:"
msgstr ""

#: ../source/knife_search.rst:19
# b5616adaf18f4c238671e97c8ec98e07
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 12f2d1c505ca46ecbf24917b44ee5d94
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# a47b9e089cf94acebbcfa5bbb4a377d8
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/knife_search.rst:23
# f2b195e06f644db591add3c3bab7df56
msgid "About Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 3d5b51eddaa2482c988189b4add1c2f0
msgid "|search key| Any field that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available fields for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/knife_search.rst:27
# f7607425f53c485a833ee305210989e1
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 30c541eb63364a06914fe5de486af465
msgid "A nested field appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested fields are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound fields that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 1c190d4d9bd442a0baaf6c0bac770875
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 69ba783c86944c3ab7f7574195264625
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 4e8ac4d680b34d14a4352434ab751791
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 622227e886df49278b057d8feb70828b
# 8a7c75f5d6bb4e13a52735fe7682c135
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 8f739b085dce4d8cab1b0674236bf84d
msgid "This data is also flattened into various compound fields, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 6b000de1f4f7481abf98f0cb9e9475eb
msgid "This flattened data structure also supports using wildcard compound fields, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for a nested field:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# a1bc0e4c996242a6aace98b420a66263
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 1a4448be3d49469a8993319179b79165
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../source/knife_search.rst:31
#: ../source/knife_search.rst:105
# c52c85d9ffc54acd8decab373ca0eb5b
# 4a51e4c7da58441da78f080d25f29f3f
msgid "Examples"
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 46a2562a4a024500ba6378bc6e4d8b39
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# f65e37dbc4ac49aca3b6e9e86a7340e0
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 1e079eeae12840188c267c7c7ed34c00
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# e606984a23034ea1a4dbe659b87193f7
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 753d44546f1446099d41449bee062e09
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 8e75b6d2cf7547b493440ca3e2361a6c
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# e86c1dfadd5f4432a0cc4f38a46f6950
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# e5435fc9300b4fb09c03b1d5fd7f859c
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/knife_search.rst:43
# dcd5faa2f4f44eca9c7d7c497bc8f607
msgid "About Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# d3525be3bf7b433ab4df997cf0f5b298
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/knife_search.rst:47
# 38e859c93eb84db7806fd46f729db1fb
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 14e8da7815f94a72ba9a544994692cdf
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 7df3fddba6c1477bb370e5899796e544
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 6baf743e0ee144ad9d0a36cd28359aa7
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# a39ee7d88a8e4cf79fbb246710f87869
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 8f13030c9a164620a28c2b599b5ed8ad
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/knife_search.rst:55
# 60e9f0e6c2a441948683d0d409ef9d7b
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 14ecb284183a46d3af59d7007d501e31
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# fc66d3f52e5449d8922ad0ba0d0e88ec
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# c0fa439a4c2c46469ac8150b66f6e746
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 84386700589c45fcae4ba4ceb944296e
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# f2f2e7ef557047d8b559ce913dfe6939
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# b9a969bfaf784843b79982d9d650d7f0
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# f1ad2e0afe5e4acbb5189ad4d6314e1c
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/knife_search.rst:63
# 4c7a32183b09443d8dc6c60562e946e2
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# e4ec7af8fc63455fa7be40c385a32767
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# a81823effbf04f279c77152aea854863
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 106d394c145143b4a2aa0e7856e67a87
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# c9628bd1b632418b95b74b48eff97ab1
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# ec9dc47ab79a4ba18319ae5d23dc1485
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 8bd4763be1df418abacdc88aced1cf38
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 984ba647920f46a4a4511f13797ff82b
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 360db65dc6b941ef957da181a44f206f
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/knife_search.rst:71
# 52e525c8b5ad439a8ca4ac6ec9bb1ea9
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 453309cbe3a041cb8e9c4c99e27f5ea6
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# d24824c043ba4fd0ad06e78509a4956e
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 0cf944b2291e4a98a35d2aaa3f1a825a
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# baeefa2b59294645a29d8fa069646428
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/knife_search.rst:77
# 9bbf4ddc89894ba9a6df5877d73c2b2b
msgid "About Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# d03ba257d6944c42a905a64acf374cca
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# 21294751f2ab44e1b016bdf37660caa2
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# c5c57086b9ae457fbd74a1fe572f75db
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 71d3a73d484f40e69de644ec3ca840dc
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# e00dd49307054242a1e40abcbb66a904
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 3c54509ccfe1470baa29fcce7854d2f1
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 61f72beeff6e4ec082233d78c4b6b13e
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 34f66958cdc84cd5bbb8ca1c14120d48
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 869ad2ecab8b4d349a42f045e42a7e8d
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# 4068cee8ddd54c94ab88fee132e9b1e1
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# 691d7f7d380743cfb1bbcb2a55813fca
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# ac44cda152b04dbfbfdddc62ca3aaeb6
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/knife_search.rst:83
# cfb02dd965d3431b96032c1fb9687a48
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 6b9a10f312c34f999bac5f2f98324558
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
# 5a3e13008aa74109a0136e0d894115d6
# 849ac37429bb4e4cac480e7cd8fc0d9d
# 9dc2b2c636e44e199fffdb0e5006a715
# d1ed885bcd384df48af80e204ec7ea21
# 5615f14c11274b73ac3f2913bc15866a
# 7cf9c3e96feb47dba8f0372c40921b47
msgid "to return something like:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 6f408de3acac45b9a38a4e789fe19d97
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/knife_search.rst:87
# 51dd6f0caa7d416fac060ed44e5bf819
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# e12472050eed4b61a11aae8badb90f62
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/knife_search.rst:91
# 6acfd4d3aae14273905a23cd1414f89f
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 9f5412f83a6e4d9e93158dfb0ee59e09
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/knife_search.rst:95
# c395d4ce7950420f8658cc2efd1e0c4e
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# fccdc2bb2ea145978fd5fed7e40633bf
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# 012278ca14ec4d73ad434ed68f08bdfe
msgid "For example:"
msgstr ""

#: ../source/knife_search.rst:99
# b36da85d8c5f44bdae4e85e023b35209
msgid "Options"
msgstr ""

#: ../source/knife_search.rst:100
# 92923a62a0ba480ab0df89699ff2470e
msgid "Review the list of :doc:`common options </knife_common_options>` available to this (and all) |knife| subcommands and plugins."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:6
# e106e89d66ab4ded930c8ddd03f2e26e
msgid "This sub-command has the following options:"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:9
# 2083a0bd2c0748f78de4b1b87113389f
msgid "``-a ATTR``, ``--attribute ATTR``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:9
# c2c298d0cd1a4b2e8a212d0a7ac10f2c
msgid "|attribute_show|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:12
# 75c6d810ae384d7ba4bd8d5913fbda35
msgid "``-b ROW``, ``--start ROW``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:12
# 16a1cf078a9e416a8a5dc4226ccfcfcb
msgid "|start|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:15
# 4f39134e824f473d943ae3bb590a076e
msgid "``-f FILTER``, ``--filter-result FILTER``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:15
# bb900cf0d1c14609b60cde6c93d36830
msgid "Use to return only attributes that match the specified ``FILTER``. For example: ``\\\"ServerName=name, Kernel=kernel.version\\``."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:18
# cba1c288765f4bedbdd865901aa129ed
msgid "``-i``, ``--id-only``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:18
# 36a3e0b3ba564cd387035950c0e9271e
msgid "|id-only|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:21
# 4be7016334a8498caef0cdd9f019dd6a
msgid "``INDEX``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:21
# 8bf3230b5eb54d0b88b2689c7ea859b3
msgid "|search_index| Default index: ``node``."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:24
# 90ad1b115fc8477c9c3065b028c86149
msgid "``-l``, ``--long``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:24
# 8929851121b64c348ab0e6a1ba89373d
msgid "|long|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:27
# b7f93e494ec149a99d48bd7b3b24e70b
msgid "``-m``, ``--medium``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:27
# 0eee7b72365e4a4e8e68f1f2fd06ea23
msgid "|medium|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:30
# 085265c97d70447d93c3a190c56faae0
msgid "``-o SORT``, ``--sort SORT``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:30
# ecfe8328cf9e485ea4b14f74c84cfc06
msgid "|sort|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:33
# df8901cca94f4d458b92e492d0111229
msgid "``-q SEARCH_QUERY``, ``--query SEARCH_QUERY``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:33
# cd4c6a3ff408430f8a95e7c0273014f3
msgid "|query|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:36
# d2cbd9c2ad3c409bb5a56f4a0aa0cfff
msgid "``-r``, ``--run-list``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:36
# c6ee7ea6c26f4449a6f5c3de2f778bd0
msgid "|run-list indicator|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:39
# 385d89c74ca14603bf3f4a0672f81450
msgid "``-R INT``, ``--rows INT``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:39
# c289ea7ae48349d29fe0a14e9a24a49c
msgid "|rows|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:42
# 06faeda090014171a873b5d681fc47b4
msgid "``SEARCH_QUERY``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:42
# fa557b95f30148a48664c09d4fc05382
msgid "|search_query|"
msgstr ""

#: ../source/knife_search.rst:106
# 0c5eda5fc5a14bd7af12504ce9c83565
msgid "The following examples show how to use this |knife| subcommand:"
msgstr ""

#: ../source/knife_search.rst:108
# 65ef0a542d444729bbc431d9d37a05e4
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 24549adf4626433089510025dc4a90fc
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:112
# e96314e92f1c41509b1fbf0676348764
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# ec8d3d66d2b34ecc9478f09fb8e7e7e2
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:116
# 9f98513b97174d6ca71ad7858abc9531
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# 949633d281164042a67913c63e9df8ae
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../source/knife_search.rst:120
# b64e283436e44134ac638060a2440263
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# f7ac23423c924b86907d0acac917b205
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/knife_search.rst:124
# bedfcba1ce2d46409c453530f41b08aa
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# f89b897115a94638a21b3da0c61c9515
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/knife_search.rst:128
# 00b57cc64bd84a40b36ff9b61bb18319
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 2c2ecb95a22147aa9783f96e4f647fa6
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/knife_search.rst:132
# a2cd40db584e490bb4d74b74c8c296a5
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 40632e79812646b6a665324083993248
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/knife_search.rst:136
# e16be5105b264bc99a36056f0e697e69
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 841ee91871814122a576dd2f872bb7f7
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/knife_search.rst:140
# 3ce1524633f04b65afe0df54393260d4
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 630b46ff5d7e4bc3b60ad9aaa9c6611e
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# b54c30c745c64e36a4d7c05e0dfc339e
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

