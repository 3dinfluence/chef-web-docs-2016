# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-04 13:15-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_search.rst:8
# 96ee3abf13034b098edab848a86b15a3
msgid "knife search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 41fca81cac184233b2702c4695a1fb9f
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 10e434b1bd854f0bb9603694b6388bc4
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/knife_search.rst:15
# 01ace67d8b414a349d398fa4592cfbde
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:6
# b596eb7c7ad546d9893afa088b9aa95f
msgid "This subcommand has the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:12
# 44191753da4e4bd7bbc312fad39270c3
msgid "where ``INDEX`` is one of ``client``, ``environment``, ``node``, ``role``, or the name of a data bag and ``SEARCH_QUERY`` is the search query syntax for the query that will be executed."
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:14
# 7a60238a329c41eba5ed120e4ca36f54
msgid "``INDEX`` is implied if omitted, and will default to ``node``. For example:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:20
# 09fae14a20a4468395a11736e2af62f1
msgid "will return something similar to:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:35
# e8dd8b61a2824d1aac2e8769f469fedf
msgid "and is the same search as:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:41
# 6baf4b1143404bca8725f80432e8d6fd
msgid "If the ``SEARCH_QUERY`` does not contain a colon character (``:``), then the default query pattern is ``tags:*#{@query}* OR roles:*#{@query}* OR fqdn:*#{@query}* OR addresses:*#{@query}*``, which means the following two search queries are effectively the same:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:47
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
#: ../../step_knife/step_knife_search_by_recipe.rst:9
# fa9b26aa6ce64e73903562655c080bf8
# a5db4d5fc9174cdeba60d84a915ac4d3
# f7370d7ee6b940dfa4a5a5a866ab1207
# af6369634c1f49f98ced19ae01c624e8
# 99f0f83c5fac494fb78a62db6f6184da
# 184c05c772554597aded3d682d2f06c0
# ca51db09c9a1411e94d218d29517d922
msgid "or:"
msgstr ""

#: ../source/knife_search.rst:19
# af26172edcb447b493be799b65d50723
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 4f5a62a8914443a3a5971d7912642c2f
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 04e9b781fa6b4df8b18e0da3e083c6f7
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/knife_search.rst:23
# 8331e11ee5174720a7b858c7099124d9
msgid "About Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 9141116d188d4e5180a7ac58c88c8c9e
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/knife_search.rst:27
# ab03742ab6aa4cbc89e4afdafdcda19c
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 45223755454745208933384a80b8af00
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 727ea8979ea54194bb2f5733c307ec79
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 01a1e329786a4f848a58ff2c29e2cbcb
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 575ec2fd91464e3cab1d15426de5aa49
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 9162a7030e9e463db9092d0aa3f54874
# ca718cd551fe46ba8560cad467c6894a
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# eabdc4fac5134ffca47241540889be7f
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# d9c7163f9a5349cd9f7904e88460f235
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 69afb9d518c844a587f352986ee48d3f
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 0d5382229f904021bea14008dffc8d75
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../source/knife_search.rst:31
#: ../source/knife_search.rst:105
# fd1531f0d1c54c48bb97412863da884c
# ad44d71f2ec349fea5383f4215518573
msgid "Examples"
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 442a6e6d3d0147678e12d1501367edfa
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 1d01aa95f46f466fbf810e2ef759888f
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# d062cc388e574427b5794fc909ae9474
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 22873e5dbb1a48318155cdf9b62f38ba
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# d7eda1897a524f0fb6982bad338c6064
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 8073b436c4394bf685e1f6d2182ca10c
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 466e66ec067741f7bfb17cbaa23428ab
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# dfd903c41fd849d0bd5edc405a01870c
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/knife_search.rst:43
# 7566859cad0b443788e967060dd87771
msgid "About Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 0ec5d01fa6454ff0b2c0e982f9af274a
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/knife_search.rst:47
# f8677a6989084e52897bc4addc8e1497
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# ba9560def28b439ea472f9e3f44ab5cf
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 6b3884c527b040a3ab10381d8f9435fa
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 007f9a2619234fd6833743fcf956d060
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 4b1e8054ef5e43dca1c1dd74764b3a7b
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# d98575bed92b4c1eba10396143287438
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/knife_search.rst:55
# 792ff136efa9401e9cc80246c5832df1
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 72cb9d2c08134da2b119023a8086b080
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# bb252824dbbe4285bb0ba99b450b4f53
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 4a58835b831543fbba9faba6f944bfdd
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# b72dbd9faecd4a838f6525e4a52111da
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 9646ade9b01343fd8fd0445f690069a7
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# c4e4848bfab14cc9bdc9d9da11093652
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 1ff2e094e01042dfb235004c2b961784
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/knife_search.rst:63
# 6559e6dcab5f4df49ddad5209119bd04
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 2060dd69472f44299a6f12205a2d37fe
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# a69094a64ac4424ea735e3fc1c935861
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 466117db640f4363b38818754031b5a8
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# be678d97325049fc8f6867888b3a53fc
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 33151b1c074a458cb9cfebe2a36bdcbf
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 24fc8ec2715343ccb119030f3154e4cc
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 8beb2109ed31427991f6f44dfdbc6086
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# f88edfb2955d4f12b14d0db6f4b0064c
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/knife_search.rst:71
# 5554911877804cd5803b8ac7bbbd88bd
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# f5786a47326447d594ff10b74dfbbe74
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# 50004334a9df4b42be4ab43a139bbd44
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 6152999b3b55499c908a7b967d169d8d
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 085fbc60a2eb47ebbd9538ae6912ebca
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/knife_search.rst:77
# 5ffece61b97e49089fa5ebae31850cad
msgid "About Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# 5f1036c979ce4601977caa5f7c2d82f3
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# 430ed63e3b6f47509213f4b43cfbb229
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 7b57b7a8008c4fa9a12fd511e893ea7b
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 1b7c8b7d7820483fb7238fd85f96d38a
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 035fdd1067174b9ebc897f200aecfad4
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 8097a8dfc755401eb439b106a10ad11d
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 06d32a95ebf94be58f5ad7baea60248b
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 0de7e3de6c7444b3b49dd5dc44d1a392
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 51308115143d439b967c5a31ef755869
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# 0a42834bbe6e4ef2833046263ac0cbae
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# 414e4cb4df3e485fb4516bcd542f6e58
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# 94e65cd8b49341b2bfacc36602edc00d
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/knife_search.rst:83
# 81dbe5cd62da4228b92ca4585e36d435
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 40d527918c574d63bfb938757d93fb8b
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
# 435013597e3f44a68b8e87aec5b5af6d
# 25ad4872744e4d778045374cdf8dc863
# f3668cf7b1874455924b242672fac9d8
# 48a7fbbc64eb43c48223af85eeadfc94
# c8239b30e0a74f42a7c9328f24002d1c
# b93449fd2c814c8f8dbd049f23e7657b
msgid "to return something like:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 36211444037e4e8eb5a7d1eea607beda
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/knife_search.rst:87
# 22e059096955459aa260a6f141b3f5a7
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 4001850529d941a89df01c7831c4eb47
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/knife_search.rst:91
# a6d610035f4e464baf4cb05eaea19189
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# d07c199e7e9f4396aec21428edb9e3b3
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/knife_search.rst:95
# 325f3f130c6f4d6897716eaec863f3f8
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# f5fc7cd175f44e4781f46dda67c0486f
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# c1160bcbd95f4f25baf79a8c001e021c
msgid "For example:"
msgstr ""

#: ../source/knife_search.rst:99
# 8d7096d3d2614d2c881c3e2938147e22
msgid "Options"
msgstr ""

#: ../source/knife_search.rst:100
# 946defa2048646749a081721165d6429
msgid "Review the list of :doc:`common options </knife_common_options>` available to this (and all) |knife| subcommands and plugins."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:6
# f86a4cfa2d68435eb91a88537d4c889c
msgid "This sub-command has the following options:"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:9
# 1dcc782c61964824853c3c4c00a2a579
msgid "``-a ATTR``, ``--attribute ATTR``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:9
# 04def804e065426dbf78b59c800c6323
msgid "|attribute_show|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:12
# 8859e80df066457fb1491ddd728f53e1
msgid "``-b ROW``, ``--start ROW``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:12
# b6ebe16c014e483494425eb6121563ea
msgid "|start|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:15
# 346bf15250124516b3ac200f9d9b64f5
msgid "``-f FILTER``, ``--filter-result FILTER``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:15
# f6e95109cdeb49c8ae18f2eb5dc5249d
msgid "Use to return only attributes that match the specified ``FILTER``. For example: ``\\\"ServerName=name, Kernel=kernel.version\\``."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:18
# bb1d940715034c2da7f2d5f9d396d015
msgid "``-i``, ``--id-only``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:18
# 2cecc0777c13416499c5874c0054b5b1
msgid "|id-only|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:21
# 6b95af64bcc64fc4a4a7c24c644cab46
msgid "``INDEX``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:21
# 848655d0259b47de9b642b75d46e5e40
msgid "|search_index| Default index: ``node``."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:24
# dc4491d917284738ba8dbc2c5ae8ec87
msgid "``-l``, ``--long``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:24
# eedf67b7849f4a23874e04f946f808cc
msgid "|long|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:27
# a6a8432be9ac48a3bb20a15473ed5215
msgid "``-m``, ``--medium``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:27
# 58c0345e867f4c47b9f65ac972602657
msgid "|medium|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:30
# bb829bb9f5ce4284abe19dfad1642a52
msgid "``-o SORT``, ``--sort SORT``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:30
# ce1b3503579640b59ebe3e050483a472
msgid "|sort|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:33
# ef1ea879ba8441ecbf082a77164e1bd3
msgid "``-q SEARCH_QUERY``, ``--query SEARCH_QUERY``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:33
# 4e0acaddecd44f8a8ec1fc15ba98de56
msgid "|query|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:36
# 5c4b2966700b421b8f39f222518fdcfe
msgid "``-r``, ``--run-list``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:36
# 9b006b79245d4d9faf78f5e184e6e10e
msgid "|run-list indicator|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:39
# b631d99d64e046ffaa3e3a53d1cecf51
msgid "``-R INT``, ``--rows INT``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:39
# eae5f77269524e8b84dfc286dd9ddc2e
msgid "|rows|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:42
# e608c27d852d471c8501a53aa7b8532a
msgid "``SEARCH_QUERY``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:42
# 32b294e8232b40c38d20e244476c3ee6
msgid "|search_query|"
msgstr ""

#: ../source/knife_search.rst:106
# 4676c16fb552417382cb2d2a73a66f54
msgid "The following examples show how to use this |knife| subcommand:"
msgstr ""

#: ../source/knife_search.rst:108
# 2792cd5a276a48869bc8f13d708bb55c
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 617cbbee62c345b38eb2e431be53e07c
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:112
# fa05349bed6d44648d12defdbc1d5ac5
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 615c7bbf029743d7abb39b04a9b345d5
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:116
# c466437f91a74ee49b0ce8d1dbf8a9cb
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# 3eec66d0ab054aba90bda0347b1fe51d
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../source/knife_search.rst:120
# 706a8d3af1e4452281a469062c06972b
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 4587e41945ed4a2da5b766131fa2b046
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/knife_search.rst:124
# 8f5197f840bb4673b6b183f300b60322
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# cbec7597e68a419bb42e9fd3a38a0256
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/knife_search.rst:128
# 189c2a0e824d4409a6a3d42e1ea11440
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 296226bddfe5489985623699ae05e92b
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/knife_search.rst:132
# ae82ff83fe8c43f7be2843cf551649ef
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# f4c1c2e3b86a4e29a659e623a5c278f2
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/knife_search.rst:136
# 27aaeb9fe965462381aec242a00b9a88
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 219fe6fe9160439284d6ce2537bd0b5a
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/knife_search.rst:140
# 43b0048eb0c74b569223e65c673050d3
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 02b9f06deec348d587721cc2aeec6794
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# f1e1b98282b2428893344771681a4064
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

