# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-07 21:21\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_search.rst:8
# fefee5a223fd4091a4406a0ddef8eeb6
msgid "knife search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 6c83ef75b65a42c59b5cc9cf6a9e327b
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# f13df1c10e344305a6f58292059e0214
msgid "|knife search|"
msgstr ""

#: ../source/knife_search.rst:15
# e209350b02e14a4c8d4e30a892b1dc0a
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:6
# ee3a2c9b6e004e4a94a210d9cc1a3582
msgid "This argument has the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:12
# 6927b21cd8f54b50af7f83a85ba3eb6f
msgid "where ``INDEX`` is one of ``client``, ``environment``, ``node``, ``role``, or the name of a data bag and ``SEARCH_QUERY`` is the search query syntax for the query that will be executed."
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:14
# b09df31ef606411093fd84984a5b3881
msgid "``INDEX`` is implied if omitted, and will default to ``node``. For example:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:20
# e2cc5d0ed40e46879a719bf1c6f579d9
msgid "will return something similar to:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:35
# 71c52d2003fc44c8877f627610b30c24
msgid "and is the same search as:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:41
# 26a68a61045a4858abd7e1fbc51846ba
msgid "If the ``SEARCH_QUERY`` does not contain a colon character (``:``), then the default query pattern is ``tags:*#{@query}* OR roles:*#{@query}* OR fqdn:*#{@query}* OR addresses:*#{@query}*``, which means the following two search queries are effectively the same:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:47
# 60ec036d700446af85c70724d7f38125
msgid "or:"
msgstr ""

#: ../source/knife_search.rst:19
# 5eb3b97a070c44e09d5b02c29bce412b
msgid "Options"
msgstr ""

#: ../source/knife_search.rst:20
# c28bf3860dea499489e1eabbaaf338d8
msgid "Review the list of :doc:`common options </knife_common_options>` available to this (and all) |knife| subcommands and plugins."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:6
# 193035ed12fb4b439d076497cc860a8d
msgid "This sub-command has the following options:"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:9
# 1e65a18e8c74442b9d2b8586113b804e
msgid "|attribute_show|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:12
# eb2ece4e542046088df51e02c4e9ef09
msgid "|start|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:15
# d65fc9908a804c28a8dc5b8533ddf509
msgid "|id-only|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:18
# 3471b75061e44982955e699a9d7e7281
msgid "|search_index| Default index: ``node``."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:21
# 02084f6b4c3b4facbfa8c3c0050b4364
msgid "|long|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:24
# eb0b6575e1924e1eadccef7227fb40df
msgid "|medium|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:27
# 9485f1c024c54cd5a6ced7cca98d5a4f
msgid "|sort|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:30
# f35df8cf851743bab2835a1aa0b749a2
msgid "|query|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:33
# 1dd837842b6d42d2863015c45ca28538
msgid "|run-list indicator|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:36
# ed08b762243845fca6108a05f90dc04b
msgid "|rows|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:39
# 954902a22b9442d588daa36d738daefa
msgid "|search_query|"
msgstr ""

#: ../source/knife_search.rst:25
# 990f41561b09471b8f4d25a072c8c8c7
msgid "Examples"
msgstr ""

#: ../source/knife_search.rst:26
# c77e61dd68834edbb8d073474b368f92
msgid "The following examples show how to use this |knife| subcommand:"
msgstr ""

#: ../source/knife_search.rst:28
# 12d7881a3c0d4f599d6e289c44ed462c
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 89b8f0b152374367abdea00811364fdd
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
# cf12e996e5084b6bb43b5fefa5f7d0b6
# 0b9d4d117f884a39add7c56b47f7feb6
msgid "to return something like:"
msgstr ""

#: ../source/knife_search.rst:32
# 65627b5dc3644217a5fda33d1dd73229
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 93716ae31e064d8bbf6ecb950dfbb874
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:36
# fbd3030ce74c45aa86d187839fc42bb1
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 5550b9521c284f08b22d9f4485dec973
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/knife_search.rst:40
# 24ec98373b3e493796395131235247c5
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# d856cdfebb9845c6a24a94be27e21551
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/knife_search.rst:44
# 07c8717a6d6b4a8eb4655df76f5703be
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# be3cfb26eabd46ec9030996c8ca509dc
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/knife_search.rst:48
# e349e5d8d00f4d5e8a07ef5169e7cfc2
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 5b695eae1ae94b8391cf73d705878223
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/knife_search.rst:52
# a853238e505540b4a5e5ad3eab1d412c
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 68f551f228ec407580261e62ab19b572
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/knife_search.rst:56
# 185d06df715549518a52d387b8954d3a
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# fe52d687d2814f7f82a656a6f6194ed2
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 3e71cb152cd0413bb04388ac25d7fb40
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

