# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-16 13:47\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_search.rst:8
# d3d6e15fa7004fab921be3e4e532d877
msgid "knife search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# e4f7e0112f8e45098663fa41973b7349
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 8fe68957fd994b5f90da5cda2e7a03ed
msgid "|knife search|"
msgstr ""

#: ../source/knife_search.rst:15
# 74ef18c17104473eb01cd587ff01aa80
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:6
# 86f52c5efc504487a05421ff8bac1a46
msgid "This argument has the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:12
# d68f4497dbbf4665834d5ba43b856391
msgid "where ``INDEX`` is one of ``client``, ``environment``, ``node``, ``role``, or the name of a data bag and ``SEARCH_QUERY`` is the search query syntax for the query that will be executed."
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:14
# 56971de1e501455d8856b680b6e77e4c
msgid "``INDEX`` is implied if omitted, and will default to ``node``. For example:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:20
# 6b10835798144171a5236b114239689b
msgid "will return something similar to:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:35
# bc646b4273684135ac3b2800f4b6a136
msgid "and is the same search as:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:41
# 40184caa9d5b4fa0abbd638312f712da
msgid "If the ``SEARCH_QUERY`` does not contain a colon character (``:``), then the default query pattern is ``tags:*#{@query}* OR roles:*#{@query}* OR fqdn:*#{@query}* OR addresses:*#{@query}*``, which means the following two search queries are effectively the same:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:47
# f4454934fffc4db58f09f608cad1802d
msgid "or:"
msgstr ""

#: ../source/knife_search.rst:19
# 2215740c25714f41be5d9674d95c0417
msgid "Options"
msgstr ""

#: ../source/knife_search.rst:20
# 47c2054c70ad48a19a68d28eca3e5d80
msgid "Review the list of :doc:`common options </knife_common_options>` available to this (and all) |knife| subcommands and plugins."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:6
# 839deefd0d764c2ab635f0e42e2fff99
msgid "This sub-command has the following options:"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:9
# e323d4b2b4ca433487479c4027941bf7
msgid "|attribute_show|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:12
# 3712e67a0b8b487aabd6a369186629b8
msgid "|start|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:15
# 9e72276673094905a58012618e9a6794
msgid "|id-only|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:18
# a69632b297344184b804c4beb1402ffd
msgid "|search_index| Default index: ``node``."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:21
# d701cfde1ffc4f4f9d04959118af11d5
msgid "|long|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:24
# fb2a3c5ccf3f48b6bff5ff1fc3432349
msgid "|medium|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:27
# bb49e9c86c284884a20372b72ea023b4
msgid "|sort|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:30
# 4e1f4dbca3bc484d8a0bee0399ca0b34
msgid "|query|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:33
# 7e93c557d298497ebf3d91ede72166af
msgid "|run-list indicator|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:36
# 6aed700ab84245688068ddefda93e6c2
msgid "|rows|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:39
# 6cdb457027a846c9aa0abe701a09818e
msgid "|search_query|"
msgstr ""

#: ../source/knife_search.rst:25
# 3dc4a5b374564f978ab0a1945ea5618e
msgid "Examples"
msgstr ""

#: ../source/knife_search.rst:26
# 19c8b6d0e2394e7ba39761621d7455b7
msgid "The following examples show how to use this |knife| subcommand:"
msgstr ""

#: ../source/knife_search.rst:28
# 6c24dd0b4fcf4d81b7e528739c3d152b
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# ec95ad411a7a4273b41fd3eac80c44d7
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
# ffdb49d95c114d7da7665e4876909621
# f32907aee9534027b4c6098adae23110
msgid "to return something like:"
msgstr ""

#: ../source/knife_search.rst:32
# 2938ee6ceea94f91a7fa511e36136f66
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 3631b3a225d245b6bca2cfc4caecadec
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:36
# e514d387d0c14cd0ae3dd1cdff8485d9
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 88462ae80541427aac15b6d753efadd0
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/knife_search.rst:40
# 104f4556314f45878b74daaf3ce7fe24
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 5f6bf6ac067b47e2b509a20219b3fb49
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/knife_search.rst:44
# 9fda4aa687dd44f094787b8a4721486c
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# feef9e37a9c64453b0d3fc4be5e586cd
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/knife_search.rst:48
# 0e6bcddacefb480a876dd1eae6123a52
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 3307c22747d8419497bef6a7adb1729b
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/knife_search.rst:52
# 6e9c86aed5b04f048ac9d7d459a186d9
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 8579914e4bf140a3b7afe71ad867deca
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/knife_search.rst:56
# 775c103edbf548e585d9b97c2ec80c55
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 24eebc6a5369495fa74c2c631ec53d42
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 23a42a4eb189457ca7ce275a876214c3
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

