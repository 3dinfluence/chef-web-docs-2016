# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-01-28 12:43-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_search.rst:8
# b3b1e293cea542b09fd285df78380881
msgid "knife search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 4c699e7feed14c64bf5ef66824ae4d6a
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# f3e3ad9a24c0431ca7d120b9e0f6d3a8
msgid "Use the |subcommand knife search| subcommand run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/knife_search.rst:15
# bed83212ffb442e2bc41a07a745013e2
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:6
# f6e2fa0bee3449d68438aeb0977f313d
msgid "This subcommand has the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:12
# 75ca63a0c43342d395a1daeee5aeb1c6
msgid "where ``INDEX`` is one of ``client``, ``environment``, ``node``, ``role``, or the name of a data bag and ``SEARCH_QUERY`` is the search query syntax for the query that will be executed."
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:14
# 8ed10cbbacf54d429f01cb2505c7eec8
msgid "``INDEX`` is implied if omitted, and will default to ``node``. For example:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:20
# 32f17212319a45ee8b4be1cdae21f795
msgid "will return something similar to:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:35
# dccf5748b3e442fdac5cadcfc36f5826
msgid "and is the same search as:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:41
# d9ae970c44b5417785a17ed9063186bd
msgid "If the ``SEARCH_QUERY`` does not contain a colon character (``:``), then the default query pattern is ``tags:*#{@query}* OR roles:*#{@query}* OR fqdn:*#{@query}* OR addresses:*#{@query}*``, which means the following two search queries are effectively the same:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:47
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
#: ../../step_knife/step_knife_search_by_recipe.rst:9
# ad0b994f8691445eb965a6ee749a6cdd
# 2d1975e25fcc41b2b5339e6dd861be25
# c94696b8499c439e9f9bcd21e4b764e0
# 9807d5fdb7be42c8ad7bb97ae23a01e4
# 72854a8fa0e74a81ab5a1ec1129f7a9f
# 59dd5365cebb4cd3abe1c56c4319d1c0
# 23b0d611d049428cb34a2091d0271817
msgid "or:"
msgstr ""

#: ../source/knife_search.rst:19
# 922af4f430b9443fa717694b7da9e38e
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 010bd83b6fe44dbd834b6be5ce34005c
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 36e230fad8f24aab99194516c5e85e71
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/knife_search.rst:23
# 6434ad3e93ee4cf68513fc1b02718035
msgid "About Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 2df121ad23cf4d9e8ceb40810a0e3ca6
msgid "|search key| Any field that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available fields for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/knife_search.rst:27
# 572d69484e774d69bd396327e97d0588
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# c9d77000544544a7b79681d006f117ac
msgid "A nested field appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested fields are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound fields that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 63e1f6f3ce7740f9a60564f2da7249b3
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# d4741cd1cb3d4f57a0d8a34986e08033
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 004cce386ad644e195fdd7a5e02e508b
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 763c38b2072642afa567a07b3e0748ce
# feb22b2c3a814b4e96ef3f384accf174
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# a658944ebde74ac7ad44aa92be3cedf7
msgid "This data is also flattened into various compound fields, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 74638958a32241ac8feefb3053cb787c
msgid "This flattened data structure also supports using wildcard compound fields, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for a nested field:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# ad05671c51a7456a9c3842dd8b0dc610
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 8edf90899b8d4df4a444f15f8b168e2d
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../source/knife_search.rst:31
#: ../source/knife_search.rst:105
# e956e84601aa43de91f2e8b8dcbf06ac
# d7d3670b55d0419482db5fb2a3621c54
msgid "Examples"
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 8c39b561ee8a4bca87aea07d748fde4d
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# eebdf9183845480093a7913deb61952d
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# e5a1b5a230f44086aa511ca6eaf6cadb
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 747954eb4f224bf3ad3766c801f1b8d9
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 4ac0e93eb39841dc8205cf3ae3013608
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 910aa4ab7083478caebd5e712d2078c7
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 268a064c606f4614b10e8dd3dea9c9b1
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# da38718351ba43bda5090b80ced8b9bf
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/knife_search.rst:43
# 263fa27d7d694a3cac058fc48aa52d3f
msgid "About Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# de0d440c685240e289cf0edffbf16870
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/knife_search.rst:47
# 20e30552bab94edb81937e20db0755ae
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 7289c987f4524e7f8caabff04642b74a
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# a3ebb694cc754aae920fe8df282e6d3d
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# d8b9b7c3796045ac86f971f7ac0ae623
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# bdad8243a5584ba3b03b01167d15ac2a
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 3042eded1b3647bd870770690aab1888
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/knife_search.rst:55
# bace3830e0364ad5bbe60f8dd69980b1
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# bd3a7f03e2544cee90159c260ee1d3ac
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 32d715fbbc8b4179bba92830009467f4
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 1170cb5559f0414da4c2e9c7ba3ed4cc
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 61685e3d5fe3478a9c10fc91e608004d
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 666afbb085f74e46813c2ba3ffbd4073
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# f19e66301eb04b418236da910afa1a54
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 9abcea38be8240238a60f09dfde00191
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/knife_search.rst:63
# df17231c605e4e5a95002e017afbdc7b
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 8f501971fcd94c969b1d735bfb5f41ec
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# 4bd3b72aa0604819b765711c1fcb3f72
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 671190b28ab7447ab524ea26f3087832
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# c2f6f65a370c434f83217243d949b70b
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 685e986e4d2143a98b32847ce80308dd
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# a234927b37a84643b1711d7923024d6b
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 1467ab64998a4f56a29cdf8842bf2032
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# c47372d79ec64f05be6d719b50af65d0
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/knife_search.rst:71
# 933aec22844740b2acdf2e7bb0f30033
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# a739813669eb46bbae7889963bd36c24
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# ec87f5693b3749908189b0df63856d3e
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 7aacc9a436834649ac498e8b13322c00
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 27e693e7d9a34d98af3a8d7ea78be6d1
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/knife_search.rst:77
# a6017c159ad94eaab0787fd1c71384ac
msgid "About Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# ffbfe74581c64f378603c0d4dd29f70e
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# 13f66b9f9d2f4759b2d21d10503aa2c8
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 38682cd068954dbd9a1f3b15e98e8f7c
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# a2c80c06eb744692b9d0ade54f5c0184
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 96ee7ad7e41241a1a544cf2e12584c43
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# c233c50e7d5847f7822c116d010ca43b
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 577a5f1803b645bebcf20a396672403e
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 803703d7879d469b96c6efae46d55958
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# e9fe7aac5b8341d386ab204cb2f0d850
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# b87c9f650ff143d1b43dd20625c8b469
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# 4e843bab92044df0a8567ae8d93686ba
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# f8a8b30fdee34761b51d2ed473e86d37
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/knife_search.rst:83
# b2c8b46731b3414ea2ba4e1d38d620e1
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# b1796fff967a494186998799c2927a91
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
# e0108ea28ced44ffb82a25d04016a44f
# 7f65e4313ecd47eca8cb6c0048717802
# 101228f9d1004532ad632f26c2aebb38
# a1197252548147e9a3d348d3bc87a38e
# 737035c346b24b2dbf056ebda26d0ba7
# 58d3a839af914fe7bd6d628f961c8aa8
msgid "to return something like:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# d4582c10ee174a7ea972a8e73771c6e8
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/knife_search.rst:87
# a7197e6848ad436f8bdb9fe6f13f8690
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 59f6840520754feca9d1b6908c3d2db7
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/knife_search.rst:91
# f8bac4d63c2a4c9ca6054d624f929c9e
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# dc6a089bc55d4b048d2f71b006580d7a
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/knife_search.rst:95
# b95d9f0645a94e218a55c960a683d380
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 5f13e07f25f44b68813a97b1efe9d00e
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# 38cdbf0a262b49779c67431d310d4d30
msgid "For example:"
msgstr ""

#: ../source/knife_search.rst:99
# ad673b7332b1482fa8a2c04166dae0c8
msgid "Options"
msgstr ""

#: ../source/knife_search.rst:100
# 5541f04ca6034a5d83e9d2641829f144
msgid "Review the list of :doc:`common options </knife_common_options>` available to this (and all) |knife| subcommands and plugins."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:6
# ddb17115daa84640ba603a27b94c562b
msgid "This sub-command has the following options:"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:9
# 1df3b376af0843fbba1e51d6f17a070f
msgid "``-a ATTR``, ``--attribute ATTR``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:9
# f7953d59a0ac465abaca28fcc89ffa1c
msgid "|attribute_show|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:12
# 5275f2b55c154bae98e9029dac9323e8
msgid "``-b ROW``, ``--start ROW``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:12
# 1101ba89539144118b3ea43d98de5ce4
msgid "|start|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:15
# 34a3ebfd764a4111af96d2fb76235e8c
msgid "``-f FILTER``, ``--filter-result FILTER``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:15
# eff61dc6cf0a4d2d8a9eb693f1b9f0df
msgid "Use to return only attributes that match the specified ``FILTER``. For example: ``\\\"ServerName=name, Kernel=kernel.version\\``."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:18
# 8eec359f97c1424d86a1b1f71dedc2d7
msgid "``-i``, ``--id-only``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:18
# db7fc30255a74da4b760cd408d1bb8b3
msgid "|id-only|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:21
# 76ab2a76044f4431abf89d6c0e8514a0
msgid "``INDEX``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:21
# e8ccca868b6d434fa851157ec77e1133
msgid "|search_index| Default index: ``node``."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:24
# 35a47d1575f846b49daf2da53ba075ba
msgid "``-l``, ``--long``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:24
# 2270ea7e16574dfe939b5a7e8702f889
msgid "|long|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:27
# a595c68c5ced42b1b1f3dd2519b71d99
msgid "``-m``, ``--medium``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:27
# 544c0149cb024314b9622b62c528ac1d
msgid "|medium|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:30
# aca63ee2d18d4c899e008db60ddd4ba4
msgid "``-o SORT``, ``--sort SORT``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:30
# 784ec433aa394839a7452cc4a2840321
msgid "|sort|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:33
# 72a222fe837f49b5b083be31e5ecd9ea
msgid "``-q SEARCH_QUERY``, ``--query SEARCH_QUERY``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:33
# d4a360b28e8a4d45aac6f3ece1f305db
msgid "|query|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:36
# 17eda06a9ce444d392a8de26dfd2b59f
msgid "``-r``, ``--run-list``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:36
# 89973e52b4204db3a08c60aee75df667
msgid "|run-list indicator|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:39
# e8347bcc21674aafab58bf4f0bcfdbc7
msgid "``-R INT``, ``--rows INT``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:39
# 467745ada8a84e83bb7625ab429a0aaa
msgid "|rows|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:42
# eb7f94ec7342471aa064ebb14f62dbcc
msgid "``SEARCH_QUERY``"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:42
# 77501785987843c59f6fcd4c6743f4ad
msgid "|search_query|"
msgstr ""

#: ../source/knife_search.rst:106
# 899801d37f0a417dac5e849f8345bef8
msgid "The following examples show how to use this |knife| subcommand:"
msgstr ""

#: ../source/knife_search.rst:108
# 240c8a78a02d420387105b842a5f7704
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 942b14fa9aaf4b25acbf607aaf7c27e2
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:112
# baacde4ac24041d9af9296b9b8a5e9f6
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 1ac62a682e3f43469e1e6ff03da65953
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:116
# 78a89d0d2ff2480cabea95b501180764
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# 622d46dd5fc8414ebe71e12d3048f397
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../source/knife_search.rst:120
# 0b59324471df4320a5204f4cbe3dc982
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 60a9791c14c141288ce1fce1a1ff3a1d
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/knife_search.rst:124
# 40d5a775ff9f4c468a66964a26503b1c
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# cc11123f2c5c4695a756c1ba5c61ffd8
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/knife_search.rst:128
# c67a9b6b04954666af1b29bb4746a82b
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# a172109a8fbd475484999eb0cda19933
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/knife_search.rst:132
# 233fe1a6032b49db8bb5338da2471eb0
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 5c8e25a07585496daece437f8ca771f0
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/knife_search.rst:136
# 0637d09850994d61b5c55441d8c4b609
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 032cbe6a63f742c7aecde25529485479
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/knife_search.rst:140
# 5a927916db814fa5993b85c3dfc0b83c
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# a1e0acf4dc404d88a4e53c6e17d17890
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 28c1d0c179274cb59ca5bcc4fa504d2e
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

