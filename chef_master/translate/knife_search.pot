# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-09 15:33\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/knife_search.rst:8
# 038560bea689422eb6dc2ff6ea68b975
msgid "knife search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 7cba2c7a1f7f4510a33f0f5ceb2d5564
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 1798118ee91f4d068f64053412e8fcae
msgid "|knife search|"
msgstr ""

#: ../source/knife_search.rst:15
# 802ee914abe54b58a73ac87c8275c2a0
msgid "Syntax"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:6
# fae9a098589b44cf9def2d380c3ab3c2
msgid "This argument has the following syntax:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:12
# 9dccb4ebc05740d0bb70dcdeed42a0fc
msgid "where ``INDEX`` is one of ``client``, ``environment``, ``node``, ``role``, or the name of a data bag and ``SEARCH_QUERY`` is the search query syntax for the query that will be executed."
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:14
# a2b4bed26fa444688b34e8f64cd39343
msgid "``INDEX`` is implied if omitted, and will default to ``node``. For example:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:20
# f76b340f5d0a4012a84f2f7dccbaa13a
msgid "will return something similar to:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:35
# ffa9eb54215b4c008b322d46fb0ebae5
msgid "and is the same search as:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:41
# a153a1248d9d4301a88539fe31657fbc
msgid "If the ``SEARCH_QUERY`` does not contain a colon character (``:``), then the default query pattern is ``tags:*#{@query}* OR roles:*#{@query}* OR fqdn:*#{@query}* OR addresses:*#{@query}*``, which means the following two search queries are effectively the same:"
msgstr ""

#: ../../includes_knife/includes_knife_search_syntax.rst:47
# b5158412d1a542ed9473a1adcadd925a
msgid "or:"
msgstr ""

#: ../source/knife_search.rst:19
# bc074205d67148298c7a71346a0bde44
msgid "Options"
msgstr ""

#: ../source/knife_search.rst:20
# b4a1f47d82544714a4f147eba781ac9d
msgid "Review the list of :doc:`common options </knife_common_options>` available to this (and all) |knife| subcommands and plugins."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:6
# 5a9cdcb4798541129b9e1e67c69ee48d
msgid "This sub-command has the following options:"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:9
# 9b03832249d444ef833ffd181b62983f
msgid "|attribute_show|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:12
# 5f55100e4660452baf61ca52da9e4d34
msgid "|start|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:15
# 97500ecf4c7449099b485001ae0df1e3
msgid "|id-only|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:18
# c34b3fbcc0c24340a0c2f46751eb30e5
msgid "|search_index| Default index: ``node``."
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:21
# 7e926d26ad9e41f6a2f8301c8139c459
msgid "|long|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:24
# 8e0cf65ff8aa4d5fa925dd08e909d149
msgid "|medium|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:27
# 60675171e3d0444888e5758a2a0fe58e
msgid "|sort|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:30
# aba16774f830460187c756480743c28c
msgid "|query|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:33
# b7881fa849734cc6a0263ec58b6710ef
msgid "|run-list indicator|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:36
# 41bcb93ebdcd4b769befe773e0fedea0
msgid "|rows|"
msgstr ""

#: ../../includes_knife/includes_knife_search_options.rst:39
# 85b1446b3dce41488484cc88f4bc371d
msgid "|search_query|"
msgstr ""

#: ../source/knife_search.rst:25
# 2b723c4686b04598a9696e7e7868db82
msgid "Examples"
msgstr ""

#: ../source/knife_search.rst:26
# d269bbfc1f0e4534ba3ad78c7dd847d0
msgid "The following examples show how to use this |knife| subcommand:"
msgstr ""

#: ../source/knife_search.rst:28
# b10e2ac85fc6446eb0fbc0f55e577da6
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# c032a63c681e468294b2b76fcb6c9943
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
# 993fe0a7f1d244de9fb2741c0c7605be
# 8f69e2d8299f4c0686a7bc2d78665160
msgid "to return something like:"
msgstr ""

#: ../source/knife_search.rst:32
# ddcd3bb6a5da46da9258686770e64b88
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# ace6c344ed7541289977b96c9b6f564a
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/knife_search.rst:36
# 663039d9160641f3ba142b1c7dd77cde
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# bf1d9109a415449b8458efe85e3b8be8
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/knife_search.rst:40
# 505b5c22a716433ea76b0cff71f7facc
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 35d2f8ff9db7494d91d462c91049ac67
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/knife_search.rst:44
# c691fa635f664dd599397c4cbba16dd3
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# dc5327ad5d7040999e6f09cd71179cbe
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/knife_search.rst:48
# 91ca51453f804e718307f27fa095be38
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# e1e9104562604fd09fd225187372e647
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/knife_search.rst:52
# b7a32f04a8b24e8682dbcc56d0bce501
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 0bd60b2b6a884019a7d7bd2c974c18ea
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/knife_search.rst:56
# 7b97742fd67545299396c312bf7b5fdb
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 0b97e94e24904ad6b2eb7228989654bb
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# feebc2f745c34f688f9cf02895d2c33e
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

