# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-01-28 12:43-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/environments.rst:8
# c6b4657e99444cd381629f3a5270126f
msgid "About Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 991d473b1e664345a4addb302f37dba0
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../source/environments.rst:13
# 30b654f8008447edb7f25ad9e3e54c0a
msgid "The _default Environment"
msgstr ""

#: ../../includes_environment/includes_environment_default.rst:4
# e8ade4e0c1ee4524b567a4c2fc81dc04
msgid "Every organization must have at least one environment. Every organization starts out with a single environment that is named ``_default``, which ensures that at least one environment is always available to the |chef server|. The ``_default`` environment cannot be modified in any way. Nodes, roles, run-lists, cookbooks (and cookbook versions), and attributes specific to an organization can only be associated with a custom environment."
msgstr ""

#: ../source/environments.rst:17
# b1fa719aba1945bc88f5d45733dd9779
msgid "Environment Attributes"
msgstr ""

#: ../../includes_environment/includes_environment_attribute.rst:4
# c97a327cfc1d4201ab0b466d137b3580
msgid "An attribute can be defined in an environment and then used to override the default settings on a node. When an environment is applied during a |chef client| run, these attributes are compared to the attributes that are already present on the node. When the environment attributes take precedence over the default attributes, the |chef client| will apply those new settings and values during the |chef client| run on the node."
msgstr ""

#: ../../includes_environment/includes_environment_attribute.rst:6
# 067a5290e5a24b17953bcb71c8d5aac2
msgid "An environment attribute can only be set to be a default attribute or an override attribute. An environment attribute cannot be set to be a ``normal`` attribute. Use the ``default_attribute`` and ``override_attribute`` methods in the |ruby| DSL file or the ``default_attributes`` and ``override_attributes`` hashes in a |json| data file."
msgstr ""

#: ../source/environments.rst:20
# b71cd543c4e14cbc99a750d6d4c0466b
msgid "|note see_attributes_overview|"
msgstr ""

#: ../source/environments.rst:23
# 757390d69c5b480dae1114a3914e70c5
msgid "Attribute Types"
msgstr ""

#: ../../includes_environment/includes_environment_attribute_type.rst:4
# be6b678864a3466cad90e15ccb11b9a7
msgid "There are two types of attributes that can be used with environments:"
msgstr ""

#: ../../includes_environment/includes_environment_attribute_type.rst:10
# 19b43a84608843dabdeb68a82be2078d
msgid "Attribute Type"
msgstr ""

#: ../../includes_environment/includes_environment_attribute_type.rst:11
#: ../../includes_node/includes_node_attribute_whitelist.rst:16
#: ../../includes_environment/includes_environment_format_ruby.rst:11
#: ../../includes_environment/includes_environment_format_json.rst:33
# 646a4c3a621a4682b7ca9390013a8163
# 96588c3eca0d4ee9a82d95b44237e1b4
# 6be327c363a44f5d9398879d8382c2a9
# 49e61285aa24491cb8b6174dc1affaf6
msgid "Description"
msgstr ""

#: ../../includes_environment/includes_environment_attribute_type.rst:12
# b33970ccb86e4ee786b5faaf30014636
msgid "``default``"
msgstr ""

#: ../../includes_environment/includes_environment_attribute_type.rst:13
# e29c23e4105b4363a252742250b96dc2
msgid "|attribute_type default|"
msgstr ""

#: ../../includes_environment/includes_environment_attribute_type.rst:14
# 15fb66c77c784d73ad5a926eb897deb3
msgid "``override``"
msgstr ""

#: ../../includes_environment/includes_environment_attribute_type.rst:15
# cbe1e25a65644806b21366f44f37283b
msgid "|attribute_type override|"
msgstr ""

#: ../source/environments.rst:27
# f70f15ce26324dc1a021c803dfd65ee6
msgid "Attribute Persistence"
msgstr ""

#: ../../includes_node/includes_node_attribute_persistence.rst:4
# b78637898055417abc757cb2594ef8a4
msgid "At the beginning of a |chef client| run, all default, override, and automatic attributes are reset. The |chef client| rebuilds them using data collected by |ohai| at the beginning of the |chef client| run and by attributes that are defined in cookbooks, roles, and environments. Normal attributes are never reset. All attributes are then merged and applied to the node according to attribute precedence. At the conclusion of the |chef client| run, all default, override, and automatic attributes disappear, leaving only a collection of normal attributes that will persist until the next |chef client| run."
msgstr ""

#: ../source/environments.rst:31
# dd551dfd47df4a20ad320a090488aca3
msgid "Attribute Precedence"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:4
# 34149a63301e4d26a75c2c5f940a8b66
msgid "Attributes are always applied by the |chef client| in the following order:"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:6
# df0e17471af54b5ca0f259712fefe5ca
msgid "A ``default`` attribute located in a cookbook attribute file"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:7
# 3cb45005f8c941b5a4444e12a691f9c0
msgid "A ``default`` attribute located in a recipe"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:8
# 4bd1aaa502f5430a8e7fa14766bfa565
msgid "A ``default`` attribute located in an environment"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:9
# 971726c8cb1f4070992858b2f479725f
msgid "A ``default`` attribute located in role"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:10
# 533648d08e9141989ac33bef76c6617a
msgid "A ``force_default`` attribute located in a cookbook attribute file"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:11
# 828b6c8ffb1e40c394cdecc4134b47a0
msgid "A ``force_default`` attribute located in a recipe"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:12
# 66de7f85a1fd443c9ace757a5a6c8155
msgid "A ``normal`` attribute located in a cookbook attribute file"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:13
# f2e32dee5de54eac961ff90f00bc6aae
msgid "A ``normal`` attribute located in a recipe"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:14
# 6b2df77e84f14357b30e6b123b9bcf7c
msgid "An ``override`` attribute located in a cookbook attribute file"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:15
# a2d93f56440b401585740fab595e17e0
msgid "An ``override`` attribute located in a recipe"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:16
# 4a1085d918f8421084295dad80e3f4ab
msgid "An ``override`` attribute located in a role"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:17
# a1172e0feb9c4bed89b1e4da7d263090
msgid "An ``override`` attribute located in an environment"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:18
# 6c51b3c48a6943008599b5443ccfc985
msgid "A ``force_override`` attribute located in a cookbook attribute file"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:19
# cb57d733f8f34ac18841cd4247ffa1c3
msgid "A ``force_override`` attribute located in a recipe"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:20
# f5308a72fbb24823ab7751c8c4ff6e69
msgid "An ``automatic`` attribute identified by |ohai| at the start of the |chef client| run"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:22
# d169756d3e5a47e19613a41e47568495
msgid "where the last attribute in the list is the one that is applied to the node."
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:24
# 6617d96159fa488989707542795435f4
msgid "The attribute precedence order for roles and environments is reversed for ``default`` and ``override`` attributes. The precedence order for ``default`` attributes is environment, then role. The precedence order for ``override`` attributes is role, then environment. Applying environment ``override`` attributes after role ``override`` attributes allows the same role to be used across multiple environments, yet ensuring that values can be set that are specific to each environment (when required). For example, the role for an application server may exist in all environments, yet one environment may use a database server that is different from other environments."
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:26
# dc51c81e877e448480a13eccf88b3f9d
msgid "Attribute precedence, viewed from the same perspective as the overview diagram, where the numbers in the diagram match the order of attribute precedence:"
msgstr ""

#: ../../includes_node/includes_node_attribute_precedence.rst:30
# 76e20cabb96f4da8b4b6f084469b2395
msgid "Attribute precedence, when viewed as a table:"
msgstr ""

#: ../source/environments.rst:35
# 0a575ea14e3e4d44a559b99b45c7271e
msgid "Whitelist Attributes"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:5
# bdb6ad4da6334b78b4be0a720dc6f92c
msgid "When these settings are used, any attribute not defined in a whitelist will not be saved. Each attribute type is whitelisted independently of the other attribute types. For example, if ``automatic_attribute_whitelist`` defines attributes to be saved, but ``normal_attribute_whitelist``, ``default_attribute_whitelist``, and ``override_attribute_whitelist`` are not defined, then all normal, default and override attributes are saved, along with only the specified automatic attributes."
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:7
# d18a6d15a1044130b19e5cabc04c5ef6
msgid "Attributes that should be saved by a node may be whitelisted in the |client rb| file. The whitelist is a |ruby hash| of keys that specify each attribute to be saved."
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:9
# b2007c6b67a14f63bbc4aea5a5da1b5b
msgid "Attribute are whitelisted by attribute type, with each attribute type being whitelisted independently. Each attribute type---``automatic``, ``default``, ``normal``, and ``override``---may define whitelists by using the following settings in the |client rb| file:"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:15
#: ../../includes_environment/includes_environment_format_ruby.rst:10
#: ../../includes_environment/includes_environment_format_json.rst:32
# cc721d5af7c34779968bb74d8c474917
# aaef08d787234caeabd0f9182e5dd9d6
# 68a4e42187104e6db60af206111533e5
msgid "Setting"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:17
# 17838d594daa486b80c4e55c7714405b
msgid "``automatic_attribute_whitelist``"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:18
# 147822a8cb5d44008f5f752539024cb4
msgid "|whitelist attribute_automatic| For example: ``[\"network/interfaces/eth0\"]``. Default value: all attributes are saved. |whitelist attribute_none|"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:19
# 3f7fef524a934011b7c3cb7241235fb3
msgid "``default_attribute_whitelist``"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:20
# 876ddb0d2abe437f8cc1428ed92df566
msgid "|whitelist attribute_default| For example: ``[\"filesystem/dev/disk0s2/size\"]``. Default value: all attributes are saved. |whitelist attribute_none|"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:21
# c05bf7add1564b09b6dfdb8bf7da74ac
msgid "``normal_attribute_whitelist``"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:22
# 3ff4ea46686748f8af5aa3895d4b5a3e
msgid "|whitelist attribute_normal| For example: ``[\"filesystem/dev/disk0s2/size\"]``. Default value: all attributes are saved. |whitelist attribute_none|"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:23
# d32094f85adc46cfa4ae5afc7449c770
msgid "``override_attribute_whitelist``"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:24
# 6085e3eeb3f3409eb6ce2e04b86b8976
msgid "|whitelist attribute_override| For example: ``[\"map - autohome/size\"]``. Default value: all attributes are saved. |whitelist attribute_none|"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:26
# 7fe117c2230440138d6156c666e47ce7
msgid "It is recommended that only ``automatic_attribute_whitelist`` be used to whitelist attributes. This is primarily because automatic attributes generate the most data, but also that normal, default, and override attributes are typically much more important attributes and are more likely to cause issues if they are whitelisted incorrectly."
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:28
# dac253a84b9d48b6995e014dde240513
msgid "For example, normal attribute data similar to:"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:49
# 66a07cf97d854595891b32b64a49b5c4
msgid "To whitelist the ``network`` attributes and prevent the other attributes from being saved, update the |client rb| file:"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:55
# cfe21e0ffaac4be6a5476f764d0b977d
msgid "When a whitelist is defined, any attribute of that type that is not specified in that attribute whitelist **will not** be saved. So based on the previous whitelist for normal attributes, the ``filesystem`` and ``map - autohome`` attributes will not be saved, but the ``network`` attributes will."
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:57
# ed2e73bf78c84b69aca2ee734b9508cf
msgid "Leave the value empty to prevent all attributes of that attribute type from being saved:"
msgstr ""

#: ../../includes_node/includes_node_attribute_whitelist.rst:63
# 8a6cd5764a76415a974a9a8d7999178a
msgid "For attributes that contain slashes (``/``) within the attribute value, such as the ``filesystem`` attribute ``'/dev/diskos2'``, use an array. For example:"
msgstr ""

#: ../source/environments.rst:39
# b99f060762834f7ea92e73923cf42134
msgid "Environment Formats"
msgstr ""

#: ../../includes_environment/includes_environment_format.rst:4
# 4e6dfd5d5ee841ca8b80bd7f0fd393f5
msgid "Environment data may be stored in two formats: as |ruby| (i.e. a file that ends with ``.rb``) or as |json| (i.e. a file that ends with ``.json``)."
msgstr ""

#: ../source/environments.rst:43
# b46dfff25110489c8c7278b5dd9dc410
msgid "|ruby| DSL"
msgstr ""

#: ../../includes_ruby/includes_ruby_dsl.rst:5
# 27cd13cd91874320b6b503c0a1492d50
msgid "The |chef client| uses |ruby| as its reference language for creating cookbooks and defining recipes, with an extended DSL (domain-specific language) that is used for specific resources. These settings are saved as |ruby| files and are stored in the |chef repo|. When these files are uploaded to the |chef server|, they are converted to |json|. Each time the |chef repo| is refreshed, the contents of all domain-specific |ruby| files are re-compiled to |json| and are re-uploaded to the |chef server|."
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:4
# 58aa436282dc4172be94ea67c01c2e52
msgid "Each environment is defined as a |ruby| file (i.e. a file that ends with ``.rb``). Each environment file should contain the following domain-specific attributes:"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:12
# 857a7bd98a14479199661e0baf415f80
msgid "``cookbook``"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:13
# f87e1be2d15e452f9ed852011a998331
msgid "|ruby dsl cookbook| For example: ::"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:18
#: ../../includes_environment/includes_environment_format_ruby.rst:23
# 41f8d11685ba428e8698339f9b5a9845
# 6bc1c31183c6484ea0b70fb1cc64db2a
msgid "Or: ::"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:27
# 5e0d323ea10c4bc58beea5302aa1bed4
msgid "``cookbook_versions``"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:28
# ff0d5c31b3a64ff09c10f59f31bd4285
msgid "|ruby dsl cookbook version| For example: ::"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:35
# 9cbe5395e9574d5ba09db6d0e95d5022
msgid "``default_attributes``"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:36
# c9608a9937304699984f0e5f6fd656a0
msgid "|ruby dsl default attribute| For example, to specify that a node that has the attribute ``apache2`` should listen on ports 80 and 443 (unless ports are already specified): ::"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:40
# a427d2302ac2422588e4322bcabe37a7
msgid "``description``"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:41
# fdd12dab1ec444adb4b4d5548e8b65f9
msgid "|ruby dsl description| For example: ::"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:45
# 402245a67c7e437c9406617994c829a1
msgid "``name``"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:46
# 636261ff4b094facba2ffa4ca5c97ca8
msgid "|ruby dsl name| For example: ::"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:50
# 6cb57afcc0414b5c941f09e93caa267c
msgid "``override_attributes``"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:51
# 000d732bd63846ea92f871231318738c
msgid "|ruby dsl override attribute| For example: ::"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:56
# 970d1ff527374ac198360fd6a9ad64ab
msgid "The parameters in a |ruby| file are actually |ruby| method calls, so parentheses can be used to provide clarity when specifying numerous or deeply-nested attributes. For example::"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:64
# bbf8dc7ffafb4b3da65f535459e7b023
msgid "Or::"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:75
# 0a85a7fee9534b6aad6388c13962a0f2
msgid "A |ruby| file for each non-default environment must exist in the ``environments/`` subdirectory of the |chef repo|. (If the |chef repo| does not have this subdirectory, then it should be created.) The complete environment has the following syntax:"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:85
# 9f36f9e4f97b4bd2a7a5e9d808afceb1
msgid "where both default and override attributes are optional and either a cookbook or cookbook versions (one or more) are specified. For example, an environment named \"dev\" that uses the |cookbook couchdb| cookbook (version 11.0.0 or higher) that listens on ports 80 and 443:"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:94
# 0e26fa181e1d4e45b57ae180826aea74
msgid "Or (using the same scenario) to specify a version constraint for only one cookbook:"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:100
# 25eff2da37aa4d8f9199e9eaeabbbee9
msgid "More than one cookbook version can be specified:"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:109
# f1205acf60dd4d8cafc4ee07485ba4ae
msgid "Attributes are optional and can be set at the default and override levels. These will be processed according to attribute precedence. An environment attribute will be applied to all nodes within the environment, except in places where it is overridden by an attribute with higher precedence. For example:"
msgstr ""

#: ../../includes_environment/includes_environment_format_ruby.rst:115
# 0368ed95b9804e8783e86b6707b4fa17
msgid "will have all nodes in the environment (``node[:apache2][:listen_ports]``) set to \"80\" and \"443\" unless they were overridden by an attribute with higher precedence. For example:"
msgstr ""

#: ../source/environments.rst:49
# 38c07e1e7f074356bf4b77fd01728d31
msgid "|json|"
msgstr ""

#: ../../includes_environment/includes_environment_format_json.rst:4
# 169ae3194db044e8a18dad494136d3bd
msgid "The |json| format for environments maps directly to the domain-specific |ruby| format: the same settings, attributes, and values, and a similar structure and organization, just formatted as |json|. When an environment is defined as |json| the file that contains that data must be defined as a file that ends with ``.json``. For example:"
msgstr ""

#: ../../includes_environment/includes_environment_format_json.rst:26
# fbc0c9f41ec344f088c91ea285d90c25
msgid "The |json| format has two additional settings:"
msgstr ""

#: ../../includes_environment/includes_environment_format_json.rst:34
# 5248cf014bdd4d38812033fe4fb0f940
msgid "``chef_type``"
msgstr ""

#: ../../includes_environment/includes_environment_format_json.rst:35
# f80ba7db04a94c7cbef2d4197d0173b4
msgid "|json dsl environment chef type|"
msgstr ""

#: ../../includes_environment/includes_environment_format_json.rst:36
# 025f918bfe8443a8bec51f3a095c9bce
msgid "``json_class``"
msgstr ""

#: ../../includes_environment/includes_environment_format_json.rst:37
# 0dc57c5be0c548db95f5587bb19b8842
msgid "|json dsl environment json class|"
msgstr ""

#: ../source/environments.rst:53
# 0ea3a5fd3fdc4951a14b9dafd5054356
msgid "Create Environments"
msgstr ""

#: ../../includes_environment/includes_environment_create.rst:4
# 925fbfb714cb4d7dac8cdaf5cee18d9e
msgid "An environment can be created in five different ways:"
msgstr ""

#: ../../includes_environment/includes_environment_create.rst:6
# 9507f90cdd8f49c7973f6889194ead3f
msgid "Creating a |ruby| file in the environments sub-directory of the |chef repo| and then pushing it to the |chef server|"
msgstr ""

#: ../../includes_environment/includes_environment_create.rst:7
# 37ad86752e204ebda1ff9c1a9d4b61d4
msgid "Creating a |json| file directly in the |chef repo| and then pushing it to the |chef server|"
msgstr ""

#: ../../includes_environment/includes_environment_create.rst:8
# 9950de97b85f41a4ad02ff4ef38741e2
msgid "Using |knife|"
msgstr ""

#: ../../includes_environment/includes_environment_create.rst:9
#: ../../includes_environment/includes_environment_manage.rst:7
# 72c320d03abd4fc6b2de4abe77c79811
# 5e5af14638af40dba6053a71d43dccc9
msgid "Using the |chef manage| web user interface"
msgstr ""

#: ../../includes_environment/includes_environment_create.rst:10
# 89309880e2024bbe82faa91f07f095f3
msgid "Using the |chef server| REST API"
msgstr ""

#: ../../includes_environment/includes_environment_create.rst:12
# c25b0a632d9640aca480c97f35f3c4b2
msgid "Once an environment exists on the |chef server|, a node can be associated with that environment using the ``chef_environment`` method."
msgstr ""

#: ../source/environments.rst:57
# 4ae8677e44f04869b8538f4e2fc4824e
msgid "Manage Environments"
msgstr ""

#: ../../includes_environment/includes_environment_manage.rst:4
# 710d7d7951da49d3b1fd107fbcc906d6
msgid "Once created, an environment can be managed in several ways:"
msgstr ""

#: ../../includes_environment/includes_environment_manage.rst:6
# e1be9e867d544e6eab85d28dbe7956a3
msgid "Using |knife|, using the ``-E ENVIRONMENT_NAME`` option for the ``knife cookbook upload`` sub-command and argument"
msgstr ""

#: ../../includes_environment/includes_environment_manage.rst:8
# b2c44456a6524de68ec2f2e3ec611bde
msgid "Using |ruby| or |json| files that are stored in a version source control system and pushed to the |chef server| using the ``knife environments from file`` subcommand. This approach allows environment data to be dynamically generated. (The ``knife environments from file`` subcommand will not work unless these files are defined in their proper format, i.e. a |ruby| file that ends with ``.rb`` and a |json| file that ends with ``.json``.)"
msgstr ""

#: ../../includes_environment/includes_environment_manage.rst:10
# 6cf238c357f24e5186d72fdc7984d596
msgid "These workflows are mutually exclusive: only the most recent environment changes will be kept on the |chef server|, regardless of the source of those changes. All previous changes are overwritten when environment data is updated."
msgstr ""

#: ../../includes_environment/includes_environment_manage.rst:12
# 025731b8b8ad424b96279a750eda574d
msgid "The settings for environments can be modified and environments can be integrated into the larger infrastructure by associating them with nodes, using recipes to call specific environment settings, and so on."
msgstr ""

#: ../source/environments.rst:61
# d702d5a3cdf144368ab7ad7d4dba59a5
msgid "Find Environment from Recipe"
msgstr ""

#: ../source/environments.rst:62
# af4577aba0194de7ae0c0ad06098e39b
msgid "Use the following syntax to find the current environment from a recipe:"
msgstr ""

#: ../source/environments.rst:68
# 33d2e38b7f264f429ee1a389f052405f
msgid "or:"
msgstr ""

#: ../source/environments.rst:76
# e1da31eccc2d4b789c92fa4b3881f11d
msgid "Save in a Data Bag"
msgstr ""

#: ../../includes_environment/includes_environment_manage_save_in_data_bag.rst:4
# 08f883e387d6405d8df351f7dbd12073
msgid "Values that are stored in a data bag are global to the organization and are available to any environment. There are two main strategies that can be used to store per-environment data within a data bag: by using a top-level key that corresponds to the environment or by using separate items for each environment."
msgstr ""

#: ../../includes_environment/includes_environment_manage_save_in_data_bag.rst:6
# 9c3f92be5a1944da9e2ec1a9eac70c70
msgid "A data bag that is storing a top-level key for an environment might look something like this:"
msgstr ""

#: ../../includes_environment/includes_environment_manage_save_in_data_bag.rst:20
# 9791abaae60e40389d995b4ff218aea8
msgid "When using the data bag in a recipe, that data can be accessed from a recipe using code similar to:"
msgstr ""

#: ../../includes_environment/includes_environment_manage_save_in_data_bag.rst:26
# 4e38deb47e26493ca022713c404d0c75
msgid "The other approach is to use separate items for each environment. Depending on the amount of data, it may all fit nicely within a single item. If this is the case, then creating different items for each environment may be a simple approach to providing per-environment values within a data bag. However, this approach is more time-consuming and may not scale to very large environments or when the data must be stored in many data bag items."
msgstr ""

#: ../source/environments.rst:80
# 5d707b8783594dbeafe777329e307154
msgid "Override Attributes in Roles"
msgstr ""

#: ../../includes_environment/includes_environment_manage_override_in_roles.rst:4
# 8d2be07e6fa043c1a5eec3e107eee757
msgid "Environment attributes that are used with roles can be overridden. Typically, this is done by using attribute precedence, but sometimes it may be necessary to ensure that specific attributes are used based on the presence of specific environments. This type of scenario is best addressed in using a recipe that relies on a top-level key that is stored in a data bag. For example, to retrieve a value from a data bag based on a specific environment:"
msgstr ""

#: ../source/environments.rst:84
# 9c3a9d4c7646423ca80abf5a1ae67dc1
msgid "Set for a Node"
msgstr ""

#: ../../includes_environment/includes_environment_manage_set_on_node.rst:4
# e17ef45776004f4d8bf583e4b4ce2d8e
msgid "A node is considered to be associated with an environment when the ``chef_environment`` attribute is set. The ``chef_environment`` attribute cannot be set with normal or override attributes (i.e. in a role) because it is actually a method. It must be set explicitly using the ``knife edit`` or ``knife exec`` sub-commands, or by using one of the following methods:"
msgstr ""

#: ../../includes_environment/includes_environment_manage_set_on_node.rst:6
# 489019f8c3d0450dac3ef065f8763f3f
msgid "By editing the ``chef_environment`` directly using |knife| or a management console"
msgstr ""

#: ../../includes_environment/includes_environment_manage_set_on_node.rst:7
# 756eb525b17346d0acf45b22fe340bbd
msgid "By editing the ``environment`` configuration details in the |knife rb| file and then using the ``knife bootstrap`` subcommand to bootstrap the changes to the specified environment"
msgstr ""

#: ../../includes_environment/includes_environment_manage_set_on_node.rst:8
# 2f63fa6d33b74b37af6117863d19d949
msgid "By setting the ``environment`` configuration entry in the |client rb| file (by default: ``/etc/chef/client.rb``). When the |chef client| runs, it will pick up the value and then set the ``chef_environment`` attribute of the node"
msgstr ""

#: ../../includes_environment/includes_environment_manage_set_on_node.rst:9
# a88aa94617d44306b005c40b7dc40035
msgid "By calling the ``node.chef_environment(\"environment_name\")`` method on the node object to set the ``chef_environment`` with the value specified by ``environment_name`` and then using ``node.save`` to save the node object back to the |chef server|."
msgstr ""

#: ../source/environments.rst:88
# 18da157fa676402cbab001ceed5212a4
msgid "Set using |chef solo|"
msgstr ""

#: ../../includes_chef_solo/includes_chef_solo_environments.rst:5
# aca9205bb6ee4a4297c581d79ce1a100
msgid "An environment is defined using |json| or the |ruby| DSL. |chef solo| will look for environments in ``/var/chef/environments``, but this location can be modified by changing the setting for ``environment_path`` in |solo rb|. For example, the following setting in |solo rb|:"
msgstr ""

#: ../../includes_chef_solo/includes_chef_solo_environments.rst:11
# b83e3f5909294a64aca04dbf0e3e7009
msgid "Environment data looks like the following in |json|:"
msgstr ""

#: ../../includes_chef_solo/includes_chef_solo_environments.rst:33
# b3bc24de708948e18edffb52d431947b
msgid "and like the following in the |ruby| DSL:"
msgstr ""

#: ../source/environments.rst:92
# bb8f11a1d2ee47c9ab8ee2a8ef75a9a8
msgid "Move Nodes"
msgstr ""

#: ../../includes_environment/includes_environment_manage_move_nodes_between.rst:4
# c106f045d8ca4582b6de2ac43f22ba73
msgid "Nodes can be moved between environments, such as from a \"dev\" to a \"production\" environment by using the |subcommand knife exec| sub-command. For example::"
msgstr ""

#: ../source/environments.rst:96
# 919060bc6a6d40ad821fbb22b5febba7
msgid "Search Environments"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 93226d8bf34944a49c20c24ca758f3f2
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# cec7650400a340b9ab335818c9749933
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

