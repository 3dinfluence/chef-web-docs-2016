# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-10 22:38-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_search.rst:8
# 1033e6fd48534c649f8bee7d204c02e8
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 9b935766be2b4ba0aa0fe740884e2aa0
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/chef_search.rst:12
# 946c0b256c6d472b9e01445f7a7e1c82
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/chef_search.rst:15
# 4b10bb168ce5478d85a9191998399cbe
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 8e8ea52403ab465bb945afa8b6ea89cf
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 79f58426ffc74b94b0de8aef4b385a83
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:11
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:22
# a92ad6ea4be5478d973cd44327cdb18e
# c04292d660b04f1b8d2e555ede668d73
# 47cff8b300db4ceba8e5bfbe910a4187
# 3a0c4c9453eb4632ab0163e5bd3ead8f
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# e538474b119643a5a85303af9b869a24
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# cf97096134554a669d1cfee231932dd3
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 03a10243015849ac8df6fee18306fd08
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 482cab40860842658ea14f87bf26ecbb
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# bb8e115517a84caeaff603d614a6db09
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 33434c18294545e9b194ecffe57b1d15
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# f22d8308c29046f4adacf14b3d5977f4
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# f0e11e64c9454b64ad644a7e8d267200
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 03a65ca3451e439ab914a99665fceb93
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 44deb589850546bcb49fbad621f342e0
msgid "|search index_role|"
msgstr ""

#: ../source/chef_search.rst:19
# a3d3f5c620cc4769a51ee0c4f3c4eda9
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 719b1d366c534e42b61e5b2616a9ffa9
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/chef_search.rst:22
# c5c8ec9f42b9454e8296d36ff3c6c523
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# d4d1829c7e874bdc81bd319eb681c5da
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 7faaadfcba5a4df4a9af899193025e98
# 67fd5067a73f46c1a879a136280ef1b8
# c9200d8cb49b431b929cd7fa1946305f
# e9e9961ca34241f8b449e9ce2054dd58
# 5de3bf1c5f4e4749acaae58c1fd61b33
# d7a693b9dc984cfca139bf59c0a9bc3b
msgid "to return something like:"
msgstr ""

#: ../source/chef_search.rst:26
# 16c8381a72974a62a12b5eb5703b4c77
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 6b00d254f75c40ac82f6967ff359f3f7
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/chef_search.rst:30
# 2cef5fac911d42c291ec94e9f52a5743
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# fe42b736ab8d461a8d3bb5f9643d5eb5
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# c6277df109474d308548021f73155663
# eb498733dc4c44f08df1e29b3f5539cc
# 2656d5f773984fa0a8cffe86c5b03762
# 97fe5e15911b438f874ea0b09ab040b1
# 78a606eb49f74960b09290fa569dfe1d
# bf6e0772ed1f439c8551d2f69e81ceb8
msgid "or:"
msgstr ""

#: ../source/chef_search.rst:34
# a553a3cc31244d679ab6905958dc455e
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 4083946dfcde46bf8b7160537b7ab354
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/chef_search.rst:38
# 22bc3552ffee4e209516b0f02eed1a3c
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# d520e3ecdd7d4d16bc7291406bdadf3e
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/chef_search.rst:42
# a21245ef5191487995505c089f6f1900
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 6c1a25608f90473e9c39f536b23adde1
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/chef_search.rst:46
# 6e24e0bb631743bb9d491ae7a98b9d00
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 348b4732f51f43729413e6e911b16e04
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/chef_search.rst:50
# 104c7006011a4ab684f92a4be2611205
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 29d7db67677743b08a1fb8b75e8551c7
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/chef_search.rst:54
# 6b5d3a547a2c4c6e9569c18fb8493b1d
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 012c317a8cbc43e7ae30bde9258ed524
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 6553080ddc014eecbc5c1a4f2c567717
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/chef_search.rst:59
# 69eca122a23149dd8e2c2a57c6e2b81d
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 0708f07e7ee1496fb2c0ae1d52ae2019
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 2c0ac29b49864a6d8b7218dbf31244ae
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/chef_search.rst:62
# 58cc83c6e71243c6ab7a1bad49ec5bcd
msgid "Search queries may not contain newlines."
msgstr ""

#: ../source/chef_search.rst:65
# 27b7ec618c594268bd186ad5bce93053
msgid "Filter Search Results"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:4
# 666751120d804fb9ae0c86e4aad0f00a
msgid "Use ``:filter_result`` as part of a search query against the |chef server| to return data in the form of the specified |ruby hash|."
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:6
# c239722127174762b1b945db2c8d2d53
msgid "The syntax for the ``search`` method that uses ``:filter_result`` is as follows:"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:21
# 6148220045614dae96e276472ceecf71
msgid "where:"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:23
# 91dead6670a44937b886c3d303ce2860
msgid "``:index`` is of name of the index on the |chef server| against which the search query will run: ``:client``, ``:data_bag_name``, ``:environment``, ``:node``, and ``:role``"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:24
# 5a898ad822244bd9b54083bce006a7ee
msgid "``\"query\"`` is a valid search query against an object on the |chef server|"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:25
# d9cb041057244782b6db88577aee0231
msgid "``:filter_result`` defines a |ruby hash| of values to be returned"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:27
#: ../../includes_search/includes_search_special_characters.rst:11
# 23b1d4a64371407fb945a1ba1d9e75a2
# 55459bb767e14648bda7124a71ef1a13
msgid "For example:"
msgstr ""

#: ../source/chef_search.rst:69
# 44e40d5c68cb4f5f942264a3bb11b0f0
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 77fbbeb0c62f4191a4e804466ff8aa3e
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/chef_search.rst:73
# 2395f34a7aa643e4898c3086de97ae08
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 4ff66673815c4b9caf7d644d29348ffc
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 1836b374941c41a2b3ccd945915bb299
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 397089ead0f84b47a78a6c1bd8bd97cf
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 5beb4c4e571b426a90ec205d54579972
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 9f2b42121e2f40268c7bf2bac59280f1
# f9a00e0b01d44deb8a3b38323350c847
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# a92b5f6700354877b75125877d5e71f5
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# c80f05b90e5c40e1b0996696e5721db6
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 0d03eb48e43d45d1b2ba556e0ba9b08a
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# cec5940cfb854011b1b3306d3fd420d1
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../source/chef_search.rst:77
# 9e8967330a1940e4b5f4b23d38252a14
msgid "Examples"
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 32c1e5ea230b4e5497adf7125791fdb7
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 3cd9a575b7e5437da66394d2961f76d4
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 2fc1977bef93411eae7bd352ba0c7cbf
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# e479319edec2423a828ceed01f1c753c
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 41f878e4258545449b12c712e34ada61
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# f9e509af65a3419e8cad40f21ffa48f3
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 7ebbd175bd7e4d74a686c76974a9c09c
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 113e725e23ec43839697ff51aa8eba8b
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/chef_search.rst:89
# 36bd7d7bd5224e5092b26e1ffad3150a
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 3d29d98fdbcf471597e392e13a7f0be0
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/chef_search.rst:93
# 6dbcc0437825476092c7c2491b0d829d
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 675417c4b6504768b9f0dc0885374469
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 31f21bc210554d2e91789aafe15b8820
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# c814ed3b191f453191503bfb77fc72a3
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 1a10b4121388487a81bc7f2878c04674
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 56ebd420bd2a44fd8c30240bed3ffb68
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/chef_search.rst:101
# dbda13cc595a4c728e5c133e580a8b81
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 476b625f22da4f5a9616172f09d824f2
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# cf5e95ba9dc84126891faa5fa94d9637
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 61d1df3142084698bab41d7c11af919a
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 6ba98fff7c17446ca6c2330f04c95904
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 9613a478f9ae491aa2350fae59cec9c9
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# ddae4d7b7a45443c85004f7187649e92
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 0c28657a63064354bda3cfaa0331de2f
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/chef_search.rst:109
# 30628496f68447799a5cc8afdccc4882
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 4af2891469b84fb08ab496ea9a644a56
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# 8a2d811f3d1542bf809b8860f544b082
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 551be7c4dc874bd69611441c2885db41
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 25750fe2db8b447fbd2248431b9cfbc7
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# c28708321c5e46b39116b359df099435
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# c2eeec897aeb4c5a9b409da443891780
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# c7c7976e8c904f758b4d17d56b21100e
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# a065b36151cd4da4a5bf152e028565e2
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/chef_search.rst:117
# cea713dbff114c328bc0c1fce9a502c7
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 2c532bdc53b94455a0b9d893f70173f3
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# ee5104b9a4dd46ef93e343435163887f
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# c29674b817a44093a0c633695215dfa5
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 8b74f2710ee24dd7b05c31d35ee12e79
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/chef_search.rst:123
# 22f443ea68874d2694637ce5b3e9760c
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# 00b62af4ad604ec5bde45f6668c020fa
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# 07f0f3b1be7e4f85842044b9f0a98f9b
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 823b665771d04e4a951edb52375c615b
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 7a49369a7cf24718ad4cb903d2c6e323
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 0596fd2e459141d29913cd4c2e61296c
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 743cfc3912bc42b0b3b91476981a20dc
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 32d2ca81741a41af9ec41ead2d438d49
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# a7b87808d92e40de9cd38fb52a1ad97f
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# 19425bbdf04145c0ad04df4c9c40a6e0
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# 7f56cf1d5f524528adef941d63dd3033
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# 65d5cf6e5da3499db6e90a9ce2d99a26
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/chef_search.rst:129
# 81bda224388b4b16b988dd4b98625b21
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 5324512b4d3140b6a9641e397da355d8
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# f7d665448e9e462fa7ff223d30406fd7
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/chef_search.rst:137
# 2ab2f44d3b4f4efbab5c7f976e9c16ad
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 024ba1462ed54cd5924d4a2ea882672e
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/chef_search.rst:141
# ec380f6f1cdb45109f174825f5ee7181
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# aec9b13ecece492d9dca2aeff9fb85a1
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/chef_search.rst:145
# db0e849a261c49baa1dcbb71169bf3be
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 36d9cac204694bf8a0dc10bae6ba8830
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../source/chef_search.rst:149
# be5522eea73b49f8916da34ccafe770f
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# f5620d6581cc49e6a732dd993bf46bce
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/chef_search.rst:153
# 5f5c2d560ba84c2981c6c1149f02e9b7
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 05f7dc1cbfee46aabece78c564bbc30d
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# de9c4c3a5d7d493cb385bdbf694eec08
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# e4292c09bafb4ba8a700d399ecac5f2b
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 584c00105c6c47e7b6e9a34992b84262
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 8603bbaaca104926b6f10da44d14911f
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 14d28ae7ae264142920ec621cdd4b10b
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 8556ed3fcb804a8096c4d8b7862494b9
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# b61fba99cc63424cb6949376285d70d9
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 5c0eeff910ea488bb42f0b3a7779db33
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# e4957dcf3593447a917352349ca85687
msgid "To search a top-level run list for a role named ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 7c42680ddb5540dd85c6c2b837a10f5b
# 9903f6fd24e44a25b63d15d42dec7c64
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# b5b3406cfa8847fdb11c2e80627fae5e
msgid "To search an expanded run list for all nodes with the role ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/chef_search.rst:161
# 6dbb54dda20b45b38cdf8ef84ba3311a
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 8eb08a85592849588f531fa7a7247d27
msgid "A node can be searched from a recipe by using the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 17861e583036474595f73e8efe556e98
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 945b3e4f883840c18a0d3c0a1792d6ca
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:15
# 53e7b888069c44f89899951c2a62e21c
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# e6045f2fbef24203a2a33020d3fdaae5
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# 83f52abdf179412ab5573e0d11770937
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:24
# 0f5828344ec441d08e6e1d62e7486d2d
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:28
# 9e3d085ba7014cf1a4ab18fc9ecaf62f
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:32
# d1df794fa9ac493ab9b2647e3fa8e73b
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:33
# e49496d32f6a46b08de2312d49b40adb
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# bfcd1c8da6a74913ae8cd9fb6bbbbe7f
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:39
# f0afe3737fc74b71a72219b0b17b1b43
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:"
msgstr ""

#: ../source/chef_search.rst:165
# 639ff01da05842c8b5480d6522101ff7
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 225e43ee34fc4634ba326db7c9106efb
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# d1122513813e44419158e341a8c720b0
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 258f125feced4f47b5e725ea9a063672
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 48bb7e5d1e9e46758d01709a67923ef8
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# a40d720c32834caea4cc61b708a1e96e
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/chef_search.rst:171
# e77d3ce678424775ae413dce18cca4af
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 688eca50bdea411c9ae8014b35e9736d
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# aa9ad14267384a7ab6ebb1bbcb49913b
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# f6a9be001df74a289769548d12a1424c
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/chef_search.rst:177
# 5e397ed2950e42d8a963274d96ba97de
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# cf396e3dffa049fdb74791133992da88
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# be54f02fe99f4104a7f2230849568440
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 025e2d413c7c4dddbbac2c62b1bfdec9
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 80b44ae0b7b54df384b1045549b60aa0
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 4790a1173f674ab79da294d55abddc4a
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# fd563a60418a4fb7912f19b72330b919
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# e20756987b174a958c4831779bb9a6d5
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 3ee336267f7843a2911667b1623be506
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# e256c4a9d6934d8089145cb735f00cd5
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# d25a1ee5feeb4ebab6a703ae5c563062
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

