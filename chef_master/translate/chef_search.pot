# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-26 15:24-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_search.rst:8
# ac8ec75381244c219d7a4d1b29b61fad
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 2518d646052747b1928d1cab21fa6be8
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/chef_search.rst:12
# 233eae38647748c3904b84c6e6620c94
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/chef_search.rst:15
# 5a75c2fe7095499aaf6440ee6fb986d0
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 03dad0b88f3346238d20e433171862b9
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 2286299773a2403f87fc48ddf6694ff9
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:11
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:22
# 3f7bc1f349374a63a61269ef49e8ed62
# e39b185da5f745c2ab8884d64ddf3bed
# e08cd9e918be4c7293f054cbe35b71e6
# 48e389d6efce4563abdff14b50e089ad
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 0e3f68554eaa42348ef86634d368e357
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# db43bb3c7cb54c1b94b6c7d02c89d841
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 2568b1ec87c04e2c9f6f3b3a4c7eeea9
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# c6d5219ba9a44ee99518f10dd96a1704
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# cf881e8e0be546118961beffd34d8a7b
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 73bd0c9d46c0433a8f45f4aac0b60352
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 058d0ce7890545f698950d5eeeaa589a
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 8f6ad8e111714175afe04673474bc217
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 4c1a5e9d6d674d09aa067250009be68a
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 195f2aba1c72408490fc6a65bc420b0a
msgid "|search index_role|"
msgstr ""

#: ../source/chef_search.rst:19
# b841b6373097417da0864b72b7a71744
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 5fb6b94873dd4553839e36200dea6646
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/chef_search.rst:22
# 7c3148efe2f54b13971f34472f26bc71
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# af72306f8e5d476483e8a43823ec7bc8
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 8acbffd4d7d041b5a4f19b734dbb9c8d
# da8260c8202b4dcbb709a43340c9abad
# 1907c693cd084373968cfb1b309646e0
# a55afa045ff849508d899240544639ae
# 13d0a2ca919f4ee09aff9fc2397a30ff
# c09cbf24bb134b71ba5298a4cb3c7dee
msgid "to return something like:"
msgstr ""

#: ../source/chef_search.rst:26
# a5292bdfe06546a78c17f1e825e9f166
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 50e55994420e4269a7c770e2fd6045d2
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/chef_search.rst:30
# 2d5cdbb3badf438ab806572b0a660e3c
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# f585aeff4d534a7ea6e842fc135bfe56
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 12e43788246f4acea822c142186d15a1
# 48b636a1d0254a0582d13263ba0d4e92
# 3e19a7071ef54cb99172a7a9f5f3735d
# 7c66cee50b7740c0a427b58d55e2bdcf
# 02942dc5da294c659dd178a91ba54ffa
# 8a42dbce9d5f45d18081add459915f76
msgid "or:"
msgstr ""

#: ../source/chef_search.rst:34
# ae28b623edb44ebaaffe2f30bb4a1021
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 26a29ea048de4a3baa77d1c358588bc7
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/chef_search.rst:38
# 881b690be8184ea6b3399789039f9905
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# 632262d0878140b89da6d2fad0bd42bd
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/chef_search.rst:42
# 3ded313f9c0d4b7aa1b80bc8707a4608
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# bfcfd6319a2742fa97a7e2c72d9748bd
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/chef_search.rst:46
# 3cee7929f7454da48286d5370f1a72a4
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# edc7eed59dc04718a61ad990e9a0b94c
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/chef_search.rst:50
# a8f9e889c6bb4058a6517b9e5fce99ee
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 324abf73630d465598bfd22679502cb1
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/chef_search.rst:54
# 385ca3248f144d2c916c74449ae20c7f
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 74f903ef7c5a468cbbbbfff8cd37dc01
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 83f501cafd4a474ca44a5fc5b808b4c5
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/chef_search.rst:59
# 2fcdcf6838204712b5db8d286f2218fc
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# aa3ee5d4407149aabc87d8e16b518c29
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 6453fc03af0746c1a2761644c8968ef6
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/chef_search.rst:62
# 2b633d7250fa42648743d871017cd340
msgid "Search queries may not contain newlines."
msgstr ""

#: ../source/chef_search.rst:65
# 4c0a84bf41c64a88b90a9b4a1cc912a4
msgid "Filter Search Results"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:4
# 6a43d6b7d2b34a91b4a5b688708439f9
msgid "Use the ``:filter_result`` as part of a search query against the |chef server|, and then return that data in the form of the specified |ruby hash|."
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:6
# 390571f7d8da4668ac84d7c47638ed53
msgid "The syntax for the ``search`` method that will filter search results is as follows:"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:21
# 8d2018620c024876b4278ea5f6247133
msgid "where:"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:23
# 4a2da7cab6ae4e7c8a42ab4762643506
msgid "``:index`` is of name of the index on the |chef server| against which the search query will run: ``:client``, ``:data_bag_name``, ``:environment``, ``:node``, and ``:role``"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:24
# dfb8263b8a544b9fb0bc91535e4191b6
msgid "``\"query\"`` is a valid search query against an object on the |chef server|"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:25
# a52fdd20a6b94723b3d758fb52bc06ee
msgid "``:filter_result`` defines a |ruby hash| of values to be returned"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:27
#: ../../includes_search/includes_search_special_characters.rst:11
# 2238ad1461894694b5a3f26f6588f797
# 023426e1685749d8863d89c9767734d0
msgid "For example:"
msgstr ""

#: ../source/chef_search.rst:69
# af18fd4ecb9042d3a78619dc66af30f9
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# f836fc0ee4ef4758bd37502768ad1797
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/chef_search.rst:73
# f52be840cb904949a13a99df33065f2a
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 8f4c849b21584c22882f62619cbc00a1
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# d8ce8719014440faa4565cf95ee30576
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# f3cfee57e80a44b6a2e8537eb1d34cb1
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 4e4f0f85680245d987686728961209e8
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 694e0fe408c448eea9eb788890f52558
# 37e43a283c2344f2b2943462a1c98d36
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 201b247542e54116bfc41fc1556dec0e
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 1366a43004ee4d5b9908a34552f3b43b
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 9722a3ac656a4197aa27016400f8c416
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 2e544d9f702f4ea5987b977a05a655ca
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../source/chef_search.rst:77
# 3af5618de3254d09a94237b4ad2f74a3
msgid "Examples"
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# c454ccab71df44f4b376e3d34a66a13f
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 08bd72352d79444f86afb5a241f586b4
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# a27a65694e89415296833223bbb34e84
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# cd05e57b24b9404fa605ecf461bfdfbf
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# d0ea8b18001445358dc2b80446eb677f
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 03aa90c56b224345835adc42907802f3
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 6564185fca75417e877cfa7a0cb0faee
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# e6b1bfd46f8b4c06a3edfe1814c13ca5
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/chef_search.rst:89
# 012883ed202344c6b2fbd7cffb3271df
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# fd3f55afc4f54f759f11b9aadd33c2e6
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/chef_search.rst:93
# 3692dd8f59e6459f89a6b581e58359b1
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# ea70679f4247438d875fd8b1d6987b53
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# ce445a7ee2584aad858b47241ab6afe4
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 8d328f21ac0f4b0b9129d33d08cbbc72
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# c52c2aca1fbe4be299698d8206d9e936
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 76e095d6f61a4ef2a9641dd5eaf5c2a4
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/chef_search.rst:101
# 59caea91eb11474d88d46234e5dfcf50
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# b61f6840ed544d48920ce4d3bd849591
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 0558b01617c54bd788d5ad535ec303c4
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# e043f87cd5a64bda98f472222f09e049
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# cc5ed3e2c2f0437eada3542f9f1b3b04
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 233026b0674f4dadaddb663c0248df7e
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 0b03fdad2abb4015854db785a5d51af6
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 18c886e1b1c844aa8979f423ca309494
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/chef_search.rst:109
# a8301dc7a6524f669d6d12f6d75c2856
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# ebab1b99d62144b29f5712e630452398
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# bfe16e76d5064147ab1baba6a77943cc
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 0fc7e68847ef449bb0922dcc8ca33a6d
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# bb6a45cc9e594466b0473cc3010b853d
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# db1265d822254413b832c1c86fd190f2
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 65797f1133eb4845b3cbc18c61c61f9e
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 56acbebd4a284dc1bc2d75b6af5056c9
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 18a2dba1f21a4d488110619f00c2ccc6
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/chef_search.rst:117
# a1edcba564384f61a2fc2fd7662231b0
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# ed4d1aab6384477f974230f219f77ea9
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# d260681dc6ed452c80ac98f695d43423
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 8cd708426a6142c4ab9874e13027491c
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# dfad870cb14748689247db53c39753f6
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/chef_search.rst:123
# 34e9796551844884828a3df1096701cb
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# 1f7d4a2aee624951bffdd672534e58d3
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# c9f3b625395b476a947208bb9522d21c
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 6d9c9cf026bc4c778b4f8a73076ed59f
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 164a985c9c0646c3a029ea41fad3fe40
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 1471f300ab304552b0d80c9267b48bde
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 0216d09bf2fa45c9abd3f54f6cb539d6
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 5d7e5d7203cf49a89fb606174a267955
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 139824a194a7440d9db84dac134641a1
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# bdb923e4360245e9956a4603108e0ecd
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# f4af0e9000424c35ada5e9c2c3e0b0aa
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# f3f17226e4234fc3abff2c26a4725465
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/chef_search.rst:129
# 232b792b58dd441f8fb648449bf523f5
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 8eda0ceb91b14936801e002f116901e4
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 2a6a4a2c86e44dd9ae3b635935787060
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/chef_search.rst:137
# c9aa35ad934f4cb1b50b27fea166f829
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 741e6b82e922420e8028f8adeef5b765
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/chef_search.rst:141
# d0dee7de3f9a43d796215511851ac91c
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 063d4e6af13244d385075da46df92d48
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/chef_search.rst:145
# a0b6910d63744780892ef06a1f69920b
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 412c0ac812f24cdfbfb042c7b335c430
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../source/chef_search.rst:149
# c96108246a2a4c8195fae1575a0095f4
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# d56fd72d8ff64b7886723fc8f7b3e224
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/chef_search.rst:153
# 475649e535294a4c96ebc306164bab4d
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# e0cad097f01e44b8912dff03e54de007
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 8c126ecf3eee49ee95cb61ebb2d1ea7a
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 74478fd6369e44dea91de523d11bd48a
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# a382a5e5b134427f9343a1f7e0b345f2
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 5fe832d30d7a43b6b806145f80c3b749
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 3fce88ccfec14680bd4869261559dd03
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# d066de966dd14070b1b999c86dbacc70
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# c00baa8bf8f04414a9386d237972debd
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 6b6aecd5847e4dc7ad0999afbcaed1ec
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 5218dac803014bb79411f764734a86fc
msgid "To search a top-level run list for a role named ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# ee2c3841cfee4f49a13fc7849d08e420
# f6aced8174324ce191d985758260504f
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# a0303e742cf64e74884ff0ec1d3e2d38
msgid "To search an expanded run list for all nodes with the role ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/chef_search.rst:161
# 89fead6e71be40b38d2788af39c981f6
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 947506f2590f4ca58ff8bc4262567564
msgid "A node can be searched from a recipe by using the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# e94c3f283f9e4e44802af40b35fc6c89
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 610bcced37ca43f48d9c157840d2903b
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:15
# 574e5ede80bb40929586a6ac15aa9541
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 01e28668afac47828f3c2bea0a6dd88b
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# df88132e2ad746adbf27ac5b68eeeac2
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:24
# dc5d6eb14943491986a4db26a28fe3d5
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:28
# 384bad1359c341109eb71d29b5954742
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:32
# 5888ce3719684e3ca920fd4b6bbb2a44
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:33
# 951bf1d0388c466e86721bb7a0b97920
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# af4c1dd897b24c4bac2ade3693cd8806
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:39
# f6d2637c99254d248ef42a969922f82d
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:"
msgstr ""

#: ../source/chef_search.rst:165
# 2a9d80ad01c24b2aaca9b070119ec1ab
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 18b994047019444e89589db97a7a7fa8
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# f7ed578bc89a44edb697bac3e9def532
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 25bfaeea4d7944f9936c25684e452bd7
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# d1deb49b131e498db73723dc9397ae98
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 05b34810f2984d34aa9f9a9ba7cbe6c8
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/chef_search.rst:171
# f606b9bee1284f7ab44bccda39acdc44
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# f6824d288c894d8486852080673e6dfe
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 43c57dfc5b1f42f084230ea00764f5a6
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 796dfec72929461a94c0c84a152c1f6d
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/chef_search.rst:177
# 413a2b4f60f44624acfba10e3b571cf0
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 652fa5b34d8445e8ad26b5ceb44a6902
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 7420c88512b547e28108774c99739248
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# fa028b62135c4bd5b895529b9e8e8c84
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# a3dc37b882f14f4b8a295792106c71a6
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 7c72393c6d11400383d1b4a6394972f2
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 027ce24f444a4ed581311cd7723c43b9
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 8d911c6c1b5b4f629819841ca322c1c4
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# ff636503acee4abe939e8ab045f6ad4f
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 02d6c0238804489aa56ed085f6d9991f
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 7bd9c8a0194641fb8e39f4367a2db64c
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

