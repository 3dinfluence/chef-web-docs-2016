# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-01-22 15:52-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_search.rst:8
# 8a8e5d6d8f614ccca732379bb101b8a2
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 74b435e102d04d449576e9a32d5fb308
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/chef_search.rst:12
# 9185ee288e44436e9f85525d5a03b4bb
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/chef_search.rst:15
# 9b70fc32c70345deaed4a604f4265cc5
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 4f1132e6b3b2493e855eb1a4ce2a7def
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 789a41a6cdcd41aa80b036c23dfa4cd4
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:11
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:22
# 2159f6f19618472d8b47a0f9e7c1a3f7
# 953733f64a404ab384b207615e91d4c4
# ccf74433226c4d82bd39562dbfa5025b
# 699a56733e1947438fcbbc0cef79172a
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 9eeac4668ebd42868b1aebcfdaef2bfa
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 523e0a6b0fcd49a682d9ffbf4ee2c1e6
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# f769d34ef36f4a7398962fddae5aa71c
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 06dcc30b35bf40c1bc84312f8437916a
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# b8b0cdd929d5447da5736a7fd149ab82
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 1f7ac5a772c943c1a8be5b14466533fd
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# cb2b13d694364737ae65db468b9d3cdf
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# bfd51eaa37824ef7b7583bb77dbfcb34
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 257cc2ac003146608636bb359f680be4
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# bd8aa403c41742dca8b57e427b8ec9c1
msgid "|search index_role|"
msgstr ""

#: ../source/chef_search.rst:19
# a14fa38c08bf400bbc112c5962d17b4a
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 704421dc32974e6899a8f4a0fc89cbcd
msgid "Use the |subcommand knife search| subcommand run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/chef_search.rst:22
# 0800841072154c49ab6c801a04ee8f46
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# c85c07e8da3740ae8e7f6a5890e26a41
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# d2c9445231d2482a83937f69c0dbe0b1
# 3ffee5a1c97241338133124f7a31a995
# f5f7758ce08d459bbee106900b66e4c8
# 81c7cfbeeab94d75a76253b102ad1282
# 5c51fcbc1a5148f7a630d441c4406feb
# 63c0123b83824c5a80d2fa6dea053c11
msgid "to return something like:"
msgstr ""

#: ../source/chef_search.rst:26
# 2727a8b9e14f45d4bdbab85f6d94ad8a
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 72011fc30bc44c2db8c04744a047373c
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/chef_search.rst:30
# 4e8e39f4b881457299c4a01c3706b6f2
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# df990d13e50e424d8ad0df6ced1412b4
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 4516cab060ca4411bd06600cc6d28096
# 20e65caedbb744e3930550c29c97b362
# a1183c365d4945b39f5767ef58205798
# 4ccc3848e5e04b3c9414a99864084897
# e37bd3a33fe9448eae11323c15d42942
# 01895bf7a41545029eb632d6ed409358
msgid "or:"
msgstr ""

#: ../source/chef_search.rst:34
# b330f6ed51064f158ec45aa8679e10dc
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 46848e10825443228ecad8d5658fafbe
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/chef_search.rst:38
# b1be236be52f4ffe8b7721f50dcb45fc
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# fc5138cb46f94ab49489b44c81228d5d
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/chef_search.rst:42
# 0ad1f3a1e21545d7bc29c0224e5f92a2
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 38990a2d89cc412bb4bf4c42e011fa7d
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/chef_search.rst:46
# a727fcb9dfd749359aa7f324b560a41b
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# c4d55e38158a4e95a9cc83e83c8fe9f6
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/chef_search.rst:50
# 7f318547447d40609f6a5255646c137d
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 7ad55a0d9ec249d4a1eda0d3325aa6c6
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/chef_search.rst:54
# 05bcef36250745e39bbbec5030210e5b
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 99b96e8431854d1b84853ccbbfac4d58
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# f304b254bd514bb7ae18619ed7cc1026
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/chef_search.rst:59
# e4eae6118b164746bb9495c7e8d4a963
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 9af4d3766ce8420bad4d1cd6293f209a
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 73a83bea78cd42c086c5d357628074b5
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/chef_search.rst:62
# 5a0c001b45244c71b9c6d6cc67d27f45
msgid "Search queries may not contain newlines."
msgstr ""

#: ../source/chef_search.rst:65
# abf515f8efaf457e990c64c95c854fca
msgid "Filter Search Results"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:4
# 3ad07bf4fbec46e58a4db109d20156f7
msgid "Use ``:filter_result`` as part of a search query against the |chef server| to return data in the form of the specified |ruby hash|."
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:6
# dbd3370e660844ce8190ce06feaa637a
msgid "The syntax for the ``search`` method that uses ``:filter_result`` is as follows:"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:21
# bf5034cfee094bfc9dc7c69cc7742d5d
msgid "where:"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:23
# 2a0bf176aa3648a8bf42ac97dcb0a41b
msgid "``:index`` is of name of the index on the |chef server| against which the search query will run: ``:client``, ``:data_bag_name``, ``:environment``, ``:node``, and ``:role``"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:24
# ccbd985f22cd44899f257698611a8304
msgid "``\"query\"`` is a valid search query against an object on the |chef server|"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:25
# 1db9d940372e489488290529b3d837ef
msgid "``:filter_result`` defines a |ruby hash| of values to be returned"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:27
#: ../../includes_search/includes_search_special_characters.rst:11
# d8b0e1a1fc0849fd8e5ad490ba978131
# 55232c3373ad40c081ae6f873101efb0
msgid "For example:"
msgstr ""

#: ../source/chef_search.rst:69
# ca7bd5e89ce24fa7b633a474883af2e8
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# d8e8fd94c9ca49d0af9721cbaa1d8ac6
msgid "|search key| Any field that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available fields for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/chef_search.rst:73
# 83d7f021493649abab43f7ee38d07bee
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# a39388858bb340a3a97679dffb0990dd
msgid "A nested field appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested fields are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound fields that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# ec1aecfd8d284b1aaba70e15a36daf2b
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 06279058d4b043b6adc26fe6209533e1
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 3d17cc64e02c4c64b6f9868f08a6c8e8
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 56974586b997486dbb64577a8a6b3d54
# 4eb1e1ae41304e08b63eea757a980791
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# d6552e7f31384e608e7068067a41fd83
msgid "This data is also flattened into various compound fields, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# e4c537e9ccf34ee78663f4d8556e9893
msgid "This flattened data structure also supports using wildcard compound fields, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for a nested field:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 9c28eb9b89f64fb1b374c78bafb658a9
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# b56790a59a424834bb5bede6e9a743ad
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../source/chef_search.rst:77
# 28d592690d8a4d4882f4a9b09f7cdb97
msgid "Examples"
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# f820d3784dbc4a6ca45eeeff89d5048a
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 113a9c9b78b1484d8cfb98e7cbda6c62
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# a7f9735b019c4c669dcf38fbf67cad68
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 31f4489ec42743ffbd137f6cd83e17f6
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 1592eac7ad834c4abc5e21595d86c35b
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 315a78e7fe864369b93959841f229179
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# d70eaaffa37a410b8f30485591436dac
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# e17dd793d9e84aeebf8cd7e0d9b6517d
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/chef_search.rst:89
# ad84d20cc3d5479daaf30b39fffe6268
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 9519fc92c5dd4be5ad77891da22c3b8e
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/chef_search.rst:93
# 6d2dc5f5fd95499aacde1d6f3681d4ef
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# ef521b3fa3534f92b19236e95772e695
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 5bd3a1e357f246a89eee5ca2cdb415b7
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 49c73ee099e14e15adf836f83f50a8db
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 5a61bd3b4acb4068aa279c6d92274b8a
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 9bfa8c51cbce4b529e405c257410e24e
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/chef_search.rst:101
# 7e33fde17070432faf3079732f41250e
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 4cc0de5cd9b64a50a6517922b6164820
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 2b11e3300f154d799f11bf73340f64ec
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# d2c35ea7559648b2a4f214c6f7b73c5c
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# bdc88423e34744b2a5087462fcb131d1
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 3e1b88dffad74ecab4b5b74521a37544
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 1003176eac8c4aba950b3d2724361d4f
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 3e14c4fe86584ddabe58221c1a30d07f
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/chef_search.rst:109
# 4fc0015848854623a619104f53ea9fcb
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 4260ce52199146ae8e16b8ec83d447c2
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# 2808bbdbc2bb4800888a646768842ed7
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# d1a29e975b8c4802a5431c6db3a161d8
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# bb43ca269c7c4a59894487095aacff1b
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# e5ab34530fe649cf8db948adde2441ff
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# c7b74a0d9af049cd90d737cf9c7fc04c
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 2d5b2acd3fca4fc4a4df21e8547d205e
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 303a777d05834879aa3eb7384abfdab6
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/chef_search.rst:117
# 980cc96d59d04770a462bc49d9b9195e
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 7348aca82929445da5c78860299d8731
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# 5b6d54a787f649eb991a14a6a9d44237
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 3fbccbdfec0c46fe9b0dc752700155dc
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 0f1fbf7c9f6445fb81807bea9c9a8a58
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/chef_search.rst:123
# ed1c4af062724e3ba4908229471ddc68
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# d9f22df1384b4419bcef0ef3266f2a4b
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# aeaf24c31546433e9996f11bc04ec3ba
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 8604267679cc4a38bc50723e9812b215
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# f0217437819b447bb89f86852198afee
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 676a0477d8c6445eb49248ec411e9b77
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# c9a929e778d94e44a82e111eedc57448
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# ba6400f6c9484ca28a1d0ab6cb80dd55
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 1a86407602214c92aa7e73804d74abc1
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# 818cde0d429b4d3e834fbd5af7f7b61b
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# 81c92b99f0c34ed7a67afc946d7b1b33
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# f229ba08da4f4629bdf274b3140aa890
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/chef_search.rst:129
# 29c8e3988498487eb9fb6e5f2b5c9dc7
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 3b3f09e2e554486c9a7480125bbcd858
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 50957cb8d2e343939fc24444091cf877
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/chef_search.rst:137
# 87010c47438a445e972fc8d7040d9153
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 3ac2f872fb9b442187ea9530b2d9bd05
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/chef_search.rst:141
# 8d89b7b4a1b143b3a1e38c21b1c206e6
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 4320e85fde77492a89918a97d8f8a05a
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/chef_search.rst:145
# 2df7f44ae2b44454aeb6b6247fc04a70
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# ff52978c796c4043be3538c9c4c4e00b
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../source/chef_search.rst:149
# f71ede94d77343dfaf1d46a3f3b5582c
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# d2f5aba9029c4f289b4eae69ef16f6af
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/chef_search.rst:153
# 072f48fe56b142409b3bb8d66c9babc7
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# b1b0bc4a9ea3408da48502c70084de3f
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 32973be9a6534ea59c12df9dd0fd18cc
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 6fe5df797a8b4efb9732bccd2222b382
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 7514eec0967d429e86b7c72f6e40f906
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 1310231995e349a4bcda5085914dec8e
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 664d67ee39874c57a806fac0cd26bf76
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# a806918e2dae483087b32f6f660ab441
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# f7a661380f424b6b8dc57430af8a4243
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 47b3b56a8ae94d9d81d1183d2c16ea77
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 92e99ece091043b1b6c8d94fc4aae9e0
msgid "To search a top-level run list for a role named ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# d311eedce1564dee948ad2dae9e82ce6
# 797055e36d704bd2a722e48d1e776b69
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 279f8adda3da42cc97c3ac782c7a520f
msgid "To search an expanded run list for all nodes with the role ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/chef_search.rst:161
# cb62bd69cec0451fbc7ad5eba14a15db
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 2bce44fb253a48be9ad23e8b4d20d46b
msgid "A node can be searched from a recipe by using the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# e2d2c3cdd4864cf1b894079f2d2f7c51
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 81e07e6c21764ab98cd344f7068f8349
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:15
# a40d79c8444a407f92296e86b2b39808
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# ef67074ff22c42e985ab9855a94cbe02
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# 9adbfd57a0214237a341a517cac9ab4a
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:24
# 37aadecd9c0e40c6931ba93a757010bc
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:28
# 7265ba4508cb41d59738dcc241c5ad24
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:32
# c1ed2b5c71264252907018243c37f2c4
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:33
# 871317e1c3964542b4b8c9d70af0d423
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# 4448c2aa33984f6e93105396b9bee427
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:39
# cb1edaea2ce84342b83ca6fe1fab4623
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:"
msgstr ""

#: ../source/chef_search.rst:165
# 3137e797928b4846bdec688d7261f5ec
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# f59b1d15971e40bfb88a7063f60c521e
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# c73481df929a4de08283c3ed1abe779a
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 1169506116f94b76ab3f3ae66870e7e7
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 7f80577b24db4469b1a96a00b96416df
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 3a93301adff24f31a012b47b018cb2a5
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/chef_search.rst:171
# 3a23991742314fce92ffbba9ba39da83
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 46eeb9f6b87d4822ad3e54b40a470051
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 1b4f18d94d2f41f5a486ef8764adc7f2
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# b9887e6897234ef798b90966025f80f6
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/chef_search.rst:177
# 36dedf4d185f4ffa98b0d28714eb9850
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 47413fc4e3874192bf5ec42b01e54cc1
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# d2fb90c4004c46b697f9d47a4304d3d6
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# f271fb4f6caf4f35839e84b3aefdc303
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 41c39a1246614155812cc9cb83f303c4
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# f082adf33de54a81b1d38c2413922aad
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 44135445bbf1455f81aaf0e025343212
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 14d93a491830424082b1afb36b7bcf28
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# d30a9b4a2f2d4d1a97b1a0e1d34315d1
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# b81ae86d27504e57b89a58654dbccb50
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 107d565897c04cd09322d2ba1fcd3465
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

