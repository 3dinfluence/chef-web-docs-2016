# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-04 13:15-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_search.rst:8
# 501b8dbba458496681287a6b61ace7b6
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# e0564d038c004391ad846e1b80cfaf62
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/chef_search.rst:12
# a3efc84579804724b78ea81f7452b03c
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/chef_search.rst:15
# c9899ed2618044959985ec443738f438
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 57f48866314344e0be0349995faefb6d
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 4a6ce674ca064f0888dab233e7006c92
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:11
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:22
# 4ce0e70b3f1c403fab5ba3655e18417d
# b4f8a496615841758a2c64abcc73a2ee
# 980a427c3d6b493297ff6fd15bb8cea6
# 05e605a91b2a42978ba13fa324fbf0a3
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 0405a06f02d047dd823692c4ca182075
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 4dd1aace9cde4e489a161be262152ced
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 3f2d52d5e24d4cbe8e62771961d2ef9c
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 373114e3fc9c4a0e8ddad651ae0a07ee
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 09056ba9168c47ceba67215736f80203
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 5e42b80de5064e41bc6a93a80857ea4c
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 7470f63a35884a3b8e01310acb170e30
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# e8e230f188684c48b35fb649d7b3c9c9
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 933db6ffd7424525b4bb275951f7fb97
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 30ba73d817b241db9ed045bbc2a2d3f3
msgid "|search index_role|"
msgstr ""

#: ../source/chef_search.rst:19
# 19f60274425841b7946ba1e875ca8a7a
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 46382d10924d4e7b81b6be9c852d4b5e
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/chef_search.rst:22
# 58495b6f8ab840e3bc223eb33a691fa3
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# d4ec31a89d3b41fba03c1c9e69d889a2
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 997e72ad7d9143a799022e29d176ce9d
# c8c30806cc964ee1bcc2836a9bb3430f
# caeed2ba0a234698b7c5c9917fbe3bd7
# 9162e8174dfd48b3856614bd38bb8d72
# 6318bd6ca268430fbdb51bc074482f7e
# e85abae4d3764c3c83affda624790e3f
msgid "to return something like:"
msgstr ""

#: ../source/chef_search.rst:26
# feb2855013db4f35ae7484f90a8ca2b1
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# cfcef0f8956f4abc88cf50905036ef7f
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/chef_search.rst:30
# 0b25d0a1a6b14e09bdd48519939126ec
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# 187b71dde5a6453c8bd1dc29914c3dcc
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# fa229070be3e4bcd978aebb731ad2b77
# 62ac3f67e42e4a6b83428b7428dbf2b1
# 6756273c19c749cc8383d553cd912030
# 7585fc6a2864447abcbccac6f775d59a
# 6080f15072b44b67950004def10c7072
# 72a32f2209a64520b01bc6666ae6f81f
msgid "or:"
msgstr ""

#: ../source/chef_search.rst:34
# 0053ddbcca874c358d44f4e164a2935a
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 39cf2522ac9f4101b798f833770d0452
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/chef_search.rst:38
# dde56c0a1f4e4bea9bec4e9bef55f56f
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# c677f9749349447daffdec1385c741f3
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/chef_search.rst:42
# bffad547218f4c90816028664501fc70
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 276d1dcfddcd4b889d086538193008eb
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/chef_search.rst:46
# 15e69ee4fbba4787bcdcfc0ffbc47c56
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 90477fb4b9544466b910556f53a1fd2f
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/chef_search.rst:50
# 8ff863e588bc436fabbf446be057130f
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 10243f079ae142eb96dfcab31af20cad
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/chef_search.rst:54
# 38ce125cd4c6406aa28c742ace596090
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# d3a209ab865a4467bcc414c16347661f
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 19611a8afe9b48f28f38069fc3e11dd3
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/chef_search.rst:59
# 17bbbf488e15429b9dadbd64dbc4c648
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# fa4f278879094392828c2953d1f4414c
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 25bd9b3962d44e4c91b993a1db7d33eb
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/chef_search.rst:62
# 28504a0d8a114847866385ae544e2636
msgid "Search queries may not contain newlines."
msgstr ""

#: ../source/chef_search.rst:65
# d1329c3ed4c1442398a9480a2e642197
msgid "Filter Search Results"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:4
# e322bcb6794e41d9b668c9748da15be3
msgid "Use the ``:filter_result`` as part of a search query against the |chef server|, and then return that data in the form of the specified |ruby hash|."
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:6
# 685fa98a93d74324a4efb488622c7c5d
msgid "The syntax for the ``search`` method that will filter search results is as follows:"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:21
# f52c710fe84e42cb92bb05b12d9dba6b
msgid "where:"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:23
# 9ec7af9e75b44e9f98a9b7d1829c791b
msgid "``:index`` is of name of the index on the |chef server| against which the search query will run: ``:client``, ``:data_bag_name``, ``:environment``, ``:node``, and ``:role``"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:24
# 48e00152999448f7b3a505a240472c96
msgid "``\"query\"`` is a valid search query against an object on the |chef server|"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:25
# 2549c2f67f46432d9885bad14aff4c3f
msgid "``:filter_result`` defines a |ruby hash| of values to be returned"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:27
#: ../../includes_search/includes_search_special_characters.rst:11
# eaeb2d24af5948cca4226e7a880bcf0c
# 36bcb97334ef47ce9a4ad02e53fa4658
msgid "For example:"
msgstr ""

#: ../source/chef_search.rst:69
# 35239b6d0984428e83a8693888e97dfd
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 874abeec1c48402e921efc21342c3a8a
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/chef_search.rst:73
# bf9112e8d8c94d7b95fa6c18a168c3ff
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 44654c51d92b4b93adf478ef4fee5ccb
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 74c0d74afa7e44558988c422d6f995e3
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 19560ae5114a4c5f843a90caf11d67c6
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# d27735e802f942ee89cc25eece0e63fa
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 2aa6f0f0c52049c28504c1830e891657
# 6bfebb55c1124b899911a7679dc4e066
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 79a7d0845fc44087a0ac6ba01182cb46
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 5fcace3e73dc44cf99affeee07cca4d8
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# c466c5c2579a4efeba77e2fa43b75c4f
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 59dd2804cb49404c8776b882d9ef2877
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../source/chef_search.rst:77
# 3ce152b66b974b75931e54cbcee6fd66
msgid "Examples"
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# d93ff8286fc64ee284092fbdf630d2bc
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 426d353d78f34fc4928cdc88bde813c4
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 345944603f66418c9e13344fa8e5577d
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# c948eba68d8746e58b56690dd9f090ad
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 67a0c17d1e0e474f975671c737635368
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# a51a227ef9274503815df6b7c3a34d21
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 9ee5003ecf624f35a79bebfdb6ba5582
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 437d9df0220c49749b3a3aed064025ae
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/chef_search.rst:89
# 4a54373ed72f4adc944cb880d2114ee2
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 475aeecd0bf54dc293cea6f72bb38650
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/chef_search.rst:93
# 65f431980bbf470b92853b4414d8583e
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 6d21e3cbfe2244f0bf543e1646784d82
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# fadb42f3cdcb4dcdbf77525ca2d1679f
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# e6c5cdce513e418b8983c525fb3b3162
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# cf875711efc04b0588080a26a6e36cb7
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# ec43a75e91134592a14a99f813fe4461
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/chef_search.rst:101
# 796957af403d4b70945f56d0286adfb8
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 6faa396ebbee416984e77c913786ca0a
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 2166f2988fc3411e8efa1112e0baa0e5
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 4ed6664797964ae8ad297dbe423f1058
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 0f42015adecb4be7b06ac0eeb2f1d894
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# fcff15c4c912425f98a6411521b164b1
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 97d61e566ece42a59b2f868663ece67e
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# c1931d3163ea4105afbfa61608fcd23d
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/chef_search.rst:109
# c2be94c8a9e84abab4fb29301417e85c
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 44b4eeb079d042bb94442347702dbc89
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# 2496e58bf719425ca2ee0eb301f9b8cb
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 45d3c2782d7b4a1797a845847f336876
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# f219d86954fd41df8ef5068b2e11a5f6
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 8f3aa79eb0714321a67d06f60b27f674
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 85e106446c46492d95c2c034d43cd700
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# ca09ad1a13934dffb253b85bd021646b
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 763b71933c604c0699ec74f960dda014
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/chef_search.rst:117
# 5463171950fd4532b71892667255cca2
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 0fa34f0db96144b1b0edd16b000b9c63
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# 1a7ae1c967c842728d4d05e0e780e345
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 35cfdcf7477e4d2f99a0ce329552ad4d
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 07d50ae6e50e4724827f4b335f20cc02
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/chef_search.rst:123
# e9e10f3b9eef4a8b8777501e93f0068c
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# 8238bfaa6c9241108a42be88cd27b436
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# 3c08b8c31a2440fdb6eeb6a0beff6327
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# b6646d2e63314705be57105fb5fa0f5e
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# a1c2e67708c74a66bc6c355b750d93db
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# c0ab472e7c004f2c84b5fab2ed184d3e
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 68571535514e491aac83d19c16f99bd9
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# c90bcc703ab5494db0de35e04b9adad4
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 604a2989ae7149c7998eb4b70b80bf2e
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# 5fba3898606742019cf15abec4f7ba4d
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# a2fcee73bf9f4f63940b505ba05beefd
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# 9ee41a7134d94b0e908929000cf07412
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/chef_search.rst:129
# 173d77ba8abf47f68757fed0d0012d77
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# f2c3a106a4ea415d8707ca0f16907840
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 32253027ddd143f6a3268a9655136dca
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/chef_search.rst:137
# 9aec16ac16734a79b79e800f5d1aa15b
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# cace595941ea4ffb8394e38787d9560c
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/chef_search.rst:141
# 768749b573734baaaee9b424d7e0c2ac
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# a5326e176d5146ad84196c76d9f40cd7
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/chef_search.rst:145
# 490fe4bd5e6f422ca7f120165044a9f3
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 7ff19ea388ff40d5ba827d234d1df851
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../source/chef_search.rst:149
# 94a5e9809bda43cd9f2c38842cddb82d
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 1736a3a6893a475faa2b6efc6a685419
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/chef_search.rst:153
# 2548c5a133f749cdbd02df9b96df4c62
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 90908a04128849979d12cbe916799f99
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 3805b0c9948c4f858ec23a70d2521bcd
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 7d162f2739c04746aa7601fd00705513
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 14ba89919be4482f909dd47823740f3e
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 52e1e12744bc4e23ab27b9717bd4c306
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# caa279319cbe42238f54ff04baed4d34
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 58cb76264f274bbcbba42652eaedc963
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 65ca47c00b304ee696a3ddfad17e90a3
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 9612a38caa6c4309bed9e8a9e8a42451
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 27e2decdf379447e876d9c82aa524e8a
msgid "To search a top-level run list for a role named ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# cd93c4131bdc4ae6847ebcc45882d332
# e95de336c0a14411961f54bae411d4cc
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# f75f35bdc5f0451bba2c6fb393624f3a
msgid "To search an expanded run list for all nodes with the role ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/chef_search.rst:161
# 5202437f93794958ac40839a228dd549
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 8c6fa2dd15b84e7e84111718c71380e0
msgid "A node can be searched from a recipe by using the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 2c7b6fa2e43542be8864a6dbf75050b5
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 25a6411b0e97455d830268d12e4a6762
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:15
# 672b47e796824ec5907de5022c18a430
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 2fef108e2fa04c21b65d8cc1a8de8e8b
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# 634499e8aab54c7db1223454759c8ccd
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:24
# 107eedccaa564e4c8f7a4a42610d8c73
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:28
# daefa81293bc44cb88f782824c3a7176
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:32
# 1d720ebcdc3340d1b3504a5a0f0ba9a9
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:33
# e7fdc56831ec4bb6a8ad0e5ec3fff19e
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# 30f6284d0ee446bdb588d2c7ff478caf
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:39
# c2a22592793b4dd0b5cb514693f826ec
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:"
msgstr ""

#: ../source/chef_search.rst:165
# cafea9e1dd5d4006b79dfa06c0c9fa10
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 3cbb3310dd9448499b875634d8a67506
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 3e9dda7cceab497dafa7235b7e5ad55d
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 0aea2223c281499b9c5658243b3b3df7
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# a89d0a663c204b31b5027d5580b11ba7
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 0bcecb960f7d42eb949c8d832c9c163c
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/chef_search.rst:171
# 7414ef4be2494c5c96836d652606f3c7
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 2522157a5d9c47fa8adb3508c58c643c
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 15bee00c940b48178768d292f14e12a6
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# e20a2d22bb914b9d96be1ad6bec8021d
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/chef_search.rst:177
# 756c0ea014ee42b49384468e902f3d25
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 422dda012d3646268fbf70d9d0bb264a
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 915ce3fdb0e9440b97a844a9b1a24fd2
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 7dcf7bc6267d4d72bf662bfeb57b422a
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# c66637885f184635bfc8d3f4ab246ce3
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 8bcd4515e5dc402cb2d349cd80127575
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 76735c95f3d44c8eb5e8437f41f4dfe4
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# ddc9505b6e694c12bdea1f581176184a
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 5e3d7f7046494d71addf39dfe1b009a5
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 22f21e65b213408fab8c1485c8130791
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# d8f1adfbbc6e4ef0858d6d9c34740424
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

