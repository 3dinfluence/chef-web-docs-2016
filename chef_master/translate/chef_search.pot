# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-02-10 09:43-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_search.rst:8
# 1d5e9ce6bd6f4ebcbf70db1dfd8eeccd
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 8be6b54ff9ba4f91817fb1ef2675071a
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/chef_search.rst:12
# 66e31a5911094d5db5b524a78cf5d7c5
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/chef_search.rst:15
# 1eec5aa683b640f2a409a2fce122af35
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 1cb5df53f76e479b8b1d8ac88b5a18ea
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# e54eb91fbc8041f484b6882726eac8f2
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:11
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:22
# 7d1e6a94f98a49a89d67cf373d1b0fbb
# 8f27276d72a740d4aadd790ffdc34bfe
# 517693e968cf4e3297de270ba1f63f13
# 4d95766860af44c28db94ded1e1ade4d
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# abf98930514b4e6b93dbbb1e46389466
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 8a25b1d0e9ac41e3abeadad9e1c25535
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 46e657b4595d47f78c4cabafac637ebc
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 2337bd855c8f426a821e9dfbc8e7e3e6
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# b12e4c46812f46eba84197a4428df5e2
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 8fc2b3e0b44a45e288809b5842542649
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 1f7c2899774f4d95b70dc07d90cb345f
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 695e910c7710454e8a8f5d992e459fde
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 78cdcf47705544e79c672d984941e8dc
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# b34353c868434548ab0b79f7ea8435da
msgid "|search index_role|"
msgstr ""

#: ../source/chef_search.rst:19
# fb4a810869c44623aee850d059243c71
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 526f7401b507419a91138be1137e961c
msgid "Use the |subcommand knife search| subcommand run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/chef_search.rst:22
# 03ae1fe782ce42df9435bb0ebd23b5bc
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# b906d4ceb0c743d99bce6d70b55f31ac
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 4fee21328b9944e7937b0d03db8216d8
# f3155ad495504f91a1e34023f26d1efa
# 0a14a7cfe7284abab55dd820add6f7de
# ed47702c35d34c35a760820dea383b0d
# e4d9e5d25a20447f8f59367fd8e1e069
# 0d1cd9c50891439198fdafd7659c2f60
msgid "to return something like:"
msgstr ""

#: ../source/chef_search.rst:26
# 4d464dbc14f9484399b479b1485148cb
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 987e42838c484f1aada6da1063db8eb9
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/chef_search.rst:30
# dd159b2920934395b3cccfa37021f913
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# 779e4e7287ca44d186ec93f3a9898ce7
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 79a207ef7f924e819ae27fbd7f7b8be1
# d604d384fb3d4ef8bd24118f59121201
# 82cdfa4b774542498192220865f3d807
# 7400de0af15e4eb1ad4df03111551ad0
# 0e6a84d4f8cc4ebf8ef1132de6e912d1
# 85955d49cdb148f6aed460e3803911c6
msgid "or:"
msgstr ""

#: ../source/chef_search.rst:34
# c873ec66ca0344c3abebfffb2d27aec0
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 66ae8d5167ef4d7490bea7f197463cea
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/chef_search.rst:38
# 02cd6e9f9476487caa17f8b0c53143a4
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# c31ffaa98bff4cf6962eda948ee8f675
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/chef_search.rst:42
# a1eb0623376143408f6a0dc4a1d8b8b6
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# f4896264e5d94361bae5c04c7833cdce
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/chef_search.rst:46
# 2779419d54a84976b8776469fa6c3f63
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 282233fe5fa74bcb84d8f6b4d233fcc3
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/chef_search.rst:50
# 56806376b22840e5b9a2d57450fdf342
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 70c888b012124074908fd744cef604f3
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/chef_search.rst:54
# a0d173e86f654868b4b1eacbf59cb421
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 39c32ddc5722402c838b8ec05b70487d
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# a6ad2d0cbfce45f7b7f7b4544643f8d5
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/chef_search.rst:59
# 8814eadf9e104593a5a026876c75ef43
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 3f28f726e0bd408b9fe6dcca44f0e831
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# b629ee35b84e4a32b4e3e3d5ab0adb07
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/chef_search.rst:62
# e2472fdd35da449eb4d8643d04db3df5
msgid "Search queries may not contain newlines."
msgstr ""

#: ../source/chef_search.rst:65
# 5d3114e47c784b47a6e1a9fb2a198eba
msgid "Filter Search Results"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:4
# 3a4d86e51b834b8a84602c06d6e18a44
msgid "Use ``:filter_result`` as part of a search query against the |chef server| to return data in the form of the specified |ruby hash|."
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:6
# 9ec3ca735f824dcaa433184db18d34c5
msgid "The syntax for the ``search`` method that uses ``:filter_result`` is as follows:"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:21
# 0555d76fa0334893b6bf449d7918b14d
msgid "where:"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:23
# 1b1a6dcd060d4d1d92ada8049fe68c0e
msgid "``:index`` is of name of the index on the |chef server| against which the search query will run: ``:client``, ``:data_bag_name``, ``:environment``, ``:node``, and ``:role``"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:24
# 606a583a69074ded9c5122f8df49ef42
msgid "``\"query\"`` is a valid search query against an object on the |chef server|"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:25
# 162e08efd9e24b059cc21b9994366d6a
msgid "``:filter_result`` defines a |ruby hash| of values to be returned"
msgstr ""

#: ../../includes_dsl_recipe/includes_dsl_recipe_method_search_filter_result.rst:27
#: ../../includes_search/includes_search_special_characters.rst:11
# 959fbda27b8e4228a0711ad63c6bbbc6
# 93afa4d1f9344285a12471a8ac85b67f
msgid "For example:"
msgstr ""

#: ../source/chef_search.rst:69
# 64ed0f18a7004926a9ac46c3382c34d8
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 5ba4d8362e874da2ada4dd52c3618eae
msgid "|search key| Any field that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available fields for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/chef_search.rst:73
# 5362312e39004ec6b47918923fa7aaf0
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# cd0ac5ed241c49bd9888dbd67d5c978d
msgid "A nested field appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested fields are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound fields that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 8f8ef3459a86478da193ff7619f73c27
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# c71676776be548af9b0862eb82c13b9c
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# b2cbd88b98524fb3a7141b64154c1883
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# e3df488f63bb4344b6edf385ba10a3d2
# 1228e31371264f6c831fa2e1f3436b58
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 65880dd3035c4dbfab70d81f591d47ad
msgid "This data is also flattened into various compound fields, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# b8de61539975426c8c0d76ae4c4e4f11
msgid "This flattened data structure also supports using wildcard compound fields, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for a nested field:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 4a5cc68550684902a053840ab04ef3ca
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# d788276582144a4897d906eeb4d8b0b2
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../source/chef_search.rst:77
# e44e6205deef4a329200cef03cfb5712
msgid "Examples"
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# f682d7e62fec461690d086b597288679
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# c0eb08d6460b4bda9e5599c0fbc53e4b
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# be2bf21750024b2fb16668755d0173ec
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 56b5ef576fb549ab8a936080c2403f1e
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# d1ea80b64ab34ddca718c6ab46e2f57d
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 2fc45860c7df4c96a50f22bd4c9be494
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# dbfc4c0b6db54f7e85ce9927812ff490
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 2e6eb27008824ec38eceb0a647c85517
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/chef_search.rst:89
# 54cf17d8a0ab453681b2935018c96057
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 222e6b721e334a46a047dd0031e83077
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/chef_search.rst:93
# 19c10de2915c429f96485ac8a1f1d04a
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 3fb65f7ce5b64ab7b46c2a093b2afc1d
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# bc7ec3b436ed4e0f9e3be91aa3a4bd15
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 33560bd47912495a8960ae193b46eef5
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# e49ab2e653e440d08210ab81538f7e8a
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 04fc7a75f15d49cd8ca286adc1477b93
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/chef_search.rst:101
# 31e6e32d69b14f8eb0ed065231a2e2f5
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 657d573f94264f6985d6f3a863d8d0fb
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# a344cd8ba3104d7c9b4acb402329fe5b
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 6d4b6f837da3405fae8c94c126aec811
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# e01931427a304e16bda934436873c130
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 96ad888057964fde86be67905babced1
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 6bcebf182c0a4b16a8b3fa17559841c4
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# ea774e679fc44af3bc2da97db3f9285f
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/chef_search.rst:109
# 3cb36b2b0f484ceaa807c4d52de0ef68
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 9a196b872d0143e09527498f6385e859
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# 75b622dcca0144108296fa01d2c27b94
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# db7fc69f51ff4d80bd1ec0c0806733ec
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 74dcde82bbd847dd85ac16761a2858a4
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# b48c366100e24400b2dfa25cce488236
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# b0edc3195c90453d90f4c88577dd271b
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 908b4889bb0c49418b22a0fd438df893
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 8146dab240564ccf845d844754c4349c
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/chef_search.rst:117
# dfdb149c975045fe85585f4a0fbbbc88
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# d5a0ff23117f4feba752829b2ffe565d
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# f27255cccf79421e92377054c4fd0b55
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 4998937b3e744807ad34dbc14376404e
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# b7250152eef747c9bb80563b0f4dc9c4
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/chef_search.rst:123
# 898a5996788446179adb588c132abe95
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# 59c5e81f0cd2403ab9a277fd418ed646
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# 7763d94c8650494d90adf45748e3dd65
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 3d5cea540e144e53acd3d0009da4923d
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# eb84a2f2a10b4a94a8202e32f6257ddf
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# fe7be76a96c548caa39484dc6bc5c72c
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# d7ecd19541044176a21561eaef47bf1f
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# ac83ca500db64c19844517a5ee2fc40f
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 23c4209c71e248a8a1d0e4069f2037f9
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# babb5998bf6244d5be44d6b662a60051
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# af620465ee584d7c832db75463657999
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# 954e4e1c2bac456eaa7f7878a36d1e5c
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/chef_search.rst:129
# f029f445bdcd48cb8a75a3f6ccf63273
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# af522f894a97422794b57370aa602d37
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 9167bcee64d946689840404974686d06
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/chef_search.rst:137
# 9daa6188319d425883d48e7e655de54f
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 0566fc1cb7e24bc4ad5f2d71b12171ec
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/chef_search.rst:141
# cac4bb85d22f4cc68c1cd709f31b3277
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 8ccb6f18a7e74d71a2a5b94ce382dffb
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/chef_search.rst:145
# d093b2fcc22c486aa7031fdb2e614e85
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# e2e97a55b13742ee9d3756633039dfd5
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../source/chef_search.rst:149
# 6836aab8a2b04dd08fe765da73201bb0
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 81a4abaa450448ed84e6b2347dd27a09
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/chef_search.rst:153
# 851f9c214b7c497da03e8ce21696c39e
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# a1d78c1319b040a59dc15f5b0c5f9c93
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# e4b200c81d2f4ccf880d488bd7198716
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# f821426c7d81453e932d0f59dd7b5cb0
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 112c42167e0343069c365b312ee6429c
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 2a58cefe06924ad9bcde7b6b48923fe7
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 6bda1f17b9534e00b1ce5f29bf42d7f8
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 5ece9393fb264aae909464c2e266995f
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# bce6afefce84406e835af694fc082812
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 1209be0279e54fc28a7521140ca8f7ab
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 4f0e1746e6924a8d93a0a6d32a9ae8b2
msgid "To search a top-level run list for a role named ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 951b963a8b1c41329b8303fd0957644c
# bc58e6c4765a4d498ab729f1a1e0d098
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 7535bc3b6ad24b6ba892285b5aa87ba0
msgid "To search an expanded run list for all nodes with the role ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/chef_search.rst:161
# 1bdb3779cc8449d79c8f629a8eaec676
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# d2b0f5633925408bb3528f45d594d544
msgid "A node can be searched from a recipe by using the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 9cb36c6773d3453fa61faa9a743ae913
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 2acc11e1334e413a90af607458ef250d
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:15
# dd12f581b0f94242a722261441d71a8a
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 3601ed9604e843ada9fbd633beb7a3c8
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# 1ea62fbcf259479c91a5deb9d2cf9a88
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:24
# eab6d7bbcf304e3287c99fef8e7a79a2
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:28
# 9712e958afa1484486e11c3b75c52b1e
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:32
# 6b881a5f4cb5426bbe5de9cb142ed7f5
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:33
# 57feba080b5f44c1a756cc85bee69394
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# f42080fcefae47538de5c556a1b86c5b
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:39
# 740b4603471841ce8578c16a587cc15e
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:"
msgstr ""

#: ../source/chef_search.rst:165
# b55bb07dc9a24444a9f089861f4494d2
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 742d96aa97864a12ad28b0ef033d756a
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 92d779967cd94d6daaa6dfe656e4553a
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 0fd492ba741e4b598b66fadb21c21b9e
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# e33f3162c0a34a2eb77105cb3ac1980a
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# a474b881bfc344e3a09ae489d1e9a073
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/chef_search.rst:171
# 8de4c6fef74e47088368aea7c1c6ab18
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# feebadff80f845f28f0a2a4ada8bcf2c
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 87451c5e079048f8b9b08a468cf550c3
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 377d941f4971400b9fb1181f10fcb1b9
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/chef_search.rst:177
# 383217d307f14a2cad949f2d733d538d
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 07ca89a7cb3f4ec389b2b41158d99b72
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 3ab1b67c82b046dea05fe9b849bd6636
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# fe384627deb4416590465f72405d7d77
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 05f044ae864b4a0ab8bb860270822c11
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# fbc687d707f0474ab028101a3f7b49fb
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# f6d8003a009e437fabd320981f76f597
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# e103247f64ad49298b935315ee85eb24
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 4a54363d36f2459eb08934daf788fc78
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 61cd54e5e0cb43abb7c4d502d45b1d94
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 04229e3ff2e9443eada22a6d96f20a31
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

