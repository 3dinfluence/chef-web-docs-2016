# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-17 09:47-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/lwrp_custom_provider.rst:8
# 976353e6093a46b6bdedae1d4c4cd5d0
msgid "Lightweight Providers w/Platform Resources"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_provider.rst:4
# 8a28b94af8f24b66a7a3bcb3f4e028b0
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider.rst:5
# 6fad09e9344547d495d74e218666bed0
msgid "A lightweight provider is a custom provider that defines the steps that are required to complete one (or more) actions defined by a lightweight resource. A lightweight provider and lightweight resource work together, each being defined in the same cookbook (the ``/providers`` and ``/resources`` subdirectories, respectively); together, they are referred as a |lwrp| (or \"lightweight resource/provider\"). A lightweight provider is always authored using |ruby|. Anything that can be done using |ruby| can be done in a lightweight provider. In addition to using |ruby|, the |dsl provider| provides additional methods that are specific to the |chef client|."
msgstr ""

#: ../source/lwrp_custom_provider.rst:15
# d6d979f326434e58a95bbb127e546e94
msgid "Syntax"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:5
# 2f635475ece8478c8a1f702e7f889b30
msgid "This section shows some of the common structural elements that appear in a lightweight provider that is built in a way that leverages platform resources (such as |resource file|, |resource template|, or |resource package|). Remember:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:7
# 6f5c11fef53a451bb8560e6479257e65
msgid "A lightweight provider tells the |chef client| how to complete a task"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:8
# 215c07edabe64b4d926727732de7c234
msgid "The structure of a lightweight provider will vary, depending on the complexity of the tasks required to complete an action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:9
# e1002a3acf37426e974dba80258e41e4
msgid "At its platform, a lightweight provider is just |ruby| code, which means that anything that can be done in |ruby| can be done in a lightweight provider"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:11
# cbb322128a844d9abd2553d26800a4d1
msgid "The basic syntax for a lightweight provider that is built to leverage platform resources is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:35
#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:20
#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:40
# ed395ba14bbd45148fb62b81c802dfb4
# 6ce9ac812f08405b8fd81707e96cd855
# b054687f5a2142eba1e19c7420b210fc
msgid "where:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:37
# a2fccd39413d4fa5b82224781ecf1099
msgid "``whyrun_supported?`` indicates whether a lightweight provider can be run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:38
# 31887b06867a4cbda0864778b14f14b2
msgid "``use_inline_resources`` is used to tell the |chef client| to execute ``action`` blocks as part of a self-contained |chef client| run. Using this method ensures that the |chef client| can notify parent lightweight resources after embedded resources have finished processing"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:39
# 1f787d4c8dea44349de9d3ff92c8d964
msgid "``action`` is the code block that tells the |chef client| what to do when the ``:action_name`` is used in a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:40
# db801558fb5643d6b4276b503c67f5cd
msgid "``condition`` is a |ruby| condition statement (``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, or ``for``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:41
# 18daaa7464e145a1a5e0aa1c2ae7381f
msgid "``test`` is used to test for idempotence; ``test`` can be defined inline (within the ``action`` block), defined as a method using a definition block elsewhere in the lightweight provider (shown as ``def test()``), or defined using any other pattern that is available in |ruby|"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:42
# 7954efc1cee64a5dab45f4778138488c
msgid "``resource`` is a resource written as a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:43
# 80cff4d702504ff2b0abbe238987e702
msgid "``Chef::Log.log_type`` is used to tell the |chef client| to create a log entry, where ``log_type`` is one of the following types: ``debug``, ``info``, ``warn``, ``error``, or ``fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:44
# cf3e9b03ae7c4adf834e92b615f1d0f1
msgid "``updated_by_last_action`` is used to notify that a node was updated successfully"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:46
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:11
# 938d5da64da441f286d8d6e7da666888
# 55994b424f044795889c1780e54001d0
# 9c3ab6f4d523446fbc63df2cb99db6d0
# fae73bb86da540d784aff552b707af9d
# c7f838c68ef449eaa74ef6b38ef3ed33
msgid "For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:19
# 1ed42ab5c29d401d96712766d4bdad2a
msgid "|dsl provider| Methods"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider.rst:5
# a4f1ca0d7b5042faa4dffa3ea98524b5
msgid "The |dsl provider| is a |ruby| DSL that is used to help define a lightweight provider and to ensure that a lightweight provider takes the correct actions when it is called from a recipe. The |dsl provider| is a small DSL with just a few methods that are specific to the |chef client|. Because the |dsl provider| is a |ruby| DSL, anything that can be done using |ruby| can also be done when defining a lightweight provider."
msgstr ""

#: ../source/lwrp_custom_provider.rst:23
# 819eb96ec9a440118c604a89125983ba
msgid "action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:5
# 0e3de94613214d42a27278cb291b2120
msgid "The ``action`` method is used to define the steps that will be taken for each of the possible actions defined by the lightweight resource. Each action must be defined in separate ``action`` blocks within the same file. The syntax for the ``action`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:22
# 3690ab4d5291404aacd9c1526afda739
msgid "``:action_name`` corresponds to an action defined by a lightweight resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:23
# 4e515be85ab046d5b833d79bb8bd218d
msgid "``if @current_resource.exists`` is a condition test that is using an instance variable to see if the object already exists on the node; this is an example of a test for idempotence"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:24
# da34d90595654ebebc17d0133088df55
msgid "If the object already exists, a ``#{ @new_resource } already exists - nothing to do.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:25
# 6d510ef8b9574a7b8bf2e62ee871d9bb
msgid "If the object does not already exists, the ``resource`` block is run. This block is a recipe that tells the |chef client| what to do. A ``#{ @new_resource } created.`` log entry is created"
msgstr ""

#: ../source/lwrp_custom_provider.rst:26
# a9bb5e8f63314184be9a28f72908edb2
msgid "The ``converge_by`` method is not included in the previous syntax example because when |whyrun| mode is enabled in a lightweight provider that leverages platform resources, the ``converge_by`` blocks are already defined by the platform resources."
msgstr ""

#: ../source/lwrp_custom_provider.rst:29
# d72c7aca91f14614824f7d7c3b15ccba
msgid "current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:5
# f74249bba3094292981ec272ff1c4102
msgid "The ``current_resource`` method is used to represent a resource as it exists on the node at the beginning of the |chef client| run. In other words: what the resource is currently. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state. This method is often used as an instance variable (``@current_resource``)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:25
# 92dd9c232b2f45f2a24c753532adbacd
msgid "where the ``unless`` conditional statement checks to make sure the resource doesn't already exist on a node, and then runs a series of commands when it doesn't. If the resource already exists, the log entry would be \"Foo app already exists - nothing to do.\""
msgstr ""

#: ../source/lwrp_custom_provider.rst:33
# 415556a1defb46b8ba115f5c6c1f949d
msgid "load_current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:5
# 0814acde8cd24dc7977080ac57eac899
msgid "The ``load_current_resource`` method is used to find a resource on a node based on a collection of attributes. These attributes are defined in a lightweight resource and are loaded by the |chef client| when processing a recipe during a |chef client| run. This method will ask the |chef client| to look on the node to see if a resource exists with specific matching attributes."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:26
# 76cb645ece404e98b01ae92dadb0228e
msgid "In the previous example, if a resource exists with matching attributes, the |chef client| does nothing and if a resource does not exist with matching attributes, the |chef client| will enforce the state declared in ``new_resource``."
msgstr ""

#: ../source/lwrp_custom_provider.rst:37
# fe5a1aea3db943ad99ef151c9e9e01c2
msgid "new_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:5
# b57e803dc986400f91240dea49d001ca
msgid "The ``new_resource`` method is used to represent a resource as loaded by the |chef client| during the |chef client| run. In other words: what the resource should be. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:23
# 44448e3be409438fa144c97c361a28cb
msgid "where the |chef client| checks to see if the file exists, then if the file is writable, and then attempts to delete the resource. ``path`` is an attribute of the new resource that is defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider.rst:41
# d57935a4a2b249eda49a10f1e5b51ecb
msgid "updated_by_last_action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action.rst:5
# 051b384753194b5bb47e6717a0e3ca62
msgid "The ``updated_by_last_action`` method is used to notify a lightweight resource that a node was updated successfully. For example, the ``cron_d`` lightweight resource in the |cookbook cron| cookbook:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action.rst:33
# 85fa9ba16e1f4c4e961471cd182223cb
msgid "where ``t.updated_by_last_action?`` uses a variable to check whether a new |crontab| entry was created."
msgstr ""

#: ../source/lwrp_custom_provider.rst:45
# 5e6e5ff07b404e7eae372809e8471006
msgid "use_inline_resources"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:5
# dd27b774b2b0449b9492a13d8104fc81
msgid "A lightweight resource should be set to inline compile mode by adding the ``use_inline_resources`` method at the top of the provider. This ensures that notifications work properly across the resource collection. For example:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:15
# 49b05c3bea13470593ee71e4988f9525
msgid "The ``use_inline_resources`` method was added to the |chef client| starting in version 11.0 to address the behavior described below. The ``use_inline_resources`` method should be considered a requirement for any lightweight resource authored against the 11.0+ versions of the |chef client|. This behavior will become the default behavior in an upcoming version of the |chef client|."
msgstr ""

#: ../source/lwrp_custom_provider.rst:48
# 3a428d6ffff74b42942914e63bdc8135
msgid "**Background**"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:5
# bac49577828b48638a7c113bd06e61ce
msgid "The reason why the ``use_inline_resources`` method exists at all is due to how the |chef client| processes resources. Currently, the default behavior of the |chef client| processes a single collection of resources, converged on the node in order."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:7
# d10c74bfe3694090ab29d12ac0054c49
msgid "A lightweight resource is often implemented using the core |chef client| resources---|resource file|, |resource template|, |resource package|, and so on---as building blocks. A lightweight resource is then added to a recipe using the short name of the lightweight resource in the recipe (and not by using any of the building block resource components)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:9
# d186aeccfb914ef1857cf2d52f277927
msgid "This situation can create problems with notifications because the |chef client| includes embedded resources in the \"single collection of resources\" *after* the parent resource has been fully evaluated."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:24
#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:68
# e012859e48684ea48dd67f334ea5ffb9
# 4e726ee08c124551bcdadac294317e07
msgid "If the ``custom_resource`` is built using the |resource file| resource, what happens during the |chef client| run is::"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:30
# 190514c9f40b441f98116ea73f5da12a
msgid "The ``custom_resource`` is converged completely, its state set to not updated before the |resource file| resource is evaluated. The ``notifies :restart`` is ignored and the service is not restarted."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:32
# e74a7e8a8305467c8da766b70b9e2148
msgid "If the author of the custom resource knows in advance what notification is required, then the |resource file| resource can be configured for the notification in the provider. For example:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:45
# 3379915d7a5348fe83f0084413eecfa6
msgid "And then in the recipe:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:53
# 9038c28f64824272830748123fd00d13
msgid "This approach works, but only when the author of the lightweight resource knows what should be notified in advance of the |chef client| run. Consequently, this is less-than-ideal for most situations."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:55
# 821cc819a8b044e192cb4838acea8e38
msgid "Using the ``use_inline_resources`` method will ensure that the |chef client| processes a lightweight resource as if it were its own resource collection---a \"mini |chef client| run\", effectively---that is converged *before* the |chef client| finishes evaluating the parent lightweight resource. This ensures that any notifications that may exist in the embedded resources are processed as if they were notifications on the parent lightweight resource. For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:52
# 757c37073e404a29859737c55febbeea
msgid "**Turn off Inline Compile Mode**"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_definition.rst:5
# 7916a93a258b4f9483ff6747fe0b84cf
msgid "The ``use_inline_resources`` method should be considered a default method for any provider that defines a custom resource. It's the correct behavior. And it will soon become the default behavior in a future version of the |chef client|."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_definition.rst:7
# f5835b272fa8424cb602d39405628586
msgid "Because inline compile mode makes it impossible for embedded resources to notify resources in the parent resource collection, inline compile mode may cause issues with some provider implementations. In these cases, use a definition to work around inline compile mode. See `this example <http://docs.getchef.com/essentials_cookbook_definitions.html#many-recipes-one-definition>`_ for how to use a definition in this situation."
msgstr ""

#: ../source/lwrp_custom_provider.rst:57
# 526a8fd141964ca6afe54442f525c999
msgid "whyrun_supported?"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:5
# bde5691d2e9c4551a4c8141666bb2a79
msgid "|whyrun| mode is a way to see what the |chef client| would have configured, had an actual |chef client| run occurred. This approach is similar to the concept of \"no-operation\" (or \"no-op\"): decide what should be done, but then don't actually do anything until it's done right. This approach to configuration management can help identify where complexity exists in the system, where inter-dependencies may be located, and to verify that everything will be configured in the desired manner."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:7
# fb49f64cbba24ad8a915166e695985d7
msgid "When |whyrun| mode is enabled, a |chef client| run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the |chef server|, rebuilding the node object, expanding the run list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:9
# 90e3cb0f91064b32919fa27b74a9e31b
msgid "why-run mode is not a replacement for running cookbooks in a test environment that mirrors the production environment. |company_name| uses why-run mode to learn more about what is going on, but also test-kitchen on developer systems, along with an internal |openstack| cloud and external cloud providers to test more thoroughly."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:5
# ebff8f5392524a8081796033a305be8d
msgid "When the |chef client| is run in |whyrun| mode, certain assumptions are made:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:7
# 82fdf94121c44d72b4601f7330747691
msgid "If the |resource service| resource cannot find the appropriate command to verify the status of a service, |whyrun| mode will assume that the command would have been installed by a previous resource and that the service would not be running"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:8
# a59babeae7564b0b8caffa1448e47477
msgid "For ``not_if`` and ``only_if`` attribute, |whyrun| mode will assume these are commands or blocks that are safe to run. These conditions are not designed to be used to change the state of the system, but rather to help facilitate idempotency for the resource itself. That said, it may be possible that these attributes are being used in a way that modifies the system state"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:9
# 5559577ddc4c4c188cfc470868ab4842
msgid "The closer the current state of the system is to the desired state, the more useful |whyrun| mode will be. For example, if a full run-list is run against a fresh system, that run-list may not be completely correct on the first try, but also that run-list will produce more output than smaller run-list"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:5
# 99ecc38b15044408a9d40c8712beb4f2
msgid "The ``whyrun_supported?`` method is used to set a lightweight provider to support |whyrun| mode. The syntax for the ``whyrun_supported?`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:13
# f1ea9bddd4d843bfbe284d190eb08ab1
msgid "where ``whyrun_supported?`` is set to ``true`` for any lightweight provider that supports using |whyrun| mode. When |whyrun| mode is supported by the a lightweight provider, the ``converge_by`` method is used to define the strings that are logged by the |chef client| when it is run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider.rst:64
# a136fb1332a74cddb444beb0dd2b0778
msgid "When a lightweight provider contains only platform resources, the ``converge_by`` method is not required because it is already built into all of the platform `resources <http://docs.opscode.com/resource.html>`_."
msgstr ""

#: ../source/lwrp_custom_provider.rst:67
# 12404148993f48f893092e1eda250412
msgid "Condition Statements"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:5
# 0b3440e10dc34b38b94017c736ed9190
msgid "A lightweight provider can use any conditional statement that can be used in |ruby|: ``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, and ``for``. A condition statement can test for:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:7
# f7cb95d77160449da822a72f232dafd3
msgid "A |ruby| class (such as ``::File`` or ``::String``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:8
# 7e22410590b24e23a51d7c67025ebca4
msgid "A ``Chef`` class (such as ``::Chef::Mixin::ShellOut``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:9
# b440d470a94a4efeafa12ba3b8c06cfe
msgid "Conditions present on the node by using ``@current_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:10
# 66ea96fe135740558483144cb723a40e
msgid "Conditions present within the resource being processed by the |chef client| during the |chef client| run by using ``new_resource`` or ``@new_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:11
# 3f2dce8af39b4d7bbe22014f64964978
msgid "To verify if a resource was updated by using ``updated_by_last_action``, for example: ``@new_resource.updated_by_last_action``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:13
# 5ee487f2401b4b9792a5e33f18d75395
msgid "and so on."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:15
# df2166517dcd4a9d81dad98ef9cac8f7
msgid "For example, an ``if`` statement is used to check if a file exists (``::File.exists?``), and then if the file exists to delete a key from that file."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:29
# 8c44f61bcc834c678e8b789499a6aef7
msgid "In the following example an ``unless`` statement is used to add a key, unless that node object already has that key assigned to it:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:71
# 077884f0997745a6978a915b763b1c4c
msgid "Log Entries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:5
# 0bcfd2b5ca1e4105bb27cf863ec7f832
msgid "Use the ``Chef::Log`` class in a lightweight provider to define log entries that are created during a |chef client| run. The syntax for a log message is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:11
# 360ccdbe53e64ea497519eb1cf111754
msgid "where"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:13
# f274b8e1680c4b39a711c30dd34198a9
msgid "``log_type`` can be ``.debug``, ``.info``, ``.warn``, ``.error``, or ``.fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:14
# 7775801cddff410693d81152a80b9676
msgid "``\"message\"`` is the message that is logged. For example: ``\"#{@new_resource} added module '#{@new_resource.module_name}'\"`` or ``\"#{@new_resource} module already exists - nothing to do\"``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:16
# f7ceade4728f4631b036ad3f756a1129
msgid "For example, from the ``repository.rb`` provider in the |cookbook yum| cookbook:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:27
# 599af30d09d74faaafb656de0910cf70
msgid "where the ``Chef::Log`` class appends ``.info`` as the log type. If the name of the repo was \"foo\", then the log message would be \"Adding foo repository to /etc/yum.repos.d/foo.repo\"."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:29
# 38a408ad96844a2d9273f92c1d7391a0
msgid "Another example shows two log entries, one that is triggered when a service is being restarted, and then another that is triggered after the service has been restarted:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:75
# f16f4092f8034fb4ba9180948daecf99
msgid "rescue"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs_rescue.rst:5
# c1abcb2c6d25470cb26d891942d542b3
msgid "Use the ``rescue`` clause to make sure that a log message is always provided. For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:79
# 17a7751c9926435d822acae63ebdea87
msgid "Examples"
msgstr ""

#: ../source/lwrp_custom_provider.rst:80
# bc82c0d26e37473ab958e263454c4f5e
msgid "The following examples show various lightweight providers that use platform resources."
msgstr ""

#: ../source/lwrp_custom_provider.rst:83
# 42c6533e0242493ea0bad7480952b0dc
msgid "aws_ebs_volume"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_aws_ebs_volume.rst:5
# 7d6f4b5407e645a58f94e25e6d9462ff
msgid "The ``aws_ebs_volume`` lightweight provider (found in the `aws <https://github.com/opscode-cookbooks/aws>`_ cookbook maintained by |company_name|) defines how the |chef client| would handle a recipe that uses the ``ebs_volume`` lightweight resource and the ``:detach`` action. The following ``action`` block tells the |chef client| what to do with the ``:detach`` action:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_aws_ebs_volume.rst:17
# bf3fa47bdab7419495ce2c1e8e7b3c3f
msgid "and the following ``def`` block defines the ``vol`` variable called by the ``determine_volume`` method:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:87
# 4b396d89304c4775b020cf38544e4dde
msgid "cron_d"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:5
# 3d53ce7308654c7f97e93b0af1ecbc57
msgid "The ``cron_d`` lightweight provider (found in the `cron <https://github.com/opscode-cookbooks/cron>`_ cookbook maintained by |company_name|) is used to tell the |chef client| what to do whenever the ``cron_d`` lightweight resource is used in a recipe:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:42
# 43964dc65a74495abd860a30cd3f59c2
msgid "two ``action`` blocks are defined, one for the ``:create`` action and one for the ``:delete`` action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:43
# fbcadeb8faca4fd08ce075b4df583bd5
msgid "the ``:delete`` action block calls the |resource file| resource (and it's ``:delete`` action) to delete a file in the ``/etc/cron.d`` folder"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:44
# e91ad37e905a4889bb86d97aa60b433f
msgid "the ``:create`` action block creates a new entry in the ``/etc/cron.d`` folder."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:46
# fccfc2a7dcb8492681febee6626ee075
msgid "For example, if a recipe used the ``cron_d`` lightweight resource similar to the following:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:57
# 27cca2c3117047d5bf801216444a029b
msgid "this tells the |chef client| to use the ``cron_d`` lightweight provider and the credentials for a user named ``appuser`` to create a |crontab| entry named \"daily-usage-report\". This |crontab| entry executes a command located in the ``/srv/app/scripts/daily_report`` directory at a specified interval (defined by the ``minute`` and ``hour`` attributes). Any of the attributes that are not specified in the recipe (such as ``mailto``, ``weekday``, and ``day``) just use the default attribute values defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider.rst:91
# d8db233bdef64ac9b53c638ca570d5ef
msgid "rabbitmq_plugin"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rabbitmq_plugin.rst:5
# 46398f61a96d4903b373144d85534dc1
msgid "The ``rabbitmq_plugin`` lightweight provider (found in the `rabbitmq <https://github.com/opscode-cookbooks/rabbitmq>`_ cookbook maintained by |company_name|) is used to tell the |chef client| how to handle two actions (``:disable`` and ``:enable``) that are used to manage |rabbitmq| plugins. Using this lightweight resource in a recipe is simple:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rabbitmq_plugin.rst:13
# d2fdd664415c452682f8ee2f1c926bb2
msgid "The lightweight provider then does most of the work:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:95
# b4111bea23664b91ad297ddfa55642db
msgid "ssh_known_hosts_entry"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_ssh_known_hosts_entry.rst:5
# 8f92acd4117042b0b92b75e9aaad3e36
msgid "The ``ssh_known_hosts_entry`` lightweight provider (found in the `ssh_known_hosts <https://github.com/opscode-cookbooks/ssh_known_hosts>`_ cookbook maintained by |company_name|) is used to add hosts and keys to the ``/etc/ssh_known_hosts`` file."
msgstr ""

