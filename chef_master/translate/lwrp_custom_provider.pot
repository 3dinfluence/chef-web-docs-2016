# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-06-07 08:08\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/lwrp_custom_provider.rst:34
# 46a37f7d1210436abd25472a8cc4eb04
msgid "Lightweight Providers w/Chef Resources"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_provider.rst:4
# 26cebf17f18a410b8cf33cfdb4132426
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state. These steps are de-coupled from the request itself. The request is made in a recipe and is defined by a lightweight resource. The steps are then defined by a lightweight provider."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider.rst:5
# bb92f5f472114700a91e8f0e84346905
msgid "A lightweight provider is a custom provider that defines the steps that are required to complete one (or more) actions defined by a lightweight resource. A lightweight provider and lightweight resource work together, each being defined in the same cookbook (the ``/providers`` and ``/resources`` subdirectories, respectively); together, they are referred as a LWRP (or \"lightweight resource provider\"). A lightweight provider is always authored using |ruby|. Anything that can be done using |ruby| can be done in a lightweight provider. In addition to using |ruby|, the |dsl provider| provides additional methods that are specific to |chef|."
msgstr ""

#: ../source/lwrp_custom_provider.rst:41
# cb57322fa53a4f8ba0b495bca366f509
msgid "Syntax"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:5
# ca70107b7fc0437cb76286afa5d6f7d7
msgid "This section shows some of the common structural elements that appear a lightweight provider that is built in a way that leverages core |chef| resources (such as |resource file|, |resource template|, or |resource package|). Remember:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:7
# e8506f24b7c04e6e9a5ad8ff0666486e
msgid "A lightweight provider tells |chef| how to complete a task"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:8
# f7a32a324c7041da92b934fbe325e55c
msgid "The structure of a lightweight provider will vary, depending on the complexity of the tasks required to complete an action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:9
# b81ff55d9334489bb3d4111a388a79a2
msgid "At its core, a lightweight provider is just |ruby| code, which means that anything that can be done in |ruby| can be done in a lightweight provider"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:11
# 313c76f040fd4d44bc5e501deb0c3731
msgid "The basic syntax for a lightweight provider that is built to leverage |chef| resources is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:35
#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:20
#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:40
# 97f54ef9d46a49b7ab2a61f5cf7f5911
# 5a236e99f7aa47f4a0a965fb8e70cf6b
# 39dd38856fd64dc9ba0e02c1f96c49d9
msgid "where:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:37
# 840b7b465f0e477cb8d65f6440e5a2fe
msgid "``whyrun_supported?`` indicates whether a lightweight provider can be run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:38
# 8800243f50004d0c942a479a9eb9a5ca
msgid "``use_inline_resources`` is used to tell |chef| to execute ``action`` blocks as part of a self-contained |chef| run. Using this method ensures that |chef| can notify parent lightweight resources after embedded resources have finished processing"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:39
# 7089ef272077447d9926a227e149e7e7
msgid "``action`` is the code block that tells |chef| what to do when the ``:action_name`` is used in a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:40
# 69b5b93a1a3b48e0bcdda6435ea16945
msgid "``condition`` is a |ruby| condition statement (``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, or ``for``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:41
# ecaaeae684164b10b374563f27dfe2ab
msgid "``test`` is used to test for idempotence; ``test`` can be defined inline (within the ``action`` block), defined as a method using a definition block elsewhere in the lightweight provider (shown as ``def test()``), or defined using any other pattern that is available in |ruby|"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:42
# 49112943548c4f2ea24237b6e206b952
msgid "``resource`` is a |chef| resource written as a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:43
# 74583117ea984965bbf033370aeaa094
msgid "``Chef::Log.log_type`` is used to tell |chef| to create a log entry, where ``log_type`` is one of the following types: ``debug``, ``info``, ``warn``, ``error``, or ``fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:44
# fd15e40da34d492498569e548035e443
msgid "``updated_by_last_action`` is used to notify that a node was updated successfully"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:46
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:7
# 81852935a6ee49419bd206fdf90a489c
# f8a01c2cab38496fb1fc955d236cc44c
# 3f9d3c4ed6be4ca9ad8c4d2216e816ff
# 86379aacba714295911ab26009d72f69
msgid "For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:45
# a2c0e10c8cb84d189d597cd02ddce0ea
msgid "|dsl provider| Methods"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider.rst:5
# a0975925a22f4f218cbdfa2decb431f0
msgid "The |dsl provider| is a |ruby| DSL that is used to help define a lightweight provider and to ensure that a lightweight provider takes the correct actions when it is called from a recipe. The |dsl provider| is a small DSL with just a few methods that are specific to |chef|. Because the |dsl provider| is a |ruby| DSL, anything that can be done using |ruby| can also be done when defining a lightweight provider."
msgstr ""

#: ../source/lwrp_custom_provider.rst:49
# 075512aad30847be91ff62b01874d745
msgid "action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:5
# 375b0a9c1f424b0a9e114c2205b36b85
msgid "The ``action`` method is used to define the steps that will be taken for each of the possible actions defined by the lightweight resource. Each action must be defined in separate ``action`` blocks within the same file. The syntax for the ``action`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:22
# 8e8582c087df4e59a73a9cd38117595a
msgid "``:action_name`` corresponds to an action defined by a lightweight resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:23
# 28ab4abf81894d53b90d2c0f0371ee56
msgid "``if @current_resource.exists`` is a condition test that is using an instance variable to see if the object already exists on the node; this is an example of a test for idempotence"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:24
# a36e5b81780746ef86d66a754059163e
msgid "If the object already exists, a ``#{ @new_resource } already exists - nothing to do.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:25
# 323a57814e954ff39ca69812ed438978
msgid "If the object does not already exists, the ``resource`` block is run. This block is a recipe that tells |chef| what to do. A ``#{ @new_resource } created.`` log entry is created"
msgstr ""

#: ../source/lwrp_custom_provider.rst:52
# 641ea9d9dfa548ff8220200572c8ca6b
msgid "The ``converge_by`` method is not included in the previous syntax example because when |whyrun| mode is enabled in a lightweight provider that leverages core |chef| resources, the ``converge_by`` blocks are already defined by the core |chef| resources."
msgstr ""

#: ../source/lwrp_custom_provider.rst:55
# 9018f0b30995400eb0a50c645e021a7a
msgid "current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:5
# cbd54c15107f40f1bd5adf15f74c2063
msgid "The ``current_resource`` method is used to represent a resource as it exists on the node at the beginning of the |chef| run. In other words: what the resource is currently. |chef| compares the resource as it exists on the node to the resource that is created during the |chef| run to determine what steps need to be taken to bring the resource into the desired state. This method is often used as an instance variable (``@current_resource``)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:25
# a8b1beb6cc094b27b43121a440030389
msgid "where the ``unless`` conditional statement checks to make sure the resource doesn't already exist on a node, and then runs a series of commands when it doesn't. If the resource already exists, the log entry would be \"Foo app already exists - nothing to do.\""
msgstr ""

#: ../source/lwrp_custom_provider.rst:59
# b3fb7663c5474bed81fed12898875f60
msgid "load_current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:5
# 8d32f8a64bf049d8b2367c43f3118269
msgid "The ``load_current_resource`` method is used to find a resource on a node based on a collection of attributes. These attributes are defined in a lightweight resource and are loaded by |chef| when processing a recipe during a |chef| run. This method will ask |chef| to look on the node to see if a resource exists with specific matching attributes."
msgstr ""

#: ../source/lwrp_custom_provider.rst:63
# f2e35c5eec214b6e84da3a44a052c777
msgid "new_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:5
# 80fce8aad305413fad97ae2a73100645
msgid "The ``new_resource`` method is used to represent a resource as loaded by |chef| during the |chef| run. In other words: what the resource should be. |chef| compares the resource as it exists on the node to the resource that is created during the |chef| run to determine what steps need to be taken to bring the resource into the desired state. This method can be used as an instance variable (``@new_resource``)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:23
# b30c1e0d0b38470e895ebeb4e048058f
msgid "where |chef| checks to see if the file exists, then if the file is writable, and then attempts to delete the resource. ``path`` is an attribute of the new resource that is defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider.rst:67
# 1b8582a6eb55436dac39a90b87cdc643
msgid "updated_by_last_action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action.rst:5
# 8d1ea65a8269480c8b7665d4ac63e8b3
msgid "The ``updated_by_last_action`` method is used to notify a lightweight resource that a node was updated successfully. For example, the ``cron_d`` lightweight resource in the |cookbook cron| cookbook:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action.rst:33
# 9bf28f0037cf4d39b905661af54a4988
msgid "where ``t.updated_by_last_action?`` uses a variable to check whether a new |crontab| entry was created."
msgstr ""

#: ../source/lwrp_custom_provider.rst:71
# ef40467146c144cebcf498cbd976945f
msgid "use_inline_resources"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:5
# 754631f4750d4394abc9aabbb048bb2c
msgid "A lightweight resource is created by the ``action`` block of a lightweight provider. When the resource collection is compiled, and as a lightweight resource is discovered by |chef|, each lightweight resource is inserted into the resource collection after the point at which it was discovered. For example, a resource collection may start out like this:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:13
# b681ea0bb23549b28ca3fb4af54d9d91
msgid "If a lightweight resource is discovered while processing the second resource, it will be inserted into the resource collection like this:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:22
# d84512ab345f4523bfb238ace070777b
msgid "If that lightweight resource then contains references to other |chef| resources (like |resource file|, |resource template|, or |resource cookbook_file|), then those additional resources are inserted into the resource collection in much the same way as a lightweight resource. For example:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:33
# 089c83badf5e445ea6d039445920515d
msgid "where resources are processed in exactly the same order as defined by the resource collection. In addition, each resource is processed fully before |chef| moves on to the next resource in the resource collection."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:35
# c5dc7c1d553c44f19450c09f1bc92bc4
msgid "This behavior can create a situation where |chef| resources that have been embedded into the resource collection by a lightweight resource are unable to notify their parent lightweight resource when processing is finished. For example:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:48
# 798ed5edf73341d7a56f7454ea663a15
msgid "where embedded resources ``a`` and ``b`` would be unable to notify ``lightweight_resource_one`` and embedded resource ``c`` would be unable to notify ``lightweight_resource_two``."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:50
# 2159d0061b7a40339bf168b91900d00b
msgid "This is the default behavior of |chef|. This may not be the desired behavior. To change the default behavior so that |chef| can notify its parent lightweight resource, use the ``use_inline_resources`` method at the top of the lightweight provider. This ensures that |chef| executes the ``action`` blocks within that lightweight resource as part of a self-contained |chef| run. Once notified, the parent lightweight resource is marked as updated (``updated_by_last_action``) and then any notifications that are set on that lightweight resource may be triggered normally."
msgstr ""

#: ../source/lwrp_custom_provider.rst:75
# ece55e67907a49aea1e302eaf5fa1205
msgid "whyrun_supported?"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:5
# 9689721c622f404789f426a5d52f2b55
msgid "|whyrun| mode is a way to see what |chef| would have configured, had an actual |chef| run occurred. This approach is similar to the concept of \"no-operation\" (or \"no-op\"): decide what should be done, but then don't actually do anything until it's done right. This approach to configuration management can help identify where complexity exists in the system, where inter-dependencies may be located, and to verify that everything will be configured in the desired manner."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:7
# c082363b664f40d2a7d20e00e63ef643
msgid "When |whyrun| mode is enabled, a |chef| run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the |chef server|, rebuilding the node object, expanding the run list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:9
# 64341a54ea5e4598b03358b34c8b3d5f
msgid "why-run mode is not a replacement for running cookbooks in a test environment that mirrors the production environment. |opscode| uses why-run mode to learn more about what is going on, but also test-kitchen on developer systems, along with an internal |openstack| cloud and external cloud providers to test more thoroughly."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:5
# 81b684d1c2354a1ebbabb297ed92b638
msgid "When |chef| is run in |whyrun| mode, certain assumptions are made:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:7
# 06174dcd89ca4ccbac6f42aa6cf1c8f1
msgid "If the |resource service| resource cannot find the appropriate command to verify the status of a service, |whyrun| mode will assume that the command would have been installed by a previous resource and that the service would not be running"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:8
# 84e4d99835b848e782191b1cf0f1cd30
msgid "For ``not_if`` and ``only_if`` attribute, |whyrun| mode will assume these are commands or blocks that are safe to run. These conditions are not designed to be used to change the state of the system, but rather to help facilitate idempotency for the resource itself. That said, it may be possible that these attributes are being used in a way that modifies the system state"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:9
# 72f1cd648cd14c04ab5b6b2e8b3605fb
msgid "The closer the current state of the system is to the desired state, the more useful |whyrun| mode will be. For example, if a full run-list is run against a fresh system, that run-list may not be completely correct on the first try, but also that run-list will produce more output than smaller run-list"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:5
# c5ab862ae45c479e81d64b1244d06977
msgid "The ``whyrun_supported?`` method is used to set a lightweight provider to support |whyrun| mode. The syntax for the ``whyrun_supported?`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:13
# 871af3d7e1ad4ec29311198150a8b5f2
msgid "where ``whyrun_supported?`` is set to ``true`` for any lightweight provider that supports using |whyrun| mode. When |whyrun| mode is supported by the a lightweight provider, the ``converge_by`` method is used to define the strings that are logged by |chef| when it is run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider.rst:82
# 68f5eccbbd314afea2fea7d36c9b34b9
msgid "When a lightweight provider contains only |chef| resources, the ``converge_by`` method is not required because it is already built into all of the |chef| `resources <http://docs.opscode.com/resource.html>`_."
msgstr ""

#: ../source/lwrp_custom_provider.rst:85
# 76d943df84414ec3ba065bc5b670fe28
msgid "Condition Statements"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:5
# b5681ed14a714373b03491678dfddd19
msgid "A lightweight provider can use any conditional statement that can be used in |ruby|: ``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, and ``for``. A condition statement can test for:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:7
# d7038cb5764641ef9befc57a18688757
msgid "A |ruby| class (such as ``::File`` or ``::String``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:8
# 416228368ec04d56848ed14af0aed309
msgid "A |chef| class (such as ``::Chef::Mixin::ShellOut``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:9
# e7716a0f25b745f0aeb983c92e1e9e45
msgid "Conditions present on the node by using ``@current_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:10
# 46edaa868f2f435985442bcffd11cf0b
msgid "Conditions present within the resource being processed by |chef| during the |chef| run by using ``new_resource`` or ``@new_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:11
# ea3b622b8c664ecaa0ebdb2d14e704bb
msgid "To verify if a resource was updated by using ``updated_by_last_action``, for example: ``@new_resource.updated_by_last_action``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:13
# b5b459ba46314ffb8653b3c790def317
msgid "and so on."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:15
# 60b8f07a1314413390004308d39815d7
msgid "For example, an ``if`` statement is used to check if a file exists (``::File.exists?``), and then if the file exists to delete a key from that file."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:29
# 8a1942c2df1a41bdb2122a222aab9fa0
msgid "In the following example an ``unless`` statement is used to add a key, unless that node object already has that key assigned to it:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:89
# 36b5ef3ed1a046a18ae61a4203423c0d
msgid "Log Entries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:5
# 842aa626e1124e3fa1c191b67e27a83e
msgid "Use the ``Chef::Log`` class in a lightweight provider to define log entries that are created during a |chef| run. The syntax for a log message is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:11
# a8f4ead7eb2b412490568bf9064db072
msgid "where"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:13
# 415502a79cc049829c2be2a61c1c4ec4
msgid "``log_type`` can be ``.debug``, ``.info``, ``.warn``, ``.error``, or ``.fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:14
# 76ee58f663a84b58a89c6c244fa14044
msgid "``\"message\"`` is the message that is logged. For example: ``\"#{@new_resource} added module '#{@new_resource.module_name}'\"`` or ``\"#{@new_resource} module already exists - nothing to do\"``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:16
# cdd35b8f480644eca92a847186d7dc86
msgid "For example, from the ``repository.rb`` provider in the |cookbook yum| cookbook:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:27
# c87012d7224249acb9507d3d39797f23
msgid "where the ``Chef::Log`` class appends ``.info`` as the log type. If the name of the repo was \"foo\", then the log message would be \"Adding foo repository to /etc/yum.repos.d/foo.repo\"."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:29
# 17ba809a58f24c5487df67bc5119fcea
msgid "Another example shows two log entries, one that is triggered when a service is being restarted, and then another that is triggered after the service has been restarted:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:93
# aac8da6b333c4040aa801733253893b6
msgid "rescue"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs_rescue.rst:5
# 87c8890401e14ebb8d893c66ca4ca952
msgid "Use the ``rescue`` clause to make sure that a log message is always provided. For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:97
# fb5ee6b6a7fc457c97a1489f0da74366
msgid "Examples"
msgstr ""

#: ../source/lwrp_custom_provider.rst:98
# 08782252a59243da84a1ac180fc9eb88
msgid "The following examples show various lightweight providers that use core |chef| resources."
msgstr ""

#: ../source/lwrp_custom_provider.rst:101
# 65841ddce0a546a98b525261dd11b3ca
msgid "aws_ebs_volume"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_aws_ebs_volume.rst:5
# ecb05418841242d582ce7b12defa2b7b
msgid "The ``aws_ebs_volume`` lightweight provider (found in the `aws <https://github.com/opscode-cookbooks/aws>`_ cookbook maintained by |opscode|) defines how |chef| would handle a recipe that uses the ``ebs_volume`` lightweight resource and the ``:detach`` action. The following ``action`` block tells |chef| what to do with the ``:detach`` action:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_aws_ebs_volume.rst:17
# 2dfb69b42769458897e285557c330e00
msgid "and the following ``def`` block defines the ``vol`` variable called by the ``determine_volume`` method:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:105
# 450b6d78fec042d4996fe06985461a9c
msgid "cron_d"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:5
# 898a6c58b7454ecfb70ca9b54fdb8812
msgid "The ``cron_d`` lightweight provider (found in the `cron <https://github.com/opscode-cookbooks/cron>`_ cookbook maintained by |opscode|) is used to tell |chef| what to do whenever the ``cron_d`` lightweight resource is used in a recipe:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:42
# 2bb292fc4ab246d8b134c084bcdffc0a
msgid "two ``action`` blocks are defined, one for the ``:create`` action and one for the ``:delete`` action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:43
# a7c1f252b2264aeca4a6b56e4c6b124b
msgid "the ``:delete`` action block calls the |resource file| resource (and it's ``:delete`` action) to delete a file in the ``/etc/cron.d`` folder"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:44
# 0f8b65de91a24e09828c4a38c32e34f9
msgid "the ``:create`` action block creates a new entry in the ``/etc/cron.d`` folder."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:46
# 9f9789303d0b427c8bcfca0f8ab31758
msgid "For example, if a recipe used the ``cron_d`` lightweight resource similar to the following:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:57
# 3e3aa78d6ed5473897c12149f8bbab46
msgid "this tells |chef| to use the ``cron_d`` lightweight provider and the credentials for a user named ``appuser`` to create a |crontab| entry named \"daily-usage-report\". This |crontab| entry executes a command located in the ``/srv/app/scripts/daily_report`` directory at a specified interval (defined by the ``minute`` and ``hour`` attributes). Any of the attributes that are not specified in the recipe (such as ``mailto``, ``weekday``, and ``day``) just use the default attribute values defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider.rst:109
# 9283db6455f0417395f0cbbcee26b8fd
msgid "rabbitmq_plugin"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rabbitmq_plugin.rst:5
# 4c4a9afc921140fdafb36f8f3e374ab9
msgid "The ``rabbitmq_plugin`` lightweight provider (found in the `rabbitmq <https://github.com/opscode-cookbooks/rabbitmq>`_ cookbook maintained by |opscode|) is used to tell |chef| how to handle two actions (``:disable`` and ``:enable``) that are used to manage |rabbitmq| plugins. Using this lightweight resource in a recipe is simple:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rabbitmq_plugin.rst:13
# e4b546c7d91c46e0b3d525b9a8c34bef
msgid "The lightweight provider then does most of the work:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:113
# cce7a21b02864051803843ebb2181c2e
msgid "ssh_known_hosts_entry"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_ssh_known_hosts_entry.rst:5
# dc9ca0f17fcd4f4eaf34e968a52c8863
msgid "The ``ssh_known_hosts_entry`` lightweight provider (found in the `ssh_known_hosts <https://github.com/opscode-cookbooks/ssh_known_hosts>`_ cookbook maintained by |opscode|)(from the ``ssh_known_hosts`` cookbook) is used to add hosts and keys to the ``/etc/ssh_known_hosts`` file."
msgstr ""

