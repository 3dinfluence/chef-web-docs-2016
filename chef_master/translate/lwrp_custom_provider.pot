# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-02 10:51-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/lwrp_custom_provider.rst:8
# 97c8c8d4b5824599903b8801705fba9f
msgid "Lightweight Providers w/Platform Resources"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_provider.rst:4
# 200a1220f47142d0b2d871e0738724bb
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state. These steps are de-coupled from the request itself. The request is made in a recipe and is defined by a lightweight resource. The steps are then defined by a lightweight provider."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider.rst:5
# 7c812ee8d4b842a484eff33d0e4fc55f
msgid "A lightweight provider is a custom provider that defines the steps that are required to complete one (or more) actions defined by a lightweight resource. A lightweight provider and lightweight resource work together, each being defined in the same cookbook (the ``/providers`` and ``/resources`` subdirectories, respectively); together, they are referred as a |lwrp| (or \"lightweight resource/provider\"). A lightweight provider is always authored using |ruby|. Anything that can be done using |ruby| can be done in a lightweight provider. In addition to using |ruby|, the |dsl provider| provides additional methods that are specific to the |chef client|."
msgstr ""

#: ../source/lwrp_custom_provider.rst:15
# a72daecc2562460fa00806a2403a3108
msgid "Syntax"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:5
# c43b1808ff74488a88432a1e652a7533
msgid "This section shows some of the common structural elements that appear in a lightweight provider that is built in a way that leverages platform resources (such as |resource file|, |resource template|, or |resource package|). Remember:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:7
# f8ca1632537041ff952e996b7576af82
msgid "A lightweight provider tells the |chef client| how to complete a task"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:8
# 2c830ca882f44ecd924022756c372a3b
msgid "The structure of a lightweight provider will vary, depending on the complexity of the tasks required to complete an action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:9
# 38f04e1d6ed04abcb85753a63d28b2fd
msgid "At its platform, a lightweight provider is just |ruby| code, which means that anything that can be done in |ruby| can be done in a lightweight provider"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:11
# 7ec2527596254ce3a68fa78998d6c076
msgid "The basic syntax for a lightweight provider that is built to leverage platform resources is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:35
#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:20
#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:40
# 69fe387dd1894f71910e0e0f7280559a
# 02f6dbd8d5dc467ab3c7ad7fe374603a
# 6fa9e25da994476fb852bd7f72551786
msgid "where:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:37
# 408b8ff37afe4f35bff3e08a19cef3d4
msgid "``whyrun_supported?`` indicates whether a lightweight provider can be run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:38
# 52cc8656a05849e490b8db7206e773f0
msgid "``use_inline_resources`` is used to tell the |chef client| to execute ``action`` blocks as part of a self-contained |chef client| run. Using this method ensures that the |chef client| can notify parent lightweight resources after embedded resources have finished processing"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:39
# dd8794068cd3442fabca10dcd8b25d02
msgid "``action`` is the code block that tells the |chef client| what to do when the ``:action_name`` is used in a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:40
# 4549c34fe92f49ecabfa52aa51d43eef
msgid "``condition`` is a |ruby| condition statement (``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, or ``for``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:41
# e209feb254d448a593e7b1fc92ae332c
msgid "``test`` is used to test for idempotence; ``test`` can be defined inline (within the ``action`` block), defined as a method using a definition block elsewhere in the lightweight provider (shown as ``def test()``), or defined using any other pattern that is available in |ruby|"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:42
# 82aa22a7295b476ab59d4537bd807d3a
msgid "``resource`` is a resource written as a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:43
# 4fcfdc5675644e568b500ed291ad3d36
msgid "``Chef::Log.log_type`` is used to tell the |chef client| to create a log entry, where ``log_type`` is one of the following types: ``debug``, ``info``, ``warn``, ``error``, or ``fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:44
# f7e1ea8793c44a6e90b930f1e5b12378
msgid "``updated_by_last_action`` is used to notify that a node was updated successfully"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:46
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:11
# beed51e93439432a9f03d711f65c088c
# 8dfc513368c04af0b826024ea73c190c
# f537652b5cc5422e838e371b93e54f79
# 94931586eb18431ab30bf80e0b3f5b22
# 34d742337e634f419e1b953c189b9933
msgid "For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:19
# ce53738ee6d84c2789b6ed888e0851b1
msgid "|dsl provider| Methods"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider.rst:5
# e8336bc6cd514a229ee5a68d56412c8a
msgid "The |dsl provider| is a |ruby| DSL that is used to help define a lightweight provider and to ensure that a lightweight provider takes the correct actions when it is called from a recipe. The |dsl provider| is a small DSL with just a few methods that are specific to the |chef client|. Because the |dsl provider| is a |ruby| DSL, anything that can be done using |ruby| can also be done when defining a lightweight provider."
msgstr ""

#: ../source/lwrp_custom_provider.rst:23
# b7ee035de79048b1a7d6745716c69e25
msgid "action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:5
# c375d56b6460442885f0432a96fbd1e0
msgid "The ``action`` method is used to define the steps that will be taken for each of the possible actions defined by the lightweight resource. Each action must be defined in separate ``action`` blocks within the same file. The syntax for the ``action`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:22
# 6be6735826424f89b55d85442be44f34
msgid "``:action_name`` corresponds to an action defined by a lightweight resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:23
# d40f4ad07d474467b3c6c6820de00b27
msgid "``if @current_resource.exists`` is a condition test that is using an instance variable to see if the object already exists on the node; this is an example of a test for idempotence"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:24
# d41506a8c95047168bfa1fb6e9eca0e2
msgid "If the object already exists, a ``#{ @new_resource } already exists - nothing to do.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:25
# a573d93bb55d47b98204dcefa002029f
msgid "If the object does not already exists, the ``resource`` block is run. This block is a recipe that tells the |chef client| what to do. A ``#{ @new_resource } created.`` log entry is created"
msgstr ""

#: ../source/lwrp_custom_provider.rst:26
# 4adbfc896f074d1ea0f12edc45b61534
msgid "The ``converge_by`` method is not included in the previous syntax example because when |whyrun| mode is enabled in a lightweight provider that leverages platform resources, the ``converge_by`` blocks are already defined by the platform resources."
msgstr ""

#: ../source/lwrp_custom_provider.rst:29
# 7b1145a22b5042b2bcd5bbc53c10bd92
msgid "current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:5
# 1c9f4392026c4d9abd83b5039180726e
msgid "The ``current_resource`` method is used to represent a resource as it exists on the node at the beginning of the |chef client| run. In other words: what the resource is currently. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state. This method is often used as an instance variable (``@current_resource``)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:25
# 82e99e2f1c5141ad964984a95217d4d4
msgid "where the ``unless`` conditional statement checks to make sure the resource doesn't already exist on a node, and then runs a series of commands when it doesn't. If the resource already exists, the log entry would be \"Foo app already exists - nothing to do.\""
msgstr ""

#: ../source/lwrp_custom_provider.rst:33
# 9da1f85c5d5c48c7aa770815e55f294f
msgid "load_current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:5
# c7e39755ceb746dea0aad71a437ba564
msgid "The ``load_current_resource`` method is used to find a resource on a node based on a collection of attributes. These attributes are defined in a lightweight resource and are loaded by the |chef client| when processing a recipe during a |chef client| run. This method will ask the |chef client| to look on the node to see if a resource exists with specific matching attributes."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:26
# 0d03c785ff474c1e972177fa0fb7e31b
msgid "In the previous example, if a resource exists with matching attributes, the |chef client| does nothing and if a resource does not exist with matching attributes, the |chef client| will enforce the state declared in ``new_resource``."
msgstr ""

#: ../source/lwrp_custom_provider.rst:37
# 559fd2f4189b42ab9040ce3c48f57214
msgid "new_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:5
# 7ae8dbbf08fd40cea0d9b30994215e26
msgid "The ``new_resource`` method is used to represent a resource as loaded by the |chef client| during the |chef client| run. In other words: what the resource should be. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:23
# 573bb160eb3a46e1b2940808b983548b
msgid "where the |chef client| checks to see if the file exists, then if the file is writable, and then attempts to delete the resource. ``path`` is an attribute of the new resource that is defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider.rst:41
# 51068b1b73a34d9984e4a91584bb77c2
msgid "updated_by_last_action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action.rst:5
# 6d8be9a78240443582081138cabbb710
msgid "The ``updated_by_last_action`` method is used to notify a lightweight resource that a node was updated successfully. For example, the ``cron_d`` lightweight resource in the |cookbook cron| cookbook:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action.rst:33
# 808b7bc855d74a35b0abc0db5172a890
msgid "where ``t.updated_by_last_action?`` uses a variable to check whether a new |crontab| entry was created."
msgstr ""

#: ../source/lwrp_custom_provider.rst:45
# 154441bba4794c41922c735e515f0ca5
msgid "use_inline_resources"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:5
# 89ab8ef2918b4bf59a7d34a363fc5ae7
msgid "A lightweight resource should be set to inline compile mode by adding the ``use_inline_resources`` method at the top of the provider. This ensures that notifications work properly across the resource collection. For example:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:15
# f3a21529e2e84854b84a272515c9579f
msgid "The ``use_inline_resources`` method was added to the |chef client| starting in version 11.0 to address the behavior described below. The ``use_inline_resources`` method should be considered a requirement for any lightweight resource authored against the 11.0+ versions of the |chef client|. This behavior will become the default behavior in an upcoming version of the |chef client|."
msgstr ""

#: ../source/lwrp_custom_provider.rst:48
# c5206295c1e6496fa52460c4036b3bb8
msgid "**Background**"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:5
# be045953b5bf4fc5b88aec22c764f9f2
msgid "The reason why the ``use_inline_resources`` method exists at all is due to how the |chef client| processes resources. Currently, the default behavior of the |chef client| processes a single collection of resources, converged on the node in order."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:7
# d6d6a5d5ead64eb2905c8a0c4922bb0c
msgid "A lightweight resource is often implemented using the core |chef client| resources---|resource file|, |resource template|, |resource package|, and so on---as building blocks. A lightweight resource is then added to a recipe using the short name of the lightweight resource in the recipe (and not by using any of the building block resource components)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:9
# 9693e92cc36043e8ab037434237dcba5
msgid "This situation can create problems with notifications because the |chef client| includes embedded resources in the \"single collection of resources\" *after* the parent resource has been fully evaluated."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:24
#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:68
# bf183c6aec1c4da9be40df59b6e04d0a
# 31a66795d1da498fa4110090f4304481
msgid "If the ``custom_resource`` is built using the |resource file| resource, what happens during the |chef client| run is::"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:30
# d58fde9a3d3348a798c62034266053f6
msgid "The ``custom_resource`` is converged completely, its state set to not updated before the |resource file| resource is evaluated. The ``notifies :restart`` is ignored and the service is not restarted."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:32
# 961d2efb8afa49f4b34bd3605e4c0c73
msgid "If the author of the custom resource knows in advance what notification is required, then the |resource file| resource can be configured for the notification in the provider. For example:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:45
# a3b896231dfe456c9d4caebbc94281c1
msgid "And then in the recipe:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:53
# f8096c063ebf46fa91b4d362a36b5ef6
msgid "This approach works, but only when the author of the lightweight resource knows what should be notified in advance of the |chef client| run. Consequently, this is less-than-ideal for most situations."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:55
# f4327ebb8384468f8709ceb63d0a6133
msgid "Using the ``use_inline_resources`` method will ensure that the |chef client| processes a lightweight resource as if it were its own resource collection---a \"mini |chef client| run\", effectively---that is converged *before* the |chef client| finishes evaluating the parent lightweight resource. This ensures that any notifications that may exist in the embedded resources are processed as if they were notifications on the parent lightweight resource. For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:52
# 7edccb43f7a54c24969934d3f34afbb7
msgid "**Turn off Inline Compile Mode**"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_definition.rst:5
# 343f36e868894c75afae1874c9009037
msgid "The ``use_inline_resources`` method should be considered a default method for any provider that defines a custom resource. It's the correct behavior. And it will soon become the default behavior in a future version of the |chef client|."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_definition.rst:7
# 00a49e8f92ad4cb9b44e42a541f1e54e
msgid "Because inline compile mode makes it impossible for embedded resources to notify resources in the parent resource collection, inline compile mode may cause issues with some provider implementations. In these cases, use a definition to work around inline compile mode. See `this example <http://docs.opscode.com/essentials_cookbook_definitions.html#many-recipes-one-definition>`_ for how to use a definition in this situation."
msgstr ""

#: ../source/lwrp_custom_provider.rst:57
# ceba0d2848e0428b98d6e2affffae5b2
msgid "whyrun_supported?"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:5
# 38a7049667914e30ab8c15967a7a88c5
msgid "|whyrun| mode is a way to see what the |chef client| would have configured, had an actual |chef client| run occurred. This approach is similar to the concept of \"no-operation\" (or \"no-op\"): decide what should be done, but then don't actually do anything until it's done right. This approach to configuration management can help identify where complexity exists in the system, where inter-dependencies may be located, and to verify that everything will be configured in the desired manner."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:7
# ad47162dde00419e8e8e9d0705f278ed
msgid "When |whyrun| mode is enabled, a |chef client| run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the |chef server|, rebuilding the node object, expanding the run list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:9
# de725a4399d0451b86ba31588ced2bee
msgid "why-run mode is not a replacement for running cookbooks in a test environment that mirrors the production environment. |company_name| uses why-run mode to learn more about what is going on, but also test-kitchen on developer systems, along with an internal |openstack| cloud and external cloud providers to test more thoroughly."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:5
# 8c06eb75da4f409ab551567128ca45c9
msgid "When the |chef client| is run in |whyrun| mode, certain assumptions are made:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:7
# e8f41be75cae4605bc47eecd955609bf
msgid "If the |resource service| resource cannot find the appropriate command to verify the status of a service, |whyrun| mode will assume that the command would have been installed by a previous resource and that the service would not be running"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:8
# fdd3ca3ade2743cdb3a76f5e4eaaca46
msgid "For ``not_if`` and ``only_if`` attribute, |whyrun| mode will assume these are commands or blocks that are safe to run. These conditions are not designed to be used to change the state of the system, but rather to help facilitate idempotency for the resource itself. That said, it may be possible that these attributes are being used in a way that modifies the system state"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:9
# fc1921d38bfb4988b992411d40943d08
msgid "The closer the current state of the system is to the desired state, the more useful |whyrun| mode will be. For example, if a full run-list is run against a fresh system, that run-list may not be completely correct on the first try, but also that run-list will produce more output than smaller run-list"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:5
# ad52a0698c364c809bf4349cf99fc508
msgid "The ``whyrun_supported?`` method is used to set a lightweight provider to support |whyrun| mode. The syntax for the ``whyrun_supported?`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:13
# 0734349be8c143f1a97a8f085abbc0ef
msgid "where ``whyrun_supported?`` is set to ``true`` for any lightweight provider that supports using |whyrun| mode. When |whyrun| mode is supported by the a lightweight provider, the ``converge_by`` method is used to define the strings that are logged by the |chef client| when it is run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider.rst:64
# 5f59809286d74b178228d6291c1f2926
msgid "When a lightweight provider contains only platform resources, the ``converge_by`` method is not required because it is already built into all of the platform `resources <http://docs.opscode.com/resource.html>`_."
msgstr ""

#: ../source/lwrp_custom_provider.rst:67
# 29564600a02842f49d99e539b37076db
msgid "Condition Statements"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:5
# d63f708816b24be6b1d4538bff1d73b6
msgid "A lightweight provider can use any conditional statement that can be used in |ruby|: ``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, and ``for``. A condition statement can test for:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:7
# 8f12a390f3f048ad886c6d200b002f3c
msgid "A |ruby| class (such as ``::File`` or ``::String``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:8
# fb7da5f928a34edf815add93239d541c
msgid "A ``Chef`` class (such as ``::Chef::Mixin::ShellOut``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:9
# 4dc98b1d751642d7874ca06e0075818b
msgid "Conditions present on the node by using ``@current_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:10
# ad660983891f4cfba129a57b06b76e25
msgid "Conditions present within the resource being processed by the |chef client| during the |chef client| run by using ``new_resource`` or ``@new_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:11
# 4045de469ed343c4923b081766cd932f
msgid "To verify if a resource was updated by using ``updated_by_last_action``, for example: ``@new_resource.updated_by_last_action``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:13
# 4380e58d12de477c80e26488e14e22d7
msgid "and so on."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:15
# 18d4218b2e2e4086be1d659ee90ddca3
msgid "For example, an ``if`` statement is used to check if a file exists (``::File.exists?``), and then if the file exists to delete a key from that file."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:29
# 84dbdc48c5d34cbf823a3e8d31ba5a49
msgid "In the following example an ``unless`` statement is used to add a key, unless that node object already has that key assigned to it:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:71
# f3ec9d8f51534f2f8f77d8f5879ba4bd
msgid "Log Entries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:5
# 82ae2cc5c57b4f4a98204d122b5fa9ee
msgid "Use the ``Chef::Log`` class in a lightweight provider to define log entries that are created during a |chef client| run. The syntax for a log message is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:11
# 598d99a4e9324377a23d5710832e8b19
msgid "where"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:13
# 5a04e92c9d884f2cbecbbb94f1ab4304
msgid "``log_type`` can be ``.debug``, ``.info``, ``.warn``, ``.error``, or ``.fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:14
# ae6b5e8cbd6246e4b0b5c4fcd57660e5
msgid "``\"message\"`` is the message that is logged. For example: ``\"#{@new_resource} added module '#{@new_resource.module_name}'\"`` or ``\"#{@new_resource} module already exists - nothing to do\"``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:16
# 9c3f88ab9744462498cd81174368aaaa
msgid "For example, from the ``repository.rb`` provider in the |cookbook yum| cookbook:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:27
# fafeefe6e8d346da8097242957bacef8
msgid "where the ``Chef::Log`` class appends ``.info`` as the log type. If the name of the repo was \"foo\", then the log message would be \"Adding foo repository to /etc/yum.repos.d/foo.repo\"."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:29
# 6232f3a6a531483797d356971ddd0cd9
msgid "Another example shows two log entries, one that is triggered when a service is being restarted, and then another that is triggered after the service has been restarted:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:75
# 7346b7aa81274ad693e1722a6c29f1ab
msgid "rescue"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs_rescue.rst:5
# 47506fb440c14566b879488ba2b0d58d
msgid "Use the ``rescue`` clause to make sure that a log message is always provided. For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:79
# c7ca9e0080284e64bb2ffe6a7213c264
msgid "Examples"
msgstr ""

#: ../source/lwrp_custom_provider.rst:80
# 3386157d075545ae8c2b69f93c967fef
msgid "The following examples show various lightweight providers that use platform resources."
msgstr ""

#: ../source/lwrp_custom_provider.rst:83
# 97966fc7f4df49c8baa100388aeda08e
msgid "aws_ebs_volume"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_aws_ebs_volume.rst:5
# eeefdd644d914fba85225d7ff10548df
msgid "The ``aws_ebs_volume`` lightweight provider (found in the `aws <https://github.com/opscode-cookbooks/aws>`_ cookbook maintained by |company_name|) defines how the |chef client| would handle a recipe that uses the ``ebs_volume`` lightweight resource and the ``:detach`` action. The following ``action`` block tells the |chef client| what to do with the ``:detach`` action:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_aws_ebs_volume.rst:17
# 7ebf5bd0533c4a1d9d294dc758aa970f
msgid "and the following ``def`` block defines the ``vol`` variable called by the ``determine_volume`` method:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:87
# 3b8e973068dd47b39ca0adebd7726b74
msgid "cron_d"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:5
# e1745ff4beb543159c7aa1e000088f78
msgid "The ``cron_d`` lightweight provider (found in the `cron <https://github.com/opscode-cookbooks/cron>`_ cookbook maintained by |company_name|) is used to tell the |chef client| what to do whenever the ``cron_d`` lightweight resource is used in a recipe:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:42
# fba444c87e394737a5b8146c83abbf7b
msgid "two ``action`` blocks are defined, one for the ``:create`` action and one for the ``:delete`` action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:43
# 061c8590eb1a4572a03db65d13fe58c1
msgid "the ``:delete`` action block calls the |resource file| resource (and it's ``:delete`` action) to delete a file in the ``/etc/cron.d`` folder"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:44
# eae2e09d8af548cf8f54cd7f4b7a1f38
msgid "the ``:create`` action block creates a new entry in the ``/etc/cron.d`` folder."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:46
# 5002523388db42fc826ef2d9f3f4f31f
msgid "For example, if a recipe used the ``cron_d`` lightweight resource similar to the following:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:57
# 13f8d10a6f914080a7b31d8f7d4f7a91
msgid "this tells the |chef client| to use the ``cron_d`` lightweight provider and the credentials for a user named ``appuser`` to create a |crontab| entry named \"daily-usage-report\". This |crontab| entry executes a command located in the ``/srv/app/scripts/daily_report`` directory at a specified interval (defined by the ``minute`` and ``hour`` attributes). Any of the attributes that are not specified in the recipe (such as ``mailto``, ``weekday``, and ``day``) just use the default attribute values defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider.rst:91
# 3b1e25545b1b4a989045b988b9f67e52
msgid "rabbitmq_plugin"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rabbitmq_plugin.rst:5
# 24bfa069ace04cc6990376da45f248f4
msgid "The ``rabbitmq_plugin`` lightweight provider (found in the `rabbitmq <https://github.com/opscode-cookbooks/rabbitmq>`_ cookbook maintained by |company_name|) is used to tell the |chef client| how to handle two actions (``:disable`` and ``:enable``) that are used to manage |rabbitmq| plugins. Using this lightweight resource in a recipe is simple:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rabbitmq_plugin.rst:13
# f7d87979ccab4fb1939f096c36705b19
msgid "The lightweight provider then does most of the work:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:95
# fda07deae29f4bf8995fec2fe7c4eb22
msgid "ssh_known_hosts_entry"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_ssh_known_hosts_entry.rst:5
# 58522dae060b44f188ef3a52e229e4f6
msgid "The ``ssh_known_hosts_entry`` lightweight provider (found in the `ssh_known_hosts <https://github.com/opscode-cookbooks/ssh_known_hosts>`_ cookbook maintained by |company_name|) is used to add hosts and keys to the ``/etc/ssh_known_hosts`` file."
msgstr ""

