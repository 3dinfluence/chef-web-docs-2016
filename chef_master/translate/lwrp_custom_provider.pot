# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-29 14:53-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/lwrp_custom_provider.rst:8
# fb8db4d932bb4da98c64a91732ebbbc8
msgid "Lightweight Providers w/Platform Resources"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_provider.rst:4
# c4b94fca031f45008f1d42c8d0b27687
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider.rst:5
# 31275dffbad44122a6e68dd4c8ff2d3d
msgid "A lightweight provider is a custom provider that defines the steps that are required to complete one (or more) actions defined by a lightweight resource. A lightweight provider and lightweight resource work together, each being defined in the same cookbook (the ``/providers`` and ``/resources`` subdirectories, respectively); together, they are referred as a |lwrp| (or \"lightweight resource/provider\"). A lightweight provider is always authored using |ruby|. Anything that can be done using |ruby| can be done in a lightweight provider. In addition to using |ruby|, the |dsl provider| provides additional methods that are specific to the |chef client|."
msgstr ""

#: ../source/lwrp_custom_provider.rst:15
# 4408777cef834b6586bbdc54db2a79be
msgid "Syntax"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:5
# 58b2969464934b23b9d6e7e591cfeef6
msgid "This section shows some of the common structural elements that appear in a lightweight provider that is built in a way that leverages platform resources (such as |resource file|, |resource template|, or |resource package|). Remember:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:7
# b2e155c52ef54a4d8788482778806f7d
msgid "A lightweight provider tells the |chef client| how to complete a task"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:8
# db0f057746d44b798eddafd1d31672ee
msgid "The structure of a lightweight provider will vary, depending on the complexity of the tasks required to complete an action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:9
# 91aa3c1dfb9c460aab93a2bdf1a8e307
msgid "At its platform, a lightweight provider is just |ruby| code, which means that anything that can be done in |ruby| can be done in a lightweight provider"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:11
# 04eb141a8b8b45678971ff591cd9c505
msgid "The basic syntax for a lightweight provider that is built to leverage platform resources is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:35
#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:20
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:21
#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:40
# 29d441cb204c4e6f82d727ed5a1074ec
# 180fc3bfdf60452eb689ea6f1ea7ccfe
# 67e5a7a5e2a040c58595bab337d2d73c
# ba174cfb071a4aca9983c9c3a628deb3
msgid "where:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:37
# 2bd3d38b036d49219b3ec5146f195c0b
msgid "``whyrun_supported?`` indicates whether a lightweight provider can be run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:38
# 1e290847f80241d4b2a3f48a7f7aa9a2
msgid "``use_inline_resources`` is used to tell the |chef client| to execute ``action`` blocks as part of a self-contained |chef client| run. Using this method ensures that the |chef client| can notify parent lightweight resources after embedded resources have finished processing"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:39
# d635ff2e7661475481b834163fbf997b
msgid "``action`` is the code block that tells the |chef client| what to do when the ``:action_name`` is used in a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:40
# ae8bafb3f9944f7597ad883ae840a7c2
msgid "``condition`` is a |ruby| condition statement (``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, or ``for``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:41
# f1491959130d42089d238ac0fc6a0710
msgid "``test`` is used to test for idempotence; ``test`` can be defined inline (within the ``action`` block), defined as a method using a definition block elsewhere in the lightweight provider (shown as ``def test()``), or defined using any other pattern that is available in |ruby|"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:42
# d84c5f7bde144b86b721d3c12aecffed
msgid "``resource`` is a resource written as a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:43
# 91b0fb7764164d6ab90b66f46e88036e
msgid "``Chef::Log.log_type`` is used to tell the |chef client| to create a log entry, where ``log_type`` is one of the following types: ``debug``, ``info``, ``warn``, ``error``, or ``fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:44
# 45b45066c46c4fde80dd6e69936d04d7
msgid "``updated_by_last_action`` is used to notify that a node was updated successfully"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:46
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_example.rst:10
#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:11
# b733dd46cec14ecda48353934fedf77b
# f4fd6c25406547718bd802bc208ec64a
# 02769ce7f2fc47668f4dfca94bcac759
# 5f545f41c806486bb9b8d6db3b0f8790
# 39e6f56a4dd348abb7a8f3173dbe14cf
# 321e2dc0e41f42949cf9b2454a3cd799
# 9f2babb8070345c9b0076bcc0ae9c7c6
msgid "For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:19
# 6148016dfc844424a024af4cbd1d6d58
msgid "|dsl provider| Methods"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider.rst:5
# 3e296011ab474ffdb4f308482a29ebb5
msgid "The |dsl provider| is a |ruby| DSL that is used to help define a lightweight provider and to ensure that a lightweight provider takes the correct actions when it is called from a recipe. The |dsl provider| is a small DSL with just a few methods that are specific to the |chef client|. Because the |dsl provider| is a |ruby| DSL, anything that can be done using |ruby| can also be done when defining a lightweight provider."
msgstr ""

#: ../source/lwrp_custom_provider.rst:23
# 6d27f640b9ab4b21b6cb8c3488030222
msgid "action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:5
# 8d797aea77ae405cbc7c5eb578092555
msgid "The ``action`` method is used to define the steps that will be taken for each of the possible actions defined by the lightweight resource. Each action must be defined in separate ``action`` blocks within the same file. The syntax for the ``action`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:22
# caf570b1b7ab41a889af39a64105ef00
msgid "``:action_name`` corresponds to an action defined by a lightweight resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:23
# c1f9f2b6b9df44d4a131a2a4fae20f07
msgid "``if @current_resource.exists`` is a condition test that is using an instance variable to see if the object already exists on the node; this is an example of a test for idempotence"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:24
# 6d3d380daf4f4ed1a54b53358a70d0d8
msgid "If the object already exists, a ``#{ @new_resource } already exists - nothing to do.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:25
# 96215c41743a4c05be77b83769f9e4a9
msgid "If the object does not already exists, the ``resource`` block is run. This block is a recipe that tells the |chef client| what to do. A ``#{ @new_resource } created.`` log entry is created"
msgstr ""

#: ../source/lwrp_custom_provider.rst:26
# 7386e80e7e0a4476ab6214e0a3c1f0f5
msgid "The ``converge_by`` method is not included in the previous syntax example because when |whyrun| mode is enabled in a lightweight provider that leverages platform resources, the ``converge_by`` blocks are already defined by the platform resources."
msgstr ""

#: ../source/lwrp_custom_provider.rst:29
# 0ccb2e22f85041c0ad24922617a073e8
msgid "current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:5
# f1e29858abb543538bffadf8dcb52500
msgid "The ``current_resource`` method is used to represent a resource as it exists on the node at the beginning of the |chef client| run. In other words: what the resource is currently. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state. This method is often used as an instance variable (``@current_resource``)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:25
# 624854aa4ab34286883be0e36a547668
msgid "where the ``unless`` conditional statement checks to make sure the resource doesn't already exist on a node, and then runs a series of commands when it doesn't. If the resource already exists, the log entry would be \"Foo app already exists - nothing to do.\""
msgstr ""

#: ../source/lwrp_custom_provider.rst:33
# 649eb3e2d1fd49c797ea258d1d484d6d
msgid "load_current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:5
# 64cef9b2107a43e5a08cb1e8bd15a7ad
msgid "The ``load_current_resource`` method is used to find a resource on a node based on a collection of attributes. These attributes are defined in a lightweight resource and are loaded by the |chef client| when processing a recipe during a |chef client| run. This method will ask the |chef client| to look on the node to see if a resource exists with specific matching attributes."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:26
# 4f05e1374ed74941a157222d29211f25
msgid "In the previous example, if a resource exists with matching attributes, the |chef client| does nothing and if a resource does not exist with matching attributes, the |chef client| will enforce the state declared in ``new_resource``."
msgstr ""

#: ../source/lwrp_custom_provider.rst:37
# 5bd097946cb144d798b522446c464158
msgid "new_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:5
# 5a33c47c22364620af9987cbac5c36cb
msgid "The ``new_resource`` method is used to represent a resource as loaded by the |chef client| during the |chef client| run. In other words: what the resource should be. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:23
# 820ed607e91b42b8a2eae47c9ebc86b8
msgid "where the |chef client| checks to see if the file exists, then if the file is writable, and then attempts to delete the resource. ``path`` is an attribute of the new resource that is defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider.rst:41
# 3646a004255a4a4b803a17c3ca484b89
msgid "provides"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:5
# 000d55716aa34c55970dd7d4c94c4185
msgid "Use the ``provides`` method to map a custom resource/provider to an existing resource/provider, and then to also specify the platform(s) on which the behavior of the custom resource/provider will be applied. This method enables scenarios like:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:7
# ad02af8c3ceb4bb6a21262aabf606400
msgid "Building a custom resource that is based on an existing resource"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:8
# 9180ac4b7aa84c3da9cc6c9a8f9567cd
msgid "Defining platform mapping specific to a custom resource"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:9
# 5e08a13e65ac4ff5b35f9f764ff3aa03
msgid "Handling situations where a resource on a particular platform may have more than one provider, such as the behavior on the |ubuntu| platform where both SysVInit and systemd are present"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:10
# 0cdfe6c820144fb7982ede0ec7f40d30
msgid "Allowing the custom resource to declare what platforms are supported, enabling the creator of the custom resource to use arbitrary criteria if desired"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:11
# ee67e63ac3ae4cc7be44fc63499c0328
msgid "Not using the previous naming convention---``#{cookbook_name}_#{provider_filename}``"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:13
# 61aab948345b4e1d886579b5ff7cbb88
msgid "The ``provides`` method must be defined in both the custom resource and custom provider files and both files must have identical ``provides`` statement(s)."
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:15
# 314d3eab1d84470d8e2ab2618b6cd477
msgid "The syntax for the ``provides`` method is as follows:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:23
# b40f5d3af5044622a9bf11cfbbb95c9c
msgid "``:resource_name`` is a |chef client| resource: ``:cookbook_file``, ``:package``, ``:rpm_package``, and so on"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:24
# 847eb28c6ff34a2fb80dbb2ccfcb1dec
msgid "``\"platform\"`` is a comma-separated list of platforms: ``\"windows\"``, ``\"solaris2\"``, ``\"linux\"``, and so on"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:25
# 30798f608c144dc4ba627c4364f0ebd5
msgid "``platform_family`` is optional and may specify the same parameters as the ``platform_family?`` method in the |dsl recipe|; ``platform`` is optional and also supported (and is the same as the ``platform?`` method in the |dsl recipe|)"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:27
# 1a3032699f9e4110b6738f2c9ce043c2
msgid "A custom resource/provider may be mapped to more than one existing resource/provider. Multiple platform associations may be made. For example, to completely map a custom resource/provider to an existing custom resource/provider, only specificy the resource name:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:33
# 57abfb337b864e7a8c5e46588c131a3b
msgid "The same mapping, but only for the |linux| platform:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:39
# b149f8557af24084bcbd66c3e8e2ef81
msgid "A similar mapping, but also for packages on the |windows| platform:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:46
# c01c06449207477cb22d6770e8a645dc
msgid "Use multiple ``provides`` statements to define multiple conditions: Use an array to match any of the platforms within the array:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:54
# d094c120516344f1817676a6e4706864
msgid "Use an array to match any of the platforms within the array:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:45
# da55d29040964c56bb1f3d37219ed2bc
msgid "updated_by_last_action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action.rst:5
# 35441fce6bf046a4b6472307aaf34544
msgid "The ``updated_by_last_action`` method is used to notify a lightweight resource that a node was updated successfully. For example, the ``cron_d`` lightweight resource in the |cookbook cron| cookbook:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action.rst:33
# ae27090f177e4f78965d55681ac66e9c
msgid "where ``t.updated_by_last_action?`` uses a variable to check whether a new |crontab| entry was created."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_example.rst:5
# a617dfbc9331425ea4362dca21c13c10
msgid "Cookbooks that contain custom resources in the ``/libraries`` directory of a cookbook should:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_example.rst:7
# b242b081f4eb4e4b8012999c27654253
msgid "Be inspected for instances of a) the ``Chef::Provider`` base class, and then b) for the presence of any core resources from the |chef client|"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_example.rst:8
# 948536815e054eaab4bf23251b917e0c
msgid "Be updated to use the ``LWRPBase`` base class"
msgstr ""

#: ../source/lwrp_custom_provider.rst:51
# 4a7d9f1243e84f73b60d57f4721f31af
msgid "use_inline_resources"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_about.rst:4
# a042b18f3a714102acd8003dfd640517
msgid "A lightweight resource is created by the ``action`` block of a lightweight provider. When the resource collection is compiled, a lightweight resource is inserted into the top-level resource collection after the point at which the lightweight provider is associated. For example, if a resource collection looks like::"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_about.rst:10
# c0c4c501a161430abba2d011cabc42b8
msgid "then when ``lwrp_resource`` is executed, the resource collection will be modified as follows::"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_about.rst:18
# 04aa4f445c034d4197babd8ce09890b5
msgid "In this situation, embedded lightweight resources cannot notify the top-level resource because the top-level resource has finished processing. This has the same effect as if the top-level resource collection were invisible to the embedded lightweight resources."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:5
# fb3c6a603e244d30a9e644def2e4cd5e
msgid "To ensure that an embedded lightweight resource can notify the top-level resource add ``use_inline_resources`` to the top of the file that defines the lightweight provider that is associated with that lightweight resource. When ``use_inline_resources`` is added to the file, the code in the lightweight provider's ``action`` block will execute as part of a self-contained |chef client| run. If any embedded lightweight resources are updated, the top-level lightweight resource is marked as updated and notifications set for the top-level resource will be triggered normally. This ensures that notifications work properly across the resource collection."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:17
# a23519c1c79340a98c52a8ec937212bb
msgid "The ``use_inline_resources`` method was added to the |chef client| starting in version 11.0 to address the behavior described below. The ``use_inline_resources`` method should be considered a requirement for any lightweight resource authored against the 11.0+ versions of the |chef client|. This behavior will become the default behavior in an upcoming version of the |chef client|."
msgstr ""

#: ../source/lwrp_custom_provider.rst:57
# a67ff39caea34fe4ad47759b5040810e
msgid "Background"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:5
# 5b7fe71c6a4b449c90e2d01d4235108b
msgid "The reason why the ``use_inline_resources`` method exists at all is due to how the |chef client| processes resources. Currently, the default behavior of the |chef client| processes a single collection of resources, converged on the node in order."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:7
# b2bca8b112fd4de6b6d6dd9727c2be23
msgid "A lightweight resource is often implemented using the core |chef client| resources---|resource file|, |resource template|, |resource package|, and so on---as building blocks. A lightweight resource is then added to a recipe using the short name of the lightweight resource in the recipe (and not by using any of the building block resource components)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:9
# 3216d9cc48ca4729a64c9ca588c83fc6
msgid "This situation can create problems with notifications because the |chef client| includes embedded resources in the \"single collection of resources\" *after* the parent resource has been fully evaluated."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:24
#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:68
# 0722e64e4b774750abee14e5aea83297
# f415d86a0a1d4689bd4971d656cbca35
msgid "If the ``custom_resource`` is built using the |resource file| resource, what happens during the |chef client| run is::"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:30
# 3be72381a6514963b604d67df59eb6a6
msgid "The ``custom_resource`` is converged completely, its state set to not updated before the |resource file| resource is evaluated. The ``notifies :restart`` is ignored and the service is not restarted."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:32
# 56da174bb1a246609d16709660af0f88
msgid "If the author of the custom resource knows in advance what notification is required, then the |resource file| resource can be configured for the notification in the provider. For example:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:45
# 94712ea91d2d4332889be262106fcfa0
msgid "And then in the recipe:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:53
# ffac47af5bcb450f976730f93b82a4a8
msgid "This approach works, but only when the author of the lightweight resource knows what should be notified in advance of the |chef client| run. Consequently, this is less-than-ideal for most situations."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:55
# ec8c4ecf49eb4011a641737942869b3e
msgid "Using the ``use_inline_resources`` method will ensure that the |chef client| processes a lightweight resource as if it were its own resource collection---a \"mini |chef client| run\", effectively---that is converged *before* the |chef client| finishes evaluating the parent lightweight resource. This ensures that any notifications that may exist in the embedded resources are processed as if they were notifications on the parent lightweight resource. For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:61
# 5d725213ef014ed89407fc1f278f3a28
msgid "Disable"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_default_behavior.rst:5
# f34d8bbb73b941ab896c061128035d8a
msgid "The ``use_inline_resources`` method should be considered a default method for any provider that defines a custom resource. It's the correct behavior. And it will soon become the default behavior in a future version of the |chef client|."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_default_behavior.rst:7
# edee370fdfa547f68b1f7228a98bf689
msgid "Because inline compile mode makes it impossible for embedded resources to notify resources in the parent resource collection, inline compile mode may cause issues with some provider implementations. In these cases, use a definition to work around inline compile mode. See `this example <http://docs.chef.io/essentials_cookbook_definitions.html#many-recipes-one-definition>`_ for how to use a definition in this situation."
msgstr ""

#: ../source/lwrp_custom_provider.rst:65
# 121d53a67e8f4e7cae4829988d4f0631
msgid "whyrun_supported?"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:5
# 712f63e82ed444ef96f55cf74a6e34a5
msgid "|whyrun| mode is a way to see what the |chef client| would have configured, had an actual |chef client| run occurred. This approach is similar to the concept of \"no-operation\" (or \"no-op\"): decide what should be done, but then don't actually do anything until it's done right. This approach to configuration management can help identify where complexity exists in the system, where inter-dependencies may be located, and to verify that everything will be configured in the desired manner."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:7
# 308d4c3bb9f846c697955ed2d073ef4e
msgid "When |whyrun| mode is enabled, a |chef client| run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the |chef server|, rebuilding the node object, expanding the run list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:9
# 866c6e4bf7894d42a34ea8babfa6a191
msgid "why-run mode is not a replacement for running cookbooks in a test environment that mirrors the production environment. |company_name| uses why-run mode to learn more about what is going on, but also test-kitchen on developer systems, along with an internal |openstack| cloud and external cloud providers to test more thoroughly."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:5
# 99e7908fee66450f9aad6133b0620f0f
msgid "When the |chef client| is run in |whyrun| mode, certain assumptions are made:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:7
# f95d81c867244df2bb24bfc3b117f9c9
msgid "If the |resource service| resource cannot find the appropriate command to verify the status of a service, |whyrun| mode will assume that the command would have been installed by a previous resource and that the service would not be running"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:8
# 12ee009d6d5b44bfaac48db751e43c89
msgid "For ``not_if`` and ``only_if`` attribute, |whyrun| mode will assume these are commands or blocks that are safe to run. These conditions are not designed to be used to change the state of the system, but rather to help facilitate idempotency for the resource itself. That said, it may be possible that these attributes are being used in a way that modifies the system state"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:9
# e5129c2166b5495596652035ffb9d33e
msgid "The closer the current state of the system is to the desired state, the more useful |whyrun| mode will be. For example, if a full run-list is run against a fresh system, that run-list may not be completely correct on the first try, but also that run-list will produce more output than smaller run-list"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:5
# e0eec7b4758744938da81db74e9290bc
msgid "The ``whyrun_supported?`` method is used to set a lightweight provider to support |whyrun| mode. The syntax for the ``whyrun_supported?`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:13
# dadfdc83c31c41ca95ccdb9195fb40e2
msgid "where ``whyrun_supported?`` is set to ``true`` for any lightweight provider that supports using |whyrun| mode. When |whyrun| mode is supported by the a lightweight provider, the ``converge_by`` method is used to define the strings that are logged by the |chef client| when it is run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider.rst:72
# d2735803a56e496c909e54c594ac2f78
msgid "When a lightweight provider contains only platform resources, the ``converge_by`` method is not required because it is already built into all of the platform `resources <http://docs.chef.io/resource.html>`_."
msgstr ""

#: ../source/lwrp_custom_provider.rst:75
# ccad7116cd944e558dcaeee3fb24314b
msgid "Condition Statements"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:5
# d947337002f744ceb01b5371e1c8c947
msgid "A lightweight provider can use any conditional statement that can be used in |ruby|: ``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, and ``for``. A condition statement can test for:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:7
# 93d80ec0b4734140a769c8e94f8dada2
msgid "A |ruby| class (such as ``::File`` or ``::String``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:8
# 7ec233fee33b4daf8d1b165a45fccd9e
msgid "A ``Chef`` class (such as ``::Chef::Mixin::ShellOut``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:9
# 51802bfdd97d4ec2aae65c9d0297a6a7
msgid "Conditions present on the node by using ``@current_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:10
# 5c98e7c83cad4a0e9c1ddef88598b6c8
msgid "Conditions present within the resource being processed by the |chef client| during the |chef client| run by using ``new_resource`` or ``@new_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:11
# 686a111ffd90499489d147f9379f33fe
msgid "To verify if a resource was updated by using ``updated_by_last_action``, for example: ``@new_resource.updated_by_last_action``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:13
# 46a8509b2ef24834b8a70d4f492fdc3f
msgid "and so on."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:15
# a2e8e96180554fda92a78c46f10f009b
msgid "For example, an ``if`` statement is used to check if a file exists (``::File.exists?``), and then if the file exists to delete a key from that file."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:29
# 9fcfe6a23ab84cdd8d468bc039c99131
msgid "In the following example an ``unless`` statement is used to add a key, unless that node object already has that key assigned to it:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:79
# 8ca9bd5715784164aa5378ef9d30e620
msgid "Log Entries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:5
# 6ae3c64a2af343a3a589f4b52df20533
msgid "Use the ``Chef::Log`` class in a lightweight provider to define log entries that are created during a |chef client| run. The syntax for a log message is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:11
# b9d5d6d9a1074cbbb122dfe8d7276251
msgid "where"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:13
# f49d96aae2f24d419be198b9701e9488
msgid "``log_type`` can be ``.debug``, ``.info``, ``.warn``, ``.error``, or ``.fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:14
# d52c12314de941b88780d5a686bbe2b4
msgid "``\"message\"`` is the message that is logged. For example: ``\"#{@new_resource} added module '#{@new_resource.module_name}'\"`` or ``\"#{@new_resource} module already exists - nothing to do\"``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:16
# e07ec5c0e2c84c15b4e6b51f019ea0cf
msgid "For example, from the ``repository.rb`` provider in the |cookbook yum| cookbook:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:27
# 635c0aac8ab04587ad9c4a832db4bb66
msgid "where the ``Chef::Log`` class appends ``.info`` as the log type. If the name of the repo was \"foo\", then the log message would be \"Adding foo repository to /etc/yum.repos.d/foo.repo\"."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:29
# 5cd8c0ce8a5c44bd8197c6b1fc777335
msgid "Another example shows two log entries, one that is triggered when a service is being restarted, and then another that is triggered after the service has been restarted:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:83
# 5b43721d16914ce78c4713474bb88dce
msgid "rescue"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs_rescue.rst:5
# 126fdcd0c7274a4ea6aeb81eb7e5ae37
msgid "Use the ``rescue`` clause to make sure that a log message is always provided. For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:87
# 97021c2a33cf428eafbdb7d9008568f4
msgid "Examples"
msgstr ""

#: ../source/lwrp_custom_provider.rst:88
# f69260c00ed54a4187cb9efe772de294
msgid "The following examples show various lightweight providers that use platform resources."
msgstr ""

#: ../source/lwrp_custom_provider.rst:91
# c37fa2adea3242dc81d5a1bc7af345d0
msgid "aws_ebs_volume"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_aws_ebs_volume.rst:5
# 8c91b89587e34cd2b253ffecefcbf979
msgid "The ``aws_ebs_volume`` lightweight provider (found in the `aws <https://github.com/opscode-cookbooks/aws>`_ cookbook maintained by |company_name|) defines how the |chef client| would handle a recipe that uses the ``ebs_volume`` lightweight resource and the ``:detach`` action. The following ``action`` block tells the |chef client| what to do with the ``:detach`` action:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_aws_ebs_volume.rst:17
# d394c5f3a0544b0a91fa79aabb6938ef
msgid "and the following ``def`` block defines the ``vol`` variable called by the ``determine_volume`` method:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:95
# c2702c687eeb4472a3e58e9d8d35f577
msgid "cron_d"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:5
# 0c74bfedc5494dcba338c6043864855a
msgid "The ``cron_d`` lightweight provider (found in the `cron <https://github.com/opscode-cookbooks/cron>`_ cookbook maintained by |company_name|) is used to tell the |chef client| what to do whenever the ``cron_d`` lightweight resource is used in a recipe:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:42
# 1cc4501761334e2c89739903c740e42e
msgid "two ``action`` blocks are defined, one for the ``:create`` action and one for the ``:delete`` action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:43
# bac2f45214774d9cac38b1cb021e816e
msgid "the ``:delete`` action block calls the |resource file| resource (and it's ``:delete`` action) to delete a file in the ``/etc/cron.d`` folder"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:44
# f8ba328e7c1f462e84cee32a402bf940
msgid "the ``:create`` action block creates a new entry in the ``/etc/cron.d`` folder."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:46
# 40bc17f2efec41ed9aa4a7273979e93e
msgid "For example, if a recipe used the ``cron_d`` lightweight resource similar to the following:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:57
# 78868f430a9740c38af05014fd25ac0f
msgid "this tells the |chef client| to use the ``cron_d`` lightweight provider and the credentials for a user named ``appuser`` to create a |crontab| entry named \"daily-usage-report\". This |crontab| entry executes a command located in the ``/srv/app/scripts/daily_report`` directory at a specified interval (defined by the ``minute`` and ``hour`` attributes). Any of the attributes that are not specified in the recipe (such as ``mailto``, ``weekday``, and ``day``) just use the default attribute values defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider.rst:99
# fc34d97ef45443edb473cdd1ec94435e
msgid "rabbitmq_plugin"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rabbitmq_plugin.rst:5
# 3a9ca0ab7d6446e49e9fc0c59b3d8950
msgid "The ``rabbitmq_plugin`` lightweight provider (found in the `rabbitmq <https://github.com/opscode-cookbooks/rabbitmq>`_ cookbook maintained by |company_name|) is used to tell the |chef client| how to handle two actions (``:disable`` and ``:enable``) that are used to manage |rabbitmq| plugins. Using this lightweight resource in a recipe is simple:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rabbitmq_plugin.rst:13
# 89da83ac44f24946b71ce3db754113d4
msgid "The lightweight provider then does most of the work:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:103
# 0a55f2e2480349e795c7032a4efd9718
msgid "ssh_known_hosts_entry"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_ssh_known_hosts_entry.rst:5
# cb63b5c5ade14b5ba25ab17ea3786210
msgid "The ``ssh_known_hosts_entry`` lightweight provider (found in the `ssh_known_hosts <https://github.com/opscode-cookbooks/ssh_known_hosts>`_ cookbook maintained by |company_name|) is used to add hosts and keys to the ``/etc/ssh_known_hosts`` file."
msgstr ""

