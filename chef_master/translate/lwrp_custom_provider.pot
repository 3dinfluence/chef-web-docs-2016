# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-04-06 21:31-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/lwrp_custom_provider.rst:8
# beeb1f112f4b4c4b8ae51f65c6ae84c8
msgid "Lightweight Providers w/Platform Resources"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_provider.rst:4
# 9153cb418b2148528d48849077fe1b7a
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider.rst:5
# 01a56d9dd67e4d51a7e66f2d88c33591
msgid "A lightweight provider is a custom provider that defines the steps that are required to complete one (or more) actions defined by a lightweight resource. A lightweight provider and lightweight resource work together, each being defined in the same cookbook (the ``/providers`` and ``/resources`` subdirectories, respectively); together, they are referred as a |lwrp| (or \"lightweight resource/provider\"). A lightweight provider is always authored using |ruby|. Anything that can be done using |ruby| can be done in a lightweight provider. In addition to using |ruby|, the |dsl provider| provides additional methods that are specific to the |chef client|."
msgstr ""

#: ../source/lwrp_custom_provider.rst:15
# 5a03d3351f5c4a258b39481c5591bf47
msgid "Syntax"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:5
# eac8be8e9d3c43a086417b6603969a3a
msgid "This section shows some of the common structural elements that appear in a lightweight provider that is built in a way that leverages platform resources (such as |resource file|, |resource template|, or |resource package|). Remember:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:7
# ffe17038713145ca83137cae280304d5
msgid "A lightweight provider tells the |chef client| how to complete a task"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:8
# ce9893ecf0ff408292b5c49f53f7a8b9
msgid "The structure of a lightweight provider will vary, depending on the complexity of the tasks required to complete an action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:9
# 803b54ea879e46e3af54239b235f671f
msgid "At its platform, a lightweight provider is just |ruby| code, which means that anything that can be done in |ruby| can be done in a lightweight provider"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:11
# 6995dce84a9d48e19d0f3a4932f56244
msgid "The basic syntax for a lightweight provider that is built to leverage platform resources is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:35
#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:20
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:21
#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:40
# 7aad61bf777d44f3a89f7f95f9c3e014
# c6deacf3ddd0417d9c44ca5f17fb02ee
# 5e9daa40eb224ddc8c2b522da50bff75
# d1ce9e033b51414a806fb18d27ff490b
msgid "where:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:37
# 9643dc3435e84694b119d76a92b36814
msgid "``whyrun_supported?`` indicates whether a lightweight provider can be run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:38
# 931fb9dde6df471b8a345d3a113f94e3
msgid "``use_inline_resources`` is used to tell the |chef client| to execute ``action`` blocks as part of a self-contained |chef client| run. Using this method ensures that the |chef client| can notify parent lightweight resources after embedded resources have finished processing"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:39
# fb59a5f2cbae499297c790ee4429de7b
msgid "``action`` is the code block that tells the |chef client| what to do when the ``:action_name`` is used in a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:40
# f78a15be5a064cc18f00185cd5b57c68
msgid "``condition`` is a |ruby| condition statement (``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, or ``for``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:41
# 9a4e64cbe1754a8183c115d057ff29ea
msgid "``test`` is used to test for idempotence; ``test`` can be defined inline (within the ``action`` block), defined as a method using a definition block elsewhere in the lightweight provider (shown as ``def test()``), or defined using any other pattern that is available in |ruby|"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:42
# 44c692b2807a4512bd84156a88ba3898
msgid "``resource`` is a resource written as a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:43
# eef635ca21e240abbb9f887c4e325885
msgid "``Chef::Log.log_type`` is used to tell the |chef client| to create a log entry, where ``log_type`` is one of the following types: ``debug``, ``info``, ``warn``, ``error``, or ``fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:44
# 2e763d9101b34f5fb64252f8b65e9a6f
msgid "``updated_by_last_action`` is used to notify that a node was updated successfully"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:46
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:11
# 643be9acd02d4ce39af5ff30b7ab5024
# f5e176e785904e3b84342b2b148deb85
# bea2590f9ad2497cbbcd0372021d110b
# 8c59721c6ade45c6acfc9287ed5189c5
# 141c407455f04f7ab0cca91ee8026c1e
msgid "For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:19
# 875f54ee98cb4560a8de6c4e45287eb1
msgid "|dsl provider| Methods"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider.rst:5
# c9cdd6acb7ff4c01b3b781bd4071efc0
msgid "The |dsl provider| is a |ruby| DSL that is used to help define a lightweight provider and to ensure that a lightweight provider takes the correct actions when it is called from a recipe. The |dsl provider| is a small DSL with just a few methods that are specific to the |chef client|. Because the |dsl provider| is a |ruby| DSL, anything that can be done using |ruby| can also be done when defining a lightweight provider."
msgstr ""

#: ../source/lwrp_custom_provider.rst:23
# 52f1327deabf41c9a862d848d5b44e43
msgid "action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:5
# 5e658e4ef497447c855ad7bdd615c70f
msgid "The ``action`` method is used to define the steps that will be taken for each of the possible actions defined by the lightweight resource. Each action must be defined in separate ``action`` blocks within the same file. The syntax for the ``action`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:22
# e4f2a80e8a9b4f81aaf1ed0aee5d71b2
msgid "``:action_name`` corresponds to an action defined by a lightweight resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:23
# 39597b6366d14484867c5a34567f3cc9
msgid "``if @current_resource.exists`` is a condition test that is using an instance variable to see if the object already exists on the node; this is an example of a test for idempotence"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:24
# 407a2ee7e2bd4f20bb3170e033f70b43
msgid "If the object already exists, a ``#{ @new_resource } already exists - nothing to do.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:25
# cc76d42713704359af51ecb8fd775dd4
msgid "If the object does not already exists, the ``resource`` block is run. This block is a recipe that tells the |chef client| what to do. A ``#{ @new_resource } created.`` log entry is created"
msgstr ""

#: ../source/lwrp_custom_provider.rst:26
# eab7d488d10248e0ba67dfa5006ca53f
msgid "The ``converge_by`` method is not included in the previous syntax example because when |whyrun| mode is enabled in a lightweight provider that leverages platform resources, the ``converge_by`` blocks are already defined by the platform resources."
msgstr ""

#: ../source/lwrp_custom_provider.rst:29
# 2afe246c479f4a34bc01d6bbb4e80b4b
msgid "current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:5
# 470f1c40e6b44411a707e7b0a88df079
msgid "The ``current_resource`` method is used to represent a resource as it exists on the node at the beginning of the |chef client| run. In other words: what the resource is currently. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state. This method is often used as an instance variable (``@current_resource``)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:25
# 1c8991e7311a45c0aad7f10927a2fb13
msgid "where the ``unless`` conditional statement checks to make sure the resource doesn't already exist on a node, and then runs a series of commands when it doesn't. If the resource already exists, the log entry would be \"Foo app already exists - nothing to do.\""
msgstr ""

#: ../source/lwrp_custom_provider.rst:33
# 196970b03e034c018410d48f8c3233cd
msgid "load_current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:5
# a49a4d02b8b5421e9d0c3d37f8288597
msgid "The ``load_current_resource`` method is used to find a resource on a node based on a collection of attributes. These attributes are defined in a lightweight resource and are loaded by the |chef client| when processing a recipe during a |chef client| run. This method will ask the |chef client| to look on the node to see if a resource exists with specific matching attributes."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:26
# 39112e355e2d442bab0a0c8156b7159d
msgid "In the previous example, if a resource exists with matching attributes, the |chef client| does nothing and if a resource does not exist with matching attributes, the |chef client| will enforce the state declared in ``new_resource``."
msgstr ""

#: ../source/lwrp_custom_provider.rst:37
# 93a6eb616192435c92db2dd081e26523
msgid "new_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:5
# 5ee9b03a853f42109286296f519e5631
msgid "The ``new_resource`` method is used to represent a resource as loaded by the |chef client| during the |chef client| run. In other words: what the resource should be. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:23
# 0e161c5f5ad94748ab05b110a08937c2
msgid "where the |chef client| checks to see if the file exists, then if the file is writable, and then attempts to delete the resource. ``path`` is an attribute of the new resource that is defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider.rst:41
# 7d1f7ba4890f430cb458bc53584a583e
msgid "provides"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:5
# 65a52e8bc5de4148ab8d32f7cde71a53
msgid "Use the ``provides`` method to map a custom resource/provider to an existing resource/provider, and then to also specify the platform(s) on which the behavior of the custom resource/provider will be applied. This method enables scenarios like:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:7
# e1cf96ff51bb41779fef086539ba104d
msgid "Building a custom resource that is based on an existing resource"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:8
# a1c68b054da1475ea11ee36af980fee8
msgid "Defining platform mapping specific to a custom resource"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:9
# 5df5df1ab4614ce9a8aa87b2f463b213
msgid "Handling situations where a resource on a particular platform may have more than one provider, such as the behavior on the |ubuntu| platform where both SysVInit and systemd are present"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:10
# f6def665202444748227a968a2c1eaa7
msgid "Allowing the custom resource to declare what platforms are supported, enabling the creator of the custom resource to use arbitrary criteria if desired"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:11
# 46394bdc85024f77a3de03ede633a6f7
msgid "Not using the previous naming convention---``#{cookbook_name}_#{provider_filename}``"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:13
# 9895f5f3ff1347579eb71e1e9bba28c4
msgid "The ``provides`` method must be defined in both the custom resource and custom provider files and both files must have identical ``provides`` statement(s)."
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:15
# 222f1ec5b4824180ac367b601c6512ca
msgid "The syntax for the ``provides`` method is as follows:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:23
# 658e8e80e6564bcd8846306cc5bca445
msgid "``:resource_name`` is a |chef client| resource: ``:cookbook_file``, ``:package``, ``:rpm_package``, and so on"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:24
# 36198b3454a546069bb33812c584de65
msgid "``\"platform\"`` is a comma-separated list of platforms: ``\"windows\"``, ``\"solaris2\"``, ``\"linux\"``, and so on"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:25
# ea97d474102a403ab36a59f1e42cd031
msgid "``platform_family`` is optional and may specify the same parameters as the ``platform_family?`` method in the |dsl recipe|; ``platform`` is optional and also supported (and is the same as the ``platform?`` method in the |dsl recipe|)"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:27
# 683585f2abc04b58b7971ed2a447e397
msgid "A custom resource/provider may be mapped to more than one existing resource/provider. Multiple platform associations may be made. For example, to completely map a custom resource/provider to an existing custom resource/provider, only specificy the resource name:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:33
# 4c0b6c8b541f4045a4311df68fe0a4ad
msgid "The same mapping, but only for the |linux| platform:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:39
# 3e3ad97d98194d02a2cdd48a18b5c742
msgid "A similar mapping, but also for packages on the |windows| platform:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:46
# 82e2edd44705420c9ef59af186567d9b
msgid "Use multiple ``provides`` statements to define multiple conditions: Use an array to match any of the platforms within the array:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:54
# 721ff022fb09456881051f4ea26ab6ae
msgid "Use an array to match any of the platforms within the array:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:45
# c56482c373d2478182a55a3231caff3a
msgid "updated_by_last_action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action.rst:5
# afd1bd878dcc4871817e06e74806177a
msgid "The ``updated_by_last_action`` method is used to notify a lightweight resource that a node was updated successfully. For example, the ``cron_d`` lightweight resource in the |cookbook cron| cookbook:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action.rst:33
# 775c7cd84e1e47339904d9d4a78512d7
msgid "where ``t.updated_by_last_action?`` uses a variable to check whether a new |crontab| entry was created."
msgstr ""

#: ../source/lwrp_custom_provider.rst:49
# 7ab747280f054035809c6c5f1f8b2e83
msgid "use_inline_resources"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:5
# ba16212ff0514261b3d900b662127f9f
msgid "A lightweight resource should be set to inline compile mode by adding the ``use_inline_resources`` method at the top of the provider. This ensures that notifications work properly across the resource collection. For example:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:15
# 093d6ea661854da99903215c3ebd4f2c
msgid "The ``use_inline_resources`` method was added to the |chef client| starting in version 11.0 to address the behavior described below. The ``use_inline_resources`` method should be considered a requirement for any lightweight resource authored against the 11.0+ versions of the |chef client|. This behavior will become the default behavior in an upcoming version of the |chef client|."
msgstr ""

#: ../source/lwrp_custom_provider.rst:52
# d03cf8b07db64d39a2914f3edacd892f
msgid "**Background**"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:5
# 1069b6958eb14a61b85c3b9cd8f857ab
msgid "The reason why the ``use_inline_resources`` method exists at all is due to how the |chef client| processes resources. Currently, the default behavior of the |chef client| processes a single collection of resources, converged on the node in order."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:7
# 87050465baff4887b493d50ca7eeec67
msgid "A lightweight resource is often implemented using the core |chef client| resources---|resource file|, |resource template|, |resource package|, and so on---as building blocks. A lightweight resource is then added to a recipe using the short name of the lightweight resource in the recipe (and not by using any of the building block resource components)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:9
# 226fadad22bf4d05ab3a66f861937266
msgid "This situation can create problems with notifications because the |chef client| includes embedded resources in the \"single collection of resources\" *after* the parent resource has been fully evaluated."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:24
#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:68
# de8973b252f54d2b833c488604a43490
# cbed2d10d3df486eab8ad98bddae1bf1
msgid "If the ``custom_resource`` is built using the |resource file| resource, what happens during the |chef client| run is::"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:30
# 8f2afaa0661a49039045479fcd8b56b1
msgid "The ``custom_resource`` is converged completely, its state set to not updated before the |resource file| resource is evaluated. The ``notifies :restart`` is ignored and the service is not restarted."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:32
# f7d45b1f276d44dbbc4160a970254f3a
msgid "If the author of the custom resource knows in advance what notification is required, then the |resource file| resource can be configured for the notification in the provider. For example:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:45
# c9713be55d2e4e70b8c46840324a94ad
msgid "And then in the recipe:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:53
# 988e5736bc724339a4b0393b33b506fb
msgid "This approach works, but only when the author of the lightweight resource knows what should be notified in advance of the |chef client| run. Consequently, this is less-than-ideal for most situations."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:55
# f311c77842a646d6bd1efd4cb88c256f
msgid "Using the ``use_inline_resources`` method will ensure that the |chef client| processes a lightweight resource as if it were its own resource collection---a \"mini |chef client| run\", effectively---that is converged *before* the |chef client| finishes evaluating the parent lightweight resource. This ensures that any notifications that may exist in the embedded resources are processed as if they were notifications on the parent lightweight resource. For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:56
# 7784423c7aa54b03ade9084238f7f471
msgid "**Turn off Inline Compile Mode**"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_definition.rst:5
# 28eb814d241749fa8d1e71b6f794aaad
msgid "The ``use_inline_resources`` method should be considered a default method for any provider that defines a custom resource. It's the correct behavior. And it will soon become the default behavior in a future version of the |chef client|."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_definition.rst:7
# 7e378c6599be414d9e9a967d166f358c
msgid "Because inline compile mode makes it impossible for embedded resources to notify resources in the parent resource collection, inline compile mode may cause issues with some provider implementations. In these cases, use a definition to work around inline compile mode. See `this example <http://docs.chef.io/essentials_cookbook_definitions.html#many-recipes-one-definition>`_ for how to use a definition in this situation."
msgstr ""

#: ../source/lwrp_custom_provider.rst:61
# 9dff03e5883143089a8b2a9e0767844e
msgid "whyrun_supported?"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:5
# ffc7051d53484908a67858f3c82d0cba
msgid "|whyrun| mode is a way to see what the |chef client| would have configured, had an actual |chef client| run occurred. This approach is similar to the concept of \"no-operation\" (or \"no-op\"): decide what should be done, but then don't actually do anything until it's done right. This approach to configuration management can help identify where complexity exists in the system, where inter-dependencies may be located, and to verify that everything will be configured in the desired manner."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:7
# 3946fed48b34409a8faa308068d25a6a
msgid "When |whyrun| mode is enabled, a |chef client| run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the |chef server|, rebuilding the node object, expanding the run list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:9
# b5d7ee64bd0841dcbb0645288f1df781
msgid "why-run mode is not a replacement for running cookbooks in a test environment that mirrors the production environment. |company_name| uses why-run mode to learn more about what is going on, but also test-kitchen on developer systems, along with an internal |openstack| cloud and external cloud providers to test more thoroughly."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:5
# baa6ef273312413ba7f79d2666f8bd80
msgid "When the |chef client| is run in |whyrun| mode, certain assumptions are made:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:7
# b7de8debae5040bda5be328602953de1
msgid "If the |resource service| resource cannot find the appropriate command to verify the status of a service, |whyrun| mode will assume that the command would have been installed by a previous resource and that the service would not be running"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:8
# 5a74f1e150b1454fa7211932f3fc6336
msgid "For ``not_if`` and ``only_if`` attribute, |whyrun| mode will assume these are commands or blocks that are safe to run. These conditions are not designed to be used to change the state of the system, but rather to help facilitate idempotency for the resource itself. That said, it may be possible that these attributes are being used in a way that modifies the system state"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:9
# 685d2513a24f47f7b9e5e4fa3e98cf33
msgid "The closer the current state of the system is to the desired state, the more useful |whyrun| mode will be. For example, if a full run-list is run against a fresh system, that run-list may not be completely correct on the first try, but also that run-list will produce more output than smaller run-list"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:5
# ee85feba49744f9eac1c0308fc6ee4d0
msgid "The ``whyrun_supported?`` method is used to set a lightweight provider to support |whyrun| mode. The syntax for the ``whyrun_supported?`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:13
# a346bb4f35b24d94acd153f3cf341c0b
msgid "where ``whyrun_supported?`` is set to ``true`` for any lightweight provider that supports using |whyrun| mode. When |whyrun| mode is supported by the a lightweight provider, the ``converge_by`` method is used to define the strings that are logged by the |chef client| when it is run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider.rst:68
# fc6c6ade2e6e461287d27a348d30b5ed
msgid "When a lightweight provider contains only platform resources, the ``converge_by`` method is not required because it is already built into all of the platform `resources <http://docs.chef.io/resource.html>`_."
msgstr ""

#: ../source/lwrp_custom_provider.rst:71
# 058b718389f94c55aa77711805cf17cf
msgid "Condition Statements"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:5
# 312fb054f5474e3eb89af567577b5467
msgid "A lightweight provider can use any conditional statement that can be used in |ruby|: ``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, and ``for``. A condition statement can test for:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:7
# 767adcdf3ec147a3b040b295785943ec
msgid "A |ruby| class (such as ``::File`` or ``::String``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:8
# 2e739901e06640bca0c93d4baeb150fa
msgid "A ``Chef`` class (such as ``::Chef::Mixin::ShellOut``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:9
# 06f13f61f4804de9a7e6d895b2d48193
msgid "Conditions present on the node by using ``@current_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:10
# 59db605aff1a4cc2a692f6e5c1ac66d7
msgid "Conditions present within the resource being processed by the |chef client| during the |chef client| run by using ``new_resource`` or ``@new_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:11
# 2513677e98d84276bbe4aa624fb098a0
msgid "To verify if a resource was updated by using ``updated_by_last_action``, for example: ``@new_resource.updated_by_last_action``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:13
# d45139623d6a48a997be96d930d4bdda
msgid "and so on."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:15
# ba822790e7e14c9cb197f476f333dedd
msgid "For example, an ``if`` statement is used to check if a file exists (``::File.exists?``), and then if the file exists to delete a key from that file."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:29
# d39a449a05084d40a757ccab50c5c990
msgid "In the following example an ``unless`` statement is used to add a key, unless that node object already has that key assigned to it:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:75
# 73cda7e7e5724994a0559cf5bb14035e
msgid "Log Entries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:5
# 3951d1f600f247a7921947d935d3e2d9
msgid "Use the ``Chef::Log`` class in a lightweight provider to define log entries that are created during a |chef client| run. The syntax for a log message is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:11
# a1cc15e6944648eaa2e10157018c69c3
msgid "where"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:13
# b3bb9921da2444c99c319cd3b19982d6
msgid "``log_type`` can be ``.debug``, ``.info``, ``.warn``, ``.error``, or ``.fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:14
# e4c1b16c604f47be8073f546eed24b6c
msgid "``\"message\"`` is the message that is logged. For example: ``\"#{@new_resource} added module '#{@new_resource.module_name}'\"`` or ``\"#{@new_resource} module already exists - nothing to do\"``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:16
# 47bb173b5efb49b48eac2ef467929eab
msgid "For example, from the ``repository.rb`` provider in the |cookbook yum| cookbook:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:27
# 96949604cc76499f9cda51798720f724
msgid "where the ``Chef::Log`` class appends ``.info`` as the log type. If the name of the repo was \"foo\", then the log message would be \"Adding foo repository to /etc/yum.repos.d/foo.repo\"."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:29
# de05fa4adec24061801abec07f818deb
msgid "Another example shows two log entries, one that is triggered when a service is being restarted, and then another that is triggered after the service has been restarted:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:79
# ef3ca801a8af4fdbb96e9cdd18db2b52
msgid "rescue"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs_rescue.rst:5
# 2b75f6c015614107b718496cb0267a16
msgid "Use the ``rescue`` clause to make sure that a log message is always provided. For example:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:83
# 2b732b7b094c43b3ac29e396b2747db6
msgid "Examples"
msgstr ""

#: ../source/lwrp_custom_provider.rst:84
# 6c9b638581dc40a0ac0966abd5e10780
msgid "The following examples show various lightweight providers that use platform resources."
msgstr ""

#: ../source/lwrp_custom_provider.rst:87
# 0fcff6d096784ccb8aec6e43055e5849
msgid "aws_ebs_volume"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_aws_ebs_volume.rst:5
# 8bf6e06cf6d543eaac9de600bec3b262
msgid "The ``aws_ebs_volume`` lightweight provider (found in the `aws <https://github.com/opscode-cookbooks/aws>`_ cookbook maintained by |company_name|) defines how the |chef client| would handle a recipe that uses the ``ebs_volume`` lightweight resource and the ``:detach`` action. The following ``action`` block tells the |chef client| what to do with the ``:detach`` action:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_aws_ebs_volume.rst:17
# a40cd3da80074fd3be6efe83c05267f8
msgid "and the following ``def`` block defines the ``vol`` variable called by the ``determine_volume`` method:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:91
# 80db611ab7354cf1aa47946c2f05e7fc
msgid "cron_d"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:5
# 56f998b6803e4d2094008fbd4e7dc6a9
msgid "The ``cron_d`` lightweight provider (found in the `cron <https://github.com/opscode-cookbooks/cron>`_ cookbook maintained by |company_name|) is used to tell the |chef client| what to do whenever the ``cron_d`` lightweight resource is used in a recipe:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:42
# 3e7b977d7bf64f35aa9d75236a845da2
msgid "two ``action`` blocks are defined, one for the ``:create`` action and one for the ``:delete`` action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:43
# 14eef5d23aba49b788747a0ead82b5fa
msgid "the ``:delete`` action block calls the |resource file| resource (and it's ``:delete`` action) to delete a file in the ``/etc/cron.d`` folder"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:44
# d7b1958e8cef418683eba523630a47da
msgid "the ``:create`` action block creates a new entry in the ``/etc/cron.d`` folder."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:46
# 97e31e7ef4ff4c609698a73fc42c782c
msgid "For example, if a recipe used the ``cron_d`` lightweight resource similar to the following:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:57
# 08301b97f0204c4eb21253cea3f00ad9
msgid "this tells the |chef client| to use the ``cron_d`` lightweight provider and the credentials for a user named ``appuser`` to create a |crontab| entry named \"daily-usage-report\". This |crontab| entry executes a command located in the ``/srv/app/scripts/daily_report`` directory at a specified interval (defined by the ``minute`` and ``hour`` attributes). Any of the attributes that are not specified in the recipe (such as ``mailto``, ``weekday``, and ``day``) just use the default attribute values defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider.rst:95
# 06f77f22338542a591215b9a3a91f4f6
msgid "rabbitmq_plugin"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rabbitmq_plugin.rst:5
# 61c9bd02a13b411885faf488a37b651e
msgid "The ``rabbitmq_plugin`` lightweight provider (found in the `rabbitmq <https://github.com/opscode-cookbooks/rabbitmq>`_ cookbook maintained by |company_name|) is used to tell the |chef client| how to handle two actions (``:disable`` and ``:enable``) that are used to manage |rabbitmq| plugins. Using this lightweight resource in a recipe is simple:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rabbitmq_plugin.rst:13
# 73c85659c4724ca3aa0c41a55fa32bb4
msgid "The lightweight provider then does most of the work:"
msgstr ""

#: ../source/lwrp_custom_provider.rst:99
# 04eac021849e40b2ae9861206bb9e9f9
msgid "ssh_known_hosts_entry"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_ssh_known_hosts_entry.rst:5
# 34473c3f1fea4a06bafabc586174cdf6
msgid "The ``ssh_known_hosts_entry`` lightweight provider (found in the `ssh_known_hosts <https://github.com/opscode-cookbooks/ssh_known_hosts>`_ cookbook maintained by |company_name|) is used to add hosts and keys to the ``/etc/ssh_known_hosts`` file."
msgstr ""

