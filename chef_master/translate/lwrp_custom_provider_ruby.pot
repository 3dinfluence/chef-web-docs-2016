# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-21 13:50-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/lwrp_custom_provider_ruby.rst:8
# 8bf020253e284d21997e28ce1b4db244
msgid "Lightweight Providers w/Custom Ruby"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_provider.rst:4
# 242ae7d111414a9db9fb7cd2363de43c
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state. These steps are de-coupled from the request itself. The request is made in a recipe and is defined by a lightweight resource. The steps are then defined by a lightweight provider."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider.rst:5
# 2abc5b77008e4987beb9ea1f99bf35c9
msgid "A lightweight provider is a custom provider that defines the steps that are required to complete one (or more) actions defined by a lightweight resource. A lightweight provider and lightweight resource work together, each being defined in the same cookbook (the ``/providers`` and ``/resources`` subdirectories, respectively); together, they are referred as a |lwrp| (or \"lightweight resource/provider\"). A lightweight provider is always authored using |ruby|. Anything that can be done using |ruby| can be done in a lightweight provider. In addition to using |ruby|, the |dsl provider| provides additional methods that are specific to the |chef client|."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:15
# 47ee9fe00d0f41299349260db6ef0ec4
msgid "Syntax"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:5
# 114f273b33544bd9b0f5009688b7810f
msgid "This section shows some of the common structural elements that appear in a lightweight provider that is built using custom |ruby| code. Remember:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:7
# fd029dabc52847d2bc434f3c5039b193
msgid "A lightweight provider tells the |chef client| how to complete a task"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:8
# 8181a90cdaf24013956b39c652c1f5cb
msgid "The structure of a lightweight provider will vary, depending on the complexity of the tasks required to complete an action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:9
# 19e2aad037e846d280c333ef654d5f14
msgid "At its platform, a lightweight provider is just |ruby| code, which means that anything that can be done in |ruby| can be done in a lightweight provider"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:11
# 3a7f3e5238b042de902e7d09add1ce74
msgid "The basic syntax for a lightweight provider that is built using custom |ruby| code is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:39
#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:22
#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:11
# 6f7965395b5e4b068ed90bec2084c199
# 1b614c1a97b746f382b2f1c00ba3845a
# 516aa602a73a46d1af4e90dbed4dd098
msgid "where:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:41
# 6845bbc5357e498fb5e5fe5e4d3af3ad
msgid "``require`` is a standard |ruby| method that allows a lightweight provider to require modules that are not located in the current cookbook, such as a file located in the ``chef/mixin`` directory"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:42
# 22fd189966124ddbb274addaa8944bd5
msgid "``include`` is a standard |ruby| method that allows a lightweight provider to include a class, such as ``Chef::Mixin::ShellOut`` or ``Windows::Helper``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:43
# 6ddec19af58b412fb1e3d940070259fd
msgid "``whyrun_supported?`` indicates whether a lightweight provider can be run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:44
# f4a15c3877af4a8fabc8749577de8559
msgid "``action`` is the code block that tells the |chef client| what to do when the ``:action_name`` is used in a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:45
# 4eb8f2fac45a4bfeb951c979022acc71
msgid "``converge_by()`` is used to provide a ``\"message\"`` to be returned when a resource is run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:46
# 3aff3a92b83640718a436d81ca279800
msgid "``condition`` is a |ruby| condition statement (``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, or ``for``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:47
# 44ee50a3a2344c02aaaf145ff8f5e5b4
msgid "``test`` is used to test for idempotence; ``test`` can be defined inline within the ``action`` block, defined as a method using a ``def`` block elsewhere in the lightweight provider (shown as ``def test()``), or defined using any other pattern that is available in |ruby|"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:48
# 64b72ced9c9244da866b63ecbc17ff4f
msgid "``Chef::Log.log_type`` is used to tell the |chef client| to create a log entry, where ``log_type`` is one of the following types: ``debug``, ``info``, ``warn``, ``error``, or ``fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:49
# 8b50e2812fc34e10894c9adb1caa2474
msgid "``updated_by_last_action`` is used to notify that a node was updated successfully"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:51
# 15a63729ae0e4b96a143323b80dcb059
msgid "Also, commonly used methods (but not shown in the previous example) are ``current_resource``, ``load_current_resource``, and ``new_resource``."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:53
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:7
#: ../../includes_lwrp/includes_lwrp_custom_provider_library.rst:7
# f1a78a35ca0e4c228c32320ce199698d
# a25acb5dc4d840b1a196b21c47f70f60
# f518312186d840c690e79c496b564710
# 5a18639dd7344cb2a3f03cec30dc9ee9
# e3ac0547dfdc448889ac3f3203e754b1
# b57dabe8f8264a3a9e0166fe3eae4191
msgid "For example:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:19
# 98e9a87858c64bc985354a9bcb99b93a
msgid "|dsl provider| Methods"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider.rst:5
# 62a252e38b8046abb3be179b94c75097
msgid "The |dsl provider| is a |ruby| DSL that is used to help define a lightweight provider and to ensure that a lightweight provider takes the correct actions when it is called from a recipe. The |dsl provider| is a small DSL with just a few methods that are specific to the |chef client|. Because the |dsl provider| is a |ruby| DSL, anything that can be done using |ruby| can also be done when defining a lightweight provider."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:23
# 1acd6d4bdb1242008c0befc339cbd3b1
msgid "action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:5
# 642f71978bd94b7ea533b16e8c4eec83
msgid "The ``action`` method is used to define the steps that will be taken for each of the possible actions defined by the lightweight resource. Each action must be defined in separate ``action`` blocks within the same file. The syntax for the ``action`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:24
# a7edc6de21a840f58cf91f3ba183115c
msgid "``:action_name`` corresponds to an action defined by a lightweight resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:25
# 93efbdc6e1c34debb4689e3f36a8a7c9
msgid "``if @current_resource.exists`` is a condition test that is using an instance variable to see if the object already exists; this is an example of a test for idempotency"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:26
# 104ea76b84784d6a8b0cca86f67a4a95
msgid "If the object already exists, a ``#{ @new_resource } already exists - nothing to do.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:27
# 07cb69c698ac41df805e5289a6f4581f
msgid "If the object does not already exists, the ``resource`` block is run. This block is a recipe that tells the |chef client| what to do. A ``#{ @new_resource } created.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:28
# eaaaaaa42dc3470e97df0c845984299f
msgid "``converge_by`` tells the |chef client| which message to provide when the |chef client| is run in |whyrun| mode"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:27
# cdd2cc6a85fd4e0f874edebfea61e953
msgid "converge_by"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:5
# 5664c21e2462477d8982208a2b492561
msgid "The ``converge_by`` method is a wrapper that is used to tell the |chef client| what do if a resource is run in |whyrun| mode. The syntax for the ``converge_by`` method is:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:13
# c3d113529d2d4aad80ea8b77d8031e6c
msgid "``converge_by()`` is added to an ``action`` block as a wrapper"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:14
# 6e7d2ddf30624975b7ce855a50b181b8
msgid "``\"message\"`` is the message that the |chef client| returns when it is run in |whyrun| mode"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:16
# ace54686755c4365b6f557bcc01b8f00
msgid "Some examples:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:38
# 1535bcc679d445629e11184c86df6f89
msgid "where the last example shows using a variable (``description``) as the ``\"message\"`` in the ``converge_by`` block."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:40
# d8461c97dc384debb9772c2ec996abca
msgid "An example of the ``converge_by`` method being used in the `directory <https://github.com/opscode/chef/blob/master/lib/chef/provider/directory.rb>`_ provider, which is a platform resource:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:65
# 5275b63f5b8c4720bb2f86c50f9473b0
msgid "|whyrun| mode is already enabled for platform resources. When platform resources are used as part of the ``action`` block in a lightweight provider, only the ``whyrun_supported?`` is required to allow the |chef client| to run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:31
# 071492b0f7284607810a7acb04372bc2
msgid "current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:5
# f67ee8b0ba3f47fbb65ba476d59bdc60
msgid "The ``current_resource`` method is used to represent a resource as it exists on the node at the beginning of the |chef client| run. In other words: what the resource is currently. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state. This method is often used as an instance variable (``@current_resource``)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:25
# abadd33ebd74451e9417d883f30419a1
msgid "where the ``unless`` conditional statement checks to make sure the resource doesn't already exist on a node, and then runs a series of commands when it doesn't. If the resource already exists, the log entry would be \"Foo app already exists - nothing to do.\""
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:35
# 05eec23ccf1f41bc81bdeffb52484bfa
msgid "load_current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:5
# d08e765536634663ab353a1fdc2d9c77
msgid "The ``load_current_resource`` method is used to find a resource on a node based on a collection of attributes. These attributes are defined in a lightweight resource and are loaded by the |chef client| when processing a recipe during a |chef client| run. This method will ask the |chef client| to look on the node to see if a resource exists with specific matching attributes."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:26
# 43c7566ef9594a17945786bfb8f7d024
msgid "In the previous example, if a resource exists with matching attributes, the |chef client| does nothing and if a resource does not exist with matching attributes, the |chef client| will enforce the state declared in ``new_resource``."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:39
# 116a58c3449947d0a6d8688826316aef
msgid "new_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:5
# 029791991ef2429aa7664f4d5363fa8a
msgid "The ``new_resource`` method is used to represent a resource as loaded by the |chef client| during the |chef client| run. In other words: what the resource should be. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:23
# f3109064e91e4d108e3775f3b6f91b5b
msgid "where the |chef client| checks to see if the file exists, then if the file is writable, and then attempts to delete the resource. ``path`` is an attribute of the new resource that is defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:43
# c4cbe3d987d347c0b5a2c357d51a32a3
msgid "require"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:5
# f7fcd7d30e024d6daba2415fe2d466c4
msgid "The ``require`` method is used point the |chef client| to the location of an external class library."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:13
# e2c252a3a2124ad990f528f07f1ef971
msgid "The |chef client| will attempt to fully qualify the name of any class by prepending ``Chef::`` to the loaded class. For example both:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:19
# 370503f7b4c14fb6a7c9bc4f6282b105
msgid "and:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:25
# c78343252235427f8b9794bdf2afbdbd
msgid "are both understood by the |chef client| in the same way: ``Chef::Mixin::ShellOut``."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:27
# 83e7f5abb4ea4daf80cad25fc5af0174
msgid "When a class is an external class (and therefore should not have ``Chef::`` prepended), use ``::`` to let the |chef client| know. For example:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:47
# 06524a085f7f4c4c8d7dfd0f8359b648
msgid "updated_by_last_action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_ruby.rst:5
# 8ce0589761bf432ba6e33ecf3170b333
msgid "The ``updated_by_last_action`` method is used to notify a lightweight resource that a node was updated successfully. For example, the ``bluepill_service`` lightweight resource in the |cookbook bluepill| cookbook uses this method:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:51
# 235c7b9df8374ca1adfa6fadf56e88b8
msgid "whyrun_supported?"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:5
# 82142622c0e04174bf54849fd80a3d92
msgid "|whyrun| mode is a way to see what the |chef client| would have configured, had an actual |chef client| run occurred. This approach is similar to the concept of \"no-operation\" (or \"no-op\"): decide what should be done, but then don't actually do anything until it's done right. This approach to configuration management can help identify where complexity exists in the system, where inter-dependencies may be located, and to verify that everything will be configured in the desired manner."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:7
# d6548d1d00ba4c218cde45e6ca473de8
msgid "When |whyrun| mode is enabled, a |chef client| run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the |chef server|, rebuilding the node object, expanding the run list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:9
# 70b48ecc3c1b4fb2bbff1a6dfec75534
msgid "why-run mode is not a replacement for running cookbooks in a test environment that mirrors the production environment. |company_name| uses why-run mode to learn more about what is going on, but also test-kitchen on developer systems, along with an internal |openstack| cloud and external cloud providers to test more thoroughly."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:5
# 36a2ceb072694410a95c9e47f5db66ee
msgid "When the |chef client| is run in |whyrun| mode, certain assumptions are made:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:7
# bc624917f1ed4a76935f462113ffa5a1
msgid "If the |resource service| resource cannot find the appropriate command to verify the status of a service, |whyrun| mode will assume that the command would have been installed by a previous resource and that the service would not be running"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:8
# 44dc8141808642ec91215fcfea7c0df7
msgid "For ``not_if`` and ``only_if`` attribute, |whyrun| mode will assume these are commands or blocks that are safe to run. These conditions are not designed to be used to change the state of the system, but rather to help facilitate idempotency for the resource itself. That said, it may be possible that these attributes are being used in a way that modifies the system state"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:9
# d81f989703ef4ce19afc81b2eb5b1428
msgid "The closer the current state of the system is to the desired state, the more useful |whyrun| mode will be. For example, if a full run-list is run against a fresh system, that run-list may not be completely correct on the first try, but also that run-list will produce more output than smaller run-list"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:5
# 52cfd8f5876e40fdbda043b154170ff7
msgid "The ``whyrun_supported?`` method is used to set a lightweight provider to support |whyrun| mode. The syntax for the ``whyrun_supported?`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:13
# 49b27a187f514ceeb22cbacab79db40a
msgid "where ``whyrun_supported?`` is set to ``true`` for any lightweight provider that supports using |whyrun| mode. When |whyrun| mode is supported by the a lightweight provider, the ``converge_by`` method is used to define the strings that are logged by the |chef client| when it is run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:59
# ff013972a49c46f6a7174283e4b19986
msgid "Condition Statements"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:5
# cf34f6490d7b4ce3b111b905114b62a4
msgid "A lightweight provider can use any conditional statement that can be used in |ruby|: ``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, and ``for``. A condition statement can test for:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:7
# 62f914acb0c348759df9965ed6f49a83
msgid "A |ruby| class (such as ``::File`` or ``::String``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:8
# 603243bfba2a4595887b28b13ca61bc8
msgid "A ``Chef`` class (such as ``::Chef::Mixin::ShellOut``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:9
# 04e305f894a14b5f87665d7a9ccf4e1f
msgid "Conditions present on the node by using ``@current_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:10
# 64a6af2901eb42318f2da8467ad20b63
msgid "Conditions present within the resource being processed by the |chef client| during the |chef client| run by using ``new_resource`` or ``@new_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:11
# f79cd8e8af41436e873b131fb4220aae
msgid "To verify if a resource was updated by using ``updated_by_last_action``, for example: ``@new_resource.updated_by_last_action``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:13
# cef5828373c640dc801150f516ebb2cb
msgid "and so on."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:15
# 40f8b0ba25d94e4d86f77da3a39cc56d
msgid "For example, an ``if`` statement is used to check if a file exists (``::File.exists?``), and then if the file exists to delete a key from that file."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:29
# 4449686683314c2a99dc34c6509fcf0b
msgid "In the following example an ``unless`` statement is used to add a key, unless that node object already has that key assigned to it:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:63
# a6c686315f1543b39487eb30930418d1
msgid "Log Entries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:5
# c4e3c1e0ce9a4cbbb9f7679fe03f84a3
msgid "Use the ``Chef::Log`` class in a lightweight provider to define log entries that are created during a |chef client| run. The syntax for a log message is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:11
# fa02ed0178b242e2b6eb147bd5b20fcd
msgid "where"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:13
# 755b3bb922234bad819034ed5f2db68e
msgid "``log_type`` can be ``.debug``, ``.info``, ``.warn``, ``.error``, or ``.fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:14
# 29fe1aa7a3ef4469ab3d3b699f3236cc
msgid "``\"message\"`` is the message that is logged. For example: ``\"#{@new_resource} added module '#{@new_resource.module_name}'\"`` or ``\"#{@new_resource} module already exists - nothing to do\"``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:16
# a68e12b9b27c487891f2bed6717d2a59
msgid "For example, from the ``repository.rb`` provider in the |cookbook yum| cookbook:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:27
# ed3656fb3a104694b349c98383cc4a31
msgid "where the ``Chef::Log`` class appends ``.info`` as the log type. If the name of the repo was \"foo\", then the log message would be \"Adding foo repository to /etc/yum.repos.d/foo.repo\"."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:29
# 427c809bd5264de39a00182334db5359
msgid "Another example shows two log entries, one that is triggered when a service is being restarted, and then another that is triggered after the service has been restarted:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:67
# a8643a39a0944908acdfc2c17b37f8aa
msgid "rescue"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs_rescue.rst:5
# eca57dd3fe384e3299ecc8094a378866
msgid "Use the ``rescue`` clause to make sure that a log message is always provided. For example:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:71
# 087f87e6bd3040bd9e52bcb5b9dd2730
msgid "Libraries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_library.rst:5
# 942c3429e7434a7891bc536fa5f42455
msgid "A lightweight provider can extend another provider class. This can be done as a ``mixin``, which is then placed in a library under the ``library/`` directory of any cookbook that will use the extended provider class. The lightweight provider is then written to include that library in its implementation so that it has access to the extended platform resource. Use the ``include`` method in the lightweight provider to ensure that a lightweight provider has access to an external library."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:75
# 52cb6698f5884e0887b48b0ae18f76a3
msgid "Examples"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:76
# b1cd3c08f3d74acebb58bcca211329c3
msgid "The following examples show various lightweight providers that rely on custom |ruby| code."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:79
# 009e85322c0a4797aca30139893d18bf
msgid "rbenv_global"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rbenv_global.rst:5
# dd3ce9a3076d49a3b5ce8df46833e24f
msgid "The ``rbenv_global`` lightweight provider from the `chef-rbenv <https://github.com/fnichol/chef-rbenv>`_ cookbook shows a custom lightweight provider that  sets the global version of |ruby|:"
msgstr ""

