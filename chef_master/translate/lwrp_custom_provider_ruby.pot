# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-11 21:18-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/lwrp_custom_provider_ruby.rst:8
# 3b38f90285c6455db3a7c0dad88d5780
msgid "Lightweight Providers w/Custom Ruby"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_provider.rst:4
# c8c8fa1abb334dab8bcb553ebf2844e5
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider.rst:5
# 227374c892d54776b94962b1fd65915a
msgid "A lightweight provider is a custom provider that defines the steps that are required to complete one (or more) actions defined by a lightweight resource. A lightweight provider and lightweight resource work together, each being defined in the same cookbook (the ``/providers`` and ``/resources`` subdirectories, respectively); together, they are referred as a |lwrp| (or \"lightweight resource/provider\"). A lightweight provider is always authored using |ruby|. Anything that can be done using |ruby| can be done in a lightweight provider. In addition to using |ruby|, the |dsl provider| provides additional methods that are specific to the |chef client|."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:15
# 8c54230110c445a088e465447388316c
msgid "Syntax"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:5
# 998998815066425ab42a4aa295c17e1f
msgid "This section shows some of the common structural elements that appear in a lightweight provider that is built using custom |ruby| code. Remember:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:7
# 0077a35338c9440b86bee2ac704bc8d6
msgid "A lightweight provider tells the |chef client| how to complete a task"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:8
# 43f1162328b64301a419ddaaf48a17f7
msgid "The structure of a lightweight provider will vary, depending on the complexity of the tasks required to complete an action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:9
# efbc4108b3a346f8b6a082b06bb13105
msgid "At its platform, a lightweight provider is just |ruby| code, which means that anything that can be done in |ruby| can be done in a lightweight provider"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:11
# 08a27cb8dce94b10a9d597ab63c76177
msgid "The basic syntax for a lightweight provider that is built using custom |ruby| code is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:39
#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:22
#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:11
# 234f04ad5f5047f0bc332d0905f2941b
# cff14223cdb44541b23f74f66e9b56f5
# 6d80a520d7144376936255287bb5e7ff
msgid "where:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:41
# 9db7ff4e9c89411ba4baa86db10ae229
msgid "``require`` is a standard |ruby| method that allows a lightweight provider to require modules that are not located in the current cookbook, such as a file located in the ``chef/mixin`` directory"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:42
# b517e9be94e14643afb8513c9e760e85
msgid "``include`` is a standard |ruby| method that allows a lightweight provider to include a class, such as ``Chef::Mixin::ShellOut`` or ``Windows::Helper``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:43
# 1997b272eff242889aaf563a48bbee63
msgid "``whyrun_supported?`` indicates whether a lightweight provider can be run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:44
# a1be4e6bbeb8431ca144c9522d590cbd
msgid "``action`` is the code block that tells the |chef client| what to do when the ``:action_name`` is used in a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:45
# 7febb0bbffc44e20bcf286098ec5fc6a
msgid "``converge_by()`` is used to provide a ``\"message\"`` to be returned when a resource is run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:46
# 48a131109e7b4d88a10ab45a66a38d00
msgid "``condition`` is a |ruby| condition statement (``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, or ``for``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:47
# 8c4908b1a2194691a872aa2640537676
msgid "``test`` is used to test for idempotence; ``test`` can be defined inline within the ``action`` block, defined as a method using a ``def`` block elsewhere in the lightweight provider (shown as ``def test()``), or defined using any other pattern that is available in |ruby|"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:48
# de560a1b74e04265b3cbc1d868d348c5
msgid "``Chef::Log.log_type`` is used to tell the |chef client| to create a log entry, where ``log_type`` is one of the following types: ``debug``, ``info``, ``warn``, ``error``, or ``fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:49
# ab685b8b7c07437a8c00dd005305a0a5
msgid "``updated_by_last_action`` is used to notify that a node was updated successfully"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:51
# 4bf8190ec054492a88c3f18b5efb807b
msgid "Also, commonly used methods (but not shown in the previous example) are ``current_resource``, ``load_current_resource``, and ``new_resource``."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:53
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:7
#: ../../includes_lwrp/includes_lwrp_custom_provider_library.rst:7
# b23685aa6d094b74a4d29c39796edc3f
# 5818d0dd65814a46a47dba0337158cfe
# 9e054765ce584df9ae4acbb631871c58
# 9d54dcc9b3914399a36697a3c7a9c2d9
# c1be33590bd74d58a55beac39fc2e405
# 44b7257c34854aa69b454e0f9f08c521
msgid "For example:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:19
# 9b7c0215087b432496d0127355d8cc74
msgid "|dsl provider| Methods"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider.rst:5
# f9a8f9a2bbc541bd9571ad8b9c33e86f
msgid "The |dsl provider| is a |ruby| DSL that is used to help define a lightweight provider and to ensure that a lightweight provider takes the correct actions when it is called from a recipe. The |dsl provider| is a small DSL with just a few methods that are specific to the |chef client|. Because the |dsl provider| is a |ruby| DSL, anything that can be done using |ruby| can also be done when defining a lightweight provider."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:23
# 2cdda82b7dd447c6935cb43f0280839b
msgid "action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:5
# 039062123a3d4022baa0f34d68b303e0
msgid "The ``action`` method is used to define the steps that will be taken for each of the possible actions defined by the lightweight resource. Each action must be defined in separate ``action`` blocks within the same file. The syntax for the ``action`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:24
# dc331d5758b048e69f66a76b63a4720b
msgid "``:action_name`` corresponds to an action defined by a lightweight resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:25
# ccf9652bc7ef4de59d1f68435438cbe6
msgid "``if @current_resource.exists`` is a condition test that is using an instance variable to see if the object already exists; this is an example of a test for idempotency"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:26
# 3e6c07e3a09645e280671df2bfa38c1d
msgid "If the object already exists, a ``#{ @new_resource } already exists - nothing to do.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:27
# 7772004929e24f1a9fc63e5170365b93
msgid "If the object does not already exists, the ``resource`` block is run. This block is a recipe that tells the |chef client| what to do. A ``#{ @new_resource } created.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:28
# e81a043d11874c4b9ac0ed29c6e4ae0f
msgid "``converge_by`` tells the |chef client| which message to provide when the |chef client| is run in |whyrun| mode"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:27
# 27f4d6809b984ba885be944b40ae72ea
msgid "converge_by"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:5
# 3aa8325b7e6841a889c68e03c43a781e
msgid "The ``converge_by`` method is a wrapper that is used to tell the |chef client| what do if a resource is run in |whyrun| mode. The syntax for the ``converge_by`` method is:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:13
# 531994a5a80c4db9afbb1a788336d033
msgid "``converge_by()`` is added to an ``action`` block as a wrapper"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:14
# ac232119792242639b03dcc0bd54ce6c
msgid "``\"message\"`` is the message that the |chef client| returns when it is run in |whyrun| mode"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:16
# 292ad070fda94a76a95280168d59c265
msgid "Some examples:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:38
# 4c68734959c941b79f219d68bce7880a
msgid "where the last example shows using a variable (``description``) as the ``\"message\"`` in the ``converge_by`` block."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:40
# 6a01022830fc4e44aa075ca4fa93b153
msgid "An example of the ``converge_by`` method being used in the `directory <https://github.com/chef/chef/blob/master/lib/chef/provider/directory.rb>`_ provider, which is a platform resource:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:65
# 2d06e3ffe5724cfba22b0622ac6c1c45
msgid "|whyrun| mode is already enabled for platform resources. When platform resources are used as part of the ``action`` block in a lightweight provider, only the ``whyrun_supported?`` is required to allow the |chef client| to run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:31
# 0a3affca4ad046d2a7faf649e9cf6353
msgid "current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:5
# b8760f7bfd6a48ef886d5e7c5178d11e
msgid "The ``current_resource`` method is used to represent a resource as it exists on the node at the beginning of the |chef client| run. In other words: what the resource is currently. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state. This method is often used as an instance variable (``@current_resource``)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:25
# 2822fbb2ccd440cfa82e4688a6320c4e
msgid "where the ``unless`` conditional statement checks to make sure the resource doesn't already exist on a node, and then runs a series of commands when it doesn't. If the resource already exists, the log entry would be \"Foo app already exists - nothing to do.\""
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:35
# 8b87bc9f60ca431095aa150e18a6b2a5
msgid "load_current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:5
# 3c2f2121bbac4280a920f7d7be0e2bc2
msgid "The ``load_current_resource`` method is used to find a resource on a node based on a collection of attributes. These attributes are defined in a lightweight resource and are loaded by the |chef client| when processing a recipe during a |chef client| run. This method will ask the |chef client| to look on the node to see if a resource exists with specific matching attributes."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:26
# f4706c68bbab4497a16b92f1375a57bb
msgid "In the previous example, if a resource exists with matching attributes, the |chef client| does nothing and if a resource does not exist with matching attributes, the |chef client| will enforce the state declared in ``new_resource``."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:39
# fdcb2ac127a243199c9f436fbd3b95a6
msgid "new_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:5
# 6eb4387d59e645bda4f70a76e730084d
msgid "The ``new_resource`` method is used to represent a resource as loaded by the |chef client| during the |chef client| run. In other words: what the resource should be. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:23
# 7402cab275094ef885e3a612faa293b0
msgid "where the |chef client| checks to see if the file exists, then if the file is writable, and then attempts to delete the resource. ``path`` is an attribute of the new resource that is defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:43
# e86577b539804af4b11de44f759f7923
msgid "require"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:5
# ebaa2c9a27014414a6f25c31a27879c1
msgid "The ``require`` method is used point the |chef client| to the location of an external class library."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:47
# 7166bc172153458cb14e7760f3be60a7
msgid "updated_by_last_action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_ruby.rst:5
# 17c9c2cb81a4492eb2df00e8520c4454
msgid "The ``updated_by_last_action`` method is used to notify a lightweight resource that a node was updated successfully. For example, the ``bluepill_service`` lightweight resource in the |cookbook bluepill| cookbook uses this method:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:51
# 139d40b176584965b95dc89de9d45f64
msgid "whyrun_supported?"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:5
# 1099326eff1a497590e752fd9b913b70
msgid "|whyrun| mode is a way to see what the |chef client| would have configured, had an actual |chef client| run occurred. This approach is similar to the concept of \"no-operation\" (or \"no-op\"): decide what should be done, but then don't actually do anything until it's done right. This approach to configuration management can help identify where complexity exists in the system, where inter-dependencies may be located, and to verify that everything will be configured in the desired manner."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:7
# 9d28637b7b854b8185af3ad09c65f852
msgid "When |whyrun| mode is enabled, a |chef client| run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the |chef server|, rebuilding the node object, expanding the run list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:9
# 1e7f9757c6844ccf969378b98129d90c
msgid "why-run mode is not a replacement for running cookbooks in a test environment that mirrors the production environment. |company_name| uses why-run mode to learn more about what is going on, but also test-kitchen on developer systems, along with an internal |openstack| cloud and external cloud providers to test more thoroughly."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:5
# e84197199c7a4cf79465b4314f8e4cff
msgid "When the |chef client| is run in |whyrun| mode, certain assumptions are made:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:7
# 3009b57508f647c6b06757583d259b23
msgid "If the |resource service| resource cannot find the appropriate command to verify the status of a service, |whyrun| mode will assume that the command would have been installed by a previous resource and that the service would not be running"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:8
# cf95a9b4a8244c70b878fbd145a4b207
msgid "For ``not_if`` and ``only_if`` attribute, |whyrun| mode will assume these are commands or blocks that are safe to run. These conditions are not designed to be used to change the state of the system, but rather to help facilitate idempotency for the resource itself. That said, it may be possible that these attributes are being used in a way that modifies the system state"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:9
# 5eb29e8919c24506bb4f98e9bdf0359c
msgid "The closer the current state of the system is to the desired state, the more useful |whyrun| mode will be. For example, if a full run-list is run against a fresh system, that run-list may not be completely correct on the first try, but also that run-list will produce more output than smaller run-list"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:5
# 4ac3403a517d4d09bad474c402009615
msgid "The ``whyrun_supported?`` method is used to set a lightweight provider to support |whyrun| mode. The syntax for the ``whyrun_supported?`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:13
# f0e68ead768b4d53b750c7cb7423184b
msgid "where ``whyrun_supported?`` is set to ``true`` for any lightweight provider that supports using |whyrun| mode. When |whyrun| mode is supported by the a lightweight provider, the ``converge_by`` method is used to define the strings that are logged by the |chef client| when it is run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:59
# d6e29908c2a94983a1383f7a496c5ade
msgid "Condition Statements"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:5
# fbcde76fb3374fb39a51c8b6121fcb90
msgid "A lightweight provider can use any conditional statement that can be used in |ruby|: ``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, and ``for``. A condition statement can test for:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:7
# 56edf4102f1340d6a5830b2bd50ce112
msgid "A |ruby| class (such as ``::File`` or ``::String``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:8
# 168c2b221ad54fd8a151342c680e19bc
msgid "A ``Chef`` class (such as ``::Chef::Mixin::ShellOut``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:9
# d513eed93e984cb0b943d1aad7af2efb
msgid "Conditions present on the node by using ``@current_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:10
# 1451510bc52d4484be6e6bab0e1fe2c7
msgid "Conditions present within the resource being processed by the |chef client| during the |chef client| run by using ``new_resource`` or ``@new_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:11
# c5fb914f49dd4b7daeae9fa646569f2d
msgid "To verify if a resource was updated by using ``updated_by_last_action``, for example: ``@new_resource.updated_by_last_action``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:13
# 115246f9e8df4dcc83c6ca421470a08c
msgid "and so on."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:15
# f04651d66c8f4bfaa0fb765b0be07ee1
msgid "For example, an ``if`` statement is used to check if a file exists (``::File.exists?``), and then if the file exists to delete a key from that file."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:29
# 95f07fa40c18438cb70f281b694ba2bb
msgid "In the following example an ``unless`` statement is used to add a key, unless that node object already has that key assigned to it:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:63
# dd2e095c65764fff8ca4a73041e0b107
msgid "Log Entries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:5
# d1fba628ace04cac950a4595fc2786f2
msgid "Use the ``Chef::Log`` class in a lightweight provider to define log entries that are created during a |chef client| run. The syntax for a log message is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:11
# 8dd4dca83031408dbe4d229b49e9143f
msgid "where"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:13
# 2c9dd98d89704a30be49645cf66c37e8
msgid "``log_type`` can be ``.debug``, ``.info``, ``.warn``, ``.error``, or ``.fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:14
# 330f22abca8f4157a7c4b0fa2a20960b
msgid "``\"message\"`` is the message that is logged. For example: ``\"#{@new_resource} added module '#{@new_resource.module_name}'\"`` or ``\"#{@new_resource} module already exists - nothing to do\"``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:16
# c5f44c4e836143a8a4af4609bb6ed4ff
msgid "For example, from the ``repository.rb`` provider in the |cookbook yum| cookbook:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:27
# 082baf45f6e94c5e894c60b742a1df03
msgid "where the ``Chef::Log`` class appends ``.info`` as the log type. If the name of the repo was \"foo\", then the log message would be \"Adding foo repository to /etc/yum.repos.d/foo.repo\"."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:29
# 7e1eb6b5fbb644bcb0813c7f3e230ca6
msgid "Another example shows two log entries, one that is triggered when a service is being restarted, and then another that is triggered after the service has been restarted:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:67
# 4df9f5d26ef344c3a49d47b2c4b6dd0e
msgid "rescue"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs_rescue.rst:5
# 0eff749fbcc94113bd7669219582ef03
msgid "Use the ``rescue`` clause to make sure that a log message is always provided. For example:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:71
# e83e50ab3b4c423583d8dfacc24ac321
msgid "Libraries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_library.rst:5
# f30bbc7dc83b42009f252238cfed6339
msgid "A lightweight provider can extend another provider class. This can be done as a ``mixin``, which is then placed in a library under the ``library/`` directory of any cookbook that will use the extended provider class. The lightweight provider is then written to include that library in its implementation so that it has access to the extended platform resource. Use the ``include`` method in the lightweight provider to ensure that a lightweight provider has access to an external library."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:75
# 378dd69fd11349bf84be5bb97f60c610
msgid "Examples"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:76
# 858a7f425e9a4842b9481e794dfc2a69
msgid "The following examples show various lightweight providers that rely on custom |ruby| code."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:79
# 4890edc7ad00448694f09624cbe0e9a4
msgid "rbenv_global"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rbenv_global.rst:5
# cfb467369a7f4131a27a99114368303e
msgid "The ``rbenv_global`` lightweight provider from the `chef-rbenv <https://github.com/fnichol/chef-rbenv>`_ cookbook shows a custom lightweight provider that  sets the global version of |ruby|:"
msgstr ""

