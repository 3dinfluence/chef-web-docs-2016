# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-19 11:19-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:8
# eaf9c3b5bdbf461c9a32b85aec32428b
msgid "Lightweight Providers w/Custom Ruby"
msgstr ""

#: ../../../desktop/chef-docs/includes_cookbooks/includes_cookbooks_provider.rst:4
# 571686c9c93a4f459337a91979428ebf
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state. These steps are de-coupled from the request itself. The request is made in a recipe and is defined by a lightweight resource. The steps are then defined by a lightweight provider."
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider.rst:5
# 3b02186cd1cf471b9fc63ce1955a27d8
msgid "A lightweight provider is a custom provider that defines the steps that are required to complete one (or more) actions defined by a lightweight resource. A lightweight provider and lightweight resource work together, each being defined in the same cookbook (the ``/providers`` and ``/resources`` subdirectories, respectively); together, they are referred as a |lwrp| (or \"lightweight resource/provider\"). A lightweight provider is always authored using |ruby|. Anything that can be done using |ruby| can be done in a lightweight provider. In addition to using |ruby|, the |dsl provider| provides additional methods that are specific to the |chef client|."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:15
# 67181acfa11245c7a7aeec90dd038f39
msgid "Syntax"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:5
# f5c7d9ce7fac49df99b1211c1795210f
msgid "This section shows some of the common structural elements that appear in a lightweight provider that is built using custom |ruby| code. Remember:"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:7
# 364357b71add4f8d84ae21875d0233e9
msgid "A lightweight provider tells the |chef client| how to complete a task"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:8
# 3dc9731478d74892a40be9c2d668cf05
msgid "The structure of a lightweight provider will vary, depending on the complexity of the tasks required to complete an action"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:9
# bc23a4adeda54b11b88860afbd602cc7
msgid "At its platform, a lightweight provider is just |ruby| code, which means that anything that can be done in |ruby| can be done in a lightweight provider"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:11
# 80fa2565a73843b7b2c6eef8535a3805
msgid "The basic syntax for a lightweight provider that is built using custom |ruby| code is as follows:"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:39
#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:22
#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:11
# f443c0c275fe40d2803bdfac8822228b
# dbde5d29573b4f4a8bb79c17eb9ad667
# c077046ded0f467e80558dacbc537464
msgid "where:"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:41
# 3b77733bd23d4caf9d31ac4f2d7d55ec
msgid "``require`` is a standard |ruby| method that allows a lightweight provider to require modules that are not located in the current cookbook, such as a file located in the ``chef/mixin`` directory"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:42
# 0c9d5dc7dcfe4a4da4ee873d0d6f48b1
msgid "``include`` is a standard |ruby| method that allows a lightweight provider to include a class, such as ``Chef::Mixin::ShellOut`` or ``Windows::Helper``"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:43
# 9f8439253509471a8903c5e1536bbef9
msgid "``whyrun_supported?`` indicates whether a lightweight provider can be run in |whyrun| mode"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:44
# c170be25e677492fb1c45419e873a22c
msgid "``action`` is the code block that tells the |chef client| what to do when the ``:action_name`` is used in a recipe"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:45
# 9c33ad839c774594b754124c836ec58e
msgid "``converge_by()`` is used to provide a ``\"message\"`` to be returned when a resource is run in |whyrun| mode"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:46
# 175e8bea46f54ef2bc2250f439c45703
msgid "``condition`` is a |ruby| condition statement (``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, or ``for``)"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:47
# 748ede3d75e341eca11e2909dec25c08
msgid "``test`` is used to test for idempotence; ``test`` can be defined inline within the ``action`` block, defined as a method using a ``def`` block elsewhere in the lightweight provider (shown as ``def test()``), or defined using any other pattern that is available in |ruby|"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:48
# 321b2d22dd0e493ebc6577cbecbc9834
msgid "``Chef::Log.log_type`` is used to tell the |chef client| to create a log entry, where ``log_type`` is one of the following types: ``debug``, ``info``, ``warn``, ``error``, or ``fatal``"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:49
# 9dafbbf9de5f425094d6fe47a0988581
msgid "``updated_by_last_action`` is used to notify that a node was updated successfully"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:51
# e3602b451ec64da0a59a3f3c8acdf35d
msgid "Also, commonly used methods (but not shown in the previous example) are ``current_resource``, ``load_current_resource``, and ``new_resource``."
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:53
#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:7
#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:7
#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:7
#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_require.rst:7
#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_library.rst:7
# 2cacb0e0f6b64214b399560b86e9040f
# 8b6f2096c6e94bddb76e4d30b2191238
# 0767d465780040ed8f89d154c6b03f38
# d405cd9ce8334f1ba70b9e94eba7291e
# 9155c725948449d298934a17bbeaa45a
# dc3cf4e824254ed4be2d3c9483e856ce
msgid "For example:"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:19
# 9b2f392b87b8428484ef57dd9a6aa11b
msgid "|dsl provider| Methods"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider.rst:5
# 27703f00d44d4e0fad31daed3c71b5f9
msgid "The |dsl provider| is a |ruby| DSL that is used to help define a lightweight provider and to ensure that a lightweight provider takes the correct actions when it is called from a recipe. The |dsl provider| is a small DSL with just a few methods that are specific to the |chef client|. Because the |dsl provider| is a |ruby| DSL, anything that can be done using |ruby| can also be done when defining a lightweight provider."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:23
# fb54fe1d22bc48f48bf030a74cadad43
msgid "action"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:5
# f1ad22eb6550489a88065c70161e71e3
msgid "The ``action`` method is used to define the steps that will be taken for each of the possible actions defined by the lightweight resource. Each action must be defined in separate ``action`` blocks within the same file. The syntax for the ``action`` method is as follows:"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:24
# 2a701e8da9094b849aa1207179b17774
msgid "``:action_name`` corresponds to an action defined by a lightweight resource"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:25
# fc27ad095d484ae1baeeb7969d337c52
msgid "``if @current_resource.exists`` is a condition test that is using an instance variable to see if the object already exists; this is an example of a test for idempotency"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:26
# ca8f4d0b139145e59ef82d17eaefd3ff
msgid "If the object already exists, a ``#{ @new_resource } already exists - nothing to do.`` log entry is created"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:27
# 1121c46a5fb54fbea27180d783f481fc
msgid "If the object does not already exists, the ``resource`` block is run. This block is a recipe that tells the |chef client| what to do. A ``#{ @new_resource } created.`` log entry is created"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:28
# 90a33e5fdb26436e9344aeb7b136e4da
msgid "``converge_by`` tells the |chef client| which message to provide when the |chef client| is run in |whyrun| mode"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:27
# 9812ae6df92e4854809611205c6dca94
msgid "converge_by"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:5
# bb0b01d3c1be44db808cc57ea652fc3e
msgid "The ``converge_by`` method is a wrapper that is used to tell the |chef client| what do if a resource is run in |whyrun| mode. The syntax for the ``converge_by`` method is:"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:13
# 6444492b70c24cbdaa3dc2b05b62e65a
msgid "``converge_by()`` is added to an ``action`` block as a wrapper"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:14
# 6d09b7a3dd2c407f88ad239fd5380995
msgid "``\"message\"`` is the message that the |chef client| returns when it is run in |whyrun| mode"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:16
# 00576f6b8ed84fbd90714a48e5fed824
msgid "Some examples:"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:38
# 41f9747cb82641339e8066ede45f694a
msgid "where the last example shows using a variable (``description``) as the ``\"message\"`` in the ``converge_by`` block."
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:40
# cfe8e1cbd69f4f2c9b7b91254c6f4bda
msgid "An example of the ``converge_by`` method being used in the `directory <https://github.com/opscode/chef/blob/master/lib/chef/provider/directory.rb>`_ provider, which is a platform resource:"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:65
# 60d95579cf1a485e9e04d47206ace6f4
msgid "|whyrun| mode is already enabled for platform resources. When platform resources are used as part of the ``action`` block in a lightweight provider, only the ``whyrun_supported?`` is required to allow the |chef client| to run in |whyrun| mode."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:31
# b802282695dc4dc9b25c8e0cf2df218a
msgid "current_resource"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:5
# 0e473ad3545341608512e552014e9ba9
msgid "The ``current_resource`` method is used to represent a resource as it exists on the node at the beginning of the |chef client| run. In other words: what the resource is currently. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state. This method is often used as an instance variable (``@current_resource``)."
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:25
# 788edff6c0a54af29f4d20a5ff2ede18
msgid "where the ``unless`` conditional statement checks to make sure the resource doesn't already exist on a node, and then runs a series of commands when it doesn't. If the resource already exists, the log entry would be \"Foo app already exists - nothing to do.\""
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:35
# 25c4ff6d3b794b5e81f412056e8971ca
msgid "load_current_resource"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:5
# e43b403d65c04a8aadf6fa6ef42d66be
msgid "The ``load_current_resource`` method is used to find a resource on a node based on a collection of attributes. These attributes are defined in a lightweight resource and are loaded by the |chef client| when processing a recipe during a |chef client| run. This method will ask the |chef client| to look on the node to see if a resource exists with specific matching attributes."
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:26
# 76d144f64d7b412fac7c18e535b78e3f
msgid "In the previous example, if a resource exists with matching attributes, the |chef client| does nothing and if a resource does not exist with matching attributes, the |chef client| will enforce the state declared in ``new_resource``."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:39
# 2080121537874dd9aba90b1536d3e28d
msgid "new_resource"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:5
# bce5e6e5104745209ecc3ac18853bb39
msgid "The ``new_resource`` method is used to represent a resource as loaded by the |chef client| during the |chef client| run. In other words: what the resource should be. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state."
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:23
# 0247ec1557ad49b08852b9b5ef3c1379
msgid "where the |chef client| checks to see if the file exists, then if the file is writable, and then attempts to delete the resource. ``path`` is an attribute of the new resource that is defined by the lightweight resource."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:43
# b9d1d33d18294ddf8bc342ce80f173e3
msgid "require"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_require.rst:5
# 40db6ada9816493f9cb749788e5faa6d
msgid "The ``require`` method is used point the |chef client| to the location of an external class library."
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_require.rst:13
# 88a6a7bf790b47d89c179ac459043460
msgid "The |chef client| will attempt to fully qualify the name of any class by prepending ``Chef::`` to the loaded class. For example both:"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_require.rst:19
# a53ef31e36644309b451afe667abb083
msgid "and:"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_require.rst:25
# 52a981db97ad4717b4c11132e1ec534d
msgid "are both understood by the |chef client| in the same way: ``Chef::Mixin::ShellOut``."
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_require.rst:27
# b17a7be44fe14f29a6bb3beb2ec1824b
msgid "When a class is an external class (and therefore should not have ``Chef::`` prepended), use ``::`` to let the |chef client| know. For example:"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:47
# 6d580448d8734ebab5c8d6d17a51591f
msgid "updated_by_last_action"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_ruby.rst:5
# 4846f322f05646989e5ae9ec8d410aa6
msgid "The ``updated_by_last_action`` method is used to notify a lightweight resource that a node was updated successfully. For example, the ``bluepill_service`` lightweight resource in the |cookbook bluepill| cookbook uses this method:"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:51
# 28a4be9fc4ff415db1b9346bed245f32
msgid "whyrun_supported?"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef_client/includes_chef_client_whyrun_mode.rst:5
# 4736607929fb4a9e9986b795324bc993
msgid "|whyrun| mode is a way to see what the |chef client| would have configured, had an actual |chef client| run occurred. This approach is similar to the concept of \"no-operation\" (or \"no-op\"): decide what should be done, but then don't actually do anything until it's done right. This approach to configuration management can help identify where complexity exists in the system, where inter-dependencies may be located, and to verify that everything will be configured in the desired manner."
msgstr ""

#: ../../../desktop/chef-docs/includes_chef_client/includes_chef_client_whyrun_mode.rst:7
# 87ea2135e275404db34ead66b6dc46a4
msgid "When |whyrun| mode is enabled, a |chef client| run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the |chef server|, rebuilding the node object, expanding the run list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system."
msgstr ""

#: ../../../desktop/chef-docs/includes_chef_client/includes_chef_client_whyrun_mode.rst:9
# 9e494d0f7ca44474870a798cc3c03950
msgid "why-run mode is not a replacement for running cookbooks in a test environment that mirrors the production environment. |company_name| uses why-run mode to learn more about what is going on, but also test-kitchen on developer systems, along with an internal |openstack| cloud and external cloud providers to test more thoroughly."
msgstr ""

#: ../../../desktop/chef-docs/includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:5
# 2bb9071fed024c9b9d3f63a325089e9d
msgid "When the |chef client| is run in |whyrun| mode, certain assumptions are made:"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:7
# d9c92f4fdfda42a79ff40e62958a353a
msgid "If the |resource service| resource cannot find the appropriate command to verify the status of a service, |whyrun| mode will assume that the command would have been installed by a previous resource and that the service would not be running"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:8
# 6d8b0f33e32c45b899682539f05b2f0f
msgid "For ``not_if`` and ``only_if`` attribute, |whyrun| mode will assume these are commands or blocks that are safe to run. These conditions are not designed to be used to change the state of the system, but rather to help facilitate idempotency for the resource itself. That said, it may be possible that these attributes are being used in a way that modifies the system state"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:9
# 0ca00d1d1c2c4577a55696a7391770a1
msgid "The closer the current state of the system is to the desired state, the more useful |whyrun| mode will be. For example, if a full run-list is run against a fresh system, that run-list may not be completely correct on the first try, but also that run-list will produce more output than smaller run-list"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:5
# 4740348a93074cd2ae3bc3bec1cac1cb
msgid "The ``whyrun_supported?`` method is used to set a lightweight provider to support |whyrun| mode. The syntax for the ``whyrun_supported?`` method is as follows:"
msgstr ""

#: ../../../desktop/chef-docs/includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:13
# 5568bdac6e4f4bd594cf411e8ea00d48
msgid "where ``whyrun_supported?`` is set to ``true`` for any lightweight provider that supports using |whyrun| mode. When |whyrun| mode is supported by the a lightweight provider, the ``converge_by`` method is used to define the strings that are logged by the |chef client| when it is run in |whyrun| mode."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:59
# 0cff29c2b56a4deb8377eee99bb34d75
msgid "Condition Statements"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_conditions.rst:5
# 303613902aec4bc19a16b50d09e984a2
msgid "A lightweight provider can use any conditional statement that can be used in |ruby|: ``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, and ``for``. A condition statement can test for:"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_conditions.rst:7
# d5711a504ec84233acac4a11ea60b7dc
msgid "A |ruby| class (such as ``::File`` or ``::String``)"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_conditions.rst:8
# 619193bec8b04e0d90c0f8b5d50ae733
msgid "A ``Chef`` class (such as ``::Chef::Mixin::ShellOut``)"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_conditions.rst:9
# 6979ca7e23c54ee0a088f801a94beee9
msgid "Conditions present on the node by using ``@current_resource``"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_conditions.rst:10
# c31fafd2ec6c4b1eaec74c8baa790409
msgid "Conditions present within the resource being processed by the |chef client| during the |chef client| run by using ``new_resource`` or ``@new_resource``"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_conditions.rst:11
# a51f7f0a729c4a0a87c0f674c0f41164
msgid "To verify if a resource was updated by using ``updated_by_last_action``, for example: ``@new_resource.updated_by_last_action``"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_conditions.rst:13
# 1e5b6101ccb244fe9ad3406f18b6eebe
msgid "and so on."
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_conditions.rst:15
# 4798e2587ca148b89706cc98dcc31ca1
msgid "For example, an ``if`` statement is used to check if a file exists (``::File.exists?``), and then if the file exists to delete a key from that file."
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_conditions.rst:29
# ed267c7c73684fa1ab7757cabf05992e
msgid "In the following example an ``unless`` statement is used to add a key, unless that node object already has that key assigned to it:"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:63
# 7bd22acb88064fb4a5b26fdf4a5dec4a
msgid "Log Entries"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_logs.rst:5
# d6bd191ef45a47f185192a2610c2c9b1
msgid "Use the ``Chef::Log`` class in a lightweight provider to define log entries that are created during a |chef client| run. The syntax for a log message is as follows:"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_logs.rst:11
# 63f3a8bff4ae4d7c8cd90cb51f7e1fbb
msgid "where"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_logs.rst:13
# 4895268770dc4a6e94e03ac80aed1af6
msgid "``log_type`` can be ``.debug``, ``.info``, ``.warn``, ``.error``, or ``.fatal``"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_logs.rst:14
# 4d034170ba584428a0fb4cfffeca1778
msgid "``\"message\"`` is the message that is logged. For example: ``\"#{@new_resource} added module '#{@new_resource.module_name}'\"`` or ``\"#{@new_resource} module already exists - nothing to do\"``"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_logs.rst:16
# 8c5be9f669634309a8fc57b2c182effc
msgid "For example, from the ``repository.rb`` provider in the |cookbook yum| cookbook:"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_logs.rst:27
# 0265ef9dd24a443ab76ba4070e1f0a09
msgid "where the ``Chef::Log`` class appends ``.info`` as the log type. If the name of the repo was \"foo\", then the log message would be \"Adding foo repository to /etc/yum.repos.d/foo.repo\"."
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_logs.rst:29
# eea813afb4ab41fea4fb8a70efe600ee
msgid "Another example shows two log entries, one that is triggered when a service is being restarted, and then another that is triggered after the service has been restarted:"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:67
# 9f5198f7f534479f9dbb52d4b35138b0
msgid "rescue"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_logs_rescue.rst:5
# dbc796393c4644b49deb863229220a67
msgid "Use the ``rescue`` clause to make sure that a log message is always provided. For example:"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:71
# a72a9abb775042438c9922cfd4faf4c4
msgid "Libraries"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_library.rst:5
# 49c3c988974b4d32a43f0b99aecad1ee
msgid "A lightweight provider can extend another provider class. This can be done as a ``mixin``, which is then placed in a library under the ``library/`` directory of any cookbook that will use the extended provider class. The lightweight provider is then written to include that library in its implementation so that it has access to the extended platform resource. Use the ``include`` method in the lightweight provider to ensure that a lightweight provider has access to an external library."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:75
# 4c0ee40daaf84a03bdc767411fe161fd
msgid "Examples"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:76
# 9f8c9bcbd9054fc0b925c198c3c42e24
msgid "The following examples show various lightweight providers that rely on custom |ruby| code."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/lwrp_custom_provider_ruby.rst:79
# ec77424d313344879316cda0d948ddef
msgid "rbenv_global"
msgstr ""

#: ../../../desktop/chef-docs/includes_lwrp/includes_lwrp_custom_provider_example_rbenv_global.rst:5
# ceca39c5992142a9933f070ff936a360
msgid "The ``rbenv_global`` lightweight provider from the `chef-rbenv <https://github.com/fnichol/chef-rbenv>`_ cookbook shows a custom lightweight provider that  sets the global version of |ruby|:"
msgstr ""

