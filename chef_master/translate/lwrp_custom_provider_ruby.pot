# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-29 11:08-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/lwrp_custom_provider_ruby.rst:8
# ce290973d0bb43849dedc6c023f54e84
msgid "Lightweight Providers w/Custom Ruby"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_provider.rst:4
# 4585e341770847cead8ab1ae8d749d42
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider.rst:5
# ef425fd32a4744b89c048a016accc605
msgid "A lightweight provider is a custom provider that defines the steps that are required to complete one (or more) actions defined by a lightweight resource. A lightweight provider and lightweight resource work together, each being defined in the same cookbook (the ``/providers`` and ``/resources`` subdirectories, respectively); together, they are referred as a |lwrp| (or \"lightweight resource/provider\"). A lightweight provider is always authored using |ruby|. Anything that can be done using |ruby| can be done in a lightweight provider. In addition to using |ruby|, the |dsl provider| provides additional methods that are specific to the |chef client|."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:15
# 679b1861ce8345a2b13495d15599c85a
msgid "Syntax"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:5
# e6ba50cbc23b4982b0f6d54f82de057a
msgid "This section shows some of the common structural elements that appear in a lightweight provider that is built using custom |ruby| code. Remember:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:7
# 160549b32fc24f149f5ff40e8cf850f8
msgid "A lightweight provider tells the |chef client| how to complete a task"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:8
# b515bcc0582e45339e06a466656c529e
msgid "The structure of a lightweight provider will vary, depending on the complexity of the tasks required to complete an action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:9
# b7771eaaa3b74a4ab622402879c52bb9
msgid "At its platform, a lightweight provider is just |ruby| code, which means that anything that can be done in |ruby| can be done in a lightweight provider"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:11
# 39a3cbd3bad049eb9f1d403b6a5a7084
msgid "The basic syntax for a lightweight provider that is built using custom |ruby| code is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:39
#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:22
#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:11
# 9bc87c1a1fa1415697ccbca418b4de2d
# 4e9a034343c24708b689f20c1127a49c
# 81d8cefe02604841b23ecaaf0360639d
msgid "where:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:41
# 4c79bdd4ae2e41febbb029aea0e38909
msgid "``require`` is a standard |ruby| method that allows a lightweight provider to require modules that are not located in the current cookbook, such as a file located in the ``chef/mixin`` directory"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:42
# de787578963b450f8783356c51e6de3d
msgid "``include`` is a standard |ruby| method that allows a lightweight provider to include a class, such as ``Chef::Mixin::ShellOut`` or ``Windows::Helper``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:43
# 1419bab3b7aa4e64825fba7c7fe3e996
msgid "``whyrun_supported?`` indicates whether a lightweight provider can be run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:44
# eab36ce0dc7a4739948b7ef3b926d84c
msgid "``action`` is the code block that tells the |chef client| what to do when the ``:action_name`` is used in a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:45
# 258bb1ae9f544f56aff978c6e79fdaa4
msgid "``converge_by()`` is used to provide a ``\"message\"`` to be returned when a resource is run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:46
# 87e2c5b0664f4639b049404d4f02c06d
msgid "``condition`` is a |ruby| condition statement (``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, or ``for``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:47
# afb928661fe54ba1ab375d30ce7a4906
msgid "``test`` is used to test for idempotence; ``test`` can be defined inline within the ``action`` block, defined as a method using a ``def`` block elsewhere in the lightweight provider (shown as ``def test()``), or defined using any other pattern that is available in |ruby|"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:48
# fd1f5bf588e24efa9d4a9a3a4ee15878
msgid "``Chef::Log.log_type`` is used to tell the |chef client| to create a log entry, where ``log_type`` is one of the following types: ``debug``, ``info``, ``warn``, ``error``, or ``fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:49
# aa07ec65a9a648bea3b5a16bcfe57f80
msgid "``updated_by_last_action`` is used to notify that a node was updated successfully"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:51
# 3eb0116fc0874490887bf29f5f3713a8
msgid "Also, commonly used methods (but not shown in the previous example) are ``current_resource``, ``load_current_resource``, and ``new_resource``."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:53
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:7
#: ../../includes_lwrp/includes_lwrp_custom_provider_library.rst:7
# 72df1dea096240f09f35edd981aa59a4
# 2774af10ec4c47beb1ffd64f282a8bad
# 79114cccb73c460c9a5298f0d7987193
# 3c2b8fecbd054d5f911cc4a5e7c50c4c
# 4b5eda96458a42e5960ecd4684335f4f
# cb406ac6fc854dd8a72bcae8c87fd74b
msgid "For example:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:19
# 0488022874f6499abc4afc1566bd28f3
msgid "|dsl provider| Methods"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider.rst:5
# ab2c7ad0ecdf4692ab0763aa172a4f8c
msgid "The |dsl provider| is a |ruby| DSL that is used to help define a lightweight provider and to ensure that a lightweight provider takes the correct actions when it is called from a recipe. The |dsl provider| is a small DSL with just a few methods that are specific to the |chef client|. Because the |dsl provider| is a |ruby| DSL, anything that can be done using |ruby| can also be done when defining a lightweight provider."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:23
# bdb1063cba2c4a65bd3f75f8fd47960e
msgid "action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:5
# a0c78c7002924ded8ae028047fbab85d
msgid "The ``action`` method is used to define the steps that will be taken for each of the possible actions defined by the lightweight resource. Each action must be defined in separate ``action`` blocks within the same file. The syntax for the ``action`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:24
# 5ed29c5b6c7c42e4a0f0726e797c4da5
msgid "``:action_name`` corresponds to an action defined by a lightweight resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:25
# 27a81259dfd54c4885922ef4bebff882
msgid "``if @current_resource.exists`` is a condition test that is using an instance variable to see if the object already exists; this is an example of a test for idempotency"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:26
# e9c605d549954a52a7918958f7d74a0f
msgid "If the object already exists, a ``#{ @new_resource } already exists - nothing to do.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:27
# a4dab207284848448e33e7fae2f11da3
msgid "If the object does not already exists, the ``resource`` block is run. This block is a recipe that tells the |chef client| what to do. A ``#{ @new_resource } created.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:28
# 5ae73746862b4d4b9f3ee223ba19af80
msgid "``converge_by`` tells the |chef client| which message to provide when the |chef client| is run in |whyrun| mode"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:27
# 1e414f8886ba467aa25182bdd75d4cc5
msgid "converge_by"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:5
# ba874f3b778b4f9e9e8680c8539a2b66
msgid "The ``converge_by`` method is a wrapper that is used to tell the |chef client| what do if a resource is run in |whyrun| mode. The syntax for the ``converge_by`` method is:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:13
# e600f38402814094b31bd43a134b4ae8
msgid "``converge_by()`` is added to an ``action`` block as a wrapper"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:14
# 1e42f340b0f94083b37a6716399537f6
msgid "``\"message\"`` is the message that the |chef client| returns when it is run in |whyrun| mode"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:16
# a57e24454038497d982b48b32a8040a6
msgid "Some examples:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:38
# 534c9089e547472aa01bc0d46e5a9a96
msgid "where the last example shows using a variable (``description``) as the ``\"message\"`` in the ``converge_by`` block."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:40
# 397c2fd3e2964649930cb5df356e846f
msgid "An example of the ``converge_by`` method being used in the `directory <https://github.com/opscode/chef/blob/master/lib/chef/provider/directory.rb>`_ provider, which is a platform resource:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:65
# 6d296524649b4663a4742f8aaf9bd701
msgid "|whyrun| mode is already enabled for platform resources. When platform resources are used as part of the ``action`` block in a lightweight provider, only the ``whyrun_supported?`` is required to allow the |chef client| to run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:31
# deaf3cf0f42d44cfa81282c185b4b671
msgid "current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:5
# 2222a7a892f14ffabdc47fc6de9af3e5
msgid "The ``current_resource`` method is used to represent a resource as it exists on the node at the beginning of the |chef client| run. In other words: what the resource is currently. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state. This method is often used as an instance variable (``@current_resource``)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:25
# 20dacb85a98f4336a2b7aa0b1b50335a
msgid "where the ``unless`` conditional statement checks to make sure the resource doesn't already exist on a node, and then runs a series of commands when it doesn't. If the resource already exists, the log entry would be \"Foo app already exists - nothing to do.\""
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:35
# 42530f29b3724a52ab58568bc96234e3
msgid "load_current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:5
# 1a7b8073886441048b3052980e9c8f84
msgid "The ``load_current_resource`` method is used to find a resource on a node based on a collection of attributes. These attributes are defined in a lightweight resource and are loaded by the |chef client| when processing a recipe during a |chef client| run. This method will ask the |chef client| to look on the node to see if a resource exists with specific matching attributes."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:26
# 35c276ab94974ffc8752cf8b4152a4a0
msgid "In the previous example, if a resource exists with matching attributes, the |chef client| does nothing and if a resource does not exist with matching attributes, the |chef client| will enforce the state declared in ``new_resource``."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:39
# 30f1f87f9a844ce79dffc91d7b2b2c63
msgid "new_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:5
# 938a2fe2ae2045e193b025a3bdf6686d
msgid "The ``new_resource`` method is used to represent a resource as loaded by the |chef client| during the |chef client| run. In other words: what the resource should be. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:23
# e4eb6ab49781417f9e9548cefbf859c9
msgid "where the |chef client| checks to see if the file exists, then if the file is writable, and then attempts to delete the resource. ``path`` is an attribute of the new resource that is defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:43
# aec94772bd6c4f21b0cb05c29e4bc468
msgid "require"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:5
# 6c2991ecb9c94aa2a049d0fcb14c6f96
msgid "The ``require`` method is used point the |chef client| to the location of an external class library."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:47
# 5c165cbda3a24fae81ad1a29aa307672
msgid "updated_by_last_action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_ruby.rst:5
# 22d71f8f830644f5bfd556e166b0828b
msgid "The ``updated_by_last_action`` method is used to notify a lightweight resource that a node was updated successfully. For example, the ``bluepill_service`` lightweight resource in the |cookbook bluepill| cookbook uses this method:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:51
# d9199ee41ddb4b67a48e6f96028150cd
msgid "whyrun_supported?"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:5
# 10299a1ed7394355b77cde994fc5d089
msgid "|whyrun| mode is a way to see what the |chef client| would have configured, had an actual |chef client| run occurred. This approach is similar to the concept of \"no-operation\" (or \"no-op\"): decide what should be done, but then don't actually do anything until it's done right. This approach to configuration management can help identify where complexity exists in the system, where inter-dependencies may be located, and to verify that everything will be configured in the desired manner."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:7
# 79d6cd1ebfd14fe091f086ad7e9f0dae
msgid "When |whyrun| mode is enabled, a |chef client| run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the |chef server|, rebuilding the node object, expanding the run list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:9
# 817203161d42450ab521686d906f763a
msgid "why-run mode is not a replacement for running cookbooks in a test environment that mirrors the production environment. |company_name| uses why-run mode to learn more about what is going on, but also test-kitchen on developer systems, along with an internal |openstack| cloud and external cloud providers to test more thoroughly."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:5
# d4b344c10ba64462b85f0b59ab4dad39
msgid "When the |chef client| is run in |whyrun| mode, certain assumptions are made:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:7
# 94d45ce55c484c18a6443314169e049d
msgid "If the |resource service| resource cannot find the appropriate command to verify the status of a service, |whyrun| mode will assume that the command would have been installed by a previous resource and that the service would not be running"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:8
# e5cecfd13f434674a04f1458087d1399
msgid "For ``not_if`` and ``only_if`` attribute, |whyrun| mode will assume these are commands or blocks that are safe to run. These conditions are not designed to be used to change the state of the system, but rather to help facilitate idempotency for the resource itself. That said, it may be possible that these attributes are being used in a way that modifies the system state"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:9
# 330e2501ebf24b8ba116c129c0bf5ee7
msgid "The closer the current state of the system is to the desired state, the more useful |whyrun| mode will be. For example, if a full run-list is run against a fresh system, that run-list may not be completely correct on the first try, but also that run-list will produce more output than smaller run-list"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:5
# 9c6e4a72e53d45eaa855e19ea21387e9
msgid "The ``whyrun_supported?`` method is used to set a lightweight provider to support |whyrun| mode. The syntax for the ``whyrun_supported?`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:13
# 63d7db03784b4b2cb271a8bc2740f7f2
msgid "where ``whyrun_supported?`` is set to ``true`` for any lightweight provider that supports using |whyrun| mode. When |whyrun| mode is supported by the a lightweight provider, the ``converge_by`` method is used to define the strings that are logged by the |chef client| when it is run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:59
# 2c9171b8eb984e40bb7e4fcd07309c25
msgid "Condition Statements"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:5
# 52f3c107cf654198aba2e562ac1ca35b
msgid "A lightweight provider can use any conditional statement that can be used in |ruby|: ``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, and ``for``. A condition statement can test for:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:7
# df2f593d7a8c4635ba7eedc63773fa41
msgid "A |ruby| class (such as ``::File`` or ``::String``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:8
# 6c0774533ec54957bfb17ae205702fb7
msgid "A ``Chef`` class (such as ``::Chef::Mixin::ShellOut``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:9
# 8b1a75f4670746169340ac3efbd460e9
msgid "Conditions present on the node by using ``@current_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:10
# da0141163c044d44a1d825243dbeef35
msgid "Conditions present within the resource being processed by the |chef client| during the |chef client| run by using ``new_resource`` or ``@new_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:11
# 3238dea3ec65487381c618ede7682cde
msgid "To verify if a resource was updated by using ``updated_by_last_action``, for example: ``@new_resource.updated_by_last_action``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:13
# 851882b0d0e24a83a1e1235e44c4ffe0
msgid "and so on."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:15
# 58de3dae485d4f4fb79a56efcbff4a1d
msgid "For example, an ``if`` statement is used to check if a file exists (``::File.exists?``), and then if the file exists to delete a key from that file."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:29
# 5c34442ba796479c8dc5196dcf41f726
msgid "In the following example an ``unless`` statement is used to add a key, unless that node object already has that key assigned to it:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:63
# b963efd322a843a4a923ab39d1c5dda2
msgid "Log Entries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:5
# a3bd1ba224034063a4e8fb478fee19a5
msgid "Use the ``Chef::Log`` class in a lightweight provider to define log entries that are created during a |chef client| run. The syntax for a log message is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:11
# 614b88df1f0342f69a328c6fa5235769
msgid "where"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:13
# b24aeb220a78496f8760f8185329e802
msgid "``log_type`` can be ``.debug``, ``.info``, ``.warn``, ``.error``, or ``.fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:14
# 48c35267f365488f92e9fe8bb5114c43
msgid "``\"message\"`` is the message that is logged. For example: ``\"#{@new_resource} added module '#{@new_resource.module_name}'\"`` or ``\"#{@new_resource} module already exists - nothing to do\"``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:16
# a37d13e54bd5413cbcb456f173b0044a
msgid "For example, from the ``repository.rb`` provider in the |cookbook yum| cookbook:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:27
# ed679e59576a45718b02f97e2f8c29a8
msgid "where the ``Chef::Log`` class appends ``.info`` as the log type. If the name of the repo was \"foo\", then the log message would be \"Adding foo repository to /etc/yum.repos.d/foo.repo\"."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:29
# f860bad8c5764fe7b657ee7f7aab6d44
msgid "Another example shows two log entries, one that is triggered when a service is being restarted, and then another that is triggered after the service has been restarted:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:67
# c11aa43c57624652b9c1676c4f927b9c
msgid "rescue"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs_rescue.rst:5
# 63fcefb5607d4253bcbc9ccd7acba1a4
msgid "Use the ``rescue`` clause to make sure that a log message is always provided. For example:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:71
# 7d3380c4991d47108f2db1e490bbbd41
msgid "Libraries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_library.rst:5
# f50e76ec13124423838e172ddf0b27e3
msgid "A lightweight provider can extend another provider class. This can be done as a ``mixin``, which is then placed in a library under the ``library/`` directory of any cookbook that will use the extended provider class. The lightweight provider is then written to include that library in its implementation so that it has access to the extended platform resource. Use the ``include`` method in the lightweight provider to ensure that a lightweight provider has access to an external library."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:75
# 956e95458b1d4a26a502acfa470782e3
msgid "Examples"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:76
# aa0c2ec367f34d49a475b9bfe5cbd321
msgid "The following examples show various lightweight providers that rely on custom |ruby| code."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:79
# 14db01d36d9844ff88d6121d7136e1eb
msgid "rbenv_global"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rbenv_global.rst:5
# 5920cc123a3e4d18b6e7ea946a942ece
msgid "The ``rbenv_global`` lightweight provider from the `chef-rbenv <https://github.com/fnichol/chef-rbenv>`_ cookbook shows a custom lightweight provider that  sets the global version of |ruby|:"
msgstr ""

