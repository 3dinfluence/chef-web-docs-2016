# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-11 15:41\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/lwrp_custom_provider_ruby.rst:8
# 8737131cbf0f428da6b5857c6a49b30d
msgid "Lightweight Providers w/Custom Ruby"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_provider.rst:4
# ee6f8ed5560c417886b43266c6a2e27d
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state. These steps are de-coupled from the request itself. The request is made in a recipe and is defined by a lightweight resource. The steps are then defined by a lightweight provider."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider.rst:5
# 71f1ee3437a84e0d89083ca84a31a371
msgid "A lightweight provider is a custom provider that defines the steps that are required to complete one (or more) actions defined by a lightweight resource. A lightweight provider and lightweight resource work together, each being defined in the same cookbook (the ``/providers`` and ``/resources`` subdirectories, respectively); together, they are referred as a |lwrp| (or \"lightweight resource/provider\"). A lightweight provider is always authored using |ruby|. Anything that can be done using |ruby| can be done in a lightweight provider. In addition to using |ruby|, the |dsl provider| provides additional methods that are specific to the |chef client|."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:15
# fb395c260eb8477bad3e0c0faaa9a9b9
msgid "Syntax"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:5
# 0a1dddd646c847af832f65af08fdaa1f
msgid "This section shows some of the common structural elements that appear in a lightweight provider that is built using custom |ruby| code. Remember:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:7
# f9488b0e378342bbb936834f68892091
msgid "A lightweight provider tells the |chef client| how to complete a task"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:8
# a5fb1d87a5804e6686371ed32663a2c9
msgid "The structure of a lightweight provider will vary, depending on the complexity of the tasks required to complete an action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:9
# 3e6046a0e30e4288a1c47d90c9123f16
msgid "At its platform, a lightweight provider is just |ruby| code, which means that anything that can be done in |ruby| can be done in a lightweight provider"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:11
# cde424ec64e9491e8da14435eda68385
msgid "The basic syntax for a lightweight provider that is built using custom |ruby| code is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:39
#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:22
#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:11
# 104e9b30d0dd4393a4158122c24d49d8
# fcfebb17fe684eb88e4c14387416ed3c
# 691d1d3c51a44da4be484a15a577d460
msgid "where:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:41
# 7a84b2ac7bce4abaaccb25903d056746
msgid "``require`` is a standard |ruby| method that allows a lightweight provider to require modules that are not located in the current cookbook, such as a file located in the ``chef/mixin`` directory"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:42
# 7a1e567003c141b4968498c0e6e1adef
msgid "``include`` is a standard |ruby| method that allows a lightweight provider to include a class, such as ``Chef::Mixin::ShellOut`` or ``Windows::Helper``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:43
# e9a66336f39b40218b10735e4c255cd9
msgid "``whyrun_supported?`` indicates whether a lightweight provider can be run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:44
# 3d8d89dd654a49db916af96d8a8dabf6
msgid "``action`` is the code block that tells the |chef client| what to do when the ``:action_name`` is used in a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:45
# 5867393556274ce79c4814f830ea2f39
msgid "``converge_by()`` is used to provide a ``\"message\"`` to be returned when a resource is run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:46
# d731a3a29f814f1a9a1b3e4974028503
msgid "``condition`` is a |ruby| condition statement (``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, or ``for``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:47
# 434df02ba4104ddc8b7ab716a3e39f00
msgid "``test`` is used to test for idempotence; ``test`` can be defined inline within the ``action`` block, defined as a method using a ``def`` block elsewhere in the lightweight provider (shown as ``def test()``), or defined using any other pattern that is available in |ruby|"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:48
# 5970749cb22843e981083f3fd48bc199
msgid "``Chef::Log.log_type`` is used to tell the |chef client| to create a log entry, where ``log_type`` is one of the following types: ``debug``, ``info``, ``warn``, ``error``, or ``fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:49
# befb6d1cfe8c44b6bb28b6678a8c53f8
msgid "``updated_by_last_action`` is used to notify that a node was updated successfully"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:51
# f7c52b3fab1943b39b4a71a08e0a41c4
msgid "Also, commonly used methods (but not shown in the previous example) are ``current_resource``, ``load_current_resource``, and ``new_resource``."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:53
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:7
#: ../../includes_lwrp/includes_lwrp_custom_provider_library.rst:7
# 4de48e16a887404c9d0dfaec99ca05d6
# 549cb965d29540769a8f9d277b8a37de
# fed8ec7583ef4009bd16b74c485eab34
# 0ab6b082717e40a19fdb731d7e16cf5b
# 069b1515c53b4392ac6c7ad0841c4d5d
# b3d7d2c41e014e288f2f251b15f8d886
msgid "For example:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:19
# 23cacf7d730947159550414c60cc3844
msgid "|dsl provider| Methods"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider.rst:5
# 3d60cf549c9a4771840d933832adc033
msgid "The |dsl provider| is a |ruby| DSL that is used to help define a lightweight provider and to ensure that a lightweight provider takes the correct actions when it is called from a recipe. The |dsl provider| is a small DSL with just a few methods that are specific to the |chef client|. Because the |dsl provider| is a |ruby| DSL, anything that can be done using |ruby| can also be done when defining a lightweight provider."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:23
# aeb481c29b6b4f08865d98e7bfa208b1
msgid "action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:5
# 95de81acf365480db7466bb8c7a8c9be
msgid "The ``action`` method is used to define the steps that will be taken for each of the possible actions defined by the lightweight resource. Each action must be defined in separate ``action`` blocks within the same file. The syntax for the ``action`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:24
# 76b6971aad674da6ac4f310651b969de
msgid "``:action_name`` corresponds to an action defined by a lightweight resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:25
# 824e212ffac5490286b7e3eb9c6329cd
msgid "``if @current_resource.exists`` is a condition test that is using an instance variable to see if the object already exists; this is an example of a test for idempotency"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:26
# 57bc04970ed34947993c691cf06c4615
msgid "If the object already exists, a ``#{ @new_resource } already exists - nothing to do.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:27
# 8ecdabdf836e4951b15dab490410612a
msgid "If the object does not already exists, the ``resource`` block is run. This block is a recipe that tells the |chef client| what to do. A ``#{ @new_resource } created.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:28
# 7f07502b99d2475b81947421dd05c49d
msgid "``converge_by`` tells the |chef client| which message to provide when the |chef client| is run in |whyrun| mode"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:27
# 35bf4614c76a42038ada62472db53a03
msgid "converge_by"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:5
# 46f0453dc9fb43df979583278c59abf6
msgid "The ``converge_by`` method is a wrapper that is used to tell the |chef client| what do if a resource is run in |whyrun| mode. The syntax for the ``converge_by`` method is:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:13
# 7865af1f572a478ebbe68b461d24f28c
msgid "``converge_by()`` is added to an ``action`` block as a wrapper"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:14
# 9d06c9e703e84ad68050b8386786e79a
msgid "``\"message\"`` is the message that the |chef client| returns when it is run in |whyrun| mode"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:16
# e0d0bc32550345e0ad68d11279786a8a
msgid "Some examples:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:38
# 25111da58a5745fdab7c4e1fe96b29e1
msgid "where the last example shows using a variable (``description``) as the ``\"message\"`` in the ``converge_by`` block."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:40
# 2ace740949044fb89dd9ff5e076c3794
msgid "An example of the ``converge_by`` method being used in the `directory <https://github.com/opscode/chef/blob/master/lib/chef/provider/directory.rb>`_ provider, which is a platform resource:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:65
# 667f49cddee54f229e30b9439e8a85c8
msgid "|whyrun| mode is already enabled for platform resources. When platform resources are used as part of the ``action`` block in a lightweight provider, only the ``whyrun_supported?`` is required to allow the |chef client| to run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:31
# 6da79a4539cd4f5499aca196e4e6472d
msgid "current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:5
# 7da1448cf9df4b09a68705369e6627c0
msgid "The ``current_resource`` method is used to represent a resource as it exists on the node at the beginning of the |chef client| run. In other words: what the resource is currently. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state. This method is often used as an instance variable (``@current_resource``)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:25
# 175a4636670048548144359671cc2a4b
msgid "where the ``unless`` conditional statement checks to make sure the resource doesn't already exist on a node, and then runs a series of commands when it doesn't. If the resource already exists, the log entry would be \"Foo app already exists - nothing to do.\""
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:35
# 148836c082f84cb69f513d02aa28cbc0
msgid "load_current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:5
# 1bd18d3b3a034cbdbdb7608d369554da
msgid "The ``load_current_resource`` method is used to find a resource on a node based on a collection of attributes. These attributes are defined in a lightweight resource and are loaded by the |chef client| when processing a recipe during a |chef client| run. This method will ask the |chef client| to look on the node to see if a resource exists with specific matching attributes."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:26
# 15028dec9562457bb3d95870cacd13c4
msgid "In the previous example, if a resource exists with matching attributes, the |chef client| does nothing and if a resource does not exist with matching attributes, the |chef client| will enforce the state declared in ``new_resource``."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:39
# 3cdf2426a09141e4ac6c08928b5bb5bb
msgid "new_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:5
# bd64c336f6604017aecd021fc7373ed2
msgid "The ``new_resource`` method is used to represent a resource as loaded by the |chef client| during the |chef client| run. In other words: what the resource should be. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:23
# a772841ba2c84c02acf7f788bd519ffd
msgid "where the |chef client| checks to see if the file exists, then if the file is writable, and then attempts to delete the resource. ``path`` is an attribute of the new resource that is defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:43
# 24f37ee7d1884a19bd6d1f987d1001a0
msgid "require"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:5
# cb0eed63b3c64e4f954489e0c10e7f89
msgid "The ``require`` method is used point the |chef client| to the location of an external class library."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:13
# cb78514fc8684e16b2490204b1a230d5
msgid "The |chef client| will attempt to fully qualify the name of any class by prepending ``Chef::`` to the loaded class. For example both:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:19
# 2bf140975a0749e7841315467dff31c8
msgid "and:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:25
# 01d2db266f71487092dc733351e21560
msgid "are both understood by the |chef client| in the same way: ``Chef::Mixin::ShellOut``."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:27
# 6eae40d13eda4504a6dd2541c71e0e8f
msgid "When a class is an external class (and therefore should not have ``Chef::`` prepended), use ``::`` to let the |chef client| know. For example:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:47
# f6b5887f7a884cecb44fea9ca2953875
msgid "updated_by_last_action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_ruby.rst:5
# e3c2f188b36b493887ff4ac0b8bd6eec
msgid "The ``updated_by_last_action`` method is used to notify a lightweight resource that a node was updated successfully. For example, the ``bluepill_service`` lightweight resource in the |cookbook bluepill| cookbook uses this method:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:51
# 5e8d8086b3704d648966597d5855e9b1
msgid "whyrun_supported?"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:5
# c550880837e14bac9129baf68aac4d0d
msgid "|whyrun| mode is a way to see what the |chef client| would have configured, had an actual |chef client| run occurred. This approach is similar to the concept of \"no-operation\" (or \"no-op\"): decide what should be done, but then don't actually do anything until it's done right. This approach to configuration management can help identify where complexity exists in the system, where inter-dependencies may be located, and to verify that everything will be configured in the desired manner."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:7
# 6f4e5aea057c4c7a9dbf81f00d674f53
msgid "When |whyrun| mode is enabled, a |chef client| run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the |chef server|, rebuilding the node object, expanding the run list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:9
# c812756ee96c4283989ae9cb46978fc6
msgid "why-run mode is not a replacement for running cookbooks in a test environment that mirrors the production environment. |company_name| uses why-run mode to learn more about what is going on, but also test-kitchen on developer systems, along with an internal |openstack| cloud and external cloud providers to test more thoroughly."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:5
# 27297e78accc40a8a0a4af007f70ae1e
msgid "When the |chef client| is run in |whyrun| mode, certain assumptions are made:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:7
# dcd0cb5aac4b4c5194ca735277ee198a
msgid "If the |resource service| resource cannot find the appropriate command to verify the status of a service, |whyrun| mode will assume that the command would have been installed by a previous resource and that the service would not be running"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:8
# 015899697b2a4ccb80f0bb31c99dcfb1
msgid "For ``not_if`` and ``only_if`` attribute, |whyrun| mode will assume these are commands or blocks that are safe to run. These conditions are not designed to be used to change the state of the system, but rather to help facilitate idempotency for the resource itself. That said, it may be possible that these attributes are being used in a way that modifies the system state"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:9
# 469f1c2d94644c7d9d2bd7c83b5974fe
msgid "The closer the current state of the system is to the desired state, the more useful |whyrun| mode will be. For example, if a full run-list is run against a fresh system, that run-list may not be completely correct on the first try, but also that run-list will produce more output than smaller run-list"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:5
# c318c62bf60045ed9024e574d54cd4f7
msgid "The ``whyrun_supported?`` method is used to set a lightweight provider to support |whyrun| mode. The syntax for the ``whyrun_supported?`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:13
# 3fec35463ccf4de8a713c8ef17bf72a9
msgid "where ``whyrun_supported?`` is set to ``true`` for any lightweight provider that supports using |whyrun| mode. When |whyrun| mode is supported by the a lightweight provider, the ``converge_by`` method is used to define the strings that are logged by the |chef client| when it is run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:59
# 1b726bb1481c4d4d831b90e02755f343
msgid "Condition Statements"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:5
# 624badcda82a4d009c579fc396d0bb5f
msgid "A lightweight provider can use any conditional statement that can be used in |ruby|: ``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, and ``for``. A condition statement can test for:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:7
# c0be451f5b1f4e678d37a5074f8c2c43
msgid "A |ruby| class (such as ``::File`` or ``::String``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:8
# 853a463d7c4a442f8fd7d9f8e1c26557
msgid "A ``Chef`` class (such as ``::Chef::Mixin::ShellOut``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:9
# d31c4b8ba0f74b3bbfd24c76416a09b8
msgid "Conditions present on the node by using ``@current_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:10
# 4c854bb76b8a44febe24d4cef0011026
msgid "Conditions present within the resource being processed by the |chef client| during the |chef client| run by using ``new_resource`` or ``@new_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:11
# 8e68d0ebd0754deabda6b63f0f3e86b1
msgid "To verify if a resource was updated by using ``updated_by_last_action``, for example: ``@new_resource.updated_by_last_action``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:13
# 0d374b6dfef74a4fab7d0c2212d21d45
msgid "and so on."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:15
# b0a1a76a0d0e42db812593c92c875c04
msgid "For example, an ``if`` statement is used to check if a file exists (``::File.exists?``), and then if the file exists to delete a key from that file."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:29
# 841b9269e2a7491090a0eb619bbfbd32
msgid "In the following example an ``unless`` statement is used to add a key, unless that node object already has that key assigned to it:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:63
# 0795c6debdc6487c8b44e98a4b49e06a
msgid "Log Entries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:5
# 110a152ffa5f4ee7895f587f72d00ab4
msgid "Use the ``Chef::Log`` class in a lightweight provider to define log entries that are created during a |chef client| run. The syntax for a log message is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:11
# 72eb27c5993d494cb61e9f99cbf3cee4
msgid "where"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:13
# 21900993a867490eb1726b9bca4c7ebe
msgid "``log_type`` can be ``.debug``, ``.info``, ``.warn``, ``.error``, or ``.fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:14
# 09b591d66ec241cda0cd88631af522f0
msgid "``\"message\"`` is the message that is logged. For example: ``\"#{@new_resource} added module '#{@new_resource.module_name}'\"`` or ``\"#{@new_resource} module already exists - nothing to do\"``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:16
# 38529bf203b140988b1be13dc98b0c44
msgid "For example, from the ``repository.rb`` provider in the |cookbook yum| cookbook:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:27
# 240696d1411841499abc5d80c8ffd4e1
msgid "where the ``Chef::Log`` class appends ``.info`` as the log type. If the name of the repo was \"foo\", then the log message would be \"Adding foo repository to /etc/yum.repos.d/foo.repo\"."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:29
# bda007fe6d27472a8e6610986e4750be
msgid "Another example shows two log entries, one that is triggered when a service is being restarted, and then another that is triggered after the service has been restarted:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:67
# 111fe048c31d49db98da8f648f95c25f
msgid "rescue"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs_rescue.rst:5
# caa146417986411ca9fb140c658e5f83
msgid "Use the ``rescue`` clause to make sure that a log message is always provided. For example:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:71
# 0138d65ddb7943d68825a5a5cf14b1ac
msgid "Libraries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_library.rst:5
# bf64538d0d074068b28c2e55c6d838a6
msgid "A lightweight provider can extend another provider class. This can be done as a ``mixin``, which is then placed in a library under the ``library/`` directory of any cookbook that will use the extended provider class. The lightweight provider is then written to include that library in its implementation so that it has access to the extended platform resource. Use the ``include`` method in the lightweight provider to ensure that a lightweight provider has access to an external library."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:75
# 9e420af098f941dd89ceb2d4f2ce1460
msgid "Examples"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:76
# a06db11e8de94f66aa6978c13f2f189e
msgid "The following examples show various lightweight providers that rely on custom |ruby| code."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:79
# c31aff6d941a4523a39d81c055e4a0da
msgid "rbenv_global"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rbenv_global.rst:5
# 5b9193489ee04a8cbe973f8a85a9c57e
msgid "The ``rbenv_global`` lightweight provider from the `chef-rbenv <https://github.com/fnichol/chef-rbenv>`_ cookbook shows a custom lightweight provider that  sets the global version of |ruby|:"
msgstr ""

