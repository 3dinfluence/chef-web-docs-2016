# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-13 10:10-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/lwrp_custom_provider_ruby.rst:7
# ad488b311e6e47028482437075c3d071
msgid "Lightweight Providers w/Custom Ruby"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_provider.rst:4
# 1cd11a2d887f41da972d8cdaef56a9fd
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider.rst:5
# 41717eea2f304aa492b56c905bdce257
msgid "A lightweight provider is a custom provider that defines the steps that are required to complete one (or more) actions defined by a lightweight resource. A lightweight provider and lightweight resource work together, each being defined in the same cookbook (the ``/providers`` and ``/resources`` subdirectories, respectively); together, they are referred as a |lwrp| (or \"lightweight resource/provider\"). A lightweight provider is always authored using |ruby|. Anything that can be done using |ruby| can be done in a lightweight provider. In addition to using |ruby|, the |dsl provider| provides additional methods that are specific to the |chef client|."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:14
# 168138d2c8fc4dea99151bb6a5060eca
msgid "Syntax"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:5
# 5a99327bf21441668b0dd68e1159d83b
msgid "This section shows some of the common structural elements that appear in a lightweight provider that is built using custom |ruby| code. Remember:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:7
# 7da63c801f3d42ea8c708468047e621b
msgid "A lightweight provider tells the |chef client| how to complete a task"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:8
# fee87b0cca8e40a6be6309aac5fac9be
msgid "The structure of a lightweight provider will vary, depending on the complexity of the tasks required to complete an action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:9
# fa94c6d8d018401b9362ddcef5da1c3b
msgid "At its platform, a lightweight provider is just |ruby| code, which means that anything that can be done in |ruby| can be done in a lightweight provider"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:11
# 7061e7ece1c84c4a86878175d837bebe
msgid "The basic syntax for a lightweight provider that is built using custom |ruby| code is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:39
#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:22
#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:11
# c7a6bb0e96aa4c1f9e8fa1a890a6eee2
# 06fde631de4f4637bfe6bba83d528fce
# e4f8bad6edf047fbb080cbc4bc8c9e0d
msgid "where:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:41
# 77870aee9c164c13abe21a4c7c3d9304
msgid "``require`` is a standard |ruby| method that allows a lightweight provider to require modules that are not located in the current cookbook, such as a file located in the ``chef/mixin`` directory"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:42
# 5c80d5088ad84bcc97c9d66e7466747e
msgid "``include`` is a standard |ruby| method that allows a lightweight provider to include a class, such as ``Chef::Mixin::ShellOut`` or ``Windows::Helper``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:43
# 1e0d665843dc4b39a198ceb6096d9b6f
msgid "``whyrun_supported?`` indicates whether a lightweight provider can be run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:44
# 0921ffd03d8a41069f0ec89a055fd029
msgid "``action`` is the code block that tells the |chef client| what to do when the ``:action_name`` is used in a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:45
# d768353f81314f0c81fdfe1ca6bcedb7
msgid "``converge_by()`` is used to provide a ``'message'`` to be returned when a resource is run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:46
# 15e5bc4e2f7d47ee8d6a28bae7813bb9
msgid "``condition`` is a |ruby| condition statement (``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, or ``for``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:47
# 639ab73c5c3d4046b8ec912d66374500
msgid "``test`` is used to test for idempotence; ``test`` can be defined inline within the ``action`` block, defined as a method using a ``def`` block elsewhere in the lightweight provider (shown as ``def test()``), or defined using any other pattern that is available in |ruby|"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:48
# a0554ff09458426583a687239c41bae2
msgid "``Chef::Log.log_type`` is used to tell the |chef client| to create a log entry, where ``log_type`` is one of the following types: ``debug``, ``info``, ``warn``, ``error``, or ``fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:49
# fec945b66ffd425390f03643cfc2ae3f
msgid "``updated_by_last_action`` is used to notify that a node was updated successfully"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:51
# a64f2ed86f484260bf16853cb692d181
msgid "Also, commonly used methods (but not shown in the previous example) are ``current_resource``, ``load_current_resource``, and ``new_resource``."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:53
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:7
#: ../../includes_lwrp/includes_lwrp_custom_provider_library.rst:7
# ddf28f010a3245b2b498a8f62028499d
# d4c57a60550840468f768ef111ece13d
# df811a2e26084a90a6caa6b4cc296f00
# 7d949a5889c94d578d4c6367c02e501d
# 06d7addb7c0b4244a1c4b180b93c15ef
# 3cf6030dbc274f528d9a3b52ed9756c6
msgid "For example:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:18
# 1f578ca13ae34a458c03dfa40d4ed09e
msgid "|dsl provider| Methods"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider.rst:5
# c50b44f335f247c085c2b4aa200f894c
msgid "The |dsl provider| is a |ruby| DSL that is used to help define a lightweight provider and to ensure that a lightweight provider takes the correct actions when it is called from a recipe. The |dsl provider| is a small DSL with just a few methods that are specific to the |chef client|. Because the |dsl provider| is a |ruby| DSL, anything that can be done using |ruby| can also be done when defining a lightweight provider."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:22
# fb8018244a974bc7937423e7ba2b48d1
msgid "action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:5
# f8b6dc7bcd2a4639bada916bae5995fb
msgid "The ``action`` method is used to define the steps that will be taken for each of the possible actions defined by the lightweight resource. Each action must be defined in separate ``action`` blocks within the same file. The syntax for the ``action`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:24
# 148d9becc19443719475a375548da5e6
msgid "``:action_name`` corresponds to an action defined by a lightweight resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:25
# 41e95fc6f17048d0b6ce4e7528ae127e
msgid "``if @current_resource.exists`` is a condition test that is using an instance variable to see if the object already exists; this is an example of a test for idempotency"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:26
# dedb69c21e5a458980cefa406e013d5e
msgid "If the object already exists, a ``#{ @new_resource } already exists - nothing to do.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:27
# 8e8e5f87f048440792bd92532ef30b6f
msgid "If the object does not already exists, the ``resource`` block is run. This block is a recipe that tells the |chef client| what to do. A ``#{ @new_resource } created.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:28
# 8a64c638dac9424f882b240355937c87
msgid "``converge_by`` tells the |chef client| which message to provide when the |chef client| is run in |whyrun| mode"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:26
# f52d23b58c8348f3baec6e241bd83b6a
msgid "converge_by"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:5
# d4ca058dbc03450f86156960c8a335cf
msgid "The ``converge_by`` method is a wrapper that is used to tell the |chef client| what do if a resource is run in |whyrun| mode. The syntax for the ``converge_by`` method is:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:13
# a4cfee645c194846b68c7d981361f7cd
msgid "``converge_by()`` is added to an ``action`` block as a wrapper"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:14
# d05be46e08c04bd59cdd8b3c3d79c856
msgid "``'message'`` is the message that the |chef client| returns when it is run in |whyrun| mode"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:16
# 3d712c2f02d3436e89d0540a9008fa60
msgid "Some examples:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:38
# 02eb2bfada6a447c92a2dce5c5b67793
msgid "where the last example shows using a variable (``description``) as the ``'message'`` in the ``converge_by`` block."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:40
# 6b1d3e50b8df4235aadba473750d608a
msgid "An example of the ``converge_by`` method being used in the `directory <https://github.com/chef/chef/blob/master/lib/chef/provider/directory.rb>`_ provider, which is a platform resource:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:65
# b36aeb743d494efea49fc7722623d533
msgid "|whyrun| mode is already enabled for platform resources. When platform resources are used as part of the ``action`` block in a lightweight provider, only the ``whyrun_supported?`` is required to allow the |chef client| to run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:30
# 3ca60214dae14092b0157453cc4fe6ea
msgid "current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:5
# 6fba0d3a3fbc479ca33841830e06c702
msgid "The ``current_resource`` method is used to represent a resource as it exists on the node at the beginning of the |chef client| run. In other words: what the resource is currently. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state. This method is often used as an instance variable (``@current_resource``)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:25
# c5ccc67ca3b345fe9c08162b7b82bd86
msgid "where the ``unless`` conditional statement checks to make sure the resource doesn't already exist on a node, and then runs a series of commands when it doesn't. If the resource already exists, the log entry would be ``Foo app already exists - nothing to do``."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:34
# 4020ca8fc4884a988d61e913beafbcd5
msgid "load_current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:5
# 412d6e56864844f19bc05ebb2a8e19fc
msgid "The ``load_current_resource`` method is used to find a resource on a node based on a collection of attributes. These attributes are defined in a lightweight resource and are loaded by the |chef client| when processing a recipe during a |chef client| run. This method will ask the |chef client| to look on the node to see if a resource exists with specific matching attributes."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:26
# a46cd4f124c2444195100a4a3c727325
msgid "In the previous example, if a resource exists with matching attributes, the |chef client| does nothing and if a resource does not exist with matching attributes, the |chef client| will enforce the state declared in ``new_resource``."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:38
# 116f2be86e47465fad66513155ff0c27
msgid "new_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:5
# 74f1d399475a440b9d3e0ec36dfaeda7
msgid "The ``new_resource`` method is used to represent a resource as loaded by the |chef client| during the |chef client| run. In other words: what the resource should be. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:23
# d593dcd676684ac8a4eae7f2d7a6fa77
msgid "where the |chef client| checks to see if the file exists, then if the file is writable, and then attempts to delete the resource. ``path`` is an attribute of the new resource that is defined by the lightweight resource."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:42
# aad208656075495880a019edcc82c14d
msgid "require"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:5
# a78436f9e3ad4a72aa4bb40c0e860ddf
msgid "The ``require`` method is used point the |chef client| to the location of an external class library."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:46
# ed42ceffd8634b8ca780122e84c3c1e4
msgid "updated_by_last_action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_ruby.rst:5
# f5575c5d0c6d4e07b58475a333e4d1b1
msgid "The ``updated_by_last_action`` method is used to notify a lightweight resource that a node was updated successfully. For example, the ``bluepill_service`` lightweight resource in the |cookbook bluepill| cookbook uses this method:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:50
# 47e9e6eee4084c2698dda8e3c7e49715
msgid "whyrun_supported?"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:5
# 17acf5636fd4407d8ae85cc0266fb47b
msgid "|whyrun| mode is a way to see what the |chef client| would have configured, had an actual |chef client| run occurred. This approach is similar to the concept of \"no-operation\" (or \"no-op\"): decide what should be done, but then don't actually do anything until it's done right. This approach to configuration management can help identify where complexity exists in the system, where inter-dependencies may be located, and to verify that everything will be configured in the desired manner."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:7
# c5252511635e47d6a86b342585eeae51
msgid "When |whyrun| mode is enabled, a |chef client| run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the |chef server|, rebuilding the node object, expanding the run list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:9
# 0c14cd20a3324214a37cc675fc8438d0
msgid "|whyrun| mode is not a replacement for running cookbooks in a test environment that mirrors the production environment. |company_name| uses |whyrun| mode to learn more about what is going on, but also |kitchen| on developer systems, along with an internal |openstack| cloud and external cloud providers to test more thoroughly."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:5
# 046b1b79be7d4a88b689dddf9afbbb1d
msgid "When the |chef client| is run in |whyrun| mode, certain assumptions are made:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:7
# 88ff5ee0fea14e5c9b4a50e1372d050c
msgid "If the |resource service| resource cannot find the appropriate command to verify the status of a service, |whyrun| mode will assume that the command would have been installed by a previous resource and that the service would not be running"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:8
# 7607a11814b7443b9c25dbc8a514d5b8
msgid "For ``not_if`` and ``only_if`` attribute, |whyrun| mode will assume these are commands or blocks that are safe to run. These conditions are not designed to be used to change the state of the system, but rather to help facilitate idempotency for the resource itself. That said, it may be possible that these attributes are being used in a way that modifies the system state"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:9
# d2e9c715d55a43f8a73adf20e9e502e2
msgid "The closer the current state of the system is to the desired state, the more useful |whyrun| mode will be. For example, if a full run-list is run against a fresh system, that run-list may not be completely correct on the first try, but also that run-list will produce more output than smaller run-list"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:5
# adfa9f2b4fd8420ca7be6b41c7be0b5a
msgid "The ``whyrun_supported?`` method is used to set a lightweight provider to support |whyrun| mode. The syntax for the ``whyrun_supported?`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:13
# 797e4094e9ec4b0d962727dcac62a84c
msgid "where ``whyrun_supported?`` is set to ``true`` for any lightweight provider that supports using |whyrun| mode. When |whyrun| mode is supported by the a lightweight provider, the ``converge_by`` method is used to define the strings that are logged by the |chef client| when it is run in |whyrun| mode."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:58
# 5ff28c14ed47468f80a4f2c357f017a5
msgid "Condition Statements"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:5
# 1d438b4e9d8843dfa3367d6509d7c3ec
msgid "A lightweight provider can use any conditional statement that can be used in |ruby|: ``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, and ``for``. A condition statement can test for:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:7
# a18354569eee49f9a62de23a0fa695c6
msgid "A |ruby| class (such as ``::File`` or ``::String``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:8
# 089955de6f9a4e339813ef496c25ad10
msgid "A ``Chef`` class (such as ``::Chef::Mixin::ShellOut``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:9
# 7da6a5ac0563408e9cc77bc54fa36df9
msgid "Conditions present on the node by using ``@current_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:10
# dbe7947b14aa499997b08a661cccc532
msgid "Conditions present within the resource being processed by the |chef client| during the |chef client| run by using ``new_resource`` or ``@new_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:11
# d95d622e50594646b6cb91df87bd0408
msgid "To verify if a resource was updated by using ``updated_by_last_action``, for example: ``@new_resource.updated_by_last_action``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:13
# 37c4d82529b54c65b3334b7b6b2084ef
msgid "and so on."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:15
# c33ca684129d4b6aa41db16826e4c0e0
msgid "For example, an ``if`` statement is used to check if a file exists (``::File.exists?``), and then if the file exists to delete a key from that file."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:29
# 24a351a8c34d45edbd3f80cc36bfe9c9
msgid "In the following example an ``unless`` statement is used to add a key, unless that node object already has that key assigned to it:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:62
# 80094b16b1ca406d96e063f22ccacde8
msgid "Log Entries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:5
# bf7ad3f9ff6a48d6a92a3abf96849faa
msgid "Use the ``Chef::Log`` class in a lightweight provider to define log entries that are created during a |chef client| run. The syntax for a log message is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:11
# 716fe6dd243f442a9863615556a6b50c
msgid "where"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:13
# 8570696e5b334d448bc0e9158df589ca
msgid "``log_type`` can be ``.debug``, ``.info``, ``.warn``, ``.error``, or ``.fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:14
# 6187f0f9087140568c973a21f439cb70
msgid "``'message'`` is the message that is logged. For example: ``\"#{@new_resource} added module '#{@new_resource.module_name}'\"`` or ``'#{@new_resource} module already exists - nothing to do'``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:16
# a5d9d5ec50fd4a34be1561f074051459
msgid "For example, from the ``repository.rb`` provider in the |cookbook yum| cookbook:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:27
# 649ad62f08e046049685305210593ebd
msgid "where the ``Chef::Log`` class appends ``.info`` as the log type. If the name of the repo was ``foo``, then the log message would be ``\"Adding foo repository to /etc/yum.repos.d/foo.repo\"``."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:29
# 1fd336dea45949aaa5004b036c324124
msgid "Another example shows two log entries, one that is triggered when a service is being restarted, and then another that is triggered after the service has been restarted:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:66
# 20e7769cd9374f2ba2d23b98ab576349
msgid "rescue"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs_rescue.rst:5
# 337ae6a05545496ca3c730ba151240b5
msgid "Use the ``rescue`` clause to make sure that a log message is always provided. For example:"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:70
# f120a4cbc1c3454380c7d1cb0027849a
msgid "Libraries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_library.rst:5
# bf7cf1f87f6740ff920339b02243ba8f
msgid "A lightweight provider can extend another provider class. This can be done as a ``mixin``, which is then placed in a library under the ``library/`` directory of any cookbook that will use the extended provider class. The lightweight provider is then written to include that library in its implementation so that it has access to the extended platform resource. Use the ``include`` method in the lightweight provider to ensure that a lightweight provider has access to an external library."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:74
# 0d50935cd6a64437b1cd00860f32d68e
msgid "Examples"
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:75
# c6497919e89648c7bbc192085f64fa17
msgid "The following examples show various lightweight providers that rely on custom |ruby| code."
msgstr ""

#: ../source/lwrp_custom_provider_ruby.rst:78
# b0771eec99a94f4791883ceed0a99a60
msgid "rbenv_global"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rbenv_global.rst:5
# 1537f21fe53e4ad5859be2efe09f4bd3
msgid "The ``rbenv_global`` lightweight provider from the `chef-rbenv <https://github.com/fnichol/chef-rbenv>`_ cookbook shows a custom lightweight provider that sets the global version of |ruby|:"
msgstr ""

