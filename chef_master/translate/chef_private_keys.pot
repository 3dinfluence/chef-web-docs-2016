# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-13 21:44-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_private_keys.rst:8
# 88dcc108c411403a81a9d150f65ff3df
msgid "Public and Private Keys"
msgstr ""

#: ../../includes_chef/includes_chef.rst:5
# 301785ac93a64cd8ba318c1881dd0034
msgid "|chef| is a powerful automation platform that transforms complex infrastructure into code, bringing your servers and services to life. Whether youâ€™re operating in the cloud, on-premises, or a hybrid, |chef| automates how applications are configured, deployed, and managed across your network, no matter its size."
msgstr ""

#: ../../includes_chef/includes_chef.rst:7
# 7934696552de4f83834d7bdee6fc6ee2
msgid "|chef| is built around simple concepts: achieving desired state, centralized modeling of IT infrastructure, and resource primitives that serve as building blocks. These concepts enable you to quickly manage any infrastructure with |chef|. These very same concepts allow |chef| to handle the most difficult infrastructure challenges on the planet."
msgstr ""

#: ../../includes_chef/includes_chef.rst:9
# e2bed54670514a219d119f35263a7115
msgid "Anything that can run the |chef client| can be managed by |chef|. For instance, you can manage physical machines, virtual machines, containers, or cloud-based instances. The |chef client| is an agent that runs on a node and performs the actual tasks that configure it. The |chef server| is the central repository for all configuration data. The |chef client| and |chef server| communicate with each other. For secure communications, they use a combination of public and private keys that ensures the |chef server| responds only to requests made by the |chef client|."
msgstr ""

#: ../source/chef_private_keys.rst:13
# b67e35ccfe864e629aba494e7995e9f6
msgid "How Keys are Used?"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:4
# 40af6460282d42b6b9f75aa31827dba4
msgid "The authentication process ensures the |chef server| responds only to requests made by trusted users. Public key encryption is used by the |chef server|. When a node and/or a workstation is configured to run the |chef client|, both public and private keys are created. The public key is stored on the |chef server|, while the private key is returned to the user for safe keeping. (The private key is a .pem file located in the ``.chef`` directory or in ``/etc/chef``.)"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:6
# 5907a91ed50d46fa8a1f9dfe05a630e6
msgid "Both the |chef client| and |knife| use the |api chef server| when communicating with the |chef server|. The |chef validator| uses the |api chef server|, but only during the first |chef client| run on a node."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:8
# 6ad3bf5c88b549b9b141a7b13513d27f
msgid "Each request to the |chef server| from those executables sign a special group of HTTP headers with the private key. The |chef server| then uses the public key to verify the headers and verify the contents."
msgstr ""

#: ../source/chef_private_keys.rst:17
# 54062d398e414234a4bf90ab5674136a
msgid "|chef client_title|"
msgstr ""

#: ../../includes_security/includes_security_key_pairs_chef_client.rst:5
# 8bec84191a284b8a86a62414619d1c94
msgid "RSA public key-pairs are used to authenticate the |chef client| with the |chef server| every time a |chef client| needs access to data that is stored on the |chef server|. This prevents any node from accessing data that it shouldn't and it ensures that only nodes that are properly registered with the |chef server| can be managed."
msgstr ""

#: ../source/chef_private_keys.rst:21
# 1daec925ed6d4677bc84c2b5cb381364
msgid "|knife_title|"
msgstr ""

#: ../../includes_security/includes_security_key_pairs_knife.rst:5
# 354902c31835444b9854b3043332d706
msgid "RSA public key-pairs are used to authenticate |knife| with the |chef server| every time |knife| attempts to access the |chef server|. This ensures that each instance of |knife| is properly registered with the |chef server| and that only trusted users can make changes to the data."
msgstr ""

#: ../../includes_security/includes_security_key_pairs_knife_exec.rst:5
# b2a698c61305474f90c5899ef93e9409
msgid "|knife| can also use the |subcommand knife exec| subcommand to make specific, authenticated requests to the |chef server|. |knife| plugins can also make authenticated requests to the |chef server| by leveraging the |subcommand knife exec| subcommand."
msgstr ""

#: ../source/chef_private_keys.rst:27
# f4ef7a1831fa42d894dba65771dc1ab5
msgid "|chef validator|"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:5
# 8c8bbe3922334a56a6145e0e350e7145
msgid "Every request made by the |chef client| to the |chef server| must be an authenticated request using the |api chef server| and a private key. When the |chef client| makes a request to the |chef server|, the |chef client| authenticates each request using a private key located in ``/etc/chef/client.pem``."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:7
# 85846ce47abe464ba96b7933ff3305aa
msgid "However, during the first |chef client| run, this private key does not exist. Instead, the |chef client| will attempt to use the private key assigned to the |chef validator|, located in ``/etc/chef/validation.pem``. (If, for any reason, the |chef validator| is unable to make an authenticated request to the |chef server|, the initial |chef client| run will fail.)"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:9
# 9d4abbd15a1a4aa1b51b707b17092de6
msgid "During the initial |chef client| run, the |chef client| will register with the |chef server| using the private key assigned to the |chef validator|, after which the |chef client| will obtain a ``client.pem`` private key for all future authentication requests to the |chef server|."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:11
# e7f265bf788f4761a94479b91df66835
msgid "After the initial |chef client| run has completed successfully, the |chef validator| is no longer required and may be deleted from the node. Use the ``delete_validation`` recipe found in the ``chef-client`` cookbook (https://github.com/opscode-cookbooks/chef-client) to remove the |chef validator|."
msgstr ""

#: ../source/chef_private_keys.rst:31
# 49a29c6b3b644c6daefe624642d1c4ab
msgid "Where are Keys Stored?"
msgstr ""

#: ../../includes_security/includes_security_key_storage.rst:5
# 367fc13f185844a7bfc48b22e805ea77
msgid "Keys are stored in different locations, depending on if the location is a node or a workstation."
msgstr ""

#: ../source/chef_private_keys.rst:35
# a14b60c5d8a64e0b80d8841612cba1ad
msgid "Nodes"
msgstr ""

#: ../../includes_security/includes_security_key_storage_nodes.rst:5
# 3541c8320ffd4532804aa445323babf7
msgid "Each node stores its private key locally. This private key is generated as part of the bootstrap process that initially installs the |chef client| on the node. The first time |chef client| runs on that node, it uses the |chef validator| to authenticate, but then on each subsequent run it uses the private key generated for that client by the |chef server|."
msgstr ""

#: ../source/chef_private_keys.rst:39
# e566096c416449cfbd875cb684abbc0b
msgid "Workstations"
msgstr ""

#: ../../includes_security/includes_security_key_storage_workstation.rst:5
# add14b1e8d8940ec818b3325b34c3b36
msgid "Each workstation stores its private key in the |chef repo|. This private key is generated by the |chef server| and must be download from the server and copied to the ``.chef`` directory in the |chef repo|. If a new private key is required, simply regenerate it from the |chef server| and re-copy it to the |chef repo|."
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:5
# 834abd58a52c4d5083c8b0a49094b63b
msgid "The |chef repo| is the location in which the following data objects are stored:"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:7
# 0e68881233174d1ca2008db3023e2291
msgid "Cookbooks (including recipes, versions, cookbook attributes, resources, providers, libraries, and templates)"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:8
# 15de3e8612bb4bf3b7c980006a5d6dff
msgid "Roles"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:9
# 902bd234617a4640b01e80eaf4ed0045
msgid "Data bags"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:10
# f15dc536eaa64dd19a5e3a6125fba71b
msgid "Environments"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:11
# 710ff6a9b73d470787175e0e338f2c1c
msgid "Configuration files (for clients, workstations, and servers)"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:13
# a3320045bb4f41b7836e8213c709af41
msgid "The |chef repo| is located on a workstation and should be synchronized with a version control system, such as |git|. All of the data in the |chef repo| should be treated like source code."
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:15
# 6731dc51243c4392bd97be8b17889cce
msgid "|knife| is used to upload data to the |chef server| from the |chef repo|. Once uploaded, that data is used by the |chef client| to manage all of the nodes that are registered with the |chef server| and to ensure that the correct cookbooks, environments, roles, and other settings are applied to nodes correctly."
msgstr ""

#: ../../includes_repository/includes_repository_11-all_directory_chef.rst:5
# 071b3d7cc16444acbf67322699d7ab9a
msgid "The ``.chef/`` directory is a hidden directory that is used to store .pem validation that are provided by the |chef server| and a |knife rb| file. These files are required for interaction with a |chef server|."
msgstr ""

#: ../source/chef_private_keys.rst:47
# d3955372973940c0ba912761c159887d
msgid "Generating Keys"
msgstr ""

#: ../../includes_security/includes_security_key_generate.rst:5
# 405c174003224f02b6d38bc18ee6105c
msgid "The |chef server| generates two types of private keys: one for nodes and workstations (typically referred to as a \"client key\") and the other for the organization. If (for any reason) a new key is required, the |chef server| can re-generate these keys."
msgstr ""

