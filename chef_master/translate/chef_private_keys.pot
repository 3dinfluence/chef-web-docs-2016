# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-26 15:24-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_private_keys.rst:8
# 7725ce8aa4f24dcd901d76472bbe646e
msgid "Public and Private Keys"
msgstr ""

#: ../../includes_chef/includes_chef.rst:5
# 9ac5e05321c74119be2c4015f2326b05
msgid "|chef| is a powerful automation platform that transforms complex infrastructure into code, bringing your servers and services to life. Whether youâ€™re operating in the cloud, on-premises, or a hybrid, |chef| automates how applications are configured, deployed, and managed across your network, no matter its size."
msgstr ""

#: ../../includes_chef/includes_chef.rst:7
# 4cce143bea2b4b1291836f6839f83b09
msgid "|chef| is built around simple concepts: achieving desired state, centralized modeling of IT infrastructure, and resource primitives that serve as building blocks. These concepts enable you to quickly manage any infrastructure with |chef|. These very same concepts allow |chef| to handle the most difficult infrastructure challenges on the planet."
msgstr ""

#: ../../includes_chef/includes_chef.rst:9
# dd8a409e64f24452a42f410930f198e0
msgid "Anything that can run the |chef client| can be managed by |chef|. For instance, you can manage physical machines, virtual machines, containers, or cloud-based instances. The |chef client| is an agent that runs on a node and performs the actual tasks that configure it. The |chef server| is the central repository for all configuration data. The |chef client| and |chef server| communicate with each other. For secure communications, they use a combination of public and private keys that ensures the |chef server| responds only to requests made by the |chef client|."
msgstr ""

#: ../source/chef_private_keys.rst:13
# e45c9fe02df64deab6cd65446813aa7f
msgid "How Keys are Used?"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:4
# 62cc2a198a904ca3ae46bfedffc82a1f
msgid "The authentication process ensures the |chef server| responds only to requests made by trusted users. Public key encryption is used by the |chef server|. When a node and/or a workstation is configured to run the |chef client|, both public and private keys are created. The public key is stored on the |chef server|, while the private key is returned to the user for safe keeping. (The private key is a .pem file located in the ``.chef`` directory or in ``/etc/chef``.)"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:6
# 90606bfcd1b641c8ba2a9dcd832380f7
msgid "Both the |chef client| and |knife| use the |api chef server| when communicating with the |chef server|. The |chef validator| uses the |api chef server|, but only during the first |chef client| run on a node."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:8
# a0ce602a24c54faea1b00c7dd855959b
msgid "Each request to the |chef server| from those executables sign a special group of HTTP headers with the private key. The |chef server| then uses the public key to verify the headers and verify the contents."
msgstr ""

#: ../source/chef_private_keys.rst:17
# c7501bb5d12047ec8eadb1f2825216f4
msgid "|chef client_title|"
msgstr ""

#: ../../includes_security/includes_security_key_pairs_chef_client.rst:5
# 5b80bae86f924bb6955741faf233919b
msgid "RSA public key-pairs are used to authenticate the |chef client| with the |chef server| every time a |chef client| needs access to data that is stored on the |chef server|. This prevents any node from accessing data that it shouldn't and it ensures that only nodes that are properly registered with the |chef server| can be managed."
msgstr ""

#: ../source/chef_private_keys.rst:21
# 3ee7f9fd1a2f410685ce67cfae790f92
msgid "|knife_title|"
msgstr ""

#: ../../includes_security/includes_security_key_pairs_knife.rst:5
# 07b4766da3334639be3acd56218eca6e
msgid "RSA public key-pairs are used to authenticate |knife| with the |chef server| every time |knife| attempts to access the |chef server|. This ensures that each instance of |knife| is properly registered with the |chef server| and that only trusted users can make changes to the data."
msgstr ""

#: ../../includes_security/includes_security_key_pairs_knife_exec.rst:5
# 042f0e6bbb8d435990e861e1a7486e17
msgid "|knife| can also use the |subcommand knife exec| subcommand to make specific, authenticated requests to the |chef server|. |knife| plugins can also make authenticated requests to the |chef server| by leveraging the |subcommand knife exec| subcommand."
msgstr ""

#: ../source/chef_private_keys.rst:27
# 7d3bea7e25d44618b32209490e86dcdb
msgid "|chef validator|"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:5
# 6d412d72b3d14d299a8bb7d0da00a5a5
msgid "Every request made by the |chef client| to the |chef server| must be an authenticated request using the |api chef server| and a private key. When the |chef client| makes a request to the |chef server|, the |chef client| authenticates each request using a private key located in ``/etc/chef/client.pem``."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:7
# 19b16539682b4f97921b3804db17bd65
msgid "However, during the first |chef client| run, this private key does not exist. Instead, the |chef client| will attempt to use the private key assigned to the |chef validator|, located in ``/etc/chef/validation.pem``. (If, for any reason, the |chef validator| is unable to make an authenticated request to the |chef server|, the initial |chef client| run will fail.)"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:9
# f7c4dd21b8a845e2be97660e43de2065
msgid "During the initial |chef client| run, the |chef client| will register with the |chef server| using the private key assigned to the |chef validator|, after which the |chef client| will obtain a ``client.pem`` private key for all future authentication requests to the |chef server|."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:11
# cc93b33a12e24d48ad3267bd0921b64a
msgid "After the initial |chef client| run has completed successfully, the |chef validator| is no longer required and may be deleted from the node. Use the ``delete_validation`` recipe found in the ``chef-client`` cookbook (https://github.com/opscode-cookbooks/chef-client) to remove the |chef validator|."
msgstr ""

#: ../source/chef_private_keys.rst:31
# 2168ea504f45492b98e73ac802833391
msgid "Where are Keys Stored?"
msgstr ""

#: ../../includes_security/includes_security_key_storage.rst:5
# 8255a84b25a54d83b8172cf48c80943b
msgid "Keys are stored in different locations, depending on if the location is a node or a workstation."
msgstr ""

#: ../source/chef_private_keys.rst:35
# 31fb1a60d32141fa929bc364c342a9c6
msgid "Nodes"
msgstr ""

#: ../../includes_security/includes_security_key_storage_nodes.rst:5
# faf218f44e924c0c8d656cc141357112
msgid "Each node stores its private key locally. This private key is generated as part of the bootstrap process that initially installs the |chef client| on the node. The first time |chef client| runs on that node, it uses the |chef validator| to authenticate, but then on each subsequent run it uses the private key generated for that client by the |chef server|."
msgstr ""

#: ../source/chef_private_keys.rst:39
# 590a8e0299fd4a51bbbefe9ad31d5b2a
msgid "Workstations"
msgstr ""

#: ../../includes_security/includes_security_key_storage_workstation.rst:5
# e6fc45c1988349e990a2c5c800cd4e53
msgid "Each workstation stores its private key in the |chef repo|. This private key is generated by the |chef server| and must be download from the server and copied to the ``.chef`` directory in the |chef repo|. If a new private key is required, simply regenerate it from the |chef server| and re-copy it to the |chef repo|."
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:5
# a739ec46df5f4ec5beb82cf5efa893d7
msgid "The |chef repo| is the location in which the following data objects are stored:"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:7
# 3ba1d9d80e8544be9eebdc10b312e119
msgid "Cookbooks (including recipes, versions, cookbook attributes, resources, providers, libraries, and templates)"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:8
# 0ec8dad059e9474da3ca9627d2017957
msgid "Roles"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:9
# 29bfacfb072e475b9af1bf26abf8415e
msgid "Data bags"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:10
# 9764062639a14c7aacf0f9fa8db0ca22
msgid "Environments"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:11
# 183c4a45a5454e5f854277590d2c3ca8
msgid "Configuration files (for clients, workstations, and servers)"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:13
# 527bca29ce104239a912b677212dbdce
msgid "The |chef repo| is located on a workstation and should be synchronized with a version control system, such as |git|. All of the data in the |chef repo| should be treated like source code."
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:15
# 83b6cb4cbe7a4d2bb261711dd03631c2
msgid "|knife| is used to upload data to the |chef server| from the |chef repo|. Once uploaded, that data is used by the |chef client| to manage all of the nodes that are registered with the |chef server| and to ensure that the correct cookbooks, environments, roles, and other settings are applied to nodes correctly."
msgstr ""

#: ../../includes_repository/includes_repository_11-all_directory_chef.rst:5
# 7a914dfea2bd4da0bd4b22ec5c84b1b5
msgid "The ``.chef/`` directory is a hidden directory that is used to store .pem validation that are provided by the |chef server| and a |knife rb| file. These files are required for interaction with a |chef server|."
msgstr ""

#: ../source/chef_private_keys.rst:47
# 636900864dd84999bc2412eafee7b6e0
msgid "Generating Keys"
msgstr ""

#: ../../includes_security/includes_security_key_generate.rst:5
# 0059af81b882442cac560d1c492f8ebe
msgid "The |chef server| generates two types of private keys: one for nodes and workstations (typically referred to as a \"client key\") and the other for the organization. If (for any reason) a new key is required, the |chef server| can re-generate these keys."
msgstr ""

