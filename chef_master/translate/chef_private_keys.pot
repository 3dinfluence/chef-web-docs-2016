# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-29 11:08-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_private_keys.rst:8
# 41890ff74a4040c89d8e5b2717d3bb1b
msgid "Public and Private Keys"
msgstr ""

#: ../../includes_chef/includes_chef.rst:5
# 33cfc1c4545c497c9fc75afa98e76f7b
msgid "|chef| is a powerful automation platform that transforms complex infrastructure into code, bringing your servers and services to life. Whether youâ€™re operating in the cloud, on-premises, or a hybrid, |chef| automates how applications are configured, deployed, and managed across your network, no matter its size."
msgstr ""

#: ../../includes_chef/includes_chef.rst:7
# eeb732804a904f8fa5a51a9dcbaf660c
msgid "|chef| is built around simple concepts: achieving desired state, centralized modeling of IT infrastructure, and resource primitives that serve as building blocks. These concepts enable you to quickly manage any infrastructure with |chef|. These very same concepts allow |chef| to handle the most difficult infrastructure challenges on the planet."
msgstr ""

#: ../../includes_chef/includes_chef.rst:9
# e62b0fd9c73d4e3187604f822a572466
msgid "Anything that can run the |chef client| can be managed by |chef|. For instance, you can manage physical machines, virtual machines, containers, or cloud-based instances. The |chef client| is an agent that runs on a node and performs the actual tasks that configure it. The |chef server| is the central repository for all configuration data. The |chef client| and |chef server| communicate with each other. For secure communications, they use a combination of public and private keys that ensures the |chef server| responds only to requests made by the |chef client|."
msgstr ""

#: ../source/chef_private_keys.rst:13
# 1765fca0571d4415b3a2cd8674323534
msgid "How Keys are Used?"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:4
# 3b0f4a62fd634713a5a4003b2da294f5
msgid "The authentication process ensures the |chef server| responds only to requests made by trusted users. Public key encryption is used by the |chef server|. When a node and/or a workstation is configured to run the |chef client|, both public and private keys are created. The public key is stored on the |chef server|, while the private key is returned to the user for safe keeping. (The private key is a .pem file located in the ``.chef`` directory or in ``/etc/chef``.)"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:6
# a9e0d3590e6b400ea798cfb51e8bfe4d
msgid "Both the |chef client| and |knife| use the |api chef server| when communicating with the |chef server|. The |chef validator| uses the |api chef server|, but only during the first |chef client| run on a node."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:8
# aac876dd6a3547389d8ea363560bf6e2
msgid "Each request to the |chef server| from those executables sign a special group of HTTP headers with the private key. The |chef server| then uses the public key to verify the headers and verify the contents."
msgstr ""

#: ../source/chef_private_keys.rst:17
# 8fee6219c9fc4186beb7fbbfdc1e58a3
msgid "|chef client_title|"
msgstr ""

#: ../../includes_security/includes_security_key_pairs_chef_client.rst:5
# ef072171f169498f9d60ad79edb2f0eb
msgid "RSA public key-pairs are used to authenticate the |chef client| with the |chef server| every time a |chef client| needs access to data that is stored on the |chef server|. This prevents any node from accessing data that it shouldn't and it ensures that only nodes that are properly registered with the |chef server| can be managed."
msgstr ""

#: ../source/chef_private_keys.rst:21
# 61a1d5c5c8864d039a8bb7e5c28ba17b
msgid "|knife_title|"
msgstr ""

#: ../../includes_security/includes_security_key_pairs_knife.rst:5
# 81a9b71500ab4be2b3616e6f131432fd
msgid "RSA public key-pairs are used to authenticate |knife| with the |chef server| every time |knife| attempts to access the |chef server|. This ensures that each instance of |knife| is properly registered with the |chef server| and that only trusted users can make changes to the data."
msgstr ""

#: ../../includes_security/includes_security_key_pairs_knife_exec.rst:5
# 5f973cf4a7ad454884936cecde6c80fe
msgid "|knife| can also use the |subcommand knife exec| subcommand to make specific, authenticated requests to the |chef server|. |knife| plugins can also make authenticated requests to the |chef server| by leveraging the |subcommand knife exec| subcommand."
msgstr ""

#: ../source/chef_private_keys.rst:27
# 285aa98a4ddf46eab807b0f0fb55e966
msgid "|chef validator|"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:5
# 5501d54a0e09459d8f6735202ca3be0e
msgid "Every request made by the |chef client| to the |chef server| must be an authenticated request using the |api chef server| and a private key. When the |chef client| makes a request to the |chef server|, the |chef client| authenticates each request using a private key located in ``/etc/chef/client.pem``."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:7
# fcfb93e65a414f86820ceb59567e4000
msgid "However, during the first |chef client| run, this private key does not exist. Instead, the |chef client| will attempt to use the private key assigned to the |chef validator|, located in ``/etc/chef/validation.pem``. (If, for any reason, the |chef validator| is unable to make an authenticated request to the |chef server|, the initial |chef client| run will fail.)"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:9
# 74eba06db3904ed59f9e57d6558368bd
msgid "During the initial |chef client| run, the |chef client| will register with the |chef server| using the private key assigned to the |chef validator|, after which the |chef client| will obtain a ``client.pem`` private key for all future authentication requests to the |chef server|."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:11
# f346acbf3e824d9a96da03164fa31fea
msgid "After the initial |chef client| run has completed successfully, the |chef validator| is no longer required and may be deleted from the node. Use the ``delete_validation`` recipe found in the ``chef-client`` cookbook (https://github.com/opscode-cookbooks/chef-client) to remove the |chef validator|."
msgstr ""

#: ../source/chef_private_keys.rst:31
# 918e49a6e3be410a88bff378478f2d9a
msgid "Where are Keys Stored?"
msgstr ""

#: ../../includes_security/includes_security_key_storage.rst:5
# 91ecb2a3af0d4ea4ac67aa3d7d7ab8b3
msgid "Keys are stored in different locations, depending on if the location is a node or a workstation."
msgstr ""

#: ../source/chef_private_keys.rst:35
# b0128701eac94a1194da2012109db04b
msgid "Nodes"
msgstr ""

#: ../../includes_security/includes_security_key_storage_nodes.rst:5
# d8f806b3f75a4bdfab351633cfdb2126
msgid "Each node stores its private key locally. This private key is generated as part of the bootstrap process that initially installs the |chef client| on the node. The first time |chef client| runs on that node, it uses the |chef validator| to authenticate, but then on each subsequent run it uses the private key generated for that client by the |chef server|."
msgstr ""

#: ../source/chef_private_keys.rst:39
# 0aa91847865c481d941763a15c72f89a
msgid "Workstations"
msgstr ""

#: ../../includes_security/includes_security_key_storage_workstation.rst:5
# aee497810e6c4534a115630f0d1dfe15
msgid "Each workstation stores its private key in the |chef repo|. This private key is generated by the |chef server| and must be download from the server and copied to the ``.chef`` directory in the |chef repo|. If a new private key is required, simply regenerate it from the |chef server| and re-copy it to the |chef repo|."
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:5
# e7c30a2bfcdc4ca2b8582b771f5877b2
msgid "The |chef repo| is the location in which the following data objects are stored:"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:7
# 54bf98fb6ddc4be899f9a65f9bf7c8b4
msgid "Cookbooks (including recipes, versions, cookbook attributes, resources, providers, libraries, and templates)"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:8
# 29918b0e364f4f36b0f55b1414a110e8
msgid "Roles"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:9
# 49c4087ba88d4ea2b7908f98b470ea81
msgid "Data bags"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:10
# 5ba40981ca8746539d8af0ac374a051d
msgid "Environments"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:11
# 7d87058626584b16b11b8dcb8f6a1020
msgid "Configuration files (for clients, workstations, and servers)"
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:13
# cad89d5be5b94386b9ce5b85835ec652
msgid "The |chef repo| is located on a workstation and should be synchronized with a version control system, such as |git|. All of the data in the |chef repo| should be treated like source code."
msgstr ""

#: ../../includes_repository/includes_repository_11-all.rst:15
# 39917001a64e441b8bbf70371bc7a374
msgid "|knife| is used to upload data to the |chef server| from the |chef repo|. Once uploaded, that data is used by the |chef client| to manage all of the nodes that are registered with the |chef server| and to ensure that the correct cookbooks, environments, roles, and other settings are applied to nodes correctly."
msgstr ""

#: ../../includes_repository/includes_repository_11-all_directory_chef.rst:5
# 269a3f9b934549d792965e39cb61d65f
msgid "The ``.chef/`` directory is a hidden directory that is used to store .pem validation that are provided by the |chef server| and a |knife rb| file. These files are required for interaction with a |chef server|."
msgstr ""

#: ../source/chef_private_keys.rst:47
# f803b25569d944ea91da29cda0eeb35b
msgid "Generating Keys"
msgstr ""

#: ../../includes_security/includes_security_key_generate.rst:5
# 4eb5f58b389446b988091f2ce1b6ee26
msgid "The |chef server| generates two types of private keys: one for nodes and workstations (typically referred to as a \"client key\") and the other for the organization. If (for any reason) a new key is required, the |chef server| can re-generate these keys."
msgstr ""

