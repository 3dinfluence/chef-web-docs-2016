# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-05-06 11:34\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_private_keys.rst:34
# 2878cc84ab2a4c6d8dc468d4a551c099
msgid "Public and Private Keys"
msgstr ""

#: ../../includes_chef/includes_chef.rst:5
# f761444b009f4a8a88656a6b52b6a86a
msgid "|chef| is a systems and cloud infrastructure automation framework that makes it easy to deploy servers and applications to any physical, virtual, or cloud location, no matter the size of the infrastructure. |chef| relies on abstract definitions (known as cookbooks and recipes) that are written in |ruby| and are managed like source code. Each definition describes how a specific part of your infrastructure should be built and managed. |chef| then applies those definitions to servers and applications, as specified, resulting in a fully automated infrastructure. When a new node is brought online, the only thing that |chef| needs to know is which cookbooks and recipes to apply."
msgstr ""

#: ../source/chef_private_keys.rst:39
# a8185a3d60234e168885ad60fb3de2fd
msgid "How Keys are Used?"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:5
# 36ee6528e0694e909308250ef5953894
msgid "The authentication process ensures that requests to the |chef server| are made only by authorized users. |chef| uses public key encryption for all server types: |chef hosted|, |chef private|, and the open source |chef server|. When a node and/or a workstation is configured to run |chef|, both public and private keys are created. The public key is stored on the |chef server|, while the private key is returned to the user for safe keeping. (The private key is a .pem file located in the .chef directory or in /etc/chef.) The following executables use the |api chef server| when communicating with the |chef server|:"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:7
# aba22a2bb91b4bfc96f60c1f1a58f709
msgid "|chef client|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:8
# 16e715dc3e384d2882036bed6b498be2
msgid "|knife|"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:9
# b3a4298f31bf4361a5485521780b1774
msgid "|chef validator| (only during the first |chef| run on a node)"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:11
# 5af938554bf84450a8e225438b224012
msgid "Each request to the |chef server| from those executables encrypts a special group of HTTP headers along with the private key. The |chef server| then uses the public key to decrypt the headers and verify the contents."
msgstr ""

#: ../source/chef_private_keys.rst:43
# 9e1bc947b9ee47e59c30d45f0cbb930f
msgid "chef-client"
msgstr ""

#: ../../includes_security/includes_security_key_pairs_chef_client.rst:5
# 0a1aabfb66df494fbfb4175c84d32cdc
msgid "|chef| uses RSA public key-pairs to authenticate a |chef client| with the |chef server| every time a |chef client| needs access to data that is stored on the |chef server|. This prevents any node from accessing data that it shouldn't and ensures that only nodes that are properly registered with the |chef| server can be managed by |chef|."
msgstr ""

#: ../source/chef_private_keys.rst:47
# b065414a7de1468e807dd2a9b1c9497a
msgid "Knife"
msgstr ""

#: ../../includes_security/includes_security_key_pairs_knife.rst:5
# 0cdca4d989a64c2db88327066c28c964
msgid "|chef| uses RSA public key-pairs to authenticate |knife| with the |chef server| every time |knife| attempts to access the |chef server|. This ensures that each instance of |knife| is properly registered with the |chef server| and that only authorized users can make changes to the data."
msgstr ""

#: ../source/chef_private_keys.rst:50
# 86315783d9254a3e96bba433eae67625
msgid "|knife| can also use the ``knife exec`` subcommand to make specific, authenticated requests to the |chef server|. |knife| plugins can also make authenticated requests to the |chef server| by leveraging the ``knife exec`` subcommand."
msgstr ""

#: ../source/chef_private_keys.rst:53
# 526f864d235b41b8aa7bb8bbfc1d7478
msgid "chef-validator"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication_chef_validator.rst:5
# e068f6efeb4a4a9daf9a3160fe5932b2
msgid "Every request from the |chef client| to the |chef server| must be an authenticated request using the |api chef server|. When the |chef client| starts a |chef| run, a check is done to see if the client key exists on the node at ``/etc/chef/client.pem``. If the key exists, it is used as part of the authentication request to the |chef server|. If the key does not exist, |chef| will use the key assigned to the |chef validator| (``/etc/chef/validation.pem``) to ensure that each node can make an authenticated request to the |chef server| during its first |chef| run. The key pair used by the |chef validator| is created when |chef| is installed on a node, either manually or using a |knife| bootstrap operation. If the |chef validator| is unable to make an authentication request to the |chef server|, the |chef| run fails."
msgstr ""

#: ../source/chef_private_keys.rst:58
# d283b00f30c54f919e4db31a38138445
msgid "Where are Keys Stored?"
msgstr ""

#: ../source/chef_private_keys.rst:59
# a1535eb23a7d40adabe44436422e67fd
msgid "Keys are stored in different locations, depending on if the location is a node or a workstation."
msgstr ""

#: ../source/chef_private_keys.rst:62
# 185c51b52f084045b4685f23497f77e8
msgid "Nodes"
msgstr ""

#: ../source/chef_private_keys.rst:63
# a444a34f3fd446da85dffa032c0cc8ef
msgid "Each node stores its private key locally. This private key is generated as part of the bootstrap process that initially installs the |chef client| on the node. The first time |chef| runs on that node, it uses the |chef validator| to authenticate, but then on each subsequent run it uses the private key generated for that client by the |chef server|."
msgstr ""

#: ../source/chef_private_keys.rst:66
# bbc1d7a0dfcf4b72a4848010bff56f82
msgid "Workstations"
msgstr ""

#: ../source/chef_private_keys.rst:67
# 8ed02efdfe1049628e535137b83e6d5a
msgid "Each workstation stores its private key in the |chef| repository. This private key is generated by the |chef server| and must be download from the server and copied to the ``.chef`` directory in the |chef| repository. If a new private key is required, simply regenerate it from the |chef server| and re-copy it to the |chef| repository."
msgstr ""

#: ../../includes_repository/includes_repository.rst:5
# 66b2aeddf7394b52b99ea4fdeb7dff67
msgid "The |chef| repository is the location in which the following data objects are stored:"
msgstr ""

#: ../../includes_repository/includes_repository.rst:7
# 92ce3fe6733a4ff0a9afe6bbdd7ac930
msgid "Cookbooks (including recipes, versions, cookbook attributes, resources, providers, libraries, and templates)"
msgstr ""

#: ../../includes_repository/includes_repository.rst:8
# b59e28ef43fe4e779b5a064480edb0b5
msgid "Roles"
msgstr ""

#: ../../includes_repository/includes_repository.rst:9
# 6f922c8086774a1fb4072136d08e1535
msgid "Data bags"
msgstr ""

#: ../../includes_repository/includes_repository.rst:10
# 8ad44b8e67b34e39b974e528d5f36d21
msgid "Environments"
msgstr ""

#: ../../includes_repository/includes_repository.rst:11
# 634489f1c563410cb491cd83a84ad528
msgid "Configuration files (for clients, workstations, and servers)"
msgstr ""

#: ../../includes_repository/includes_repository.rst:13
# 032c18defa2c4a20aac6a1f6b3a627f5
msgid "The |chef| repository is located on a workstation and should be synchronized with a version control system, such as |git|. All of the data in the |chef| repository should be treated like source code."
msgstr ""

#: ../../includes_repository/includes_repository.rst:15
# ff2480d0e1c44bd59316ad4230ffd859
msgid "|knife| is used to upload data to the |chef server| from the |chef| repository. Once uploaded, that data is used by |chef| to manage all of the nodes that are registered with the |chef server| and to ensure that the correct cookbooks, environments, roles, and other settings are applied to nodes correctly."
msgstr ""

#: ../../includes_repository/includes_repository_directory_chef.rst:5
# 071e93ab0dec4513a04190dbac9255a1
msgid "The ``.chef/`` directory is a hidden directory that is used to store .pem validation that are provided by the |chef server| and a |knife rb| file. These files are required for interaction with a |chef server|."
msgstr ""

#: ../source/chef_private_keys.rst:75
# 6a2bc5eedfd042d8a1efd3c9fd13ff31
msgid "Generating Keys"
msgstr ""

#: ../source/chef_private_keys.rst:76
# d262b0ff6a49485d8d57ea002acec779
msgid "The |chef server| generates two types of private keys: one for nodes and workstations (typically referred to as a \"client key\") and the other for the organization. If (for any reason) a new key is required, the |chef server| can re-generate these keys."
msgstr ""

