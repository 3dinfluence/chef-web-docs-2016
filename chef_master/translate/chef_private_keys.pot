# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-29 14:53-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_private_keys.rst:8
# 18f0a6c0c0a045aab9fd4622280ad6bf
msgid "Public and Private Keys"
msgstr ""

#: ../../includes_chef/includes_chef.rst:5
# 814a48345b0d44309ec972f5f436a106
msgid "|chef| is a powerful automation platform that transforms complex infrastructure into code, bringing your servers and services to life. Whether youâ€™re operating in the cloud, on-premises, or a hybrid, |chef| automates how applications are configured, deployed, and managed across your network, no matter its size."
msgstr ""

#: ../../includes_chef/includes_chef.rst:7
# fce293b9ebf3491c926c0dbff33086f5
msgid "|chef| is built around simple concepts: achieving desired state, centralized modeling of IT infrastructure, and resource primitives that serve as building blocks. These concepts enable you to quickly manage any infrastructure with |chef|. These very same concepts allow |chef| to handle the most difficult infrastructure challenges on the planet. Anything that can run the |chef client| can be managed by |chef|."
msgstr ""

#: ../source/chef_private_keys.rst:13
# 94cd77da6c9c44a9b365f0ba0fde8695
msgid "How Keys are Used?"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:4
# 8a793e96ea64405486cc1287632f7991
msgid "The authentication process ensures the |chef server| responds only to requests made by trusted users. Public key encryption is used by the |chef server|. When a node and/or a workstation is configured to run the |chef client|, both public and private keys are created. The public key is stored on the |chef server|, while the private key is returned to the user for safe keeping. (The private key is a .pem file located in the ``.chef`` directory or in ``/etc/chef``.)"
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:6
# 49934c3e63c642c79c189065c54ffea9
msgid "Both the |chef client| and |knife| use the |api chef server| when communicating with the |chef server|. The |chef validator| uses the |api chef server|, but only during the first |chef client| run on a node."
msgstr ""

#: ../../includes_chef_auth/includes_chef_auth_authentication.rst:8
# f595acb0ce994ffaa108b6d82c0bff11
msgid "Each request to the |chef server| from those executables sign a special group of HTTP headers with the private key. The |chef server| then uses the public key to verify the headers and verify the contents."
msgstr ""

#: ../source/chef_private_keys.rst:17
# afe1c8b61df34c6a8153c123474fccf6
msgid "|chef client_title|"
msgstr ""

#: ../../includes_security/includes_security_key_pairs_chef_client.rst:5
# a788447ee341439bbad983322945041d
msgid "RSA public key-pairs are used to authenticate the |chef client| with the |chef server| every time a |chef client| needs access to data that is stored on the |chef server|. This prevents any node from accessing data that it shouldn't and it ensures that only nodes that are properly registered with the |chef server| can be managed."
msgstr ""

#: ../source/chef_private_keys.rst:21
# 9ce0e61b75f54a04982e1febf360316c
msgid "|knife_title|"
msgstr ""

#: ../../includes_security/includes_security_key_pairs_knife.rst:5
# 976c593afbf740919a047a0507870639
msgid "RSA public key-pairs are used to authenticate |knife| with the |chef server| every time |knife| attempts to access the |chef server|. This ensures that each instance of |knife| is properly registered with the |chef server| and that only trusted users can make changes to the data."
msgstr ""

#: ../../includes_security/includes_security_key_pairs_knife_exec.rst:5
# 981c07f84efb423fab3ce15129bd6116
msgid "|knife| can also use the |subcommand knife exec| subcommand to make specific, authenticated requests to the |chef server|. |knife| plugins can also make authenticated requests to the |chef server| by leveraging the |subcommand knife exec| subcommand."
msgstr ""

#: ../source/chef_private_keys.rst:27
# e1b00c2fbe044f32b42c33c99a5e5ddf
msgid "|chef validator|"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:5
# c5ea74c5b05e4e3c9386bae5422e1c5c
msgid "Every request made by the |chef client| to the |chef server| must be an authenticated request using the |api chef server| and a private key. When the |chef client| makes a request to the |chef server|, the |chef client| authenticates each request using a private key located in ``/etc/chef/client.pem``."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:7
# 8fbfcc4fb4524880aa08d71665287e8e
msgid "However, during the first |chef client| run, this private key does not exist. Instead, the |chef client| will attempt to use the private key assigned to the |chef validator|, located in ``/etc/chef/validation.pem``. (If, for any reason, the |chef validator| is unable to make an authenticated request to the |chef server|, the initial |chef client| run will fail.)"
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:9
# afbf34155bee42adbe0c09e4ebe5e39a
msgid "During the initial |chef client| run, the |chef client| will register with the |chef server| using the private key assigned to the |chef validator|, after which the |chef client| will obtain a ``client.pem`` private key for all future authentication requests to the |chef server|."
msgstr ""

#: ../../includes_security/includes_security_chef_validator.rst:11
# 71462644b41946df8d4656d7faba9dbf
msgid "After the initial |chef client| run has completed successfully, the |chef validator| is no longer required and may be deleted from the node. Use the ``delete_validation`` recipe found in the ``chef-client`` cookbook (https://github.com/opscode-cookbooks/chef-client) to remove the |chef validator|."
msgstr ""

#: ../source/chef_private_keys.rst:31
# 20622a78f68a4ff2a0263304b0f2bd20
msgid "Where are Keys Stored?"
msgstr ""

#: ../../includes_security/includes_security_key_storage.rst:5
# 37cf08d015c64f4284985515f6a02117
msgid "Keys are stored in different locations, depending on if the location is a node or a workstation."
msgstr ""

#: ../source/chef_private_keys.rst:35
# dafcffc29a9c45eb89155e6fdb16ce23
msgid "Nodes"
msgstr ""

#: ../../includes_security/includes_security_key_storage_nodes.rst:5
# e43325093fc643d2ac9d7876b3f2c44b
msgid "Each node stores its private key locally. This private key is generated as part of the bootstrap process that initially installs the |chef client| on the node. The first time |chef client| runs on that node, it uses the |chef validator| to authenticate, but then on each subsequent run it uses the private key generated for that client by the |chef server|."
msgstr ""

#: ../source/chef_private_keys.rst:39
# a9307d34aa0642879996734f32361b46
msgid "Workstations"
msgstr ""

#: ../../includes_security/includes_security_key_storage_workstation.rst:5
# ad2bcc092b0e43c3a2e204772c770b27
msgid "Each workstation stores its private key in the |chef repo|. This private key is generated by the |chef server| and must be download from the server and copied to the ``.chef`` directory in the |chef repo|. If a new private key is required, simply regenerate it from the |chef server| and re-copy it to the |chef repo|."
msgstr ""

#: ../../includes_chef_repo/includes_chef_repo_11-all.rst:5
# 04b0a2ac252b47b681e52606d0ebcf08
msgid "The |chef repo| is the location in which the following data objects are stored:"
msgstr ""

#: ../../includes_chef_repo/includes_chef_repo_11-all.rst:7
# 606672fe48de45718430bbac88160552
msgid "Cookbooks (including recipes, versions, cookbook attributes, resources, providers, libraries, and templates)"
msgstr ""

#: ../../includes_chef_repo/includes_chef_repo_11-all.rst:8
# b38f7fa3ea5d497386f9db2ab6b3faa3
msgid "Roles"
msgstr ""

#: ../../includes_chef_repo/includes_chef_repo_11-all.rst:9
# c85e6543948348e5a9d4bad48ad7ac24
msgid "Data bags"
msgstr ""

#: ../../includes_chef_repo/includes_chef_repo_11-all.rst:10
# d9ea2de0453a4e8886e72224deb2db7a
msgid "Environments"
msgstr ""

#: ../../includes_chef_repo/includes_chef_repo_11-all.rst:11
# 573382d7dec544a39e2867c80107a0da
msgid "Configuration files (for clients, workstations, and servers)"
msgstr ""

#: ../../includes_chef_repo/includes_chef_repo_11-all.rst:13
# cd9bbfbd4762405bbb4b825fc37096fe
msgid "The |chef repo| is located on a workstation and should be synchronized with a version control system, such as |git|. All of the data in the |chef repo| should be treated like source code."
msgstr ""

#: ../../includes_chef_repo/includes_chef_repo_11-all.rst:15
# 6acb8e0158fa496786185547239bd9eb
msgid "|knife| is used to upload data to the |chef server| from the |chef repo|. Once uploaded, that data is used by the |chef client| to manage all of the nodes that are registered with the |chef server| and to ensure that the correct cookbooks, environments, roles, and other settings are applied to nodes correctly."
msgstr ""

#: ../../includes_chef_repo/includes_chef_repo_11-all_directory_chef.rst:5
# 3fda31f1fd7a4c91bb39359522af5d6b
msgid "The |chef repo hidden| directory is a hidden directory that is used to store validation key files and the |knife rb| file. These files are required for interaction with a |chef server|."
msgstr ""

#: ../source/chef_private_keys.rst:47
# 0a807814b8f149279c202f1b96784825
msgid "Generating Keys"
msgstr ""

#: ../../includes_security/includes_security_key_generate.rst:5
# 8401d46907174cfeb388b81cde31b85d
msgid "The |chef server| generates two types of private keys: one for nodes and workstations (typically referred to as a \"client key\") and the other for the organization. If (for any reason) a new key is required, the |chef server| can re-generate these keys."
msgstr ""

