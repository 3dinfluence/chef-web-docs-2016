# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-06-20 12:06\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:34
# f7a2f4a6915446dd93a827b9f9c04233
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# c49ee3b017414eeb9a17273b4d91c01d
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. |chef| has a defined query syntax that supports search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:38
# a43e12771ea046f08d1cc69db37ab4cf
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:41
# 1b685753c75a43c6b2140bcaa7a3a4bf
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 208403be035e4692841a61ff040551ce
msgid "|search index| |chef| builds the following search indexes:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# c455a20864a04d6fb18106290cf2aae2
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:21
# 450d7005b3064de38e965496a6e809aa
# d2bc9bb41d964f09a7260f1f1d68abd2
# b28612863f6b43419b243e61bb798afb
# 58a02b8745a443459548c0c36f47055f
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 64b65736ee0d48a887eacbb19f03556a
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 87bef93ee8ad4df89cba848b9fe85259
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# a3c6378b475b4abf89ed831a5d97f9f6
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 40a4fe1f38fe4b90b4772572f8014823
msgid "|data bag description| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 43dc1b37bc9e4480ae7b80d43a82e4fa
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 52a6d31672a2494c95856cd79e31456e
msgid "|environment description|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 53b130c05cd64cafbfd329cfc2ffca26
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 7b54ce1a2222451790f94b7cdf28bc81
msgid "|node description|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 711a6f025dba4d8ca37c017938e37c17
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# dab1803fc316412996ec8847a1fa0922
msgid "|role description|"
msgstr ""

#: ../source/essentials_search.rst:45
# 6a64c6a038e5463da0cf24a6f18fdb5f
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 9dd19cce3c7b4829aa45924820c3a9ee
msgid "|knife search|"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:6
# f71432a21744491a9b2e40f844a69a51
msgid "For example, to search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:12
#: ../../includes_knife/includes_knife_search_examples.rst:32
#: ../../steps/step_search_boolean_and.rst:9
#: ../../steps/step_search_boolean_and.rst:31
#: ../../steps/step_search_boolean_not.rst:9
#: ../../steps/step_search_boolean_or.rst:9
# 1af36dd71beb4bd688a76e06f0287f18
# 80493b12ef23476a8355bd8c71caf0a5
# d621028ef08040eab1297b9a717cebf9
# d2ab57cde95846edab9dd758ee095a35
# 9b30045d1125446580413285b815777a
# 4a501e44e3bc4809994313ac2baaa7d5
msgid "to return something like:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:26
# f7ff93c47fb741c391da02d6a33a30a9
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:50
# 2c408d0e2fd44daeab582e12ea9dc3d7
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:56
# 08a09649cc1a450ba405b9867b50cc25
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:62
# df66de4a230947e8a001b3b96b23e5af
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:68
# 836bbf43f17245cda6f9db4e2a4ff9ab
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:74
# d4ec807c6b194f81880f3ba0657dc652
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:80
# fd7f7458de144cc7bb4ab93331bc7b85
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../includes_knife/includes_knife_search_examples.rst:86
# 3fc6f473cc9b434e97a4251a46514849
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:51
# e5c2c4936bdb4fce906bd797e6ce1e4b
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 49a47249740b47bcb65860030771435e
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 50f8d01143aa426d81185e0d26b0b29f
msgid "where ``key`` is a field name that is found in the JSON description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:55
# 31ff354479644c90b36657b6adabf9c0
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 278c4657a7e84f268c98c9365585b808
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 79fb07028cc44e60a214b5e0981a2495
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 3df937f71b184902927c9a20977b5857
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 57e983d9e7314efab9cb7f49fbf225a2
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:59
#: ../source/essentials_search.rst:71
# 5213e3b6320348dd97d3665f59b961fe
# 96cc30f1a00c495ebfbb8bfa88b6b144
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:4
# 9e48b783739c4b49a22e4e2fcda56569
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:25
# 48f67b2a833243fb9dec54e4c259a917
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:64
# 87631a1a160a48cd8310cfff8bd37fcc
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:76
# 487648d570f54cf8b5385623bb9083d5
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:63
# a254fd0597b640309a839cea49517f64
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# a3f11b3a96804d589ff798e9fcb98174
msgid "|search key| Any key that exists in any JSON description for any role, node, |chef client|, environment, or data bag can be searched for. To search for the available keys for a particular object, use the ``show`` sub-commands for any of the following |knife| sub-commands: ``client``, ``data bag``, ``environment``, ``node``, or ``role``."
msgstr ""

#: ../source/essentials_search.rst:67
# f2012da80ab9478791f04595452b4861
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# cfdb771c7b924b0b99a48db982ba5a30
msgid "A nested key is a key that appears deeper in the JSON data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a JSON structure, |chef| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 6d8271493bfe49ecb0977e6fe176273a
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# a24270fec6f945eeaf97f0a9bd35d548
msgid "Consider the following snippet of JSON data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 1a1cb836bac1411e9373d56b3c03acd1
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 67d40e3d470845069202681162cf5aba
# 8088ffaf91774eac9a6f028c69256e2f
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 8346e12aaa9e4deeb24ade5add63d548
# 4c9b419c64cc4bc6a0d5465b392657b3
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# e34e7667dec245bbb57b5a36ce68eebc
msgid "This data is also flattened into various compound keys, which follow the same pattern as the JSON hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 356910d1a7eb4f2a99aa609661cbfb88
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the JSON data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 632e6cd2493f412ebe00b949ba01a814
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to::"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:122
# ddd848eee7ff43f68f7976e851369815
msgid "This query will search within the ``flags`` node, within the JSON structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../steps/step_search_key_name.rst:3
# 0af819cc00b64477bca2731349c99fcb
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../steps/step_search_key_name.rst:9
# 7aa50e08b954487095340d251a66faf9
msgid "to return a full JSON description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../steps/step_search_key_wildcard_question_mark.rst:3
# c88b7e91a94145a4b2c7629c68a8b18d
msgid "To use a question mark(\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../steps/step_search_key_wildcard_asterisk.rst:3
# b859c373f376462bba6736c272e11c8d
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../steps/step_search_key_nested_starting_with.rst:3
# 27db4d5f8d9c419786ec5c940f2d57da
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../steps/step_search_key_nested_starting_with.rst:9
# bdb274f48ef84fc3a38979593c29dcda
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../steps/step_search_key_nested_range.rst:3
# 4df86d221c314dcb85c6e26dee13345a
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../steps/step_search_key_nested_range.rst:9
# c58e8accfcc341f5a9c924ba4ac7b94f
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:83
# 3b4f2f918de04a119c651c60846b623e
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 3de057ab45ce4baebad5332a326d611b
msgid "|search pattern| There are four types of search patterns that can be used when searching the |chef| search indexes: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:87
# 2accd07354bd4a059522b2f061d2c87c
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# fce074d4bed949ef81c9356dd5a70c6e
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item.rst:3
# 5cf675a86d694eb8a68810ff9d6841c0
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item.rst:9
# b2d91f928af541d49cd86b11550947e2
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item_string.rst:3
# 6b72f4efadbf4c5cb48664c85ab909db
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_exact_key_and_item_string.rst:9
# e35afc97dfb447d58b5164f62ca00ac4
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:95
# b4615dce15234f09910fdd7a3a65c91a
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# c8fcf3b3a2a44d8c89d06eed295b4f4f
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# b6fc4a6adb7f49abb6d6a23729c408e8
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# f1ac623e98754b5cafd4a0d45f66f613
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_any_node.rst:3
# 365bc059be914c83891cac34d03bf0dc
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_any_node.rst:9
# 250ca29d8e114aedb0fda2e3723817f7
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../steps/step_search_pattern_wildcard_node_contains.rst:3
# 9fa49e2f7d7f480caa7ba561dd4578b8
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_node_contains.rst:9
#: ../../steps/step_search_pattern_wildcard_node_contains.rst:15
#: ../../steps/step_search_pattern_wildcard_node_contains.rst:21
# 1519b469e3814c0e9f7e781635a42d19
# c59d07276de14da68898a36b2281bbc2
# bb72cb8e65fa48c2bb875c52175544ad
msgid "or:"
msgstr ""

#: ../../steps/step_search_pattern_wildcard_node_contains.rst:27
# 1c39de8887624182b3a0e71399600414
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:103
# 724ea22f47484f8fb3f29ff9059e6fc9
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# fa99f845597e43f1a05a55e53d07c02d
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 6fd1c96bfb764b7c82accba9424cfb0f
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../steps/step_search_pattern_range_in_between.rst:3
# fc255b576ed44cdc99769666caf6aad8
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../steps/step_search_pattern_range_in_between.rst:5
# b886503247f54912ab4833a952d169f4
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_range_in_between.rst:11
# 2c09ef6caf77414c9283aeb44307b13b
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../steps/step_search_pattern_range_exclusive.rst:3
# 03369749af7948cbbc594ea37e3c9f2c
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../steps/step_search_pattern_range_exclusive.rst:5
# d1539861a2f0449ca521a196ceb0c2fe
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../steps/step_search_pattern_range_exclusive.rst:11
# 47e54eb57ba648c5940635ec2ae32c7e
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:111
# 7bb4d385d7e74bf0bbd14f6e910df963
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 354376dc16fa4309b9ceb6619ab7579d
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 7581a2623d01469db58768e5c8842a07
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../steps/step_search_pattern_fuzzy.rst:3
# d13adbf630264522a5b5e28e847869ad
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../steps/step_search_pattern_fuzzy.rst:9
# 2aa344bc551a4956b324ddb1b8ec0e31
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:117
# da702b9faf7c4b9db68ed75520037a57
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# cc5a7e7ad96c4eb597a69c0619bd3daf
msgid "|search operator| |chef| searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 83b1c3815e2146df857b992752662847
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 8bf261277ae743519bda1becd381a260
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 68334a24cc4d4e048dddc79d56c07e9e
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# af14ad2e7937407b8501eacd05e9d958
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 6f936f4dd9a34d7ca083962b025f027a
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# a2dc0a4cb1ae4014a2fe4c6d98a03dd2
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 31b80e11922547ceb68a94c3d223ae5d
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 59e7e086c7f54a05bd6f7f0379ed5023
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:121
# d9567acbc9694dfbaf4a9367cc5992eb
msgid "AND"
msgstr ""

#: ../../steps/step_search_boolean_and.rst:3
# 1561ea7f09394eac9ec08526a71d1994
msgid "To join queries using the AND boolean operator, enter the following:"
msgstr ""

#: ../../steps/step_search_boolean_and.rst:25
# ca832d45b1bb443899d90cf2c56177c1
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:125
# 905e82e222984edc853c927688a5fc9f
msgid "NOT"
msgstr ""

#: ../../steps/step_search_boolean_not.rst:3
# 77ce0a4e597943f9951702baf565edfd
msgid "To negate search results using the NOT boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:129
# cc37d2aa738f403887cd9b26b8add545
msgid "OR"
msgstr ""

#: ../../steps/step_search_boolean_or.rst:3
# 192ae28eb51549d38258c72a14091762
msgid "To join queries using the OR boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# 591cae628052496b8688e7e30cc90470
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 91ba9a2b52c34480b56febcfdd7f39e9
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# cce1004916eb4d86a64f958dd1b79420
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:137
# c4371fd29c334853924ec95c294be271
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 0c33b0699f1c42e8b0924e1cc5a21756
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:141
# 2e66d4e1595a4e6a9b4edc46280ed5f6
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 98c4b2b2b1824c7aaecdce79aa10a9e9
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 76f99774cf1c44f9bb42800317c88b44
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 2a2a9992d9534d0e9474839ac3e3b5aa
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# b5463f67b10e4f608b3912236ef505aa
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 393dc039f92b4d6badcf32be20b5157d
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# de80e6fc6af54381a9a28d5b76acb91a
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 9bdec4ed83304e04b2718b57a1fee875
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# ec8a612e024d4df2b1a86b3dfdcea772
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 6f093597d36c494fbbf5063df8149b9c
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../steps/step_search_target_role_top_level.rst:3
# c549c210a6ad4e6f96707a1ea57286f9
msgid "To search a top-level run list for a role named \"load_balancer\", enter the following (from |knife|):"
msgstr ""

#: ../../steps/step_search_target_role_top_level.rst:9
#: ../../steps/step_search_target_role_expanded.rst:9
# 6043031fb9264aed860a49a3c78fcd10
# 15e21f7ef6e847b7901eba48eb024bec
msgid "or add the following (to a recipe):"
msgstr ""

#: ../../steps/step_search_target_role_expanded.rst:3
# a1b20c0c61bf43b9a328fd92b457bce4
msgid "To search an expanded run list for all nodes with the role \"load_balancer\", enter the following (using |knife|):"
msgstr ""

#: ../source/essentials_search.rst:149
# fe9e76be10554baaa5bb581f19029c6e
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:6
# ab582a74057a4923bc8e9f5e93066acb
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:10
# f0e8b530166f4dcba7c1eeddcbf1141b
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:12
# efa06b294f134c1faad946441d1a6193
msgid "|chef| saves expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:14
# 16845c6946fa4763bb3236616b6539aa
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:20
# 9c43b69ec37e405aa639486fa125ce92
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 4aac167090ae4d069536f3e0ae6d1ced
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# 5226aa8f5d844f62849a385f9285d4f5
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:27
# c9775a86a38848b5b20abf02f14a6029
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# d50589df450b47b69d6f2d3ad71476f6
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:31
# 46c4bf507cee4bfca2f980731acc1543
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:35
# cd5b127d02c64e7d990de31a2706a8f4
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# e21169b68a9f43bcbb12cdcd23302cdd
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:153
# 17273ee384e3406eb898ad2328c4577b
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# c217ef6a374c4860b4afddd047151274
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 841acf49a6ed4cb281bfe8befe0beb30
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following simplified settings file is for a web server named \"mysqlchef\" and a database server named mysqlchefutil:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 4011a61e9ec44f2287146363924e6821
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# bc74bcd91f5a41d18b46787a91ca95bd
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# e69373d79d1c4933adaba9c7f30b7a0f
msgid "where the \"[0]\" is the 0 (zero) index for the db_server identifier. This is because a single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:159
# 73d2e7b774bb4b629af735e641641ffd
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 525dd9369bbb4a40b0390bb19ecbc241
msgid "|environment description| Every |chef| organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created, such as production, staging, testing, and development. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# c6e8a63d89f04b798dcd7415c6633a6b
msgid "When searching, a |chef| environment (``chef_environment``) is treated much like an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# b92d6a7fe26443269f0d0afbc8fc3e5d
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:165
# 815430977d4441fc9eeafa63eab2e6e9
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:4
# abf50f998bf34af594865462a6e19e38
msgid "|data bag description| A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 011a0fd6f47e4bbab6a98e379e219960
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# f5698ad09e5842daa7c3bed3fe45fb43
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# d6d427617c4d459e939567e7189aba97
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# cb08dbc7601e4efa96375aed04302407
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 411285b39dce4e2ca0e274fc5639a9f6
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 36e66d2d7ee84c31ab04e51da48214c9
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 4d15115bca6942fdb60e7874c5369e06
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 25b6641ddfc5403e94db819815340b05
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 2ce25e17d60341f5aacc1452e699146f
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

