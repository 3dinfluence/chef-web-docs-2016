# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-19 10:27\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 3ce5b36e311841679c7cebc3b030b57a
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 37bad830d8dd494395c6882dd0a87e64
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 158d8204dfc2436d8d225b331cef68ba
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# ba63019907944cc29d6c6b7140b67a1c
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 1d7acd3cb4304dbc854a1083c0afc31b
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 338b703f23504e36888bcd31695bea34
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# b04bed982eb746eeb3a8a9863ab0435f
# 01fd17711a3b45419046e7d8f4cf8aea
# 775eb9f7762541fd8eb38d40423c9bce
# 7410b7308ba54d9b8f6a64ba68c5dfb4
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 1151dcbb08f64938b3116b1d475c85a8
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 9f301373f03f4972a36bf31a9d12f674
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 3e8d4d33279e4f5080f88d9c1541c6dd
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# f722a2c993424b53ac671a92a35632df
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 399430a533604f13b641c958e7502e90
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# f6fb8dc4fce94281a91ca9167f1e43b6
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 29c13c26f3994a4e9c90a953c645f69d
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 5e649ddd23b14ce0b374825e29a7f572
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 63d5270f639d4707b4f87d57f901a482
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 7798cca3b3f74b7581c12328c3f0d5ee
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 886689053cf44bb8ab03a727a00da142
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 4eb46b2cffc746509996a07c047e8e5b
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 894c37f45ef045498497a4e45cb06a0e
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 5037bb7f96884de1afe71e4913b3908c
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 4d1c38ff90ee44ffa82c410f8b02618f
# fd361ecc1f38492d8da573af9a1bea27
# afa31284c7234d10b9d562abf0604ce4
# 044c9ff133fd4118938ba7716066d71a
# 59e42c485cdf46f49288356584f73283
# f018848e97ff485087c94068a78b47ce
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# b966c18f22984ee49cf96f69633f7776
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 54ef63fbcf3840de9c11c07b0018b827
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 2d6fdf43ddc64a9ba4956cf94996d3ce
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 6ab85499c1214b48bc70cef7c78748ca
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 1831274dfb9d42ac8f3d3b178b79f540
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# e251d09c6c694f57ab6565219c246928
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# d47a50c9890543bfbd6bf5be4106751b
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# b8082fea93f048ad974a1d514dda9e7b
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 9cf18276720f41469bcd1f4462cd4cc0
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 8968dbe6eb6e4d81b088a56c729a54d1
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# b4d052cf677446ef81cfb70b018c17cf
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 85c74ead64dd4467bfa13f6349e8fdc0
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 043e58ece8f5445baaa4567d38df18e0
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 4e750005685b444ca66f6a73fb5a7640
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# b19a33d558d64d65bde63411370e23e2
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# f7793408d8f14174962e38557219d323
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 81b433f8bec74b6f9273d15f6be24f9b
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# eba347ca51f940c3bde291d3bc298703
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 6d3f6c8f470448ec8ebcedc394cae41d
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 060cf8dfc9734374948f903a78f18c2f
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 5c4af815f7594eda8d4980b95025e781
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# cc63f5a096c64eaba12659621ef93a1c
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 5d690ee536e04aceba459b6912b2a281
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 00b3db49f7c44ebe8c5ef7485bef52bb
# b216fd65dbce4f6db425c1f68aaf6b9d
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# da70d6a1591c48fba5afd16174e0a8af
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# b3f2e3c48f3c424985e9a122727c9ccc
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 533e13a0bb8646c4bb563fa37eb47e03
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 8536a99f6cc244a080f7d702b0de23c3
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# ba6ba4801f7f4404b55c9eb62ff86cae
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 8b670db345894947a055510b09cd2c14
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 861b4d34ce274668b6ee2e3dcf06958e
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 16788fb552e64ab5a807bd8b4f1e4a65
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# d4930c7bafe241019b80f3bf2ce9d813
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 021b58fb402248abb88bf3a2db5b960d
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# bb2990de1a4e42efad6c2fb96f3f64c6
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# db2def60868e423eb628aa3b860fe322
# 9ac45aea2172497a8efc0e5be527c824
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 625c13a87b9a48578dd5761830c63020
# b697dc1b576a4745b8a29dc53485f30e
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 63d069ee0b524ce582303dee4546ab32
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 543096390e214754816d10ee77af1911
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 32125127d095456091980f3b12da226c
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 08120448bd1d46c6b3aa6c7ea6640dca
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# a09fb4238d1d488f98bbe23c37cb90c0
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 2e25081d8d6840bdaf2fc0ef9b1397a5
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# d33471254c8d46bf8f9186ad6481ce07
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 1a66c6ba5a164c5387568b45b9af5e03
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 1df6d7cb34004e1fa876e5cf6c835c7c
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# b400d21a097e4ff4998133ad54b82657
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# f00cc2acb39643f48ac07a2f91028962
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 3827157f2fcb4480995f3d8bb3006890
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# f437412edbba4583a2ab81a804c753c2
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# de1e722f22324d4a941a874303a856cb
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 81cdaa42bc5940dc9a242cae1f4f4fb4
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# aed1bc59ab924745ba30f698c8ca188b
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# b58b22f9c3e848e9afb5a1d996290d72
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 17bc1725fee54e13a922924e1694b354
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# fc43c26b9ab5483fa9eab2303a0d8f9e
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# dbfa7acc62e440118edaa84b4532aab6
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 255687e6b0b7443a9add2f9ac0a05558
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# a9b0a97f5d0f49258abcc15c8484431c
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 498eb938c06c4da7ac46b88bbb1c0036
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 03bda7c417da47d8aad0c37ef6da7c77
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 1ba7aaab95304064b0d3b3d0ba8b2078
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 56fa6ae0ce2048b3b2e166fdf5dffaff
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 69f6d08ae05f4c68b855a802db3a28e9
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 4b0e9dc41ba34044b914dd4f59ff45e2
# 393294bf6a7e4bdcbfa0c207957a3518
# 347dbe8afb86434dbe93e5fe25a78a63
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 046cc015a39a4615a75db46dd4e584ba
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# a7d1509e517a40ec80f5643fe20e58e9
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# a7656b1048b94efbace1d9753e5288ac
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# c96631936c95455896d3d9aff404759c
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 6c64a4c2741f4b9698f37d18c074c388
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 78165c6dbf794b60ab1d21f111352a49
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 988f303bb3d347f8abfe5f3228f6e638
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# ab40bb14268f4ef0b66872b9592295bd
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# d94131265c2c4c9494d07ce52cf6715d
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 2b3333254083451f8b0024c35fabf1aa
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# f7aad8353ea34ca4bb81aee0e032e667
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# a161582eeb934b4aa82ba43aacd98e38
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 027545f861aa46e8a29c1a8f4c95c51e
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# f68a2d6094fd4748b8e782a6e4d5805b
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 50efb1b2cdfc40b597ca22663abb0a30
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# c670678686f542069e6e21a7826a2123
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 56bb63ab643f40d091fc27b7036c6ba4
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 719aa5adec0b4dd587591e3d1383c627
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 7905f625967646a19116c99e272a396a
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# fbdfa17860ab4bdfb0dc5594a43a14fb
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# bf514cefc1e0428dbd043aa14b652264
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 2ffb413536f94835804d6516c40771d8
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 454b73d3b7de4a8996d040efe8e228cd
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 2851169fbef44c37b72ab7600b8cc21b
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 9510f480699242928d7499a9b20259d3
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# e0b2b447e69c4dd380418ef9e7afea88
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 2be806c6fcae4e59a2090c23127f7166
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# a37d05637bfe4619b826f510e78a33b3
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# ca9b4bfdad614bc9bc642369c1a0b77e
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 9dbf04ccb8d340b5a09a05254b3cad56
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 3854c3536d2545ec85877344ed92d94d
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 0c407e951d99422e8f0d59caba897cba
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 2deb0cd178f74214bec1a511f941088a
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# b8b9b25cc8b54750a959505d3dc76482
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 5280e0d4a85041f8b3e2ad43cf59e85e
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 67cc124d23264338b83f3c71b416d2fc
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# a313e4a31da94ee7924f8348034f088b
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# 72cb00041e1948d0823389a845ca0277
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# e778c01e73d7420cb44b6ab50f1c27af
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 17c8daba39534f2a9d4773b136692319
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# b4477fa113604285969535267a327b8f
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# f876c5e9a3a240dca42db37970f5874a
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 26ad076fdcc048f089a462c6b2ef30bf
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 5a17a194c3be403e9897ff134bee6996
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 452d4e523c354b389dbe48736f69f9d5
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 31a7ceb96b464ca0babfc80ccdf54f04
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# a812ad1d47384ffd83c2edc33eefdb8f
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# ed64d95de3fd431cac9737466ab4bc86
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 70af3dfe667a45eead967503b9aab322
# d490fed870cf4120a4b7eb3fdedfe871
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# ef80a3d724ab4e199d12fa69b63e33da
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# ab743ea7d0a045b489d3bf8765cb1eb4
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# d5a308db7f74470d9c6a1662f89ca381
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 9a1e666c8b044d76a27f44aacfc7f87a
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# d0c4117297484ba3bf895fe83f2724d1
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 410d4f4703604ad3807348924532b331
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 2e0587ef1b134ad8a79cd8fa18b595a2
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 99577f17172b4832947a19c851abf168
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 6e9e30ac5e0b4bb9ab54eb8349691204
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# edfe3f9369864572b767592fbc28e6ee
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 99da552cd915457da790bf6649acded6
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 75f9b2e1c43b4366a7ae4d161a13dfb7
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 93f5255aef58428c9ea9e4cecaf706a4
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 668d715d49084a5bbb7c3b191a84739b
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 33b9d4f72c2e4c98b542a0b6e55b3c23
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 73ca4862e5c143d4bca18f23536bd004
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 7b27053b6fe548dc85f0008910c3d60f
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 25f652742bed46fda8c08534ef0c98cd
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# e587990960e449c8973add382ad179e8
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 2b62a9dd2c544caa85187224a67b65b2
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 503b2e2510ee4cc8952f0e58d140ed64
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 78e0dc1dd93b4224ae09dc6d45a8709c
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 8cd366c9a43b488887631bc23dc538bc
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# d12bf34db23245778026f43ee9a7a7ea
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 345f748f59614f6ca64913763c5298e1
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 247186d6c6104d4ab4fc58afda1cfc98
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# b29d74da5217430eb7a664b55e8da583
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# ab364de354b84634b71843e779e44957
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 38190736cabc4693a897ad1259bd0418
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 514ea3cbc0a04ef9987849ae697f4aa1
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 613f7d02968f4a0fb856f68ae576467f
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# c687a9a801a84c2c90c5b9f8cee1bad2
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 9ce56c84f77b46cf9114e0122a263589
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# adb9d9514720418481d35746362fa2a2
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 4324f208b36f43539662cfc318c7b6da
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

