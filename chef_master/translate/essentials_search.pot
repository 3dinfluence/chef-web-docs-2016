# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-05 18:04\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 9c1a02b9bb2a4e368b5481245843f3e9
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# bb5587e6dbe14ed3941b36d6d453aed8
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 74a28ecd30b842d6af143c4aa8c518a1
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 5b9b08ff6b6142638b8d59414d906387
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# d528bff829fc4c46a5a63e6687a015f6
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 0877967e7dc54ae09925fe4f52d298a7
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 59230e98bef5450189735d4a3c1fc9a9
# b7177bf2703e43ada55b78075ef18cb4
# 82c1379732ff49c0bd0b4d25e55bbda9
# a4a4a0a111e5456eae09195080d0e0d7
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 71ba03e134be4ac88c89ef49246feef5
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 69cf5803a74b4bd29522948106e8efd8
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# a612ac8c245d42e388555463173e23d3
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# e44c71aa84ae4e48be300dcd83a3f9fc
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 0ea93bd254b047a3bb69614351c1fa53
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# f1ad9144754d47b9a68f1396db914ad1
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# bcc0612b28f641c09f6dc48f717e9b2f
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# ac9b30977c044572bede85d50d214edb
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 19a4043de3a143ffb04cfc4f3e8167fe
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 60ca37c016c04f12a88d81d9e9f66150
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 2522a1a411a642a7ad80d9f502e6b368
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 0499cbeab782487ba97b4e3ecc8363ea
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:22
# bf79ece5e417481da800e6a368c0dda3
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 1df784f1ada34c6c971bd2f9dfde6b06
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 80eca422386843b2b4275fccd57a814f
# cd371312bc1f4b379655761347b8a0d1
# 720c88ecd4c04ef3976e0c5e43ae275a
# 70d1dd36d795497695b8ed53e969b95b
# ee2cd9c597564e9a8e3e92d345965ebb
# e30ff2cc1b8b4790b37bdf4f43344f56
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 0bd08178d2cb45f7b186ac3cd760930d
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 0bfe5205fcd244e484a255885de64d5c
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# edb8914a2f914dc58f308a1edba5f9f0
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# b1844517c8e846bd8f6799c9dec9264b
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 14954d1de4eb41cd8cde7abd81b717d7
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# cb3f9eca75804f6dab36178f2dadfeb2
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# d6007c67467c44a799dc8b03e3e47e48
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 700ea55d06d9480fae167f6ea95b2242
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# 9f7f9e24c32f468f859c869f720a0c99
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# cad64514ad2f4fff8b7eee43d52b59bd
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# 6a0f0ffd3d4d4bfb95482bcd7ecb4d1a
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# b42ec40fc97c4fc3b56e0ed69cabed8a
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# 757257f61620460096b7eaadd87b246a
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 941a44dc3759407b9451991ba012c3fa
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 8c465701695a4fabb08203765a0e12a2
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# dedd6b4733724d1cb75119e0d026e720
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 8cf3890974c045abb36c9f37d29ad166
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# dbefa6e098f54d59ad499775f31c49ec
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# ce18b2c08f7840b38d0620d68a0c29c7
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 38212507d5ec44feb1613f18aae3839d
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# b844eba3028348aaa5f2ff0f225a25a6
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 02a901fc6dc74857bc1db0cf921dce6d
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# a03b3d81c03744bb8d664c23669e0ae6
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# 630b94b02e274917819e24e7cd587a3f
# c2616a8dc61f47d5a56dc7fca9fbbba9
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 6f6465be72a8442dabddae0c39c2e8d5
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 773ceb3feb904b3db8ac5960cc4e2d54
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# d0b6248a23644463bd0d5df428ca1594
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 85729acc6ed549fd9aa1eceaf3ed133d
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# a59811ba00d84b6d8331535ea3eef7a5
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 436d818f05464218b840e4575cd81db0
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# f8b01d769f2e4e579f90398326b7d6be
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 89f95b7f00b2440fabf569aba791db73
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# e686609156a0444192e038aea24a7e14
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 8dc22566eea346d38e64ca15406c7725
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 03ce33587b6e42eaa71d730eccaffe96
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 4e01a097bdcd449e915758b1779bc394
# f8d46e06460f40f6a44ba891e14944e1
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 2c28496b622d4afe90d9323b3a91d2cf
# 11382a2548c942f78c7aec261528ea83
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# e1b0b8acf8da4dde9971fddeb775d03b
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# b8cc848a9cfe410aacf6391acf7b8995
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 59b4ba8002a74d9cbd3b544ae5674c3a
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 416dfe22393d49eca7c418d8fbde64c6
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 672317ce00ce4c029e8679e19c0c058f
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# fc9ab81da22a4ed98a2092b477fb9953
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 4c730190748848ac9c413e89f627db0b
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# a814f9042317488484d31a29438ce230
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# f099f304580b41ff97818c69f99288e3
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# a0539e6846c349e1a9e1464ac3c345b6
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 496c6550fc18459ab559195b46c29462
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 1bf2db580a1f44dab783e6be71aa75a1
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# be7099bddad04b4fb80b82df1bb89dd0
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 54e946daf8344c44b5c814705a2cf5e7
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# ec82869a9e0c48d7987c25c771f87e55
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 8afdf30ebb2d4cbc84a01e263e7f430c
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# c61d0a5b6af04a27be2b4162d5af4f69
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 5203fca1cac1457eb7dd25478609e752
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 9dd46ffe610b406db00723fb6c6db07a
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 74be7e7ae4df4a2dadd875a26a6e78d4
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# a0c1543d0e5a49458735d38d6bf93843
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 8294898a30f14a72a13a5c07afb47de0
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 0f743fbfb153497c86b91b3beb499325
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 3c0f67af2e87427086b863623bf785d4
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 31a0150c99b643e8b718d2057549cba6
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 0dbabbcfdbd34ed9b07aa8286727c197
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 1c1327e1ad154e6a9ddaa243b480bcf4
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 443ecde9e8974ddfb21da72b5c28fdd8
# 598920099b984a62a60863dc603350ee
# 67643c63684d46db943b72de60b41878
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# f65f5d0e1695486b870abadf8c2e0e4e
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 2a9eef3f400f44c1af981657e0a0e392
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 310230fc8e5f42d7a282d050a55c508c
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 47d83a5bcd2a4b84b17dd550f3045236
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 4da80c6d49a64191b64fa83ec0e4ff61
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# b64c3cd7762f44f29067d0bb822620f3
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# bf6b2b60c37940e0a8a97818bb402f30
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# a59d6363de71470b81463430a3f687c6
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 277098692f2e46e4bce78e73cce2f54f
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# cee76e5f48d04d379f2fc63eda3eee25
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 116d9dac6e684c6da61d341f00f533ed
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# bd99207091c84d51876dab9a437650ca
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 98252cdd30f5412e905a2a46aa89200e
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 253180cedec0423b968efff21c44809b
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# d0300e231e5948de84da7c85c93caa92
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 51baec35618d48d7ac135d9c14227184
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 47795caa297248d0995ca4dabf84d507
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 9f590b6a5351487a8408b79487e539b4
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# d579d8cdc1dd46b488ceebee53c25e3b
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# c7ce601eb5194d6bb731b7abb2ba31df
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# ea1294ad90184e94b1459f0f906b49c4
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 428209d8b12b4341b7b6c9a209b35ff7
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 85b4f992471c4eafa562aec44e999925
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# a97744944e7b4949b8342034f2756fc8
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 844b168dad6f4c3e81e31c6ede49d731
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# c7e7228351b44e76a516ac8cf7ade068
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# e24afdd0b6934e28823a0b9e4d5208b0
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 01db125c5e7b4efbb5a399abafca0cce
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 43be34f32f804dfea32847d9102ccec6
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 3e2eedf39fd0417882d35a24c1575f53
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# fc9a0eab113841e095d729f8be76d45f
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 5bb1185928fe4ee8bba6f7daacbda9c6
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# d84e50f4f1da4d5887c6ca3814b3ea72
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 4a20a1d1a1074265a118d95e7f0b54eb
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# be6769f542c54a9d9b6578c04d7acd58
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 309d27d3f5aa4b52bdb896458cadfb60
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 8ff83a44883d4ff9be154228a91335b1
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# 2bf0d6e6960b45d39e12c0a0e93fb301
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# c8e45fdb0f19446e845acdd3555919dd
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# e870068a5db64a488f1e27515f56405d
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 42c05e4e088d44be90f363a36077852e
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# c9669cc3874f4fd4ae09c31c2b88f9ba
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# cd11d53a695f4cefb06a9b0dd4c40325
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 283575c07b6c4ca2b63a92c5a79f7b4c
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 021007f82855444b84d3ec45daf8a883
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 71e3509c0a5449cb987a5584dda273f7
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# fcd05048527b4db1aa0fc6bd21d9c447
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 7fdeef9a2e5543e68624abcec82cc638
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 1f877b0155364ae8ac57c086bc67b7bb
# 06c065873bfc48bcb19be5e54986064e
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 86b5ce65887c4c8aaf1dabbd26b756a8
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# 471d4dd1d0fd4380b5cc88e13851144d
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# b77d1b339d2843c4adfc2b6c3063fe8a
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 86c39714157c49bcbde1433b8840dece
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# b1877180967348708e4c7a96978f025e
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# ee8479b0467440fdbd9d0d768732fbf9
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 2caccb63d02a4e3bb5158d5071693d3a
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 9b629ef5cdd04dbba46be68290116eb3
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 1efda83660a54e58a5aadbac99f84de6
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 1b6800b7a7a9441aa4fe704472ae8c85
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# b4652521649144ea937cb70c3c6f3a45
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 54cb421125d643119b8d342cba76edfd
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 32aa9c6d32e84a15bbba74c1476f5ca4
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# fad7d44cc2e84ab6a294b3e2f1013db0
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# 8683284417b9446f9595cec71f8a5f53
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 08001fe636384edcaa809a24d370b147
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# df43bcfa96a341318c8a01efb06103cf
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 594d78485ce04c6d901fd5bd4d4b3fc4
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 23cfe37ef9ee4f65ab6af75ef6f11ec4
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# f31126b71cf944618b9d176e62b0d971
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# 0b978614f18a41ecb9c4e85461e08ed8
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 4a6e73cfd25a4d499a9880c4bee0b9f1
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# ee97c0baf273472f8fdde9af3911c4c9
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# f85d6df9367146119bf0e85d7a01e13a
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# 46ca02b4fab34036a3cb4cbe4102c546
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 3a417d8e1423450ea9741585067f2eda
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 9b449cfca1624d06b8c5248d2d6f39e9
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# dabe1c46f8604c3a8e53375335b3377d
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# be92d2de0c754424947f3f42f0fdf3ae
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 80fecad4120f4f4e9bb3142f99c407be
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# d49bee6db3bb42f4b5c67bc8456804c9
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 8d9c6ff07f5547ffb1d54f760f5be7e6
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# a29279db0e084b738416ddda2ce4b3a6
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# b3977ae9e38e4ea888a70d52ab3c8ed3
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# a4d1b8a1bd9f40b4869ef4283d5c061f
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

