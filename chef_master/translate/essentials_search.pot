# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-07 14:29\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 6b9a172eb35d48979203e8ad49b9c1ec
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 4528622304e8445e9de90bacf664b964
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 35d3c45235084552896fb92b3c5c5e46
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 6b7fa82b36e14c8fa28415406bfc0acf
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# e5cc7be2ff5841a18e154cb37a35c24a
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 2186f2465c364f578f9d46297241cb30
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 0a4d674686eb4ced995e4d2cc19bda09
# 467f681da186469f93051501e001925d
# 5f16d02886d1486e98904f7040e5df74
# 458f320323ae405aa300136f98e5ddc1
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 998ac76ec2bc4aaba298915fe6effe82
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 65130ea0c0794711b62f0e80b659a746
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 08b2f1189f464fa88f2d05c0261fea4a
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# dc24018f6e794e029a9a6c40fcd24e9d
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 0554cb89441548d8a8c04a48827968dc
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# bea2238017de4b348938a385ecca1444
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# e1039c816d624a59974eb03cc98cda78
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 85f19a50283f481781ffa5032d8c5709
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 39df1211f6f94b1ebdebede75f8412ac
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# f18ffa192c444f3fa09b48c8979ad75a
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# e09bb575aeeb473f82156bad85099948
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# dc6c67158d26427eb72dc5d7b3a74e58
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:22
# 187d4f37ffc247a9bb69d97b7326d0ab
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# cf684aff5d3648f6ba5aa79dd394f1d1
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# f6277a771ee242d0b9802de086c5f16c
# 0e5109cde9f54f2f937c29366ec689a7
# 3ffd5b4b29fb4aa8802eef9b79380427
# 3d65d1951f7244f0a25d45521b1fcbb7
# 6883bc78e6df473297e292b1a99033f4
# df69ec61bf4d4be6a25e285a872a0d6d
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 3783c6fc38ad46618dc7d0722d50f33e
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 93369871aae14a778d8bf12b871c91ef
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 9e8e03f9d5fe42d6af122b0be33ae3ba
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 152f78b1e21941ebb5b3c4b2cc951582
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 99c605573a0c41ea95d0e90367e30ff8
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# d19e521e99654c13b0de6523392a5809
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 3289775480b04d8cb952bfacba160952
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 926801e1b5cf4f60ab06a89d8e090c03
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# bb2e4eb868304dc8b5963fd393893135
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 3d2c7c1fbed543c8af9085aefd718e97
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# 3c9b0def948f4b61a27fc9ee6f19e2d6
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# d54300e102f741ce8936e18a4e60b47b
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# c62a8d7120f443e5bf268266cf389b4f
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 70e03b8c04684bdbbb4ef8c8a05be71e
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 9a53f1163a414c58af43f6461ae05486
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# c0a9a43a904f456cac410e624466cfe9
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# af8e642dcc26439989a4c4444e10478d
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 4c3a660cebb9407284b0bad190b8c194
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 48c01ed6cf3045ffb52f170f43363f9f
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 4b24b71600ae4a92b8a7bb6907efb284
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# bfb2d3096f9b4833ae7307eef379628c
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 12ff5caa01f6444382feb268fa20fa25
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 50803312f8a040e29b722d9b759030e2
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# 7cad6db1135040f2813a94b79df0633f
# 908199dc00244a7dab1c0c8ff37ce2da
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# fe9332fab5c241578520a838f82a8b9f
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# f0df63bc8d3347e9b520cc84caea9ed1
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 3ed71f96890444d199a5f2d5f22dcf4c
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 6c7382f5bb764795b09bae751d3f2afc
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# 72afe0d67b344242b0c16997b0ad62c4
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 8c6666160ad54956b61d452280b2aef2
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# bc092a9445454fe79ed184d73263f79a
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 8bfa291759aa4cf4b0f170f93d1b6047
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# c14e721e7c7a439aa04e52c0f18a8cd0
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 925055a21d114c81af38a63080c550a7
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 0d30fa31ef424925baefd3f0f3e06907
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 40d09e614d9242a59c70a5211dad738a
# ec392d3cf33a4cd8b25e08e0881eae88
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 8f6da4571c6d44c786fa0f017480d3d9
# b09d4c91126c45ceaaa15f730589cee7
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 580be087f3a040678269a6cd20b5b89f
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# c1310b5195be4c5f88a50d191f458393
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# a654a90d7d1d4a9098cdd0dcb21e1583
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# bcffdabf4fb1420285b3b999074efe5c
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# c7bbdd4349084834bb4b6b68a42169fc
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# e769b719a17149fdba47362487d3b4ef
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 90af062ce5724bae9b8df18042756330
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 2750ca474dd84697a0fd664455ea7c31
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 925661e10a594376b5b5ebfa35c2ecd6
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 48e16acbf3d1404883040017e5e386be
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# ef4852067d32462392d334ccc26c6aa7
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# dbf8360d574e4cbcbbf3ca6634951dbf
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# 1f99f8b5fed644feb1866b3b4ee83b86
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 084c10b9c1514e0f8f77b4dec84ef403
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# dc0f61ea32be473b971bb6ea195aa137
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 67013e2375454f8f86843fc8128452ae
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 17ca29d352634631a48a99e885c0f964
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# cc163354d6954fc0ad67d08404a42178
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 0d54ef6e34644bbf9efea277caf7fb04
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 3c2f568c657d488b9b58d5edd98edebb
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# 7c65534fce394e4a8a07e8331aa950a5
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 05b4c817952a46669c202eda701754d2
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 664e72b845364878867703964147f175
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 1c988e93e7b94e6ba1052d02495fece2
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 24dfd31c29b04cbe996d067133897a09
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 72c612065e05402e96a164421b12a066
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# b6334132cb3d453f83ab17f730bfe617
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 762473d1ace84f65bdbe760c5dda6c24
# 6de56f6e0cd447d89fa65e3e3755ba6c
# 7c586d6f7f444fcab5159f5a85ffdf3f
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# d2095ecae339441caaa2a00fe64a7e3c
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 487149c0c99a49c8bffca12e3d4bc4ad
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 6c24fb09ac704dac94ef578b96cde004
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 32c35f56fbe34f12914a06a9f7836179
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# f24488f31d344873a009b013aa6d5bed
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# cd9de211aefa44d095622016539688a9
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# b5d800a8c4224205b261caa4b1c5d6d3
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# c9930085238b4c4b9bb41b7b8e517661
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 18a650d494264484ac42f54366bece09
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# ea5f0664090e4b899f32c2140f7ed5af
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 684a822c5c6646aa8eaa891f9f0fc637
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 26c6f7e997bf4bb8a2b7e565bc28783b
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 97f3a8eadbcb44608ad94679bc276de1
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 8884b406f94c46a7bc2c63e6ea0fbab5
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# ec3e3e89dcbb45339351849c8e45ce28
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 70ce705f606549cf8484c5e0f328e1dd
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# f813bac7a81b44f0b00eb76cd2433950
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# f426e1ec77824fd181c01afd624f5fc5
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 156c2762be94475591a349f062c35be9
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 1986c661800340f7aa778212c6345dd3
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# a85519ec7b0d46509f7b8ed43e01ad44
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# d107941736fa4093b92d6a775f4766eb
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# d25b84bbb40f4d668565da55c061bf57
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 0bd3e33cdb1b40f3a42f50ca61a583dd
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# b81c6e27d5c54c7fa2b7cbe6795d2bf3
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# fa085fe60c1048cd9176b100ac865709
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# e77124bec7f64f79a580f62aa750230c
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 4c0bade5ad6a41bc839beb3b1cd6b620
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 6df3b3a114af48de90fdf4a95c3c8348
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 0a792d472e844052811faec92cf66268
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# 848af7dada32484ba8d1808899b3dac9
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 4e06c380269042eeabb2411c9d4a75e0
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# 836233865ef44593ba25836d19d57c93
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# e7d69b10d43e496fa645fb1938332074
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# c85bbdcf62ad460e8f22c3b6dc3d0e92
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 02e7117c961e4216a12e0886d6007cb4
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# f9dd5294526b46bf9a6ad28b01415b14
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# 0350e47c5eb741288d532e7d88deaf2e
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 025816edeb6e425293257ed8e50f0c4d
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# aebea82402e7464f9574dfccc85f0aa7
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 16aed9455528479fa4d67c7898468f5c
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# a94018bd0ef64e94a26bde052be50ff3
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 0faab19657374ddba42e9c13232b7c32
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 103e4133ee244db589e165ae05a4fabe
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 33f4a15607194f9fa29e29d8863d3e2b
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 1f3cb45c8dba4c09a2573964d1c398f6
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 788a82104f89445dad0e2e59c9d086d4
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# c08d352029014603a887ba9cc201a940
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 6d6fd95c4e8e4031a427926ebb92734b
# 226fe844518a46c19c518d9039552085
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 02d56c634898439f9d0d038e7b45dc5c
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# f65f9bd8432645508e5dd56f6a7d78f7
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 6884522fff4641a790a61e2091cc3f44
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 4d2d6485fdea464db919f3e364da508c
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 83bd7544bf7c4ec688c53c8cbcc1e6e0
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# ab135ec55a854933814fa8c9930bee03
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 275ccbdd43c74d39b556811eb686f8e2
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# bb6b98745b2b4cb9a799c7e13933b212
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 96caf2f20024490a88983db37154bac1
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# efb649bc85b84c6499e5ae1faa9b6f13
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# f7c4023f03fc40b2a7639e9c1a8803bc
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 9f6ebc98687f479abca415b44350c7c1
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 97a631574bca49db95aa53820d0cfe40
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 836f4fabafd044f1b9ea2d803b2a6bcc
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# 50ee85dfeaad486383e713be203e8c3d
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 5acb04158a8543fab973e30aca6925b2
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 50e118dc204b4c12a14a38390507cdfa
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# f3c558ed959643ab89e96088bc63a888
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# bcf127e747f54ed3842e03ff3de5a6f3
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 49a1c89b4168481baf64f7c999cf119c
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# 20f3f37c304e4446835e5be32af5e525
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# d26c29b58947400db6f63f2a50ba7b6b
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# ad5e94efd69b4cc28b22e194654d95e5
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 6594435d9dcb4f2987da436d7ed7587c
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# 49da0f02c27947a79c7c0ece86788f47
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# b2b31ca96cca407084936f50c9db64f4
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# b17a4fd1235541bb950c23119222af31
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# d3d4d8f997b94bff8bf9a0200dffdf3f
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# d70be84b124e4a10936913e7d291fc82
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# ef36d03d989f4d6bbe75932bb99a4627
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 8d11f2f963b44d9f9f97ba2a1dd1bb69
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 9b0d54509e064582b6268bf2148e8cd3
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# b3850caf436646dfa9fadd4f6e3516b1
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 0a0b35369ba942f0a6fbeb33acf0fe88
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 4089b2d063df483282b3f6e61ace804c
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

