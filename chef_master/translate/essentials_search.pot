# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-05 23:30\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# befe7171273c45a1bc3abb9402d79a6c
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 531b4e664e484da0b2e0c477f0a0c448
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 26ddf46498474c8d87e46691f8bcc793
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# bd5950e8480c4a0ca81174c885823ebd
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 26f85da5be3d4069afe5173bf973321a
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 2b6355cd1cd84db59d44bd4cc4c56fdc
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# e82f100ae33a441d8fb1dcf55eddb875
# ef1add551b2047049a31ce7e3c3d88ce
# cbfdc8d0fb2c40c1a2ba550cd9b2420b
# 4f83c157f5894a758fed3c20cb79f41b
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# f2d713095b044e6692a4a008ab2844fc
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# a05f1b5136754572885dbb2c6a056ebe
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# a9ed671ed89c4634a94913e6bfd2642f
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 57fe14ad824b44e4ad214c90f22c68c0
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# dced8436b5634291bb9d35312edf1a22
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 3e101cbf0e5f419fbc0ab9dd1b28ba63
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 5e86f232fa0045af9fd65b910a19f600
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# fc453a10462b4e569718e1adfbd5638b
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 76a38de5707e435d97e39c090f646a03
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# db647a24ea0e4308b433e39961bbb4ea
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# fbc65bbd4f324b9bbcc6529f8f0e3552
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 7b7d76cf919543d29389bcc30858ea50
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:22
# 7b33cce196944bf6913e6e5333e2cf9c
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# cdfa808c70e34e2e87cb448da8dab89a
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 5b29fb83186c4063b49562ed4fc95933
# 1676370af1dc4538b85e3ab0f761eb53
# 06574c8e106f404ca4650710d8dd06ab
# 53c90f202147448286e32ad7c944a856
# d487871c0a5546138277b21f483205bf
# a8e99366e288495a984d06b48286d4de
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 8805095ac0f64929adca6f6e1ba45e28
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 304efdc6b2a94f9a820f51a55881aa7f
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# d3dfa2d7f47a421fab49b2aa0075bd64
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 70729ba4fb0a4b758ce8521491927d4b
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 96039ed5ad8c4feb9be281509a30fb36
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 518fd541be804cf1a0ca22d67600b551
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 8a07fb65a9c74df8b6a0941ad1aacddd
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# b8a73d5e74a94e97842e346f1fe4bd93
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# 61925449b2ac46b3bbe4461a7a60903e
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 7a5781dfc43a47a293c7fd3b0693839d
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# 41d0383cba5f4bf1bf648299ab16cf14
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 9b5070d0190a4228a1b031cac1726fdf
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# 0513bc361a7c4366910289fb7fde3b09
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 81cfaa1e1f95468785cc5b2edfd599fa
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 6eb36643f13e485f93417c11a4555558
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# b0d27b71f7c44c4ea92a5b717c1f1afb
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 55be630f4ca34609aa2d6111724a19d0
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 2b22e2c5fcf743ccabd5f4a8503eaf74
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 8b0da68396084dd98a7eb221346f007a
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# de12309065bf48238a43dc7b0c1fbc3a
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# e587e2c8d041465895cd13f4ac200cc8
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# a158d7825d904290b0bee0d96b74cf7d
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# e310c6de8bf949f1836887b03d998489
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# b28a2ae5a4844ff3b96af450a540637e
# 36cd9078b12d4abb8aa61ac76ce65d13
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 984e6554e70243efb1bbbd351eb89473
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 1a3ed871de1d4119b83f6c5814aa9a5d
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 40f0d8b2d9f64efeb2a0d187102cd044
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# ecaafaff8fc34c2e86c66b0caaac1eff
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# 91b92e188f72450d8e9c2577c2f82ff0
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# fb427584a0b24cb1bb3e169599d8e585
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# 93707247ce9142b19d128186809e4b11
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# c47b84e7c84247abbab02c725f796e41
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 9eda8a910c3249cbabeb29fa595f2514
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 72b6ade46f7d4261a615fff85a8f2a5e
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 2b6391baacd64706a35e78c915b25443
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 25a08fe0c8c04efea155479a473bc384
# 3177772b456c4ca2a542b7e92f25f17d
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 3eaaa34dd0b146a7b9262bfd997b969b
# 8152ece403a04feabc65e02330366c42
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 78619c07d9ad4682886a2f474bc062fd
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 879fad1415f643d5add0f741201b4946
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 35ab01886faf4d2ba9553f359fc22048
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# b35bc7877cf0407ebd276fc56bc8eb41
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# ba909a6d1a4e4fa886573be1d78e816d
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 2762395ed8ed44238f10db08a56b3d21
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# e22b41aaf1de488d8ec0ccfb3c6a2e47
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# dfb623374f25463fa100fed5586604e6
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# fab27a871848442d96c3a3fa50bebfdd
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 82d8606db6b04b64bdaf5fbd2d45821d
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 0b2b3a0a22b6449e9f7788254c9333e4
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# cd2c58f1923848208656179385615a60
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# ebe690b3e48a4207b9cd5f420a925e42
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 20091f74494c45c5890c644968a25713
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# a71b919f71ff42e8818ae5145e1bdfd3
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 1df53ad392eb4e76b07bb7938cda85e1
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 29545430cd1e4aed93398a0b19dfa1ae
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# ca9098656236420a896d353d0327e111
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 64d6bf68715c4f5e9085814e251dbd28
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# f4d8e99c9a194d208e78979e54eb8902
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# f53ad9f07cfd4a35b310d02db2465aef
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 943a7a458b9f4679b5e99ba2c2c19a25
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 69e44e0e725144df8388f6cd35624db9
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# c7da32c1740b44ee9003ebb689c48b24
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# f13c690e4a03481aae425da84225de57
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 7d1a6ec9c4bf443397ed2051be5060d1
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 79d44d2956ab4d9e9fabe3a5d184de5d
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 155f32c54ad245608f4960f9376cd509
# 8a57e32423dc4e38b6841101be847691
# a11f841b8a1e4bdbb98743c634ff3d2b
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# a473483a747b484e943656fee45a0306
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# bc6219214b04414aba0a416972c74fa7
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 103b2c8a5575408ba5d740d8aff38403
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 571fcf56a0274b2487a679d3db8c0695
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 8af8f4aebf794fc8831b8d9ba03ffc22
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# ea4ffff3685542c9b7648c072ebbae7e
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 9d9432ccfa86408b9aee12baa84f4018
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 1783e70790724c3d962be404c176748f
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# cff7e8c718e34e1ba23393490b2564d2
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# a045d7a3cd7541419aa8709778926793
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 5c36521824f04be6b45c9faefb76d87b
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# e95edc57a86344e485d2049c937fb0a4
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 96f7b4efc0604307b0b0d279b6b09523
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 1bde6667b57a436cbd2f2cef05230047
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# cab99b6b9ffe47beb03646540b65afdf
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# cc8f7fdb5fb747f2aa039bcde7bf008d
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 403fc415def040809ae60784c84ca19f
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# d9fe723fe0e945018985dbd261d0075b
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# c33e87efce1c401bb7deaa851ca22466
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 9e5f175225fd4b3db21bd34bb71a83b4
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# db99062b4c1a484f8c9e3762e5eaa6c4
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 3fb1bbfc0ad0429da158667e38526c20
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# d8ec0610c3cc4b9abbd5d032789d55e2
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# f2f010ee3d9c41a1ba7e506a6a91189c
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 317c0a62574345d5ba73d4e8d6ab132e
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# 27d67a475c4946b2966bf0789152748a
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# f0ce764f05114fc5b9d7dd8a3bdbddc9
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 23b573b2c6f44feba9dc224ceca79a43
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 94a0beb1951a409fa5f2c9b2453ab677
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 8882a4c1adf44a1e9f9f23d59e9292ea
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# ad07916c987241feb7b594cad48f715e
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 8d6e90fc60e849ce98c75fb8eed6d54e
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# 7d194b170b55448d85714ba93f8f07ed
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 1209d217bec34acbb59ac717bd261e1a
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 72b5da0d253e41d2a5b4b63be3efb875
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 5eabbfe124bb446793ccc997dd87fe56
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 7f3fa84ba95c4bb78eb21fdb00ebd54a
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# 513a8a3f905e43d4bb1a5401ff7b9240
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# d7b46e35fdbb477d851c22105f606282
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# bf37cb1ab67043f6be842ebadb2074b5
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 5c016565a3e3461588dfa8918c1558c9
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 8dbfa736c3bd4338a528c0ade5cdf8ea
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# d6b482341e7b41c382016be5f060e166
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 0085c1c368c84796881cfe4949cbca60
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# a33833b0b6ba44c9b298a27ab2a69276
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 298460c825e64fc991eab34a9f449a19
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# bfc28a248b1a46c2b457f2df4fb5dc55
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 0d432f1171844c079383d68701acff5a
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# a3e2d68ec54c4312acebc610b6af423e
# 03943e1d1ca341ffbc2c021928414514
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# ce3658f6ed3d48a98b86989090836ac9
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# ec04fe733f154cc08138b66c373ac995
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 40a9eac830e04d009c4644c33aa9cd8d
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 26c8ad1297e14b11a9c3ede7a47f75af
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 58bda10f22374f06b7e8dc72c749fc59
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# e0685a00e9674235880c0c123500e0b6
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# e6bfa002d938413883707b8e440012fd
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 49ee3ecec7bc4864a89ba64b7beb33a0
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# d0101e54271542d6a03ca22b653ead81
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 1259942ed8a441498188ecd514ae5126
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 6e3a9d041f5047e1b201400a1a7678c3
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# ac0535011fde4ba989f11b278b87b537
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 8b908c5a2c2c483f91496c9f46adc3b7
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 7b7628815c7346dabcfbfba0e2c417d7
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# dc353b5bdd2e49cdaca402d7568a5bc8
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# d15860219ffb4e1983827a64777b77e5
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 7126c801e09e4ac1bcd03daf935f7999
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 7ca137e8b73f438d853573f47c99c389
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# cec1ca034a784bc988f78fe0995f29d0
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 970ba2d2db954f15ad11db8377697971
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# 6a13ddfb08f047a18641e4d974bed8ec
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# e906f1f6cab74cfba0f8f34b46719e4f
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# cc709766b2bc4c4e9b58b91c754285aa
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 3f53d2b270f341feaf91a030688f0809
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# b49ca2ba924f4769ad6c2b005c6016da
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 56d383c723714f8ca64c463b93e7db03
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 03e71dfe73c54932abb154f94c9c716c
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 80cef0df4dbf4f96ad3a6e01b0b5194e
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# f73df8560c3946a3a29cbf82a8eb760d
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 039c1bcee7244cc8a01f98c1aae286f4
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# c0bad7a087984b2295094681863ef2d0
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 85206a016f9440028a9244db83824e99
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 164460a487dc43388ea5d267a0268934
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 86c30914721840f7b87f3f6c1af86665
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 64e80e4f29b2484793a8c29e148e658a
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

