# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-02 14:27\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 55fc19420a484901a00cd50706058e65
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 6d3b9285ee734d448bb86a69044bd1d4
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 05ca67e605f1449286d227a51ae37b9f
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 34af7e6b8c9741d7a22473384c270193
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# c0428a0970314e4f819fcf185c3f5b59
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 649e2d61458d47c58e638e765616c700
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 862bdd81079f4dc0a4a9036a8796b83f
# a6e8dafa227f4e9c8a6456d8840fa77f
# 3193e95e4c894f03909e6e276499e780
# d2f7b5aa5ee0443292cd6509745f9ef6
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# db1ceb05b4f14131becd27931ac371ec
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 1b998b58b3e542dc822566458b5ce56f
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 95c601242b0d43de8f2d22c4a1fbaf66
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 9d50d6dc8fc747b69c171ad98600ed8c
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# f61441c325c340cf85a63a068e0b55a6
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 0fca08d9fc5544e6bb04f56fb43561fb
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 4877f5927f0a4354a9339cdf4b38e510
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 60c6e685dea943419883ef1975aa732d
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# c68fc9473eff4f50bf6aae85b8f192c4
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 09201e34c23f410787153f2a422a41be
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 9b00233b71bc47ff8b61baf460d18f58
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 7662fcc60a85497a938bc53dc253d0e7
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:22
# 172bb6cd9dc54af6a6c9c76d88801e6c
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# d5ff12f42fec4206bf8c1e8a9c849c91
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 2a26b29b90804183aa26dbbfa0645d4f
# cb0b3f75cf254d8fb03ef5434ed2e155
# 0658c893bd6645b8808f9c73beb4c8f3
# 1631c7735a73448caec522b1fa0ca1e6
# 68297514552541cf8b1e2715936be06d
# c42c68d9ba304ac2a2920690721a2b1d
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# b139c4faf6474fffaf34492286290fb0
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 1e098a38d88a4005a1b279da0da15fe3
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# ab5a062662af43768ec7ab0e9deac8f6
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 861a24d416644f99bebdbedbcd8e4092
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 886cb5bdd78a4848bffbddb39599bdfa
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# f3cf3e6f3b4a4193b2a5fac9b6de5492
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 14e755b54c3744729293d48a8c2130d6
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# a074e6b4f224445e9699b5cc5f6b4d44
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# 5166becda93c4631836d0281a6c9dcdf
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 10d055be845d47759b79b2ad11d2818d
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# 678ce9c3ce744a56a331163adc410497
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 53ca622af2794502bf836dd13a3739d3
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# cbd2b49f2e6e4155b679e2872c4172e7
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# b42dbde6a84641e2a985c9de0d68f23f
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 296fb8d4448a4ce684687037221013a4
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# 621fbdfb222749cdb779ae872d5f18fd
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 3a07a45dedfb429a82fdbe226ba0627a
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 2bb1faa0588049588dfbfa40349a46c5
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 14d39d38580f4f9ba322d9549b1b9f6e
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# f43d6fbf2f6141319e094efa749a000d
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# fb1c5830cc054728a27eaedfb05682ab
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# b013428a75bf473e909a110c11fa50ba
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 7f31b4c471404a37bbc5398b4d6dde5f
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# 40e7544259fc4a8eab63f8d276d87567
# 151f6d8a465242e0b84c1b905e88e149
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 6a4bef5e06264ab1a148c6043dd0b8fb
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 20cb29e937c54837bec5ee6799dcfada
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 10de3cb44c5740d9855967c0c52e4f69
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# a62dcecc1f854209acc2afe67e84ef75
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# fcdfef3fbced492db87034d01ab8c47e
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 58435ce38e224c1a9ed8ce7928959c0c
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# 937997d5202f4fde983e4943b5a98400
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 1e7b724738bc4673ad041cd73cb8a63b
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 00ecd794aa6e46ccbdab163ad3cf90de
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 8c51702c34df4eac908dc9160046e27e
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# d2f9d1474abd46cfb0ffa31786818763
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# de0d8fdd715f41b8963d29f3add0d418
# 24a61397c6834b01953dc6b3998bc298
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# f7c7352b15fa43d7ac98ac87462d2336
# 9d7bb675fd6944b3ae08e27fd98fb6a6
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# e7e5f5f5c40a4dd38a7ee66fafdc4d85
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# f7b7b3d2b3d842cb807d75f586261b8d
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# aa6713631377463fbd1b41a4acb09a4e
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# f212eece69bf4162a5ec4f3caa03603b
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# e07cdd75d32b4742a170ab0e83b369ed
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# ec05874c4c7a49e78d4adf19898dfaf2
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 0c540547a7e04ce9ae852ff984af9d93
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# fffe42962c304c9baba78923a2ed9385
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# f2db7a51ffad467bb9991d143209a4da
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 9a1353865f214fcdac372d437d91a52c
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 996d8ce0857c451ba635bf14f2eb0cd1
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# c1a1a9e5c3cc406197a23dca03b24523
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# 7d1f61b8c6934fef9ad747e1bfedcf0b
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 5774ce17b37440feb26444847d2d5e55
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# cc3e619358b04936b8e1c9820053cb31
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# d86fdc9be4284e1b8818ae1817395cc3
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 0e24bece5a514b0cbd52bf58317bd2b6
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 90108922cf1043acaf75fd4d3995fd87
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# ba54ca1b40ed4969a42544c93c035e23
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 141a2e5d76824b2caa6fe062b55a678c
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# 3c55dfa32e3941afa5dbdbf24defe992
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# beca77a17431414db057bcbb5eb006c4
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 24565129f0a64c0c9e4216f547dfa74a
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 7d02df96f0bb43bf9abc2b57152a695c
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 195f761c12424639bde3ba7af2ca03f9
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 884af460879840ca9f915877c5ea7b36
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 9a88d64af190408d8ca13cfddf67f6ca
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# ef4cbfbc24294deb9b69e226813c01d1
# d7baa29d5a684d9da9e12b2e76396124
# 3040aee8f1924bfb947668a9056a3b47
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 373eaa1d14a44fd5a825e15bc0cfa427
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 268b8d68282149dc8dabdd4494b8dac0
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# cb0b0e3ce66a437aba46288604904b74
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 51cdc1e4955441808c15f06542314671
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 55ad9966f14141498130203db8832ebc
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 485c4f21de0440d688928a32fd268eeb
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 23df0aff1bbf46a08ee2b96e686d94fc
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 3b3e81e9f1f04d7cab5aa09784d296ed
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# ab34bd130fde445c9273bb709ed157ec
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 687dc7d41322498fbf9f8da4d89ccfcf
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 35802ed8d7d64124aeebdc4800317a1f
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 93364a0b03364a829cad9cd1f4655ca4
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# e71e709ed94842f49463fda60928cf0f
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 5f4ef609c497478bbff25f0ce0eb778c
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 7a951c1447b34095a8a095d2e041ca0f
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 11c6feb0e4a1453f8aa9aa6ae77d4e54
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# e9237677d29147b3b2a70265e6e08f0d
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 5ba5645c8f8d492d999d530273f67586
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 04dd5a66ea10400ab067b415d351db7a
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 6c00cf090b4e4749a56abea1c1f71a68
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# c918ea171a9e46ddbf105a5d07fcc2d6
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 8a0ff7f934664e74907cd3a37da9a19b
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# b4ae07b0bda9409c93ed1580e68c58ff
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# ffd93b8170444fe286b53855087a312b
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 9310f4ce34934af49b0126a20f8898f3
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# 3c585541551c47dcbe932e1e927a384c
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# d3c0575768d34faf8444de238a535414
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# ac07df9f58a240389bd30b714499217b
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# cebbc754d31c4b5fb8ae3940734b5ced
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 16a40d582f634732b9129949951e9936
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# 564a393a6bbb4953baed904a0a77f2b9
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# d82f60c1158e41618c72e9cbd32c7463
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# 1100399792ef4da78270338490a490dc
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 69cdc01287c845f192c94c5ddec888b7
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# d45b69a4b09a49b6b6723992f75a947a
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# da42f3bbe3994cd1946ff5a4789a3599
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 89878933507c4c989f1b14a274e5acfd
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# 338647be71344ff8a09789c41afac535
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 152a3e89bfb347eba255ceb120e37fe6
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# e892e46940414bcfadde06df91aa0b3e
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 675c759e6f1a42c3ace4b89b142edf36
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 5956fb9bb17e48ff82d0d59c2668d19c
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# b3eb90fd186b450c835be1e69d5a41c3
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 2e88133556d743ddb0457e4e9289a981
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 5992b5497ebe4c94b2579d3d0799ec9a
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 7c53c91439ee4a6b90e368d15756a56f
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 01211a0d4935469287589963616ce2cb
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 40cd0e4a9f8e4a6ca36ce43cdda7ba02
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 80dab431167f46ed9ad03de09095f55f
# f9b967dd5a694608af2842fcb556a11b
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# c0e1c85cd29643e789439917acf18754
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# 2bcc7068b14f4448a0df29d2d909c41e
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 1b36a410bc2b4363a799dc93b7a0eb72
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# f1329dedfaa14550a011e2f8634b478a
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 61c7a036775044a98a9ece7773d5496e
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 538279c627504821830232fbfeb6366b
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 03ce6ceea79a4107b59a67c1c8ff74f7
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 250bda3951b644a48031683b350826c5
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 8559ab06083845299ba02b5b13be8548
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 5c213a4b48ab4b4dba84b884d540d6c1
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 103411c126da465da5e708eafa177f32
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 85244d7c65e84b25bfa9d2290abd1af5
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 30076debddab4aada42603ae0786dac0
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# fa6ec7d03b7e4663b92e06b1b3e02025
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# f207915fdcd943fb8c5a8f0ae5460482
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# f39b470aca80452990e60877ca6642a6
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# c81e965fab344432b4f9b9a7fe91cdfd
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# fe2b550798c0482d9e6cd98c0ed742e8
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 035572b938fc484e94fa397a5cc2bba9
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# f7b87f5ab5cc46d197f1c2b8b1e1e44b
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# 4d226bf0ad9e4901b72027815d22977e
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 70ccd0757dba4f57bd6b957cefbc0065
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 220acb612d99433088a91e4d2e6e0b19
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# be7b7bf98c8e49d096835c8408c7de57
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# 49882fde483c4b6b9142b3c8d8b60099
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 1e8617f372b94a5aa9639bed932eb056
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 04a46952e34942dc860b4fc8543dcda4
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 1e3074768dae44cdb3ca9b64e863a5ad
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 4fed0bfabf7d4b0f84048ffc33314cfd
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 0ba6aee4567c4ed9b22d1e388e70a567
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 48c979cb3d7f4f7fa6c8909557b5641c
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 3919c7046b5245619218d896b08ffbf1
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 651df6d0815c466b9b8f992a3eb6e5a5
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 257af6c3c097485999bf7404ee111f20
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# b412a290cbe34840a3e9374f2a2424cc
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

