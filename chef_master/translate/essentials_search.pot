# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-29 10:22-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# ee1a83355ed3475882ef869bf51799f7
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# bfa6a12c41724380aa3c7382cd694c97
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 50d4638e8b0142afab3a487e57fedc69
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 7c2ac98544354839977c0afc3aa2705d
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# ef06b5a850794e04af899f43f8a7f8a7
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 8305005ae6c24559813acf9a571b71bd
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:11
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:22
# 31ab80162e2546f3922278a7420d1e00
# 835c98bbbc784cb3806d2235c92bf0d6
# e0cfb69303d54a728ac081b4e1431f52
# bc66ff7feacb47258e778cc5be59bafb
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# fbbe4552084c4d418a626512e0a872d8
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 8368012afd6549be95afb6056a7047f7
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 11a488e584424561b63c7d107f8d9bc0
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 4ce6150e347e40a4a76422447811c22f
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# e7c2e0cd226c4e658f7ee176f9f19aae
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 2fdcea56c4154d369d87378ada18762c
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 788ec93d42bd4ac292e7ccc60af2a45b
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 319dd5c1e9854f369bb6926bb9455ae6
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 7664156e176549c5929ef58eab98acca
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 1d09099ffffd4a2c9bf3a8409ff04090
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# ae75464b32ff48a8ad5daa62d6b6c546
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# efa96262ea37423c82f001f3d621e470
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# a790bd16c4884ded881d191e376b0f13
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 22dae126da044315af71e2c22e764f7d
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 380ece49f26d4641ba316a22d3e678e4
# 73dbcd44dbeb4dba896d97c2e2352a8e
# 47f6ec364cf440c9a0e9e6113b7538a1
# 33e22a041b2c4a8bb0fcf5183ad254b3
# c11b4a035eef435394016ce8432caa1b
# ed2cb9f15fce48b4beea0f7a83cfd9c1
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 2931a5a09cc64421a14b871617065963
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 79b92a91a7694bedb1c1a92fb6a57216
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 32a39357cadd472c8b07917040ee29cf
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# 4e481153c46b45288d3ce2129ccc2fbc
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# b001c7688c174f50bc9c6245d488b036
# bf73463cdf2d4660ac0dcd4f291dedce
# 64b01ba9005b45f096c93a17c84e9f8d
# 9a80807f2a5a437f9ebc2f5d06890226
# b7d974b97d91474a880c9bde8d9a2ea6
# f2ca799f182d4035b1c51200bfc0862a
msgid "or:"
msgstr ""

#: ../source/essentials_search.rst:34
# 2656ad02eb154edf891bf286cb1464d8
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 19050a0308104879943149920c2c997e
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# a254f835459143729f5bb2bb033f3d90
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# 076f0b514aab4603980ef89a9f3d8110
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:42
# 0e6e7bc2c3494538beda145fd965ab60
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 05e27521855d4970b781b300d94faaca
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:46
# 9b6d3cf9e906479f9c5fad95dd2a43c5
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 21d0926a15794346af6b33bac3c2ff28
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:50
# 1940387b396444449d7fe79506a0ff52
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 41421fa206cc485dbec2fc0a676599b0
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:54
# 9a2875de2c3544f995e82a49432ecfde
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 7e277cb942a949589676f3d7c7088d52
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 44c6429872f54a4a97fa9c96a375beff
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:59
# 46615efcc8844f9a9a57f80d12b7f2d0
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 1fb9e7b6610d4e6dacb5c024b392c946
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 4aaaac178f734337ae0a867c04843ff7
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:62
# 2bc3a68d03dd4166b5cb9113ae650d7d
msgid "Search queries may not contain newlines."
msgstr ""

#: ../source/essentials_search.rst:65
# 4189e792298a42d8b3bdda98cfec9e93
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# efa698a001134b2b83c2bcce1f2f7827
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 151bde30995f4cb397c19fb783d54e1b
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# a0d324d477674bb68f93ab4cf3fdf985
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# dd56bba1bad149aba5b31a606aeb90c9
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:69
#: ../source/essentials_search.rst:81
# e017fe8b7607406aaf370f0de30efbef
# 7ee9ef0171934fa7a6781da4eecb2f23
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# b1078fbab64d4be791750612094bef9a
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 97609ad8e8e944c6a112f0aba2fa5c42
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# b27de176480048288728483a24054abe
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# bd237adf1c074396939089935819fa74
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:73
# 0e8d7e4b2b694a86b80d833a179c3a6e
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# c6ef7eab80c94dd0ad4a933cad51c826
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:77
# 06f8a2491770455fbc4901b4ef08e6b9
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# e2f29bafbd074a22bef522766384adc3
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 649b68d5bd5e43abafc0106574549662
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# c0a971dfd48e430a942f1100bdde567a
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 40b0be99726f4500b526760c9b9d0289
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 36fb0ea3e2674d88b2931b335e607d1f
# ec3f96487bea4de6b61bb1d399eb281c
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# d309bfd76a4c42df853784f60d0b367a
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 6532fdd5942d40ccbd1d00e301f5bf65
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 8e50b5d53d7a4afdb5ccbc1306a9d62f
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# b86643e8125d4225addef0e54514f97c
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# e9f96172332e4799bc5a05349dc380b5
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 7764ccc4ac9d4db792a9d7a9298c2ab7
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 7115c04caab546a991fdccb39af72b35
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 938287059a4240e09f0553178d7bdbbe
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# c04dbb035ac9462f92231232459689b7
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 1ef7d9a11b2645fda9519f526c10fb25
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 9cc4eb6174454cb2b7ebe6374ae51757
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 7966abba001f4279b36cf0e76bbc1f26
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:93
# 35317bb35d27498d85ba8c0a8e41d457
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 291a6d4416cb4fa182b6d68ab896efa3
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:97
# f1b846a271584e79902336f485ef4aa6
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 56164c29639d4fdca277986a8eb54de7
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 20f81583fb1c47fd93d460e913b25eb5
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 596088b57ec04605a844437f197a7160
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# c7f36e8f2e644fc5bccc7e6d30f37f91
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# a16c4ea9265644eeb8c1ca8217b1c483
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:105
# d9c74a55ee98442b9c136b5b51b5de7a
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 1ef64087d9304fb38e51607c42ac041f
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# a0d4dff1d27b4c50ac3d02a8a264f71a
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# af7735e7094e4e679c4cbaeeb0564c8d
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 2be94d9966944552b63c573093e5660e
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# e29bf06417304ecfaf638d4c93417299
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 8904bb5db0e741ebbf80f768b5d6ef47
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 0b04bf9b8a4d4c7fbf9c3d8a486e4c02
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:113
# ef833310b29549b1b7f5b76778dc54a6
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 16cd17ccc2164496abc61498c26c518e
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# a226d59cfd2543f1b90b424ae8d44925
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 70d4c71a210b4578b5abc0a9f43558c6
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# cffd582ff99f458eabf09609261e449f
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 5f4ff3a63d4e46b5849ec84c8688d080
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 453b94ca3ddd4faab488ba175914cbd5
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# d1de151b85294df4813862ebd813779a
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# ce9992d68a90454791ef8a03d6e02e9f
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:121
# a0a21be5b06449e48f2038efc0ed7865
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 4f73de7d00a2466cb321f20c3f8ce587
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# 5133272fac5745a490b5682da1ab0506
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 92f5644ed4954edb93f6148ff7d33644
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# c6639882c07e4cc3a0254513223c1e5e
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:127
# 7fb4bf4e4ae840a0b2ef1c4555358f73
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# e2d70a782b5542aaa0a568c311c4d424
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# cc45aa9b53a3430283562f94ca1b9dfc
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 5cfd9a7d4a444259b4acb4d8740bb11f
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 544df27be0c146e7aacacff83fef82bf
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# c46feec2f47a4769b857901bf06b45f1
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 8a39b204fd3e4a3098cf464b54653553
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# b5f03f15a6eb42d1ae2300f76892889b
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# ecb071da807d429d8310dc66662da132
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# 869fabf3fb854495a2cae6074f1418b4
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# ac824136b3b14e6a8dc6241002706478
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# 3d200a2872164f1d969b73e5af80ce6a
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/essentials_search.rst:133
# c9dd6b5ef4a444ed9268d42e95207796
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# ef64e67a768a4f59af5184f98e364b80
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 391486addd4f4c888d580d29b2138815
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/essentials_search.rst:141
# 8cfd0f15141747cabf42d9a9f716f25e
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 004df2853aed4a2eb99f128d759e941b
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:145
# 5c72fdc31750477bb60a5088c374a39a
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# f27dc8d5e59f4fec9339e84fd01c1b87
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:149
# bf68377dceb04ba89f3275eada429181
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 820185b6972a45388d78a65760e4bf1b
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# fe52a6d6d6494c8c8be2bd964d8f5278
msgid "For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# 472a5cc430ab4040beeebcdb2f2b65f1
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 5cb993d36bbc4116bfab4459987bd5b0
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/essentials_search.rst:157
# 93ab4a95f263479984a9a095a3be2d67
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 7b8e74e9e7e74e10bda8847a60e1909f
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 6a0e5f1a62894dc19094b5790dfeda27
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 1d8857415c904b7da899d6a0eaf100d3
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# da43375c9999404fab149b79d479d91d
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 5af25e8eee3b43c58067f438e89b26e3
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# ef52c28ec1b64c1f9f78ba6e54cd5b5a
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# bf6dd20164c8447697d8ce537e8ef261
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 41e2570b8b22470f8cceb7c7fc1bc9b7
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 16a71ae8947346478143f2805591754e
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# cdd9a8957c5f4f059841067aed738d3d
msgid "To search a top-level run list for a role named ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# a09ce446d45b47d192c44c6ef46375b9
# 81423462aff14e42829ff3a5df28af71
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 180a42d098b44938b2a69489e4bd044b
msgid "To search an expanded run list for all nodes with the role ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:165
# 5fd0b2d7494d46c9b6c34fca4f85af55
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 5ce4d1653ab34e09be324051bf572ae8
msgid "A node can be searched from a recipe by using the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 6fbf6e93016443ffbf9a08107122a4fd
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# f8b5e2038a4c419884877d95f195dd02
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:15
# 446555865a15411c895bca9f3775f941
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 4bbabb859c2444ca8467ea69ae08ed94
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# 7bf18c57fc654b659f7dbbaf996b444e
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:24
# ce1e0dfa2e5a41e2a7a901a54948498e
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:28
# aa7a3ad2ba674cb194f78af98135a0bf
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:32
# 5b2737f3e19c4d37b80f4a68f9f15598
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:33
# 649f745ebc6a40128a6bd9954f88c138
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# 18fa6b5c1b1a4ed4aa0cd01a5126b031
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:39
# 739ad4fe4d5f4aa0bc0cdb1352530927
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:"
msgstr ""

#: ../source/essentials_search.rst:169
# c56b0a97d53f48b3889213f6bd0f4678
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 9d57d6994fa14957a598bdeb13142e0e
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# e901b3a2a7b84b2fbfe7dbbb7a01d35a
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# c26e4206bfa647ea84b818669fe1826b
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 09fd58417b094ffcad10e7aff82bee3d
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 4796992b53ce4e3289df5067d1ef0779
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:175
# deff2c825c984d4c80d162a9bd4a02e6
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 8cc6e228e3d243a09fd575e5b923e7cf
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 77a38b604c494384860cc882e7f5d024
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# ef613c61be0746f1a28191655c1d3e15
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:181
# a8d7d09b44c24cb0a5897f01b8db7f33
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# de71310c9f0d4f6ca7b064f1b34c6042
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# fdaca4f3009e4d91984179744fc4281a
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 4df50c29b1d048bfba0cd0f4873a6342
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# d18e61b82aad4b56901fdcfeb86b2039
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 32900c56ebbb4b57b27ef1de269e215b
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# b8436ffe536341278be172b7a6e87261
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 2e600ff07dea41589f7f2cca640b5cab
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# a5d37573ea5d404498d58abadfd3a4f8
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# fa71e0d45345469190ce7b2927542f72
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 2bcccb2fee524e0b9558b0a77f2950b7
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

