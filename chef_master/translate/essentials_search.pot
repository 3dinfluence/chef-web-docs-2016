# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-27 12:28\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 2d717bf16c614793a60e951250671d4c
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# f28e60f1316644119bb70b10a853a909
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 811f30ff367341b0ac1dd5b94ed4a946
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 219cbb187a5e4b948e51f563ee62aa83
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 6c967df564d148aeb742d34336ac8499
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 37651a4f44d14983bb3b3b3cfeed64f1
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 59b1636e78784b9f9a365f0e56971a11
# fd2352f51c3f42a0bbdf35dc4cbe0024
# 1534b162cd154ec3855944b4af9abffe
# 0aa007d1c3914ce4be3f68c83f887e05
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 1f771eb6a9f2410ea9ea760aa3f32804
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 339928ec6e6f4f45aba137bf672a2863
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 2b46621c4aad47e6812baf420013c010
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 3869f6aaa0d842d3a787483e2c3a50fb
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 23e313b29aca480abb038374ba201049
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# a497128b723a4f3c9e6f46f70d5a575e
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# a2699449387d4ca4a6b2dd5b2051b7bc
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 291789dd579346f7a0786121094e7da1
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 023c74ff92e545be9e0ce5393c782ad0
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 38263c940a6a4f3fbf068f19c3494b2c
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# c67167e70a6e4c7e91630c0de575c2e3
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 34fab5e09aba48b4818a4085ce27b97a
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 4c5b472ed4154868a262e13b397c5d74
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# ad47dc282af946aca91ae35f9b3876b5
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 1a553e374c6840598f42be12c8efe56d
# 3e5cef817d82441485acc9dfa0d6c1f3
# ae607d2d09da4133ababce862731fb69
# 6d64b8104646467e8f149c9cfff21f36
# 13aa06d1914341b29e93fd263d231765
# f240dc499dc04bd1955726245a79e9f6
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 141be526fd49453884d4415ea18cd8ac
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# b1c6dc871e30463eae18fd70386ed3ef
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 5ec63d008bca4f27ac30e422bf8af75a
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 27ac93d4e9b84207a0a1a0df6633d0c8
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# eb87fdf7dd834172bc68280d7ede1300
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# c92ab2eabcee43ea926b04742bf087ff
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 7ea059df5dda4643b7bb57a3caf98236
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 774a6d30bd1a4dbbae357669c46b199e
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 896f8ac4a0b649589fac9c21fba42c61
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# ea93a8f60eb64477b3188e8c2b3be774
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# dd1fe3c243844b48806380c267e851c7
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 414739f3248f4bd8a526fab1c30c551f
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 3f5b5f383aa648d5a00e2478973d4394
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 4a77798c583046449f3f5dca29f97657
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# ef9c26858e244d2ba0870f8f84fb12f5
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# b96e092a61844c4f998263aed1889ff8
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 9edc923473c74180a64568a4c95c3024
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 4db5e6eff48b4b31b160e5670184b88b
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 00908534020e41289d81a67938df52fb
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# ccf4a088e45446be83426bae4f0e4aea
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 67b00813ea864794862bbc5789997a19
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# b49297c9589a466f88f91c8d7fecb292
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 1f0c312ea5834ccd8c7ee1e536b494af
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 7ac7a8c627964c358f7fd8bc3ccc8f3e
# 18438bc6afd04cd580be6c6d83bca68f
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# ce3e7cfc527b41bd98af724d72fd6e11
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 0b13cf685e194272913089dac4664152
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 23a9f228312b4f7198fb73d687294404
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# b45693236a344e2e972cac386bbfac70
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 4db3b82ceb9849409cb4dd95b822ff93
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 6e75d9e5c28b4f8eaf459c7af6c75f1d
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# c5a34bfc3ae0451597ac02b2a2b29ed6
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# d1a48ad29f83441faba01890dfe9df8c
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 1627c189cd204b9bbeb741569e3887c1
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 5186a9372c2a41ccb615d165853ae138
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 80cc45dcfd3f445e901680d15575eeee
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# a844070de3db4c18aab3fda348b2f76e
# c7b13e9c77314ea7b64b13b19d8078b3
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# ea7c6fdb9a9341668831f23d7d1e8cdd
# 82d384d4797b40f988e6d66e845dce66
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 0af230adf21a4858a89bfcf4b54c07c7
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# be296a05bf3d499a95bd0a297a46d402
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# f40f0432682c42eaa3fa39f5b9305e92
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 7152dfb7c7d44910b560fcf191c4cbd7
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# a1533e5c0c5746dba83eac8d10f36d14
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# a8ce89b9507c4895afabfee25ed51671
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 229303ce22454db195a1fb81f8cf8a6f
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# fb7ba05bb8c94484864cbdb0dc661272
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# f484aa8f520244b997c6a6e9d3e8cd8f
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 849b7b7a5e7d47358fc3e1f3edfe7c20
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# e9a3ac4a7955429d96bcb5417d2377c3
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 472b3e9152314bc1ac9c17c5b7e667ba
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# af471c1129c44e869c9ceb48a06cbffc
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 36a15960b2f042b1990f2cd20ec287a3
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# f485c6f1a07045f6a35979a31c1637e9
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# cf82e1ab5ee04af280a2d4a302122b01
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 7d7937d4148d4e5eac7d9f7b66f2ba16
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# bfe37d14604a4e89a8cf83babf05915d
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 82609c39c4a2472ea1c7647052d2ebaf
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 2fdea4a580534f289d8ad5ff6c09c444
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 106d3e68b76b4a5fa7206b754abc5d13
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# d1bf6f5613e44a2c8f7448be83b15d71
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 7123da574a0c4412a572f65d6e2e70f8
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# d455722702d542eba1b8c5185c15cf13
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# e3ea96cfd280473f80a03f8da950b70a
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# b8c0288a98c041e7b7f3d4783c5e6ce2
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 52a8e5d097974fafb3a2e90b9bc51a7b
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 1d3a2b034a9e467688ca1810ba76386c
# ee765d16a9b844d9be8a95d5027f8ad0
# dcf1f993be224dc49de442caf99941e9
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 12811fb9bc1f4e3997a52de4ef1f6e74
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 441a52519fd542f4b64eaef8538d7454
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# dbeb202cb62a460297d631095ab092cb
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 72946dd163c9445696cb4372ad3385e1
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 7fdea228a67343a8b2a2c02ffe708908
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# dd789fe867334bf7a71fae975f8e307e
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# b91cf933464540ba939750f5b4fd753e
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 95616a57ecf34e0bb25d6e73c8e4ffa6
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 504de2ee619543948a2dcaf81442bcb8
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 739431e2b5444f44ac5d51b6222d005a
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 9db14aa89a4d4f628691095a130fe000
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# a23b04b40e2043a6bdf892bed149b594
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# a8e7bd34800d433190af952c98a4de35
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# bbfe7ce975654d1ba1808c810b4af0fe
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 7c8bf94812714d9d917c978587b8782f
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# c7d3bf1a3d024ee2b08733cb3aedcdef
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# ca8decbf65914abdaa84dda9d41ec7ce
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 751c9dc558e447bba06bfc5eaed9dd30
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 84c32354f8034b739ac7df6765857a53
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 1d6399dd46254ace9737995f32905fa6
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# a2e248ce09b943f0aafdd239010549ee
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 8edb49d6e6a549258b1e7cd077aa7540
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 4eac755a1db948a882711614b4c203b8
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# ae463375f2164f02bd3f061d4c974890
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# e8df84ba3151400cbcd353a3a3598ad0
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# 5bcf38275c2543de9390284a0e1d4fa7
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# da088d9c26dc45a1a8463a7d25a65631
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# ebecf663e3754fe3b9127e43c650e32e
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 4f26697572b948439f4a721528afbba2
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# e1ae906f9dfc46b1986318270772391e
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 9d624fad5dd34c7cb6bcd5d9c0b582de
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 17bd23d750014058ab4fe6842deb7d9f
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 9b7eecb8f715464fa9b7163bafa0a18b
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 6d055b74ed4e42e49d4a0e18a29ad4f0
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# a4ed2b38e0254573acb2cc9bd4ebee04
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# bc22d79caa56411cb881ac2409aa9d4e
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 2436ffdc514845cf9dd8e7d67aecf658
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# d92a1447916844f5a77fa4721f9cbc5c
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 91de429cd5c14c38bc03d09fa82f8641
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# ddb9af12e2004901abc215602ab3df39
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# a9befaf44a1a41ab95979383aa179900
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# b8f960e845fd4546b13b2c8b6562d64f
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# d804fb9cae444a4cabb04463a41f5007
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# e48498fd0f474b3381092bdf5afa077d
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 807fa86618334acaac8841c3272a42af
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# e0831bd126bc4ac9a1fa0ebd30eedb36
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# bb7a779ba115492e89a2ad13666a29b6
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# f96f4d4e2c6e461eb90f77c58d7e73f1
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 2ce63b118b3f45568e43bb17ef192211
# a036402e4ec94cc3a5292ce7f8f15b88
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 0fc1db560a3a4378a49b0b8635f966f0
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# c247b13cd51740139e556fdf59f9528e
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 737c082f7ec748a69b2c597661ce57b3
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# e650917ef6a3430ba2e2d5cbef3ef20a
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 26c19c406c034e2f9ba843432c707446
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 15aea2156a62427dad0faa2a666ea597
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# d44b3d2d983d405d9f4ed36a601c7943
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# a1a65b32685a45aea1803e3f09ec4eeb
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# b14963b8e56b445cb181ff7ab5d2c9f5
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 42218ef9a19b4d118ba37f21903d98bb
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 03cb518d793f419b9e7733154b73ce38
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 38423a90d4174ef69765b4f7d87f6d8b
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# cea90a915264429ba247f5af2337a8af
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# fcd46fb7dd8446d3b96888a57e0b29ec
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# a7b9282a207e42bcaf3fb59a328be067
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 5caf33e9e5314a82b2acd6f80acbf1ed
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# da05a61ff3f5472a85f94a58732a8d6c
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 72af4f93673747e693c153e46b4c23dd
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 9e2e69cb61c44c0a996fde011d934d96
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# c6f30afd12c4464fada968dd13e6e2b9
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 3d5309dc03d643918c4759462d1bc5d9
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# bbb7df984df04a45adff7aecb929f0fb
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 7106298fc2134d05a6d6c174a9ec7c15
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 0f19010cfcd640b999bd240605bb69ed
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# e5fbca890f9548f282bd337671361019
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 748f2604e3794b87890fadc7041476b4
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 6c677f769a8849c580d454ba2b5eee5a
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 32c485628ee84bfa9274eb265a176f27
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 1443e97d808744f79b3ce83f98dbe4c7
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 9418f595a1b04abaa0ecac14c3fb8425
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 161f4f7fd4364a31991c48e096aeb038
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 6d0db885a5484212a85661cdee7b7a74
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# d008a513edee43918fc2c5ef360d6c57
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 6e44e1ddc0fe4c3ca4d90faae8681300
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 26a0ce84ca4b448cba579de3d7c07391
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

