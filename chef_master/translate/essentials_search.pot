# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-01 19:47\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# c5a106ad748c4805bdbec17ed05c6b56
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# d7aa40ee453742b8870e10772dd0bdda
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 56ead41ac3cd4661bc3efa0fa73bfde9
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# d881ad310dc246729469b291056d0bd8
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 931bd2f2cf864f989e64f6839cc747bb
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# c30c8121eb384c94be0b354dfebfdde9
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 269a3b9555b042558312468f9f59d7df
# f71bd15b31124061ae0dd023c2725394
# 689ab48cfffc4d5ab70f57d9b68aca06
# ff6625d97cf4482d97f75f30c4b5e993
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 890bf686cf3242dc9ad2d02867c2ea8b
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# fdacf14f05f140bd8899468644d1ee2b
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 7c6fafec0b1e4724b8cdd7ce87aff969
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 94bec5b2a87f43d38f26ecfba50dd7d3
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# d50b0912985e4c328dd1d822ae5e7833
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 9fbffc283fec424ba017420c51c246c9
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 54d532c587df4bc88de1836801231d54
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# e9dc09a0941f4bd38f51b567cb80b7d7
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 148b87a29c5f4f6a8dd032c448164fd5
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# bf808e97440e4e3ba188034cfdf0303d
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# dfcb0db563c84ba5b4ed2bd8984984b9
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# ee271e1edfc74561a9f2a7551c8b2f70
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 6062f04d75e343d28cca3ebe55fbadd4
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# cfa3f1ee71d84bba9651cb5a458943f0
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# dd03a61d5cfa4e7495bb875803783d7d
# 3a4e8e2d67924abfa8a39350e0f5bbde
# 1891890aeb764525a8bbc29b94818d7a
# 47304d91c79e4f74929fd603326d246e
# 2fd9debffb224a85a18639d52811bca2
# 10b1c2dff1f742828fe0d29432616e5d
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 58b5d58058d641dd9dcf3b5a63a23865
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 26286d2362474dac8ac92c94d5883ad0
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 03a553aec6bc437cbd4188c889c0353a
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# f2e1926fc5f14a57a037770114c0d311
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 2135e4797e5944ae80b8508ca1941b88
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 1896a1c4cc8c4a81a321acb3fc86dc86
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 0a9738128a7749a98561f95407919d3c
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 3c51c3927bc941a0b4e83255f3c314a1
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 8b17206db6654d2bbf57a595f33bef09
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# aaa96075c7514cfc85d2e287059ff435
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# e4f59bda3e2d4a7eb35383ae979193a6
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 992b26455ef143e8b5660f9bdbfdcb9a
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 6b41fe1a704c4e9f8028a9bd0bcd0571
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# cc6a92b52b574f4499df6f8d9b734a99
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# add3e94c0094404fbb7b14d8d8cebaee
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# e2b5c252dc1348c28036e4e8d53e9585
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 4f401ea8b56c476ead4be01dec879627
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# ee65804d418045db9b618b493ef2aeff
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# e1570f1b390540bea7ff2e9e3587cecd
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# c4baa4740a1f488ea3d370e414eb095f
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 3d6cc445785d427fa8c7010b523802c5
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# eca2bf100f704f41b7633205708533c8
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 6816894636af44e3814fa8fe558572e1
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 8b4070a44ff242e4a0e7b9d5b6f81aaa
# 7365dad5776043bdafdcb952e79eb217
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 593764251ea247aa959e1befb4b86065
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 769d320995134842b176b0c90a35eba9
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 90b0bdb8261a42d69d5e1e2a47c1a812
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 89032c54e3be4568a96a6859e07edf94
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 50cd14e2b8294af393695ed38dd7453d
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 10324aac69914defb1868eda4990f056
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 53b2d44618b94b7a92bad45964c17917
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 98ca96def29a431cbccb309f6937bae0
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 40076a6f84d9441f963660be994de44b
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 00022a52010c46808a4a77a707b6c3d8
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# ced9f4150e4a41df8c4939ecfef414f6
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# f2ab30c368f149e2a27b84028f0ad99c
# df093e26f1f14296b8111dcb07990d95
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 1344e36049fd4ecf9d396f4582c88e48
# 36e6de6403174b5db139fa43d76f13df
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 073cb5fcd5104068a4af34739aeb6914
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 9f31da19ba5c4e059b32f06dcef8492f
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# dd59d8ead3734fe09241bf42d57bf4d8
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 9a71ad63f3a74ad3b66631ce7a78a265
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 49ada397dd2d4ab0bee0b4a11b365593
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# ee905670b2224238a6172676091b16b8
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# d757c6f2773f4c79a0e1c12b46d3d1ff
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# aa5d780d8c14470a9cc5c0cc98783c6c
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# a82eb3dc23a540b281b5083851bcf6df
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# bc6fc7e4c5004633b2a839c9ea332b49
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 58f8bdcc2e8d4cdc9188b85b26e7f061
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# a182ac7438824dd283c55f7fbf4d80e6
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# e1efc0c78eaa4536bc143923e2608439
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 7bfc27ee837a4944afb621e59313bbf2
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# b14811a7501a4a8e9f300ea31e2c6eca
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 7c8e01f2be3c43099a859f393129b376
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# a9de5e8dc76b450483f422a39bc52a4f
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# eb8247d76ff84c20a1ab4355452a7720
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# efe02af85d4d4ee19fac8a9794d0472b
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 87ab3714a1ee45dc84869b6c607a50e5
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 9c19a07622c34d34bc916e1c3a8311c1
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# df8e3e33382d4bc382601c2033966eba
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 4a3dcf8e3b4f4a7e8e34437b86fb13ed
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# eb6b5c4ed8b14239b366c22bb50513ab
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 046c2110b68a4bd58ff7f6fda345b8bb
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# aae2d1ab6b2d402290fe04dbb28e91da
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 8066a82f2014486ab60ab53ce282a5d4
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 431b8b485a1a4016b13126def027ee4e
# d4c41f0b21ba44be8f1eaca15b112ddf
# c021f64534304d9aa30bd4d410a4182f
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 705920e868914c34b9c9a9babf31435a
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# ca3ceedc2e56499a945ea65508470112
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 4cd613105045409fa8c123e961be5c15
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# a5fb01e4fe934d2a9e7b138811dec797
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# c13c2ed56e104cd18242e44256608b04
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 5195d7d587a04eb8a4380ec8cfe68134
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 2e31672564a942e3a8897e9e25d7928f
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# b5f036495a3d45efa5626174bb84bc27
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 4b87656214504b2f8f37e4407e41ee4e
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# e8f18bcbbc164041853fcd209ff415e3
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# d47b6725a7ef476c82c4da05f95b219d
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 44a003be973145308803641db2aba0e3
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 07fce61e0a96494bb841e3b65bb66e52
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# a1349252f0224461a82e413eea922b07
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 97b155f40bf74980b618d5c1f16db4d6
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 6b5c6567cd2645a1b62325dc2b0f5851
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 5e124c61450446249f257d6bac9df310
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 306a4d1cb6b8417da45c4f1fbd8ad645
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# e10a2ca6bc9d4b158217f9bf581ff982
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 052d7acf2bba40ec94d2d02da903794d
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 1071026f5ddf40a988750e15f132723e
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 31fdcc63d8e047d6a7a9e18bb1857009
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 587f614f4fa743f6b3bf5aaa5d938239
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# ecebafeed055499580a52f870899c43c
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 0f80cfb9d0654c1a9c2609a0769f7c48
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# b547faa91a0d4a3cb14f297d4e0d7504
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 6dcff375e7b0463393a71a6006f40c4b
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# e7502ea261ad4bbebdc34fa03f452a5d
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 10e07e7d49c54664840f52eff0a58664
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# a45d24a2062041b59d5b8553fb39ad5e
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 8a45f9b84c43476185941e8a50b24cb1
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 800941059df446c0881b303db8cdc546
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# b0d483b305f74023bb0146d782d88a55
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# b626473c536c4230aea38d56868ba1ca
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 72f8fc25b8074faaaca788d881d9195a
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 1026ea1d6df84148b846b21c46fad070
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 923cffd060ef412abf5abb1ba47c8043
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# ba1890ba96874933ad6076604a006021
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 5605fb02eeaa40f3bb2ab98bec895fd7
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 4efd3c15e2814116ad01540b60167b70
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# c04ec02ac910499f8bf81437ab5df4fa
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# db705b70d81b45e9be365e9d3508e00e
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# ecaa519c50ef44c38de1d80a72e31652
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# f98410e49eb4410d8bb5e0676ff724e6
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 41afb20b6e95454aa6d67f3798e95389
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# cf299ce54c604713abb409d907e844a5
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 0083d9d14da044e9a6943e85d2e3ea64
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# b67614a0f121425ab84ad2aa9e014ab7
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 3ceea83f3d32449788443e05ec245e6f
# 4427acafaf6b46af87c802771d734e7e
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 18bcec05063d4e6c82113e7b40733fa8
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# ac26624e7d41458e8c26c9d94b7dde78
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# a1c848da7bd745688e8465b9855d7efe
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 5f9fa95b354b4dc0aaa05108fe69e349
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 90ba91db72964e9d945d89d87cd6ecb0
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 1498e51ea8ec4b85b1a38a1e9ce71b8e
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 45873dd784da44bb836f322df5a847b1
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 2de58e0cf413420e8380abe0a0af8f63
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 6e1adb4b24714003a670f198eaac9187
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 08729dff702d4da98501c406a5d78869
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# f0215505135142cb956d9776c52aec9d
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# a5b3743e651743789adefef47fd33b0f
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# a7e05ee871be4f5486410a596525d6a8
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# c6f74bc3aceb482aba00a285d63034aa
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 38c177144335467ca2aee0882b974caf
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 50eb3138074a493f8cb33efec54ca916
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 07238f3c88254291a712c8a88754ed17
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# d8bf9b724fa241e297008df5ae1b1ad7
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 3ba3a38589a64054a575aaa8be6941d6
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 71fd0f165f7a4ed1b052d97daad28053
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 98e3387bc15f4ff58f585c0a242ee02a
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# bfefb608a99d422c932e1fb95650a28e
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# c0910505c930432299f7b2e3b8ceea93
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# d17f2d01ca764ab2a7efe54b20183f7f
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# a36c4f7606434c0cb7aea2552b755f9d
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# e83b880a8a7d4a63b8c4e73505b4886a
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 94cb8b00b00749d6be19a1db170e1616
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 955f56710c7a4634b74eff5603f8002f
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 56063f20742f4661b64970a5eec3b0fe
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# fe424861fd994445a1234fb45717fd53
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 3bf67f52a706452ba8e55aa367bd3f48
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 5d0b98c171de426c904c5821fd45c0cb
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 3bf6ffe797eb4d0b8c021e8862445466
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 49ce14fb90b84b32a5f1dac75a8aaaa8
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 28c6c7b9a8514e97b67658a118fed31d
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

