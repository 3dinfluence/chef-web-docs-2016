# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-07-25 18:13\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:34
# 0def4215efbd48aea85643da507370bd
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# ee65edaeec714a6fa54c26ae64db56fd
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. |chef| has a defined query syntax that supports search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:38
# 5fd68797dea547ff945d8c18d7d706c7
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:41
# 3f46659bbc6e4e51b471390e5ac20e3a
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 5683e48890aa4ea3a9519976931d09a7
msgid "|search index| |chef| builds the following search indexes:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# e6ace59b62584346bb13bbc71b2c3814
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:21
# a660d8d93b5f42e08d5dfa62fab80969
# d691b73f123449d48488561d1f3969af
# ddf7b9493cf74cf7a918d97563072d08
# 47927cceeeb1479bb9cec7dd6c2b9e11
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 728b614c7ac14b72be4641755adee2f7
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# f86874390ef64b1c918d3f2b45437701
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 52ba14f490c84038a25035ead4efef89
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 78239735893848948eaae5769838352b
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# aa2cbbb124fb4ed799a59625d143b8c9
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# d9b2d644f5b44bc896f85b691c856397
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# f672c88cd6ba41ad8aedf61b4b20f1f6
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 884e405389e74597877df96acce2b470
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# f895f40ed3294da489972238dda2f379
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 60eec12f9b4d445f8c3ad2efcd17d1da
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:45
# a908d7f4ed5c482f886962d1fa4dd787
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 860b5a2cf94f43fcadff0a69a5ae6684
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:48
# 2ebf5b622ceb4507bc7ac83bd52e423d
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 66d6f42df59647df88bbfe8f55617453
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 71e1015007fc4262a19cab01f906c500
# e6a3e20ce0914cfa825b07c5aee71a19
# 055ab3a3ad664c74a86a6ed47efb0c14
# 3f005732f16546338b9713356b28a381
# 52ca08c1f964489e95bf51879b459b30
# 684a902dcf8342149db02326f3cc48ee
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:52
# a65f3891557a4718b4099febd48869ae
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 28d8c448812c49edad0159e5f4cc4169
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:56
# 60002516331f417a934a7e457a824faf
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 721bfdcabb5e4cd1a40d808a52b13c8f
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:60
# 6325adf051f44cfabaa44e123e3bd239
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 61798e5f29ee4ca899e784e15b34333e
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:64
# 7566b4839cd848c3914e52695639f56b
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 234706cd126f46f3bec3e148363b9011
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:68
# da9ff1c963b24c3e906ae41b415c84d8
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 15fcf0517dad4fb19230903203d6d459
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:72
# 53e3ab755f4341a0898e4cf064c5070b
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 293bc684e59247659afb5436b4419e26
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:76
# 7e9a64e7ec754c45afa0d25673154548
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 8623d7c3286249fe849458a4b300f558
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# c93707918b3f4aa09e94e1e3f867ee19
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:81
# 1867af8152384b4e9d0bf8818d38907b
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# da3111ba0ac244079f37bfa8fca33728
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 30d11ff5afb6468ab7e331d44eff316a
msgid "where ``key`` is a field name that is found in the JSON description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:85
# 7ae65439199046009450131b6c9a2d50
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 692a1a67968b48cd8c666cbe777555f0
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 113fd2413eb6422bb4fe8ee533f9e00a
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# d0220ff5659845329398ba44a02e72d8
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# da5858403ac845f0b664b3037843f522
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:89
#: ../source/essentials_search.rst:101
# ce985dd6d40640ed8c461a7ff7f6581c
# d7a7c8a9e9b54241834d6e82350c6e60
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:4
# 19bef60734774ab281454f235422c05d
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:25
# baed7cb628da421387eaea169ebd5edf
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:64
# 264dae9fac12408997642feb56e200b6
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:76
# b2bd99e1c1244489831547be458f400d
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:93
# b884b22e59f246b6a91029364c4e2e43
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 3bad2858723d4a2395e44dd8e6dfd347
msgid "|search key| Any key that exists in any JSON description for any role, node, |chef client|, environment, or data bag can be searched for. To search for the available keys for a particular object, use the ``show`` sub-commands for any of the following |knife| sub-commands: ``client``, ``data bag``, ``environment``, ``node``, or ``role``."
msgstr ""

#: ../source/essentials_search.rst:97
# f7bc9c8f463b4d94a3f424163a5692e9
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 1595606ffb1a4e1b87ff98f91a1f0a34
msgid "A nested key is a key that appears deeper in the JSON data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a JSON structure, |chef| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 5066692e55924d3fbfd0c24132151266
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 8d76da351f614bd29a397aef7380b7be
msgid "Consider the following snippet of JSON data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# f7f96fd9b2374a5e86308c67bb6fcdfa
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 8b91222c73954323a2936f199f8daf88
# 5fbd3a78f08841ceb8279b84bc915f9c
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# daf30abdeaf542cc9134f79a406e1169
# 6353514e1f97477993f73aa8182a19ac
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 4f06c679b6c94db785f9b1166f8c040c
msgid "This data is also flattened into various compound keys, which follow the same pattern as the JSON hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 7911bfe85045489c9b0e57d4fc6e3ece
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the JSON data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# a8f3a5cda01545da85de5e2b8d8ebf6e
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to::"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:122
# 804a6ca85a0349738a5196fed9b6b572
msgid "This query will search within the ``flags`` node, within the JSON structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 72e3d7dfcde843229d5a77a00058b70f
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 4855dfef9440416b9fb92f7566ae4037
msgid "to return a full JSON description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 270a0be040294b5f80133f4c78ee5244
msgid "To use a question mark(\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# f60b8fdcb8e54026b78a04c737f8e831
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 82af5be648d24f4c921880532c8f7289
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# d5f7963e616f4134820be77ea1cca9ab
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# c042436a85344d8ba8dabfd35069a273
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 823d3a4f7ed244cba12d2931b36d6278
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:113
# b25af7407b8c493890219afb7e6d3abc
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 3131dea3ca7b4e49b1f8ad8f0e27ae15
msgid "|search pattern| There are four types of search patterns that can be used when searching the |chef| search indexes: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:117
# fb053cce2eaa4040b40d6f6e6d27b1dc
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 601f36de6e054c1bbdd84ae460256958
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# b89059c6240749e5bb545eb25c3dd5a8
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 2186a90e168442c6b2dad0a71b8bc8c7
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 1f99c75feef848699426b15f293c964d
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 134ec67cd7e74e88a48212c90069e0c9
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:125
# b9ad7005918d46078da1b4db561cbb10
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# c6b76e118c614872a5c63d494869d151
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# c79d3ea3f00f41c8b345168d73643309
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 8eec4c1c5f034ab9abbb4efed47275cf
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# c4b62b5da7434a4c8b5859daec25dcdd
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 567b0bf8dfc5453fb9be1435c57abd39
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 9288a3b97c18448b94ab5f4a74d3689d
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 8607d9e77413493a81a522ccd7c2fe15
# 67ee8b829ca44534a94ef2f08b5c2b68
# c31d11d9042240569b4a48f1d0842d8b
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 5f555d07975f47759d31bcb92e2bae3e
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:133
# 79ab4cc1648947c3a55f96f67df8e5a9
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# f30e0efd5c5a48ee8248d5ed4670a669
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# a2b8155728d34b84856db54ddbe4a29f
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 883f925937d444319daaedec6e5421da
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 59bbb42b3b15426b8cf99571b0fe3637
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 813219d84aad4a63a05eb001a7dc47c0
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 7ae5c7633ae0463c8e79a6edb36b4b59
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# f358acdcfbf04567bde25f13891f8b9b
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# a416adbe9248441ab67d7b908932aab1
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:141
# 162f35e21f92402d85e2f0d303ea7727
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 1cf314fcb2a742609fb8202235187c6b
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# d2c018863c6a42dfa4f7df3916c0241b
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 54b597b07eb64b799570b4634f948d5b
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 04311749e00e44d894c8cee44deba7fd
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:147
# 8e5a25dbf7fc48e8bd95bbe7b4d841fd
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 99d0a21102d947c79d7ba94848fa100e
msgid "|search operator| |chef| searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# a2a45ba7811e4ad49576da73c2e5c2db
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# a642ef4eaa4d488d940fe48a5463cd6c
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# ebdad1b421e54e6ca011013d9bdfd1c2
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 55a0125b8c2d49919e362d9baed2d7a4
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 10d7c39414ec474395359bb3e3e08e0f
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 0449488ba6ba41d1845bf8a1d0fa4078
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 7de2e70d08854d6aa153dd88b7505904
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 86057122db414e50b37ba15fa2ac7e61
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:151
# dc5634bc5c5e49aa85392a61ddadc957
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# e7c908bd7ed14ed6ae192cf196c28d24
msgid "To join queries using the AND boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 913e76d6871144c19718bb445f22dac6
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:155
# cce105ae32394184a37b7af69cbc3140
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# d40ff86739e547b7b4172f04a7b30dfd
msgid "To negate search results using the NOT boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:159
# 47f90d9a69a6437eb756f8c2013d49d7
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# e9986a2c836a4203b754ecf988940234
msgid "To join queries using the OR boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:163
# 998a8c0daa55403faceda13daa91b7db
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 7afef512e4aa41c884adbb7308480a16
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 1fbc72f0742d48d3af7d33f6285c659e
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:167
# 2d33fab391ac49e88ece8bf2e8d70418
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 70666e9d583e492dbec569fe5afd6ced
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:171
# 3698f70156504bb292be157e2f0f0921
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# e6ec46bbe949400db9116d60da160cbc
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 1d8ba97ce4b145d28894f7f75d171a6d
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# e84a5788f0164b3c8a5d61eb4a7ca892
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 84e7f96bec294ba9bc6f5b3526fad1f9
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# c06a0e189ce7426888e34e1f74d4fc7d
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 3251a18109054d2a9e935728f514046a
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# d92fadf7e2c743da8ff9d4d97b594275
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# f9d3bc4d62be49a5a75273e678f78ce8
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# a145d7aeab7b4635bd72a091dbaf6ea1
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 64de2899d1ca41bab19b0386fee6a010
msgid "To search a top-level run list for a role named \"load_balancer\", enter the following (from |knife|):"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 193a87d6e3e84b519f33ea84c09706f9
# 4bcf56571444415199e6b34e3fa48e35
msgid "or add the following (to a recipe):"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# d9917d9c366a4bd2b120593585730c9e
msgid "To search an expanded run list for all nodes with the role \"load_balancer\", enter the following (using |knife|):"
msgstr ""

#: ../source/essentials_search.rst:179
# c693065f8a7f465d9e87711aa8377608
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:6
# e4ba1cec95d44c7491892da1ad3454ed
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:10
# e82b43200d0d484699747d5ca5056117
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:12
# 70b0f55e0da54ff5981ae1d356e90553
msgid "|chef| saves expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:14
# 2ca25b25bfa146cfb91fdce41f5e45ef
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:20
# 6399f138be184296b3faf63f76170fda
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# a8941f81e67e43b1abb2fb84fb959ac8
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# 20a52c97e4184dca810a5d7ab4efd087
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:27
# 7cec1fc5aed74be2a650dde7a41410b9
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# a286ce1f1da941ef9a407c7c8059a191
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:31
# c43f02310516460389ce502de63be943
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:35
# bed9f285874f463596ac5ae8407489ff
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# cb5cb0937ed34eb3a9bb2b8927255a0a
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:183
# fa94acde51c44f46bd0a20206ee3c7a2
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# b08276b886ab404984ef69a56fe4b29f
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 6442ea1f99f549a684c14f663566155b
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following simplified settings file is for a web server named \"mysqlchef\" and a database server named mysqlchefutil:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# f6ef853a7c2d4da4b01ef2aa00ed4be2
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 394ff0135b7c4fee863710fc4d9f414f
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# cea255f16ba54b618a77b13817799431
msgid "where the \"[0]\" is the 0 (zero) index for the db_server identifier. This is because a single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:189
# c36d60fb88f14fbe88bac4528d6d95b0
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 55278bd17cd043ac817e983df4f3b4c3
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every |chef| organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created, such as production, staging, testing, and development. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 7e852c1516944162847132218dd7aaf5
msgid "When searching, a |chef| environment (``chef_environment``) is treated much like an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 6d5e2e4cb36142eeb2c9c73dc739de15
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:195
# 38e19d2069674f7ead33bcbe37edd865
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# aaa9676feea9412a98433b6853d7a698
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# a7d1c982b8734d848e32ff3bd02c08a7
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 261a6dd5526a43a39bfe32ccb7c07b41
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 626045aa59404f0e8c63b3c4af8f379a
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# dc02a07e896b440494b5f0b91973dc96
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 33a250b2a5414f4a8e5b45a51abcb7fd
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# c321e0d0bff34c70b8f3729e61d2da1f
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# d118d4af27b04fa8abb27f4ef9d6550f
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 13e872b0be8f4dfb816acbcf2b58e823
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 39461a310e7d4391913626f4afda5a61
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

