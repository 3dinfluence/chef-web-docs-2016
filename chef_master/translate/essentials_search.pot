# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-06 22:07\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 29bf6cbef944490e8b5cbd72e09f271f
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 3a96022ee16640c384f726c1590e3415
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# e39c270b5e8b4de69445255558243602
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 09380ec9dfd54c5b97331ddcf9bb1bb7
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# d7dd72077821426f800c508ef38c6d59
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 15477583ae3848679548627e1ce4d469
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 63c19d054713418c9b4bebd4e1d433e8
# 8e0e459558604031852b77628db9b4da
# e844aee27cc64b58b31febc09028ba54
# 1fc39db2b219478f9a3ac26620148d26
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 8441654e84f14e8e9ba60f480677c771
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# babf69e574b347c2ad8eb38cd0ff76e8
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 529ac05da3bc46aa9843cfe5d85cb214
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# b18ea73a52e3442b9125aadfe415f42c
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 4940eba1ee914a94b0b132435f3781a2
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# f99146a00db84917a3a30463a1149202
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 0b69efc9605c484f931fd04b616e93bb
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# e7d121be8f5445c1aa042907b81249de
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 5f4573e75c3b4dd094978ad699142ae1
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 7b01fa814a254200baa7124dd70116d2
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 56e720c57ef14f709a976aa390fbaccc
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 84843e94c0164c1b817619457dcb1917
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:22
# a09b2e9778414996ad1bdbe4c9f5903d
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# f876399c5d164db4806538cd925ea392
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 81d20d05e70c4f2eaf1f7292ce97dfc1
# 0e30babe0b5f495ebb281d141cba1cf3
# 4ae8251659c843d083500cd445f6d2ac
# ac2c52cdeedd4d7fa0353f4ded3c5bd7
# 8f909fb073154540adc97afdf29aba7b
# a38b8fd70be04ee1873dc72d5490cdd7
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 4ea6dff6bb1042e7aface61e26a10d89
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 7f3e232c1fa74ba79e2a617f4ce0f14c
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 75c28600681747888c062d820240f074
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# bd2cd3a8040b4f3c9dbb0dc17252da7a
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# afda8c488600428390dc7dc1c754984a
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# bb3d4f828c9a4ce5b42094a34beaac9b
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 8413aeb8e62b49a6be49f703700dd4ed
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# ecfea031100542d1997ef02830084bba
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# 2c11e54b93514395be912a6756ddf6bb
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 64d6eef8758b4724835423b929ad5d9f
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# 5d7b2e70d0cb4b73a4dae2fa7f1ea790
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 1bd2c7b7bc1d42999caa0fe05932627b
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# d252464b65e8422cb9e50f7e0d2a650c
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 4ee11d00837a42dc8afbdace9b2bc1f9
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# c76bbefd3d41482ab80abc9b76ae4524
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# 3740798cf2864557a0fdba1c2eb38b27
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# f5b7446f305d4518bc42c9b65cb34b5b
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 90b148f91442462e882096a237585979
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# c8abe0e36273485aaa1cd56a1041096d
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 6cf624e61c394706b45325be4d8874c9
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# d7acd7d227b842cc86022b6cc2b5c2bd
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# f9adfde3679b465cb5b552496a992361
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# a0aea8a854ca4666b00ab4ab4bf9e4b6
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# 5f4a02837ce74219b33fd6e4164809a3
# bf94c9208a274b488abb77771e891cb3
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# c6cfae0e101246ff86ddd00e9dd0eb51
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# cff3c614a1a043599ac0d72a87a985ac
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 8314e21f439948b58cc74f08a26ec9cb
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 6452aa6198764172945bd2c61a7941d3
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# 15236153743141a094de9923f47b423e
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# b254e39cb2514f2683e7cc089835637b
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# 41b1363695e047dfa0cb0850d09913ae
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 44ada8032b7640d49f127315fcc4f205
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 12bea936dee94204b36d5dfd567777a2
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 8be9327c6f254772b8f57b9b6329455e
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 45289f61eb4b4e06bae67a574c90c417
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 86871d1fbfcc49a9bdd472141e3b102c
# aca42fe791f34e02b0353bcc89cbfa48
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# d9fa01ff26c34922879eb8d41680c7d2
# 8e0f7964d8f34c698dfa2ea354eb7eb8
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# e530a956bde14679876aa27752c2b371
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 3e6d29db86c14e17bf9c7d9e5c585f56
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# d5ecb2188ae64bdd823555810a73b3b8
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# c89f847630f3435aba888d2db6fc7116
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 63bd8ceaf50840e6b44dc2838e878829
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 3fb7dfba8ec94fa3a357aa0926e6ae18
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 78ec6167a9d84edc8e07fb293bfba43d
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# c75a9cc7d8d7470a9a07123056588cdd
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# a018dd56e65743a3bd2eef5dad8996c8
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# f5da70e9ac5c4f8c86c2a46447647f8c
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 8a809a99b3d14acbab7e6a794bda2c58
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# ff89e0dfd3ab41d9b133021d70f2f36f
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# 7109630a4b604de1b659f7601c336f81
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# fa3dd94785c14f6b81cce8eb621d16bf
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# 0defabda00074b058dd8f7cf5883c8ac
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# a75bd45d73984679ab3402c7c68a0cf9
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 1a0146801a3e4a6f97c29b8c53d11b73
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# f83e4cbd633c450a93aee54a38c5109b
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 44a98da7ba97485c937467dbfaf6af70
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# c458454a4ecf40f0bda85c175d1399b1
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# e4a7b2b863b54134b534c798ab1be6dd
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# d1607077d3854162b443b0a2c5683202
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 9ae81f2edf1c45a4a39291ed8bb95f84
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 99d481aecce8402ea26d4cc26be9d18e
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# c15d2a5cb7ac487facd5a19e9914ee9c
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# db5add0cf5b047f89dbb73b68fd5457b
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 71a507c95a914aecad650a12625e7f24
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 8b437d4d81f440e2986c267af2aa4c8d
# 7affd191924c42539120397323e3a4d8
# 70adfb493eb34106a8cfe35ffbd2276d
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 928037ce2ff0496abfe043af6e8c85b5
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 62632698bee2473d8c01d7aec9356467
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 10867b65f9434c32ac64e5e0ba9d962f
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# ef676553878b4358abcfaf531b9eaeba
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 429a2da074414bc18876e65f27246154
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# ecc0e267932d42c9ad564807895242a0
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# a01d06bdb348480ab5dc190323b36f1d
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 2b033be151fc47b7a3df87f28e775c59
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# c2f14966b5ab4789b31106aa66d81117
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# cdf113ae94264864bfa3b9aed7e113e0
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 44fffb3018af4d9ca1d21b2c54ff4d9e
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 0c09a923b45545dfbf47503389db8e61
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# cdb1f9f971f749c2a48a455c55e09b60
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 4060d091a6a04691a383a4e719a5ee32
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 65acb14d63de455cbf624055f58227f5
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# e28ec83bc1684ad6914a34e238300c8d
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 15be053f1766423cb369e9d3f0b15e88
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 462c3135f0f6490d89e91158a6cf6366
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 4d4ae8ccdcb2487d8beacf9e8e68290a
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# a47e323003344114825261b0815e0109
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# a075af1938ea4487a421fd6e9bfa014f
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 045142ebf08747fc83a3bda8a86b947d
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 03e3a2eeb47b4945b68dc1a7fc836fa6
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# b24629df88274652bae9a2b23d578bca
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 73767174ae6748c4af6d0c2a0f0155bb
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# cf564ccc2dda4fbbbda1fdc69245a44e
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 578314e0b18149b2a7fe9c68ec353a5f
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 8990c14ee45f4ac6beb42fc17541e23c
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 2914fd175f984d83bd31faad46513cca
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 45e6ef3a89874ffdb72c5841329b4f1f
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# c3ed442f69064a8391a894c81f0c908d
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 024c4f205b9d4a06a9c3ee232f2fc0f1
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# f4c26e0a0d2546d7a83af576ae9fdeeb
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# e8900087becd45369f632e09a543f2e4
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# eadd78c1e7c64ef2bc3e0ebb0e003c38
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# eee5a27bfb164b7eba801707cd6d8cfa
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# fbe1c18c34924e139daeeb602f43a76e
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# a69d3077d94f46c68aa148fbbe347d66
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 54d5725919654abd8f7327f74260d911
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 852a4bbc77a34cc9a9e04128d12ed397
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 5c96241077bb4200b4c9c523fab4815d
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# c4909c24a16f4061b339a5488bca91a6
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 6d2b9ceaf1d04dee8bfb5bd53c7ad7ce
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 2343d39a5d65454688e7a25cec162abe
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# b4d464c3fd3c42779f2d45df762192d8
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# c6cbd0b8f660429db2d968631014e978
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 5c006c443c5b45e39ba91912a9e029a3
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# ec0644c582e940c3b8ae046912abbade
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 2bbe90f3a6284c5199de1e85013223ad
# 37a6759ce6f24fa8a089ef18dbd601f7
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 49d514f0ca9d4d519d64808b0f67d315
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# 434e665480424dd2a48108ed67737d59
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# c3464596e53243a0b7283c222349b5af
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# a49f9e6aedec4983897d8bf8bf091e7f
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# aeebfe7df03143198a863fa82e08aa11
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# efdd43d780084ca49817e0b809d661ec
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 13c91688c5294ecc91896fe999132654
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 375543575de44f049abf6b95f44c6f9a
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 47cdf63fe88e4bd78f0ff4a38c32288a
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 6536b73c840a4add9e2e8a8d29c026ab
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# fc7929201ab3497e9b16557f9e3c1dbc
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 9d5a5da6dbea40dda32f0bda755c528b
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 205e344e2a3e4f30a6cbdf7ac4093d6f
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 69f498c3caf443b4807a7a988d46935f
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# 73c92283251a41f5a2dd709c08a0d77b
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 17fd6d8036fd4802a6c805e3ec42abc2
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# baea789c15284c19a77d03c5cfcfbde7
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 3a20050b078d44ee8ee06618d4ca2ebd
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# dffa970cd52b4888a2f17ee23a62689e
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# c8debae06b6a45569857225b83d33685
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# 46fda0c3bf3349a3bbfc7d04670ccddc
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# d38202cb8b2b44988a461ef31c24b94b
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 903d4cb06e81462eac7db0c2bdcf916e
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 658d428c16e749d5aa133760b6362a0e
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# d7e17c7589054cbf9551a925f33bbced
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 6b8d88093ed3474fbc2a827ddaaa0bb5
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 324d88e729674c7793684c578979f31e
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 582862639edd4c5198d67af0de516e11
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 70b831dba48941a9ba769417b39a376f
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 07377120e9c34c55a62fd95ce63ec225
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 52b0b8c61466449381d350d777fa5a6d
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# a03cdc556dce4e9d8c39f8482b8f22f8
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 18bc219bca224d57a1ad23b3b69146cc
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# bbbac507966047d6aaec6ef67dba248b
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# b424829d98ae4ccd91c6f0b9113db38e
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

