# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-30 20:30\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# f4418e26a579474fa7b5d311bb9438b6
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# e1d6ff7861b24eeb8ff39eafaf2ffff1
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# da88601284f045a893d8a7484fb6ed13
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# bf9f705b696a4844a18a5fab5a3ac0b3
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# a2bdf80a953441ceabf37f2a5fe922b6
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 750424e5df3e453d881b6d60710bdef3
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# ea3263858db44e46897a3db53071a619
# ed7c4c03aa77465eb95b97888605f4e6
# b3dbeeece6b44e9aa27cadbcb62710dd
# 45a9b913cb3f4a25a43b7a2e241bd75e
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 41b0dc4a6bec46dc8ab2970c2aaf5cac
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 4bf173370f7846d9b64d72425f28c560
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# d01490d7f12a485fbaca89ae1820bd46
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# ee5d4f2fa6d747968230b54323fca5ae
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# adb60e2493ba4085841958de73272ec0
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 71b5052110fb4d7584abbb487400136f
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# c9aea90e4bac4db3851197fed07324e1
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# f4c6f02ef38f48838bab2d18b02a6351
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 81463c981de64e1897136dfefda1f1b7
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# ce0b45dc733f4e20a2eed233c8f477c9
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 61fcabbf659a462592bd05bbc56e9de3
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 5c0125310e6c462baacf51cfc22f3bd2
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 5459e7b7f1834fa58326a2036e863400
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# f8ae71a5b63845b582d19583948f29e2
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 186880d0c98f4b249df2eb69b3739b40
# 5f9a51db9d674b149a3d89b049469bee
# dd035f2375014c1db3e4ba93e80669e8
# ed91f9c2e1ad4e9aaf871e25528cb7a5
# 5636043b72674ea586e6163fc0102830
# 8ff1da903d1f4b558e20e7f9480e0724
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# d1ec65b61b994ba892c3c6b573c2d4e2
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# c341b36272a5454a8bbbb948ebe7f80e
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 7faba5ca14354be2b31384a0d3224b00
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 9602bc755c154b008672a3ac9b8323e6
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 463d4e9082544c4d8e81d223672c2f26
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# dd3ac6307a12496c9f2290db320c12ed
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 3848afc1ee3e4200a60edcdd8975fe18
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# d33bf3e2104e48d4a5208de4577a309f
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# bafcbcfcd22c41b19ec3e41a7be1ea83
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 18d7d6e4e0c848f78e6e57cfabc5d688
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# d7030a6f7af54d8a8bd83c8a0e7e3633
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 9fe54614d3694a5a925a37e02167452c
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 4e27ed797f994ffca7bef1e8769d7f31
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 291bfa41e0834480b4f9ea1d59868d3a
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# aad1b71db56b41e4a8340f9f736b2ad8
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 607dbbd75f6548d6ae39667ee24882f4
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# b29a323f6fca450d8266ad1857f6e0a6
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 01a5f84583c6424088df8f2082f0bd4e
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# c868b7ab35ee4798b4278085da6329a9
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# bfc2e60ba35e4623bf0a93f3f31b2c95
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 18702d2ded4b4eb580a21cf8180df6bf
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 1354ecb26d074180bf4cf887ac42f439
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 6e865a6975bd483d8b8c5a11edb0a1c3
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 33b66a0b814a434b8339a9d0bed79d7a
# 526515fd5ef44178b108435c55fadcca
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 9c38e1a8dae24737b45948dfce0851ce
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 143b6ec54c8e4b4493578105f163ba06
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# f1b2e0db5de84d51946a5648e2418466
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 46c2abd2dfb7412b8779ab44a85fff0d
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 8892a94c37c0456b8ea83976ceea5d80
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 2b38b1911ff44cbfb6fd69fbd6585726
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 3852794cff9d48bb98a8bfeeb0d8f83a
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 8f44f308b0ae4d3c83c9e433e68fb04d
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 269bed82d5a5474b99b46048ff5ac7fa
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# d5428ce97f16446799510217c0d30725
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 7bc8f4bd1ec44223be4da0db807249a2
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 519f2c420c16439b836bd34d49e013cb
# 72cba23850634689bc993b0b6110581d
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# a0f32cc5c9c2499a82bb927c9daebbee
# 32fb198186cf44c8b4ba99a0a1691187
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 98ac4119de4448db8f2b2a756fba3014
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 751af7cc63a74865a41b7b59af1f9a04
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 7c9a94ff607c41cfbefef97b36e167d6
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# f65689ea1e27467a8d3f305f2948e807
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 4c0923764bf9402696a99b04b120ac20
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 8ea08b6893914b50a4f680837a12cc8d
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 309f649affd8407db7eb4f8589011bac
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# c6fa2db88b3f447e82c0bcd32313fd33
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 6ae3f872f7be45eeb469d9e5f03f489b
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# cff87759c1074aeb9c1062073684a716
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 4110e1d274ac4889b661c869efa41e95
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 3098ed4c218b480daa3bf364480258f4
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 21221b7f6e07485fa38955557588ee2b
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 92a759dc58864c85aecf70f783d14982
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 1204f26f92754392bb4d6a21c5a46595
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 60173587fcca4e6f88cceb6423aa8267
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 734a819f115c44b3a68d7b9a21129063
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# d00976954fd345d586f62d319a47927b
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 79b8b516858f40c5a86077c696f9af79
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# ab841d58fd9a477c934d8c65db696d3e
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 6e3b9da2116d4fd7b49db81eb747bedc
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 176b6445c3ef44e2833190f531a85bd4
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 47f2630f4a9f43779aa4149a877d3a1b
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# c08086e38e564af587c21a22b684243b
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 1768376670ed4c42b8e0c4fae6f71d5a
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 36d42cf5778645fba43bf548aa538864
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# c7b7d9fe0dd741389c128d179e4b72b2
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# dd5ef92e4cf14df1b1f284319f07c9ad
# b5b9e4dc609b4c9ebac1d3e92302d548
# afe09663f21e434ca25235f52e904583
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 2784fb2050c644d3a4cba4266e7b8137
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 94655a3c5faf48b4b5e217a0304980dd
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 31ba91f24dcc4317a0154a9b36d739fb
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# b2535819e6104c96ba60a687caf56245
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 83aca389f65c486f8991c1e7947ba27a
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 69814424c8a34f91b2256a0a4bf4053d
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 9881c3a64cd84001ab6a22acd73c912f
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# a829a415a357413dbc9f57b433a34bd2
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# e9341050be1240e28b547f4cda1f51b3
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 3515e6315a324218b65921551eb78f32
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 0225248b09904d878d429907781fa08a
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 4cfaae226aea43249fcc2b2150705eb0
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 025c26d7e6624e6b9b2b62b1bed59a90
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 5283486c650c4556a1e12acfa118d2bb
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# c289936fa39f47dc8290ebb75c5f9797
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# f1fe3778692343afaa9183eac7bd4094
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# ce97f2f97be64ad7b14f0cf125596fa8
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 6071f32089264011ba49c8ff1dc0814b
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 3ac3d54093c14de69f247121e9553d6b
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 3318c29c83654e1a8127b847166cbc16
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# e32fa14cb3004ea9ad71a1e8d9228b7a
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# ad4ba4104ac748b68a28ae06262d024e
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 2b8d889bb9854f27b62b45d9d357401a
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# d3dde90d8c2a4915a2203f91964e3b1d
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 88391c7cc84d4f11880e2509a9bbb58c
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# 272b749c829942b39be1aaa4dbeba8e3
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# b56a77bbb82845bfaf52d710ea853fbf
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 08bb8be0c22842e69c3331774115e409
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 761281a567fe4fe8a9f4b391980606b7
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 35cc8dd3159647b78079d98d936d5238
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# bca5745e4ec9481789ee10790bd84142
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 3e3b120d47504983b9ea6a0170640806
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# eb64f4727dda49adb35c99de7dca7736
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 82513d8d67b24beaa5b2b57a3f1423d7
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 934fd8bf14e6476ca4b2b811b795568c
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 7379d30682774838820488ffa256e6ae
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 6f48c2f7b79a4e6397b1532b469ac4e0
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# bf6047430ef94175a511147c2512e12a
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 38f8044e803c48c7a15acc0bde0b0728
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 2090f876e0864363ad9e34e5a969c83a
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 1a74e5f2e67d4de0a2f41c6a8028e130
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 1e837de2d1614db79b7509f6962653ab
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 9d18daf4b43b423f81cd1d192f7da5e0
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 03d1f4911b7a4930af0570b4a62b8b5a
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# c4ca23a360f1492abab91203bf1efdc8
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 489988c96d8f4672afa16e77f97b27bb
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# ec95d640bad94934853ffbb9a6963f29
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# a27e07ad808046778c92cf3e7f8bfea5
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 3472204512614b80b48aa8f9a0ec7544
# 5ede76fbf39d4064aac4f83e1a0e118c
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# f31ab0540c0f4c5faa9928957e4a4f10
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 99a08acd314e4fec990fbe2ba9879317
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# e0824e6ad0864829811223b0ca8c3f12
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# d3130fc14a884b16aaf9a39c380943ea
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# e2df7943a22e460299f14606f9751144
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 3869468a05084468b235b03210c838fc
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 376c0735c4f04568b2a17695f105b0b4
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# c3042f52f1394c14986dde1fc2213667
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 58c05d5913d94023b02950789e1ee1d3
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 69bb5fbde2974274babbea2d48b156a2
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 33c37ac3f43a46ccb4c03c29f96addb1
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# db749cc4eb684eb4ab63f38d4205adde
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# de5021d1305a4ab1988bdf87da78b9cb
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 02608ca0b8db4813b6905660e20470d6
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# dbd07aac38ab4403854a4df5f262eb27
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 5fb82201ef434ae59a98a423f21661a7
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 629a61fd251746338c08bebb34edc04e
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 66357b3817bf48e59bb722e0a8b12e13
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 54c0373a17ae4d58b74e90921c27f1b9
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 2d5a444ada924ce8a667ee5526902814
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# bed011bf171b4eec935f12b2aa6ea696
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 6d204f3fe88740128ffcf4dfb9b0eb41
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 32a38a9e579c4373af5815d81d6c8fa7
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 624424754633475cba0d729ebd6d33d7
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 7fbc6b94d82e4d9da6c267f5d9e7d89d
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 98b1b81b309440eca974809ca71e7f6f
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 5df44c705d824149a90e088169c99027
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 336219879cea423fa55eba804d0a1906
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# c3e0ba53528f408594b2fc012b1afacc
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# cc5f0f7575b14b5dad2f0d99b6e70000
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# c66c8ae074324e448f6abd9df4b6fb2d
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 62741e2f419b42749641557355a181d3
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# ddfe67069c6c435ea6c9206e02725c27
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 46c26fcc008c4e8db1ab6db3372c5da1
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 12241274da3c4ef0b375bdbc10ceff50
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

