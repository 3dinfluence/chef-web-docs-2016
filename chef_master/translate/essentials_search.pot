# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-27 22:25\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# d94d335710644660a8c9e4668a8c31c7
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 68d640623d0b48b2abbb090c5d9ea478
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 2e78be2e711e4e6a852b0116b8e91fa0
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# a31fefca56db47dc95f0d220a50e9a86
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 21a325c7509c4583b6f4d6ab54bcb416
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# a9c05c864e5d4b3b8ce3fc912568db5d
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 1a8f1b4c163741a0bb2bf1b3a2c78767
# 44bc2bd0be034a589885aa5be30c8436
# 7505352ebc9b402f969d2ffe381457bd
# 54c5e49217fe44058fe0ecea664b091e
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 3a8ee3c92dc24d2fad214baed1c39af6
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# c5cbbdc80b9143f5942f861063175cb0
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# a5a3d41209ca4bfc97834fe681862e7e
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# f85714d4f7fc460cac10825c088db4a5
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 3e8c32fc44a74833a16ecb6d5ef48f7e
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 33285f92592e42309d3fcca5c752ad8c
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 2ee9203971d7463c94aa78cd4d54086f
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# ce3ab632448e496a8c1aca84e8aedad2
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# ab98d5fa716e46399f8b69e52a26c541
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# d605d5aec3b64531baebf7a5386e2b8c
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 991927e1585441728a3e7dc03ffdb6bf
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 323ae19f8e3746fa85840127d18a40fb
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# b123396b941945cd839fe7fdb0db13d3
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# fa6385bb757c4a1abe232729a91563cd
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 6f0ccef342e54defb0e63290d61b74b4
# d3ee762a0ff84c78b61d454bb097220b
# b473647308104f2d9cb01e5c8f30488e
# 1737c1be733b4d4c88b5347bc3a2587f
# 955929e1ccbc49a2ac3f158cf3677e2c
# 67091e29399a40dba71739a4149ae608
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 99be5d4e3ee945719fd0bab6a4f4a936
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# d0d22bf04a5344e5a79bb279f9ee8a2b
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# e73d6d854bfa451fb9c9a58bac6d6afc
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 7db5f22e6c91436f8c1cc227f34e3522
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 0463be727abe43a8b1fdb0e24794c89e
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# e7f3ba3ae3454cec831d85d12f934582
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# b0bc838acd5140dca4786ea7a44afbe8
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 2a8cf028dda5430d982705fc70bfefcc
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 55e98222e26c42d4aa6a4ae49648987e
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 305e991a64a34cc79db0c81d3e238244
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 929f9697b4cc4ed18fa26ce4bcd0b6eb
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 4124d24c56534acdb4b2ed0b889325c6
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 934cc726db0745e2ac5973b50742e967
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 917914d765594348a74d57c3c468e21b
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 7957ff3108eb4887a56ee773bb1d0e1c
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 0c9c240d147f43ee8b6708e7179fada0
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 13d73026fca5474688bbd6eed208d815
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 7df9ea7533f34d8780669352d349a759
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 26f1cf37b53f4129b41252049cd907b8
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# f68d1903386841ba8385af5164c8940b
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 7b2ff64797844270a1db16aafd9f3eec
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# f43f1bcf6377414d893ec2145b921fad
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# a1ff028f2c06468a81f6ee6bea80f9da
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# fa286d2e8c454dfe8d0c89489b58f486
# b402cf227a26450da630c5d296481a2d
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 4b5741623ca14c38b8cbbc1a10b4f862
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# acc6d431117a4564984472bb5bc0c9bb
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# c59cb3e3ee714a9c99e79c86e11810c3
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 568657fc9a424182ba508e3200fae4e1
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# ec1784316f5744b8a9f66c4ff05a41ab
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# ab7ef38143b541468da04550faf93679
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 9c1f808946174ec6b9372837759f0e3f
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 393c136f1eee494d88babca3902caff8
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 32d7f66247ef498eb347d4cbdb0b8a21
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 600bfd8673864b62917bf06ad616dc87
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 9debe5a838d44d1eb9c52683b2ab64b3
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 7cd585209eeb49c3b21b0bec23c81670
# 36d3c0d5149849d183892a6fc90bd080
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 356c824216b54fd1bb90263def124aeb
# dd32945915124d5f93ff9b5acdc44789
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# e3e7b4e1d5c044078eaeff2113c83fe3
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 6ff46785c2464a9db9e6d25bdb5ea791
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 5715957c8c0d42649ff852d617bdc755
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 4c625819378c409ab9b1c8a13b858a62
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 3045f531102a4ca7b35a460fd7a8b07e
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 9206be846f164c4caa32c970a3115a5b
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# e460c296989a4803b2aa4ac77b37960a
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 3180fcc437eb4b8bb9c88bec2f35c685
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# cb101eafde37463db477e0aeb59e8c68
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 6a69b3bfb3af428493bb6ab25f542cb5
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# dab5c1237dfd4f8792b61a8f719a67e1
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 5c46d17ec5a040038857133019587887
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 09e7092acbf345d88f038b0c98bcab61
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 1ccf390a808e4343855bf919c20474b5
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 695e63918cf544879bf372cbf1a2c759
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# f6365a3c1e9f43fab6f7020cf629b589
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 4ece6776d3784f0fb9ea2e826cf420b4
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 7ae5520f7e9b4655b76968880890ae9e
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 9889fbc09d7d42a6ad2d1aef13960a4c
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# f7b9eb34879e4319a9f7ef5e0557a806
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 2646f4149b804b959fdd4edf38c24337
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 0b11a47153b44b75b974e9f2fbafddfa
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 9e5b892c63f94f128204191d39cab0e4
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 69d4f524d2b84081b82d09029bb57519
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# ec70df9f2a924302bc9673d1b407a25b
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 22458dcbb50e43aa807063bac42fd67c
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 28d5dbc42d334b6aaef3dd41acb85b4e
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 4142f7c43ffc42ddb77c02b154af86dc
# 47923fbb11d64b53aeb9445e0604c72e
# f7fb0af5ca744729b38224add47228c4
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 3fa37c857ecc45458202b564d966630c
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 3e78b799cd9343d585eec916be73a58c
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 6b3e5e89405c47ae9a3c64bbbb7e138b
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 793e4d5542804e34a83161149e0a77b3
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 8b8123570c2d48638cb50bc6f2fcc067
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 8939ea4ae0ca414ca7256ad3a60591d4
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 96c072ca23d1410d9907d577b5fa2b62
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 14cbc2c2f6a544e18d6e022d637407ff
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# de608f96df30460dac9be2c85dff9ee5
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# c75e8901145341d78868aa9a8bd9d957
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 21c0c506956e4af09c2c18035616bfe4
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# df74b920eb7e4cb5aafd81a21e59ea8a
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 1c6f60abfc994e7ab9a03d9b933578fa
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 3825fcfe6ca4424fa4cce6ad153ba979
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 1d89e5f39be04ba790f069ed2f3e37a1
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# c870af2c251845f497cbb21e9958815c
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 0767fa14a86d4d118b293f1bca6b8445
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 4b72577bc6004f3faa55c7d0a1b38c37
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# f847f5745e204b12b6d80b468d810c57
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 316ab183487b4849bdb466faacaaf3a3
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 5da28752c5cd420ca1ddd20bf2b73e1c
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# d10274727d0445649a16be4cf25c3952
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 78d375ac9eec44f08009ac4d67a74c6d
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 56af7c5d99e9406da8195f6a21943f73
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 387c3b22ef824864b82f1cf731042883
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# 3de83f43e92b4400a32cff8652259749
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 7eb7249907e84cf3b20553cf24adead7
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# b4194feaa491406b941c99728a9ae09e
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 31966b6a7f4b49b2b488f2ef55d521f9
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 06d3f549f9df4ababf6765b95913614b
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# f93e140790484ffd809ea7a5f5786c14
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 331a489de80b4d5a8237ae7833fc8333
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# c7b62b779bf84260a4550986c8888a22
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 594acc495f14416db5547e61fbc9ef8c
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 5edf431c2ad94172b7a8c575124be71f
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# c65e880d9584416e82bfa7d84505f60b
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 6aeb4f1decaa42c78d181b98739b2760
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# c4d9260e8b004bff966a8d7ec1a8e3a5
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 3d87d54d8e85481db170dfed023742f8
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# fc8ce6ad800b410380904a262561b1f5
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 9c7905e171a348f8a2a951de2666199c
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# d10b251ebbc04a729b16841de64e0f3d
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# e4c82248ab694665926c66461ddbd8db
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 63fad6f08e6c4c3cb3a0b370964e0d24
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 52b080870a2b47f7b493b8f15a84e306
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 62153784303f44f8a779bac7a4eca3be
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 94c02ca1772d452891daefd8a4916a37
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# dd3689d910f546d397d5aff6918f41fc
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 1f92c6fd123847c3bd11f51ef7adc303
# b05bcfe513674d95820eac38279b08b3
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# f9cb29d6c18740c7a019109c018396c0
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# c8176103f0b3484abf3bc52ca1fbb2e2
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 42feee9d54064081997a2e2adc1b5ae2
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 6ee41a4ff5114946b2110d8142133382
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 8a775db6ae5f47439d49f024e153fcec
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 751d830bcbb4422993ad0c796cffcaf6
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# b66d8ee1338d42d489d46b733f663806
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 2b23fa1f2c9340499e931fafe900c2ae
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# afa70984eb46452c900a224ad92fd313
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# fa4e66a4e6be4837a7f0db83a5735d31
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# e21924eba60c49d893453e5838793fda
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 61be26cdcef5459792e2ce21ea58674e
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 136a6180033f4944a52c717a852881b7
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 4affe20e97fe4b10b74e5d2814582861
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 83c9eedce4614452a107c7f49880a339
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# dc23e2ae0def45b781b5b227441f5be5
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 881a728172604ccb957f1360972d1775
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 3be9be8341a54135b08c152ca814dc29
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 95c2d4e3a2a74f1790abacbc2b9cf62e
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 27193f498e004fedb62bed28c9e3f63f
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# f29577481dcd46908f2ee7aa7b46127e
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# dff99f5d593d4392a70db9abdf45f63a
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 8af64c9db6b04384bf1209043701bbba
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 04951453c7aa4024a89e44639ee28fa5
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# ffaec95af991498ca3abd9bf161e1d63
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 060135f9181046f99b58dd7ec90618e8
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# f8003aa1052e43e6b4a9331e403a0697
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# e39e6de957364edbad2d867653922c77
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# a26650032c424634962fcef8bd57279c
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 755f1be352d84e378b2bc6152dae7599
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 66ec51ad1b91448a9e9d0bbf12f82bf2
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# db40335b615747f2bddb8ebddca1800b
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# aaccd4cfdf4849ea8678cb7cb906ceb8
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 26241b9a445445d0b20b615159991f03
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 72f7ed00a3104b7986ce366f917ffb68
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

