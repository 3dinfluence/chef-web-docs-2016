# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-25 09:45\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# c69eac0af236424d9d34c8f2bcec3785
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 4bf5c60bce3049c1a16b06ad742ca170
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 71b7bddf54504aa59e25628d707e7d4a
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# f0066a0e58364134baa17669c4a5c9cd
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 9151d21772c944de9eef02fc55e091d5
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 3c0114d002df4ee098d015fcb5101fa2
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 1431bab1921e4ea6b4642f607a74910a
# a3dfacff4d3a43bfb12b294d0596f6e3
# 40164b7ae90f4477a0a3a0814c8e2e9c
# 261b9437a807494783d868ed2382c2ae
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 12fc7e24e035417e847ed618d4c82a7f
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 15e578a44ea642fa8226758c4e0b30c9
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# c5d8ec22b473414481f714f2766295c5
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 9c5e0a66fed94b0e943f016156f83051
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# ccf9164dada840958b2d838fe1195ca5
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 9235204a1a004afc9bdf615dbff49aae
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 2a87d97eeb19482a8a74214512c91309
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 25dd3c3e83484fb397a36d65329e09a9
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 6aeb0dd73ebb47898be5995cfb3c10d8
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 7cc5fba57e50462691a47aa208516fee
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# fd8326496e09482985b27b0094c4c552
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 20ec6aaeb15c4f61a3d5b5e4adfcd88a
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# a3ac30e71cd74696b57e52dd32549fae
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# f377ec838e8e4edaaa13e27dc20552e1
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 460060ea48674a9b8ce7ea87af4f917b
# d6e60a445856439ba855c69ee75818fe
# aa8145a37446492fbce7b911ebe734c0
# 29ac145a40154f44b467682218b91fea
# 81cc0bb3c4914002ac6162d2bd94f62b
# 386f227b80e94ea7926fe991ea932c8c
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# a975842515b14f6898b4a6e8f32d32ff
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 55038a94335b48e4a29161d9944cbb38
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 90c708ad28744bbd9c81b02007c404e6
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 51e756d7b6e4424a8ba2b195a3b32897
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# f1b3dc2200aa4e1998dc8f22224a4511
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# b3317a9aa58447588317246cee52bc23
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 35befdf0cdf84bb4bc1dbca24e981c1c
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 99d55e60bc7d4b8aabf2c1a650156dfe
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# a2d22e581433498591eca9c5c1373733
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# eeed3f9347f1419688c383f67ace4961
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 90a8b4e418d045ef88163b7ef71ac908
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 7aeed9e24e614846ae728c11e424f66f
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 209bc79865744291a0be8f022b4afb39
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 838d9c8e9aae4dc5a09291658704dcc2
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 18765a8e901e4172904b672f423c63ae
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 5476cec9fac940f9abb01ca5a7429559
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 82bc3ca737c1467f86ea800d34acedbb
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# d28345b0c58f4cdd834306fad57cc49c
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 5cbbcb1fece7427c830fd3b29ae729fa
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 00353374cf8e49258ed428212c297bf1
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 5b3c4e292a224363ae0e3a1e289f42f0
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 35c52ca7c34c41c6adfdf0c67f7b5c53
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 03854d40a41448199f7f58335a699e0b
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# c78ce13f610d4c3b89c892d28e36d411
# 4c47ef7d0b7b4b559c5020f6e9883792
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# fbdf6022938944ef907f27079728fdc7
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# e9aee5f9f88f475c9a557d0346c500f9
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# c78c28be54b045cc994ae59bfc9c49ec
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# ad9e2ccd0f7c474795c517ea5d63c71f
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# bb0938c42eed40eaab1b3fc9878037e3
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# aa8775e97f5c40a7891c0c8498fa24e1
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# a80dd77742ce43809cfaf7b6f28b3114
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 338662e406c74b0d9ee3450fd7dbfa22
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 66f9f03110654bcfa33e36cf9b3eb257
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# f2c591ebded642d5ab4ea8a9becd2b8b
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# d51cce855b7f4042af0e98f0675e2c1f
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 486eed39ad23413093b0f954b45d4eb6
# e9c726fcf187429c96009acb75ab1c0c
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# d71c40bc856340da81eeca9dfa98880b
# 79ab6b12b8f44b2cb3a643110f78e153
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 8538bad0ecf346d782c14e63cfb101be
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# ecec076915a8422f8c06e29eba4f76da
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# bd092a71d333478098b6df55f95a8f6f
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# f160a5a6b1124a45b614e6ecf666daba
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 54ec50a773c64392be9f220677872e0a
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# ed439dccd5964d08ac15d61f2c9e29f4
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 9f759988b77742e38b2e0ae9f226808b
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 45c03cccb4a943f99e10616489d03a33
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# d0bb85086d1a4bc7a38430f2264e1759
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 51114b5d8e074efc833128fd2f9d3e1f
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 4da349f3467a4fd4bd57a79431d7691b
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 3c1653b2ff544a228f68882919cc78ab
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 72f850cc3e4d4a52804e33429072aac6
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 5403d2ae36444f9d804ba9bf909661c0
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 50a96f3106ad42e0b645943e42cb3c1a
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# b14db9ba45684b5dbc4197993fd0425a
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 6a6d74178c874e9785ca7673b4e1ee0e
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 7edfb3d5121f49ddb5d5aa3cd09e649d
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 74403093b8ea492082a9025cc0c1e294
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# a90da702837a44e79cb5dcda98093284
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 821c31f1c1e14b2b9bfdfe4eb3b41fd1
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# da1a165884f748c18fa83d8abb44012a
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# a597516673ee4ece941e6faacc20e16d
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 61e520a4877042408a35b2c506e5390f
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 2948e2e913ee49618f2ffdc831d330be
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# fb58f0eaecdc43a0a547e4e2a56627ed
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# e2fe98ff89624a9fa6568a942d114b1b
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# edb2553b1c3a4041a2902620b70b30b0
# d7d36606826345b49157dd81548e58c9
# 3e65d58eb5554f1585519b0ceecbab95
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 030ddd12c48b4de993f46b5c08cf84e7
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# a73784b7173e4c03b8cce86cda7ef967
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 3eef1561b6414e44bc889ec3baa46cba
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 852cf230190a448fae0edb3aada0d18f
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 323b37506e2b4c7da66f3847613ccb5f
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 6055308d82724a45a06dfff14399aaca
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# b9bec629dfd044aea54df7c24514da0d
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# f25b567394704212be266457aec39fee
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 8335bbf2d59e4a479b6cbfbab31ebc6f
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# ecf0cf3a607549c39ba1978d3a8e88a4
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 5488a18b58214761b0cfbe28164589a2
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# db974c80b4ad43c58f76174998350022
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 2ca274bd59934c568f7b635da5948bff
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# c198b70784dd42bca937c9cc9ebe31d6
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 876b6941d2dc4e4a90d647a1cd305861
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 28af6a6d8d254490acbcb5f1c14b2892
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# bb796bae38444fb294db924ced893b33
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 8a89829fc34a4e5ea680e1b3cf1a68e0
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 7416b2c906784dd3a3a809ca71903cee
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 1afebed43061487fa815ea8880cb364f
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 6bc05d7a8f77427db74e3c9cb5c5b27f
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# cf0679c139c841229880d609bf87efd3
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 6bf67bc1d513480bad5ab00463369610
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# b520da1e800b43d694fbdc1abcb2b832
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 3fff393ba83a4b039c75daddd697811e
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# d29b8653b1a340139827404ae6f39bcb
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 1034199481bf4656ab5a0f8b73f0724b
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 1b1b3a09d3134384b59213f6859dc315
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 34c6c4fc79cb4e83965b61be9862040b
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 0cb134112ac94186bd724980cc080abf
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# a67cc9bb2cd54137aeb63ac79dd941fa
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# cb4447bda45c49e397dba4d038cbe9eb
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 141a1bd6eee74246834e5dc1795a8363
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# fe8e450932034372ad970c0628f2ebd9
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# e07695d60a04451f978bae71c23036ed
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 3f0399275f884346ad31847ca642c902
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# e8c9e79e0ff146199b185b38feacab1b
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# 9bb8278536364d8e9a983b1eb2943655
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# cc7b11fb487d4e16963002dc8a5b1375
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 14a0a3ebfaa342dfba028a056addc7b6
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 9764ed719c73469bb7c081005aa1f4e2
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# b5706125d3af4e37be832cca89665c03
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 7ee83247735742748473ed71ec1188d0
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 1ecac205a67f42ff85340f3aa4a2c021
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# b45fdfaa54df4775b650b57cb17d2a03
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 50768407e5544f1f83b5327a85471972
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 22599eb2d6be48cfa6a92ce23b90d236
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# c32547d474cd43e78a1fead18a92a543
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 68194c03d86d4a2aab5e41046f6294ca
# 6d7b2d6beecc4cc28f5e9f268623e480
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 6fc8e3b3ec0a4ac6b0ff145ae1485478
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# a3320e84207d45c5b867cf17d66c3ed9
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# dfaeafc4a9734021a9f1eb38b957fdad
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# c421078b72a64746ab39f215c1e487cb
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# a5ea4c2265004ef8a6c45da6f4b743d5
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 1e075a9262cb4850b7954db5da0c11f3
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 7014695663aa45d1ad49102f0bb059b7
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 977a5630119146499b531b175c108c8f
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# d1874856a2d548138861848873280a8f
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 3793445148cf4c9999211615a6fd9d51
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# def40909fa9e4c9d9b93168da291dee3
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 7c5e624e715f4933afbbdc921e037c1d
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 5aff4963479340d89012f0047a6bf2bd
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 2d9f97bd6d6747fc9d19d9e5a7b559fa
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 7878a59a3ffe4e1688049dff9d7dc3b4
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 242c8fbf53304d2782d52c19cfb53944
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# d1fc4058251247f5b6560a8488936e8a
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 4607e718a19a4dc3903dc3b6dfed4d86
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 1854ba537f6c463a8d9d25b412e8dc08
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 2f2350fb87b845dd835d29107288ca16
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# ba0380e01b6c41038351b1e10b35e9c6
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 765f580b73f6434494207c3c3e071694
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 96d49d02f0874661b899cc73c9536313
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 0cff7dce384143fe8445ae4ed26be9af
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# fe503a78f0d7418bb6a116ec6770ba6a
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 30a26bfbb1114d4f8dcd273f11bc8b41
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 9b558e55183e4dafa933f4b25dad9e8d
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 000285df12a74073a1899bc5ffdae2dc
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 9347a2835b344a28ab2954085fecc472
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# e78a1f18b2d84f09982d02311bd86684
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 3b316bdcd0134584bb1a362d7173c7ce
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 3ada1dbc59454444b304fb055ea32cc7
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# b1e04f499aba47228c6709eb30cf2611
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# c186720dfd9242c8854798e4aa7d1a94
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# a464f932d47d47a49140f639b7332a36
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

