# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-02 10:51-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 54a191a2225443f884ae0ff12282b995
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 7310dd554d734a0e87f62eb287c21339
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 09d12c1b091a4404addce457c7e9df21
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# b8882e19f9bb4a7ba8698a801453e4f0
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 56821a57aeb8435bb2556352da6e9f45
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 1ce6ab976ac941d489cb703a66167c26
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 8a0960f76c4b482bb3a3af587c32ab79
# 847475ae50dc4cff8265fbc2a8700b17
# 1fb344824b3744959f5137bec4816ae3
# 9a82be9872c646d6ba183b7f333f06fb
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 6dc86e931c394b9eadbe736dcb67ac98
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# b9f4a715736245d9aa9a76c59c31595b
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 38278d92be564bc5aed3109171b9e255
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 2fa59beff9d74d96aedc9b268203f325
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# a2a68625558a447e9122dd4556f5d0f0
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 7fafa85e542847a58e34b583eb39ed73
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 659cee08316c43bea0a61988fa18fa1c
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# e06c6221b3ee43879d63f2909634eec0
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 625917b6ee904a08b1837fa33400a68c
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# ab42c2e4093343eeaa34ae62d50649c5
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 14caf90ec9c34d5abae5c6ef0772a7b8
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 63997f2a407e404e8cbd5e2089fbc4f4
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# 93b5dda5e181409f9d54e34e7dacae1f
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 24aa0e31e6b0453484f7bf20c31cb5fa
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# b8d9f648399e4a059d7709d3f82417b4
# bb08d77769204e12aee49ec7d2acb5ea
# b230fea353d8448982d6e8fb38b8ebac
# 5ac8bd63f55542beb39f6bd75608dbdf
# 8e13b2b1abcf49afb42c2310bad98eff
# a1ef00fb5b254f3c9109f17db4227762
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# a40f764bc89e4ad4ac5530c99dd6ed67
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 3c9ae20b5404470c8a93743f3c68316a
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# d43bbb6bbb92431a9be3027f44887364
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# f605027cff82415eaf4de31481a13bef
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names. Enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 56e5203fe8b84060b220a0ed6b5d6041
# 5f6d78ed37e949ba87de012ec96fc5d2
# e758fcb0e2f7424c9101cd67a536951c
# f12ce526996a4fc89d8ee8c066474788
msgid "or:"
msgstr ""

#: ../source/essentials_search.rst:34
# 84fe25d464d9468c93cd867edad680ec
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# c7eea512f548426082242de8eea31aae
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 073cd9deed9146ac8e008bf85637c77c
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# 36e98b1855044b2da09504d0405ace5d
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:42
# c771a1ce67b74e1aa48d0f168dab33a8
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# cb72788e4f8948a58b5015fb66d36b7c
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:46
# 9db8da78d64a402eb98cfb0884ec2a11
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 9bc532de4af449ce89eb35d8eff7143d
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:50
# 4706169d937343278bca8aabd18f2d3e
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 1164239e180c424d801a7e104a8d1234
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:54
# e674d96f65f34d7583d95b956ed5db76
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# b011c9e5ced842689c75d9ba0825349f
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 3ff3ad58356b42ba8c59c9dc2740776a
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:59
# 6e6db25798bf4a30aedd79ee999771d9
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 31f6e51843fe401ca8c27d6c6d99a732
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 0d05267b9d194530b256ec18bc50b087
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:63
# ee82850e26234b5db7afde80e46e0868
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# feca934004014e1cae2b45897d85b9ac
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 615fc71f21434c17af94aa44bb77ac0a
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 35786a3cb67f455f944426d0abf0d53b
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 9c6b508af3fa4517a8eee1c732f906a8
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:67
#: ../source/essentials_search.rst:79
# c1ae882b2637441ea50861d7cea3c320
# d97965fd5c3c4f6e8749f8442a018e79
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# f5627d4c748945c5b4ccdf6b1887687c
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# abe33943f96446df8af49a759a49a0ec
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 4ad4479b395745558e05b8b78edf52b2
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 0ca082b8246b4c05a9bf9f5b7c849a37
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:71
# 7108a9a41bbb407ca31bf22974e465a3
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# dd7553b6e6ce485eb9de2e75865ba359
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:75
# c71f3dca65f8485f96e9a914d37ac87c
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# af88a00810f24c3190d3308ded7080a2
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# a84a45d52fcf4252b4c2e86a6e0bb8e8
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 659eb5064bf74ca4b20e5865b3dfc9e1
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 8aa452f0814c4a3e9e79d703bf91186f
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 083d8a4b98f64696bcaf95094ff080aa
# d67376c6fd174c3590f8880c0d541249
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# f3cceb0ba1c34894b1202c4b0c428f16
# 75bc109deca945588438ffb7c4ac3b1c
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 700c806294844a3b8c43ccc8b776dede
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 197bd9e953fa4cdc94825a61a4842a19
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# f0c2266a90ff42668dbd54f7068a2e25
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 312c2f91452b446eaaa77eada898dfa6
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# c9b6300dd2b64da6aaac86b300e103e1
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 9f4dd9d149684237a2e47b94050b40c4
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 46d665758f2f463a952b6b4e56906036
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# ecdab66fac844319b352f507a1c53e62
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 9706e0568bc54b5fa298d90274b964ee
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# c49047fe73784f2ebcbb8f4863df2ee0
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 9e67639702e4479bab160d469cc2f2d4
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 1a94a715b68b4d9492cb05fa7f7246db
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:91
# fb72b7a0f2124144b0f81602af937c9d
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 268df10f8d3140e5995ffbea00e75ec7
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:95
# f26e1faee7bc48a7be22f1163efb5880
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 4bdea26689254b32b37c24ab97b071cf
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 76707b2dbbaf4b0a930590ed6d161c01
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 0c93ad63d4b54b329662b005eb1dd3b2
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 21e65b2c011b43ae868595c05bbd66b8
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# aa9dd6f2157d4d54b9a541f77c40503e
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:103
# 829a84ffcf664a5a98392adba98c06fc
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 97b3db92a3c641a3b7ce43a4578c65fc
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 2bce0fad148242d29a76547068cebcf0
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 834e86004a74404dae467acffc2e696e
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# ad9fdbaa176747ef93089d947b4646ae
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 51ce09c1bdc94181b4204f27612e444a
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 2a3a04358a734f50940fac26e8e3d7e3
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 01fe33fa1b554f17850e27f5d50ace67
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:111
# 3ceef12125174657ac9263d3db1eadc8
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 13f62694487447069518dc287a405ef8
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 7db3148b9cc6423e96de44e9ac8f91b8
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# e0fbddf7f5cd4ee5956e850ad60f188a
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# ae863ca742724839a9749f01d3f62708
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 92340ff3f7a241c2a192078408a2941e
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 893e4217e70048bd9551e8a913311f47
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# e03cf4f5bf8041d191069a6449dd62b7
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 41e81aa6c08b4a3b8c3e38ea19daac89
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:119
# 91dae3496b6f44bb95d1e7d172688ea4
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 9eac9f2de6a04001a24b853c634fa628
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# b5748fded5434c48b21520721d53b90c
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 875b6fd8efa74e4d9571aef686157825
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# f09c55776e4a4c1fa83e5d734b486b56
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:125
# 38ecd7fd306b4e49927052f50a52a683
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# eb812e375ba24509a93ee5d9424a9429
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 6b639668e6944d4cb8e1f196ad90bd63
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 841f4c91d1d44736ae3486a3bb500f11
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 8cafaad92c6143d0871465dc9b91dc99
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 7c78cc2d7b874c7eb13b28b436e10e6e
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 02ebdc88259b42a382c7b4429ec93e7b
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# cd65b0ecfc364d0cb9084a0e4b9c5cdf
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 545e7a9b1eb045e2aa535aed85f3ac11
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 07f3df8b924442ada434d7163a243083
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:22
# deb5f1a795bd49678e11c5b382170e0d
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:30
# 9fea60cd9cb944ecab801d1786f34c28
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/essentials_search.rst:129
# 2d4b2b39a92e4eacaf07084fbf435146
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 29bcc5fa380a40afb3d39be3e224e26b
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# ba30b0d5dcf5448aa3e0d97e03ef2d1c
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:137
# a2334e4852c94a3ba43b9a8875e17ef7
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# bd3d5dbf864f4e16882675df7f722029
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:141
# e89209946efa42ac9065cfa114e2ed94
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 4ac36c9924274125815d896537b62a75
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:145
# 92836aea29df40aabf4c2fd67534b637
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 302c4ae2f303425992c744aba06d9a41
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# b327109385e94ed997581fa384be564b
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:149
# 4d3218c8d6ac4ebb8477ff7f6ce4c42f
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# a827f6868fbb46179ee24da817439f76
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/essentials_search.rst:153
# 884b55b900de43c19e3946ac7339f1fa
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# ee212d96b3244ec18b5cd079c4e813bb
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 0a3a9b1b2ee645d5b0475303fb3660e3
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# d27e010209c2426d8320bc9fe618aee0
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# fb9693671bc6483c86f8f5784ac08611
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 3fa74f61f9e54a2c834efaad7ed4d23d
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 53b426397b0c48c9981e2a0822e71857
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# a60eb92630a14927a04022ac53fe25bb
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# fe999ac713d9443da770f79e35d9ddcd
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 0f580423b39b4f509cd71f662df5542d
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# cf35a450d6834957be1263d2b431d771
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# bca918c569744ec5bb2473001778c8a6
# 093bfcf9d231452e85fd6e7e5af6f3b4
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 814e8de1cb3d4e9db2125af53497cd9d
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:161
# 7d0d3e36a2c643f5adfa5f1b706f348c
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 7eb5e16672224e5fa4d76ea56816d805
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 8aa3ad9195394c879d6b9493a92c96f9
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# cbb5975ffb4d4e75af4eebef3b84d855
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# d4f056c8f6d74bdfb46438a2fae7ed82
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 7eafbd48f45c4dbda9d2ead0c13451f1
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 58d0760f5ec34879b7703b588959b44f
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 5a3c033784924f1bbbc148b9a2effe38
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 5f95efe57fee4a2d8cfd2a3da30cc950
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# c14075d2c88847b4ba95f90c2910235a
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# ff47ff31a72747c7bfedb2c498334369
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 04e303eb2d87490389cd957744eac007
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# dc2cf0a61c674500a19f1caa96e86700
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:165
# 828a79e94b9a441391e01f6f977f61cf
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 871455ac780749e7b223311dffad6a14
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 7c76656124f443e6944b06b879ee490a
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 4c5deb2838664a77aee54726de3226df
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 1a2835a56d534e16b0e1701d3e6c6b4f
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# ec725a85502f4d0cbb4ab14440eb3aac
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:171
# 15e9058995f4482abd603ea190f2eefd
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 03706968dd8b4650853743d812e75927
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 85b0baadf6764eaf8b91c79f67572298
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 30312e7705784c2c87733e5aa99d770c
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:177
# 65e3c5b364484c1eb39ea79f3cf237d8
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 31e96163b336475c86a6ae814f99501e
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 316c40bd935a45f79beca3fb17c0fd87
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 92adc8b672bb46558ecf4bef96a17340
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# cacaedbdb4894ba2a0beb2e9262d02bc
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 13c46810eaf444608baedf2880a861dd
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 9c07cd3312fa4d8990823adaec99a8d6
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 3bfd86d3db3e4e99a61b6818affb59f0
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 30fd9c25890548d08f85d1c3a91da5ae
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 14a8f5ec65374f5989d82bb534c672bd
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# c39f318964b245778c848769139cf04e
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

