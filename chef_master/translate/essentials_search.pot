# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-06 22:47\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# ea0f548162894352ab91550e4f3d891f
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 7c4c26ca293547e481b31a06f5f56c9f
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 60b5882e52374dbc9531072422a30e78
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 8d0ae8f23f1f4302be6982d15935c5ef
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 655a27db57bf445ab57a146c0248e707
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 9bdc9edbd41e41e39535c828909717ce
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# ec04339638a643a397f4df5f20ed2209
# 28ab103d47d94cafabbe56478ade9557
# 5b90be9ba2034feeabde96cc769d74fb
# d893591f3fe84ab08d957448d96078d6
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# ccbe3673bb834a33a6626fc87c87d6e2
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 8fb68f02f5b945f98c8becf547a8d7eb
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 3b4e467c5af74214bb71ca5ee2af3d34
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# c38650a5ec354aa3a844436e23518c45
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 83e9eaded8bf4f5697ee1fe459f0838d
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# bde9524036244dc4976f7934d7a04929
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 5c7745c75f134ad9b8c7d50bd34f6502
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 510bd7c9998b47eea4add7e13b497e44
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# bc47bed5f6f74a4cb53693b1700dea22
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 657f3c3ce4c948e4b3af74738909e6ab
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 8ac0a3f44538466f818c918a9fc37aec
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# fe1a0beef82a49eab5218fe5654b8aa5
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# d2ef7ff32138421f8f7554747a1dcc4a
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# e32da78adf4348dfbf79f81c986012d9
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 191d9da59a594c199b3cc21d2ff39062
# 1e9b19351f6148b98ff4280a0880368c
# dadab525395a417e93610bf047770e9d
# 25043796deae4e3bbce59b51624a7daf
# 87f06fe5c7b94d17822c3b3d4624d8e2
# e1a9f2172aae4ea9b17d00c3c9be0bbe
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 9b9e06486b7f421c91ce26de6d18475b
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 9bdd75ed14a749888e19cd9929c058cb
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# b085a7bd8bb34e729c991fb8ea3b7a21
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 4aeabbe0ec304de496e699f1608ed8be
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# c42b02e13c7b4ee5b9b34463bf7937ea
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# 41cbe2c119bc41e78dd719060e636e8f
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 0f5aab71a95045aeb1ebf9de4a4f9b7c
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 1c4603c126934668aa060b6112c1d12b
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# 851ca6de637a411e8b84d65ed2587d98
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# d07a69eb7de54ab0a90c426216231b4d
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# 5169ae9bcafe4b1bbb2704ac2775e933
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# cb217d00a8b9435693734d6ec1e59ad9
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# 12749b613ec943f8a285600e8be25aa7
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 40864ab3c1a74d85ac05eae75cedc40c
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 9eb7e78bce6447a5883c8d4b31a1fd86
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# 701148df8fb2439e95217011df7ec377
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# a36b0eae50584831b4e02bb3e5fec2ae
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 315b626d7be44a85bbc5ec2cf8d8b451
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 0ae505fb92a94622aec157bfc2285a84
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 43b8cd18dcab47aa803dc8d981f0b618
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 52853732f527428486b6c67b17e95d54
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 07ffe13fb9f4402e8611ba43a4617213
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# cdd2fce9a1304eb9907969473798a028
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# f7a80f47b785450d870c3ae795580e63
# 1d759aafb73f4b3cac24b28441f1e42a
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 709f578ffad44b25b97d2f2fd63c6880
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# c1bd6446bed849998ff91d992df8f5fa
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 3b680866647f4aa0a8b7f34e6c27bf63
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 5a67df3ea1424fdf9f8ee6e62d6ba641
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# b686916233c641e68d29cbbb6b78613e
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 5de835816d8e4dad9f674de107f7929d
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# e0577af9fef54db9a258a742bdf47cc0
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 28d1bcb4821e4e718e906a9bbde10561
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 57430fc020374e7d8c67e8ed90ebf82e
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# d380c9f87ed54c4f896049f9bfa90e49
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 98944880781c4f539376831eacd7098b
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 867436bb7b5e48ffb85fb8873cdeb56a
# 1191da9d4dcf43a19aea1ca3b1a24729
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 88d77db0dcc54c3e9fcd8e04067577b7
# 7a2fee8c88d54ace8d3d7055cd514471
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 79b86a6494e44e7c93efc9ec52adcd50
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 48dcbeabba2b470eac11cafb4c2dea14
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 2e55011326cf4ad9b6f2460cd5d91218
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 8b29cc423b964fed889f73a4b94b6e5c
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# b35031545fb44a978f9dd33ee3fc94d7
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# b36a1569d1ed4c3fb1fada40c56e1e9a
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 7c322606118e48b3949027f54f93fa04
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# db9c898c92da4c878f3dd3fea03e4dd6
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# c9b5687f6afe45218d385650c5ec5304
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 9d1323564d31458e93e01fd2ac177b52
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 5e44643514034f5ca179b0defb502842
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 19e18b9ce347406e9014a1c5ca638cc2
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# c99e6b4a59b14d0297b3754357613c23
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 7843b88f10c649efa3cc25ec60f47ec7
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# e71a414fa54c4dc58402ae472750106d
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 060419e56aab4934a0e578dfc1e456eb
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 138ea69bbe804c28a1eefec5863bb228
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 09626d52db7d4679ade7d92f69d603e0
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 8f1858cf298a4ee28b3554365ceb62c6
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 82c85183e941465f9c240ca78bb67b56
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# 49f3fc35cfa5492fa85c6cad67b2e1fd
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 2ff7def6606d463bb1cd615dca328ac5
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 25606b3be05d47ce893eb70e3bea60c0
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 5591c84c07234521bb53f6e212bc68fb
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 51d7e132a5db4207a57db5869b426e23
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# db6cda595a3846498e4f23493786cb8b
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 069283ddc2a84189a5bbe82358ee07ac
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 5248cecb93c249f686df149b0096ff68
# 92389a627d5946b18cd9f5a670d3f4a0
# 411e5a756fc0422b91ebc65a16ae765f
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 8b1f44664b614db19dfb6d092ab45ef7
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 47fe20b7775e4c718e531f12bea286e2
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 9f847a397f8c46ee839464f231ea0dd1
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 929b944967cd4fa2bc3f184e520fa22b
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 8e1dd85e468347de872cde1330050bc0
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# c1bd8ed2a219485ab8d72c1124f45ebf
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 677d91a722ca48f592e051b26de43641
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# ba9c39ef0cab4c7dab8f18a19c57de6f
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 8988f07888d34affa63314c9bcd1640e
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 4038d143dafd401eae5524b4450018ea
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 2c2bb0f03d674ccf93acb991034d76d0
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# d6bf4a1f0a7a4c3292d2e99f8b745a45
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 3cc841388b134804a836cc3336b0801b
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 0106f8f6cad749d9bdf18688919d3701
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 7481e3d2d94a4ab68100f9f5ff9d66c2
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# bf66839710cb40bd9aec0223d6ff53f9
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# f480d88deded4f14ad629b740f561b3e
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 89dcf50d924f4227a286fe210058583b
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# ccea74f8e29341b08e479cf65659a788
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# ed309fe1f7b24d83877b2d6b06ea6eaf
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 637538c932314934b76bad443832ba27
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 6c4e84618efc43148da749793b53ab9a
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 2092f305abc44d6699d7ce866e9d0d6b
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# e7f8693fb97f444cabe5bd1bd2e1c5f5
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# fa394b8bc0224b5a819f64ef31fc2efe
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:22
# d3c642d01029455d906de54f57d57367
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../source/essentials_search.rst:125
# 08f1b1ca40ac41948c7c96ef73a85c56
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 84d108bf21a64affac21ebd7414520f9
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 8ef94ea82d684384bb066e79d05af5cb
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 9f82840e898c478c96abdbb43295caa9
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 13dfbc80d82e439d899917a0e72b0f4e
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# 037b471143c84a5b97729879a32f1820
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 6e02a4aac506480789a1bd0e0315aaa0
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# d931118d67db4462b0c8a1a0737ada44
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 6b6f3557fe1949fe913baace269e295d
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 5ad6c338537d41208dbe20ef7c70c1fa
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 83d8a1d477d746669f7f1ad1e5ffa6ab
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 7542c56fd63b40df9091189fe4f79c69
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/essentials_search.rst:145
# 1adb53db59454f1ba01e7d2583ffb0b0
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# a702931eea4d46b1ad6aa034a4f99d57
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# d0aa901f0e9947b5b73430e5903d8fc1
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 74e9d1e79b8649a7accc4d1f8417807c
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 21d8b3f6638842448ecb84bd97b93494
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 2f43b549dba74ec4b3b8aea172e4f3d0
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# ecf67a2074d247b8bb98efd65f40da76
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 9e8d93e9cdb040c3a696bdfe3608e95e
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 934e74cf177942ccab679c2208b0b8ef
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# ddb4e15c9d894580b12051d23b7af869
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 8ddc672b2943484d8f8468c99f145924
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 1101ff1c94fa4629990ed4e492cdb2c9
# 726b328ba45d412496355240a7957e14
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# b24e3bdfae02422597271b4588396227
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# 538c16e346ad4865b6dbac220e46a5b3
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 683185ac7cb5461f9f5fdca7c660a568
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# c2509ff208a1441bb49af3269bf60a17
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 91e67fd2be7d490ea5666edeb6b70dea
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 81ccf18f77ec4ef7b90b60223f9ce3d9
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# d233098f46e24666bae1dc6438d980a9
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 4ba48170b9294536b21fa87a2d83adb3
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# f43324a0c3504358925dd67b9dd76e2b
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# b1121b689b334928a377cb19cb521ace
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 5714a5e55b6e4b7b80f59d08341d6b4e
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 6be980bb10e14c15acb6aa4bbe90e393
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 715237aebb66486e9f0f16d4de0615f0
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# e004bbd4321d45b38e49ecf0238cf4dc
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# 39f0d6f2fe1c43bab6d2858cfc405dba
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# a137beda23e54a838ac4d2767cab9897
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# c033557b1c554e63a17b6773ce8394cf
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 9819b20794174adda44ff2199fef4407
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# a229fb03a93d44ffa5acf8ac99538ac0
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 175b94683f0c49a48930d843f3d8f11f
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# ab853da8b2704b7f8a00095c3f937bdc
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# eebc58fc3b964ddbb029ca7b3396df57
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 4cfb6e0d38f345f7902f33d073c2740d
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# b93e9aea2c454c23a537ed2580d0c3e4
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# 1b1afe61902f4b9ab3dd2d22a4528230
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 67e1b07bfadc464f82a327a1e3cc2ed8
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 15fa66c8695d4974987dc4a5f88fd7a6
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# d9129109d29841bead0c7ff89fa36690
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# e60d8ad38ea949d3b1c83c71b8ff0fbe
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 8911fead3734433aa4ed8fccd5cb8087
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 375eafe2e5b54cfc9de0ab065250cf28
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# c85525bb457c483e928873d236e18d6f
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 00a96aac4e034f38a5056f1f7a54c16f
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# e9f16d13b9b940b58236098f7b903dd9
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 46cbf4b43a694f62ba41880c4b2e2531
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

