# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-12 00:21\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 1ac20e882e51472499275cad5ee8b3e9
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# de884301caba451d8335c6c714dd3deb
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# a12b747d32c74e29b640531627393b33
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# b9ce800948ce4ec785843db3e0aba049
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 7d15fd1e795e4098b7c03833bfce0ddd
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 37ea3c51231d40558d1fac02bad59e48
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# b361427bd66c4317b95582df223469b2
# 457dd4032b804fe188e517ea92525217
# 370b6ba8eb564088ae5bccd01e5b7e96
# 45d04818d2ae4c42a707bc31b2d68ca5
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 1bcaf68824644054b6cfcb41ea628973
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# b289fa3adafb426d8c0b483540fa2d85
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 42665e42560546229afacc23ae2ec606
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# cc4176c76ab84bc69da78ac3bec0a80c
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 69d1c321b16e4de18cbe3bf9a4601dcc
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 373d47b9dd434702927836e52c140d92
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# d3282159bb7740f78d5fb96eac1d50a3
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 440bffd2a07f4a42a73d00017dd159e0
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# c766c50cd343440ea771e53829501c6c
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# f3435858faa249e9812a83d625960628
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 2f46924ec420413b9f0e1c20956b6f4d
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 8c6ad266182b413f86da0c2f211822f4
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 60ce24a977c44f3e9b345d37291c7c7b
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 0a22e3bcac0242cf9bf6a52494f2e9d0
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 2ed1536132a64fd5bb47abafa21e5c50
# 4d67461a9c6648e28b6d06d3a6c22eef
# 87bf60e5db234bed83978e409119f8ff
# 950765056e2a42e5a79975302b404a34
# 61465b0f0eaf4ae286e7924b992c3dae
# 709de75011c44b8d93b7eeb9baae2f62
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 42a9d3ef4d6b4d16987bc855f5e6b3b1
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# a73715f6bad64cadb8108da31a20d430
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# ce5bf23ac10149b8bc4ec451b26a377c
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# dee4803dce15479dad00b246a7a7a4f1
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# a152e69ea2b543d4b7bbd171f2e9981d
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# f8fa226cba42430fa3b08b9c76ae8521
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 91ac8b2e2c7f430b8da467d710c274b1
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# d5934fc56b474a81b3fa812399874146
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# b45a93e2372749f182ce37cf5231337b
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 4b53c9542aa4440282ff2dfa3f17ca7e
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 4bf17b4c9d834395a456eb5b7b1042ae
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# a33647c17146421f924bd542dd02a393
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# e37da5a0dab345c2a06a4ea9b6520bfc
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# c0f0407a5f444e54b6a186cab8b58aeb
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 26055df1c321496486c7a7d10464ad91
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# db9ac00b1ae842459fb109c059940aa9
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 1ef4b817c8a44041b35810b4b9a3d6e8
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 60a5f5869be14ccaafa8083e480b8e3b
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 3a1a06fa21cd4ca79d5dc1244705d685
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# b3bf171d1b5a49b9a281d7029a0a01a2
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 64b880b5d7874d8dbb4b6ad5c100fa09
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 34270ccd6e1f44b9ac18918e9499d3ca
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 3be72943bdf543c6acc5c9a9ee180fa6
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# e822c86b61804323b90488bf362f32e7
# 2fa7d9d11fdb48469445595710fd4e1e
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# fb2cffd5509c47ef91bfae202e6e01aa
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 21a8a65464aa4af9a25d8daf8677bd34
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# a8790832561f4ddd948029cd70b810c8
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# e6688e0734fa4445895c98603eec21ca
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 6339cd479cfc478d95ad1cdf66927ecc
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# c51889a6c3be4ce89c790856b3644c64
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 0a324ddf18d140c3baa39e60efac266d
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 32981f406c444c11acaa95d1ad592410
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 772bcfcbfa824821ad3b722fe4d90552
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# f477ee93acd84bdaba4d42c8298dcbd5
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# eb57b5cb5d6c4b729b00c0bd32f16cc5
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 5d8260f8636b47c79350a7cc581d49e7
# 4330abc3a5714446aed29425443679e8
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 1aa5f13d640c4a63a444e4f679da54fe
# 5df36f9f13c54306b75527161985f33a
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 9c5f5f9ab1e743c8b97aa5888b9d6ac9
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 15e4a451fd4441199f989e016c968563
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 4ff15c2223ca4f7eba6a6163dd24590d
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 240ddd0d95194554af4baa26d85913d3
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# e4bfd9ccbff34387a2919c25371fb057
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# f3cdc3885eb648f38d6dba6f9f8f1a6f
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 96e607d22e48465f9c07c4ae1ab9ed68
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# c072f03c183444dea87b2c94ea66ff6d
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 8bdb4e49360744f68a1f976145b7a96c
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 200d22efd348421284be75e5c426dd77
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# ab184c45d9a04d93b74887e66d7cddbe
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# a1ec1e07e49745ffa1433624fcd312de
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 30ebd571341541ca99931acc429c0625
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# cf906b553ab547cd8c5b4c66c84205a5
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 7a94f4ea9e2b4129883c4a575e1fe1ef
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 484f70a739064d1c81c83df23a6f528b
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 77cdceb065a145aea0afd39fa192768a
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# c76f0037441e40c0902782ca2e2201f1
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# d990836c434a4ae899a17f747410c357
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 20a8d30ca9c04506a7a9e6ce18c6df07
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# e260f726a57941fb8759483d0a5d0d91
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# d3da2aab9c16409b9f44341b47acb067
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# c0a9c342fc09454b8b1b41cd6ed2a647
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# dc92009fdeb943a188f92ab3ff2390b2
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 042c5c23dce04136a1e94061f79c4503
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 1a3e332a160b4796b098f39e8e5f7833
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 6dc106d0d85b41a685e7ee80a4175e45
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 4d527c06666d4d94ac0d2fd210b5cf71
# d5c642ffabba4472b0ed1385b8d67afb
# e5645627e6e646dfaad3786c04b8cc7e
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 77205dc5029645a8b2064a27ed1cdf8c
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# ad2594b5200f42b1910f8065f182660f
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 6e1e2bdcbc5a4d01a4924f819a4c3305
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 4681853290ca40dcbb1b52bf38fa5bfb
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# cecb2f327e0c4ea5bade9c24d778e1aa
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 3d9e52f37518443ebd0eecfb831d206c
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 34374bbe5e0645319036589e31cce909
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 86f061a3f9be4dc39443889a6f51592e
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# c25704f001e34059b5733cce799a2fbe
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# cd1ec5ce40b8457f94cde4788a509c96
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# d604a99198ce4137b39b620d835db088
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 42ce6a108cb143ccbcb256eb2cc768f2
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 1066ac1f94c041c9b8fb68777369eb0a
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 231d6600a04d4c8bb4a93b89bf738cc2
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 633ca53177d04500b3ae1014162c4e90
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 685d6facbe5e4c4ea712efd05d1a7f97
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 5281b3740e7144a0a698efe66773650b
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# d5f2eb5890464fe6ab2c3ed63b593dde
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 35185834d15948658700e1bb109e87f2
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 212832947a354afc893367c879d7ef9b
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 95c279eba7fa4060af2fbdcc11d70022
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 35365c57c72f47d6972fbcb62d8195dc
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 4bc93e37f07343dea8914b9c9bf0eb7b
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 6eb5848de4d44dbea9c2ba4c2b2058ae
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 791ad8a14f8f47d191fecca0077fea94
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# f1fbc74162bf4c189b085f62ce86288f
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 78c9144b2bc647cdb3773239146df0cd
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 014948b356964fdeb649d44ea34172fa
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# d10347fbd9ed4141b130d14684d2b20b
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 77dc18faa39f4063a3fc068265d1ecda
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 1082fc1bf69645dd81c4982bd516c4bb
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 215e29f2827f475c9aa9918759604872
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# f09039a3d3b14e8395bc2719d34c5d9c
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 21a7072f179c49c6beaef21b882826ac
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 8c6d5ea18d824378936a4e3d2f0c2ac7
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# b14faae34c204cf1a822d3ab57bf511d
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 2935e908a73f47ce8090c9caec4f77ad
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# 130530ed0913411fbcdb77660387f8e8
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 77fc9ccce6624715be7bb0cd3329f94f
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 30aa94cfde484062bb9ac6e5c7728010
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 933c3460fac84816be538a82526aac15
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 716d87aaff2340a380733d7f50fd1236
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# ed509f48ca1c410a8fe87bcbf5fb8e8a
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 398dce366563424382b610ba3ebdb187
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 9be5695474844f55a8cf2e3d58cf905e
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 79958a764b8142d2b4e6c7f079b89822
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 5583974ba3da4718b4e958f5e7544f25
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 157e5b016e3743c68ba2c762d922fca5
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 711ff33b8e714bcd8b022f44917144a3
# b2ec6a3b504a4f39979ed38efb935256
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# d044c272056e455e8f29d8ad44647a25
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# cb328b5209a6494dac8900a01345faf8
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# fd6f82f477214146a267be6ec4d49165
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 701b0475a9d4460aa0e4a74bb0090663
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 4b39f87bec0c45eb8d0e4819afae84cf
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 8c82576fc45b406caaa3bf7812185700
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 04f54fa259f24de5a7d9b1cbe45e43ea
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 1499d80ca27f42e79d650b488dd7f7a7
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# ee526234396d473597ce3a16b1706808
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 95a5c325924e45e79e37a9f9d9e88b0e
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# b98506da9e514b51b2b10fac5d3f8ba3
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 17a838e592b04059aed0e6cd2233953c
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 6c544e5a00634d29ad8ab0abd7ac1934
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 46b98e7999794757a70b941cd7a20dc5
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# e7b7a76176904cdcb57c12b59b5fad1d
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 624850156bfc41ee9a276ae8fcc23beb
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 7dd5407cf72241e8b70b408608f71dc3
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 79805e5daf0e4707826c78305b40eac4
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 74de5b48d6fa40df9180db7c14a76df2
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 5a757d836a3d4993ac7c6bd22cf58a90
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 84f9d717178b430998c1d01fac64cd0b
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# f6c9d8a5903644b88d55da3fe12de151
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# f38dbc7a9d3947789e5f0fd3db8344f0
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 43d29d78459f4518955fa9564fb36e4c
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 3e44ceded1e345e78c34b5bc85b9fade
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# b1688eafdd3f495b8c833f7af5f25275
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# beb7d837ea2444fea9240f4f6e3cf8eb
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# cfe7843693e143d380c57163de0727a2
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 849e49933ce84b81baf26a7fbd226cd4
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 240615d3d16c4313a004ad83f8cf33a1
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 3556821ed4f54e90b907d8c492f955f6
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# c982551a0e054f9c8ab15345aaa0f092
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 88b1ebe8376b4213a76acd8342557150
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# da2a2229f61e4ad78ad0c748877a7a20
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# c550a56116ba49cd94830d1b61e03eb6
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

