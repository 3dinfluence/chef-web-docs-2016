# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-06 00:54\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 41b0299ef12e4e1c9a8fd4d3b1c28b69
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 5cbdca62ce62471ba796fcdc591748bf
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 285ee8b330df4264ba2301c929882863
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 90213ae81a074c1c81256666aa49d913
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# cea36f55eae84fa9984138b29eff250e
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 399ba0ef8fd8454b8cad41f1bef6c0de
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 9630ddb100e7461ba21887c6a6e5cbcb
# 3a9939d9c3194c29a8a5d4132fd302ed
# bfb7eb1ba94d4c09a60a81372276f637
# 2d02cf027030468d8371c07e5b2c5cf4
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 4ec586b2bdf84904b609018c16f6a962
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# bea6b97b42964071aec1ba11948d421f
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 3cf08f29ea0f4e2fba07f5bae3337451
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 980cc01d71154cdbbdb28c4ef362da8d
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# b45ea2cdb0a24ed4bcbfe680c97cabb8
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 9fb42b9309154a1a9aa04d44ed6b9bf8
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# e4e1621ab2af47018db7bf8f05e7bb32
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# c0f2e9ef046647588c4544d8715e2421
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 39860b431fd44d048ba573b88f75554c
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# c2c8bac664f14f7286761b3127a9b63b
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 1ace02a5ba7d4b68949eda40abb30c69
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# d2621f3c28d240028809e523e9505b29
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# c2c87a7a944642978e17d0ce2acd936c
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 72285a7b6cd44ed6936ff11f24fe3d5c
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 8cccfefd15534f0dae532c90462997c2
# 30a5c5476aa2452d840e4aca7180f927
# 885331059f9144549dc3ae9011ddc24d
# 59a8529131f24010b071d34a7edd2c71
# ffe29114eabe4427ae84474834112bb8
# 5862e67b07f04fb7a9774c0ad3ed8d38
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 7ee51ee4be84496fa95b47e106ec40d4
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# ca52803a5e2646f8b96a155e9d90ba75
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 5c1342511a8a407498686cb779879ea7
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 197a7aa23db740efa1d9ea2f1b2f3606
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 5813d61f0c5141e6a19a2f5dc274f89d
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# dadd5b868b9e4560b6b4df6ccded7076
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 3e7ffdd7f40e47e5950530c9cda6179d
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 1161745e6dd24943ab21035b9aeb5bb3
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 44906cb02b1846acb689932d3ca1b334
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 88f9abcae973475e952c2fc50632e76c
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# fe062b68ddd14bc29e3dd42f12df4764
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 4edd59ef230b49e0b31f2f1d63c2a6c3
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 5a49373458074dfc884ac86fd8f4a43e
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 4db3d79ddacf4f1dbbefe4f6e8950ab6
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 681b9c0d00264f80a0864b6aa266c274
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 25996c413bd94f3fbd8996ccedc3ee01
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 561122f709e54beeaaafe3d9c88f68c8
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 2d98e83e930a47e3a0a48fa69bff34d5
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 6b96ef94f29242b2940572f29bf80711
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# feff8c404de74d6c81fc89bc29af2b55
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 5d63ac30e72a41aa90196c47423a90fd
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 0d8f96db42dd4f5597df6e009e910521
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 58154f16e3c045e79c335bac9d700145
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 91b2fb24560c4fa68fe91f607e40c415
# 3cef2a08919b4e6296bc1047ee9b389b
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 3e3973275125434fabcd9c706ca2bc5c
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 46e1cbeaaa1e41bf8671e6cc78936f52
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 16255c54c77a4d5f9cc6ca5da5d9db1d
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# e6ef99b6e2de4445971afd8a6fda9f75
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# d3818256ca53419cb997e5c0245559ed
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 8d35484397184fed96d703ffcf355fea
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# c70cd0d5f9e845d8bdcf74d247ec21eb
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# a1c7eccb8c224410892c7ec6c4c5dea5
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# aca4b6c16c7541e0b50c59a0a8267aef
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 442d62c016dc417d8a2e6b80acec3db5
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# ecf45543ff794fc18ca59553e855c076
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 0a96f01101724a1e95930dbbea75b5b5
# 5990f995ef624bb394064a1b9d77295c
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# f5c214d40b834f378386f99761534a9d
# 3960c40a29b44e96a90a7483551722c0
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 2a8df129c03a4e5b852ad86cf8b5f17c
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 88ebadfa13fd4f958270387ea578dbec
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 6a76b05d1c2e435cb6d3abcdfe104f58
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 234432ec451c4ef5a10e621ee3c216d9
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 430e0dfd69f54d37b0a96b81088406c7
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 13b2bb6acc26487bb2b9172d6f454cbd
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 08429b68bccf41d9a6caaa1841adb415
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 8020933839be437b986b366422ef8b06
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# cb43d0a4168746059d928b5f75d35f5f
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 7eea8c760b384a1f9f34519e8bb97c50
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 0206bdb1d24b4f489643568bad8f6d92
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# b0242d61c9f74e639d6aa512e70977a4
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 7552fced574f4370b74e2ef01b89027b
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 3799ca7ac1f94f6089ae0ddf5c2c66b4
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# bca854ac2c7044cba5ce0f4e77742526
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 664d27e454414843924e12e110ecfe91
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 7c06e478ca7049bd8fc85fb6d3810e94
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 6931bc58e1434a78a52d40160414ae5d
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 2ef823c26c984d15b074d5cc485420b9
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 9380bd85ecb84c78a6b4b9e31d2f1a41
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 7ca44d015d3d4eafb1fd81d3a5539ce6
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# fd0bb597bdc0455d84e88decb256ca1c
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# a7dd83e57eb94db796642c81b2653be0
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# fbd5b27d792242aa923849c73c7b1fbd
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 2e372134087a4903939840fbad4cff2b
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 2017257437e44f479ebe1dd9a75362c1
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# f62f1b427cec403196fe6001691e5548
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# bc33de49c4ec4cdfbe8c790721ad96e7
# 225e9d9a472b4860a22ffcf6318a9c1e
# 44e3bbc4912b4e6badda9f9207de8884
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# d1acdb5c73ba4edc96e601e442123952
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 5dce5f5d1ec944d98cb9eaa2f17cf0a6
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 81da83fcc9f84c07b553501e581975f2
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# f9dd7e6738ec483d82043c0f9784dff4
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 17084b573d61430faa8fa06bf1263812
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 0f5a3efab1ce4ee2a8a2fb8b90a55679
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# aa1371e40d464c4ca49b0a8010bc4a79
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 3ffe1bc8d3104fe58949c54a4cf7793b
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 4041551979944c0fb644f4c4e93c26ed
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 89dcdbba2a9b493982ca656cc33cbea0
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# d65059f686774db9bc398f2d5c389997
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 158f2772d4324dcb86784ee1f3fd8898
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 7bbe981d56814da8b64f17ce55709b7c
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# cf67d88a72e5418293b14237e09c93eb
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# f3afea9b91984e478361bb1e1c21b4a0
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 8095763ef6064e75ade751cb852b57b6
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 75fe0aa5036f47339cb3c21ba02ccecd
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# f2300978f07d4f69addcbb7d46b5674c
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 438304c76a984e2b9b01bb308a91ec70
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# a82d731e55c04fa39bf3e609cf2fedb0
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# bbacc1443eff478aa4d3e9bf68eda30e
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# f5902d2218e74182bcc35d87227f3c68
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 1a8d1d2bdcf94bdc8c21f8d6c1cac1c8
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# e459d7e6034b41c49920edcbb3875527
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# b972bc03b1f34be8968232db6b868aca
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# f0aa0c8bf24f4264a523fa62c0847c55
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 19d031ba800949108b4c80d426eddd55
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 8819e84780094ee8941ed48456cd6dcc
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 68524fdd1c874d6fbef1377a8fe1f5af
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 24ace45a12fb4972ae681b9c1f89e719
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 194a3b12f505424e821c826cc782e202
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 7145a4c0508d43d9a355dc6776776550
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 05bb2305fd294718945ec4de383f204d
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# a533a242ed7a4f6387337ae9e253fdf5
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 24795bb92ae944349a7d5a43ad2eb2ae
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 645721d3dcdf40549db1b3d47c4721fb
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# bb3132f6da294fac92990161b45b7e69
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# 8743eb87d4f14f16a9fbed53186c5dab
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 7e78582ee2b6494591ad3ab78dc06fc9
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# e587d92f29e44179a6c694c0738dde74
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# e4de94184e204f39b093bee73027fcb2
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# bc85c0edf8c74a6e94507b16701e2a7e
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 46f4dfd7af874970ad2a352dfa5fb5cc
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 8c4aefb652df4a108ed2657e0a8ddafd
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 524ebce716524ae4924e1b42f3283f7d
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# a51162d6c0aa4058b5a78acdff7414a9
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# ffa88dc628de427eb1dd4c5f14a60674
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# ba439b3ed75f4bdda3e16e733ab32497
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 6f852e6eec8648cea13d8cfd0b022c1a
# 82f8465dec7246e28c658027b3719b08
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# fe603a56bd49476e9f693f080d602a29
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 0a56fe01d37f4bff94fcbb9b671050bb
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# a09e0718e21642c8959d34ac4a0fba03
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# be4f5c6db922468794ede398ba76bf3a
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# c1bdf3c9938748ecaea91023398f3462
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# c52d1c90dc14461d87e712d01fdf4d43
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# edd97abb49944c82a632e604cca038f6
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 288b0037518b4651830e71d1de4452aa
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# e2613d4e93d64fc5974dfad7fa59c118
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 748308ffb9184c82bb91d504b4c86817
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# d2e82c8cb2714f2a9d964e555cc61496
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 4a7f733964d74b14a32c7bc59ad4df2a
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 0e1d86d0c7a04958af8d3ab8346e28e0
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 2ea753b9dea64528a3141539e1821305
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# e0eb5aa6bc54468d824bdaadae7eba7a
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 79d5ceb241744ebbb2b576a4b7cbebef
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 70db1490b6224df188e6c0865ea1c7a7
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# bac0e7dd37034926a4a490cdc7373e69
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 5dd488026d994a059404d263377b47ba
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# cf2f508eb20444b8b8055c158f672fb8
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 8ff8a98f260140eba294c6bf3eba586d
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# bc12d2ce83334767bd784b7ba946744d
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 4af94d285e544d01a9587ddbdfc3e27d
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 51001a4897f94c0a99e8051a529407ba
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# f9ebca2190144fdda4a2bd28ed8f3475
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 1e3b4f85232d4f8abc04400fd5d70da4
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 0a94a37aa75242c4a390e39f507d53f8
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# c2c209d086bc4da39807abe1e29d4ffa
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 52c2dc251b4540538cb1fd4f12d0ad9f
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 13376f116fc54052a030256be017fbff
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# a74cffc49a19456c84084ea36533a6e6
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 4930d49323a04ee6a5de47f6c123764a
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# c9372220bd8844d78ff51c654fdfadaf
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 9f236d4531d3476591886879c9df890c
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 55dcb4149cbd4ec4bf142c3fa5290667
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

