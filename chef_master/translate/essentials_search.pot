# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-30 22:20\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# ec353c3a8cb44e42acc20528a13513ac
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# dfdfaeca28ce4350bc399c129d4f307a
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 760395fb0ce84ac59a0f467ac42da1d9
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# e6c2922e998a4705b86058b356b4af59
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# e1683e2f07684c76b699da13c84b7444
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 7145905d533542b199e3673ed424bdd6
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 6bb869b71fc745f0b9eae0c891ad80a2
# 2974dbefffc54f7794fe37d459338cbc
# 05b99ecbe0fe4bf99a4691768856eb7f
# f9ac53de036b42a8a715203d5e3cd9e3
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 06d56d2575fc406787f3fe299d6313a1
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 5fa2300479be4e2b9b91f3f806caf08e
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 0ab9ebf1cbac4cc88547fd566ca82abd
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 208210fb9087436799a69710c85901e2
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 1fb9844c48da4de6b62f5c967857fd76
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# d3e00c711f6b4903b581e27488f6f1d0
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 1410b0e21181466b832c84462bf033ec
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# a824f2350ede4852a0961bb14bb45d53
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 3613c7c2482a4ce3a89e93e8716c1525
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 4bff050673f347bb8c632e8c1d855c70
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# d1fdab6cb72342079aceccf1b7e2b8b0
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 9992c75e06734660abfbbfa6edbb2729
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 0ad58c6534de4c39b52449041cf7a14c
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 588912bf27144ffb91a2ad5a0bdc5289
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 0a86641b84cd4bea8f5c8c46c93d770a
# e1c57d96a72a449f8c21aee0526efa55
# 90c8c16917a1436d982cff9431ad7362
# 9658621a21a740e4bd6241b45ffe4fa4
# 9877599f2ead44408431d00855001992
# fa78e318464748e6becd06c3b23a6eb4
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 50494e6f5c114aee9cfc522a4b851b77
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# a5c0ed24b31642188984beccab83ad22
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# eecc3f2a51fe432d9320f5ece6af5754
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 1e802a49eee84b3fb0d8c189f69741ac
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# cd9032f602d3454d951931297ae52151
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# a48263016c10420a9f26ee3e5e4c7ccb
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# b57308fb19b8423bba991d660c113246
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# b785b5634af74bddaee587ab66c321a0
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 1799171715164ee4b0ba076e960475b9
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# ed6a39f419344aab975198091c58bb87
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 9deb231f67664372b484eaf9548b3806
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# c8cd11fce8ca4a14981700005c1913c9
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# ea398279a81a46518b699607a6d14850
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 38624a24ddcc4c9bacbc881f26567cbf
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 9a1a2f66adf34ddcbcd82ddc9f2a6585
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 8e5636176650470c9fee6f3ad2c07bd2
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 16be8ca1ef364110b76631a85f0fcbe0
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 3023220bb675455b8253b8eaac6ba4a7
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 8e4afbfa642a4bb5847f47d4e708e1c1
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 93422d9f6d474fba81b687cd78ce5676
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 020554e7483348b5b4fac714d3a04406
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# cabc7f5762114e7792dfcdfef3f501b1
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 208634b436d14a4eb4aba6ca14d1d616
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 92a311a50bba4880a9b08887180b044b
# d75749896b7e4e36a5d3148a1477c2ab
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 0a25c6bf5dbc4f08aba6256ca269aa57
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# f11c8752d5ff4160ae0d66b0d75386c9
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# aabb7e0a5c48437e8cbc4cba987d66d5
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 09ab0b2b210441e8a9feff85a9543ea9
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 3d3b42b094bc415aa72939a0ce3682be
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# ceac6ab094034c5897b5a71d3bc98afd
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# de7f94ecb1b7491ea25cadb6b3d31711
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# c76bb88cbf6b40b8b814e2afe46bdcab
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# b59f95ca48894d92a9509ad6e4d2ead0
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 784146a298b74d5c87ce8e995977a96e
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 3dbee83493a94156a7753459a0e53719
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# bc80b01be07c4a9ebaf9a063a940bb71
# ca3d578063ae44829986264418519323
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# a244dbc7c9554cbeb8f10bb58ed5df9f
# 873f603d5ff741339bc32f8ea4605b7e
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 1041bbb871e64d9580570c5bdd0d49ca
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# ec1e762713e343f8bda4b6ceec51368f
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# ee02f4729f384998a0b5c5dd6ce6ba21
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 8868259cf417443fb7509cbfabd0b157
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# b1c405aebab04479ae49374c30b2d485
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 4bbd65cccefe4f8c8933feb70f07afe2
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 0f1e14c8fb26479b89205c7f45dacee7
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 51caf1c8d8a34cb198278fc30d9da1d2
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# e1fee6f65354416c8575e8ca6750ca21
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# a7d13a1f1def45499634b6afdf2e1c3d
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# d43c8e69565a46ccafc40c39568d47d0
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 95f3876f2f304cdbb241b7b562d00a09
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# aaf07b07a37f4153b6f3f5b5d452ae57
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 848db3b5dce5485f81966b96000c9ce5
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 19fdcf01a8ec46548ffe9b18781e1492
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 4debb8b1d9734ec18a252679b49f7158
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 678f1858eb90428da398b65c5a600db1
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 661fd8de13d24a3cbc6823ec3ac91726
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 362d1928acbb4c1d8241f36004e2a3cd
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 4b146e904c904626900720543bb4d627
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# ce840205ae234724be94165c8aabd892
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 59327305c7784f9985ce48c7ccef98ba
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 3e2a2a35988047f1910c8dae1abebae9
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 0a11dfdfc4394e10a3b3b38276fad71a
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# cd05d4e03df042f1ab076c0e162905bb
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 61ec808b426645c39ee52712af925a36
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 7f507fcc3a744da9a1aeffebd594f2a3
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 0247c459828340b58ef73422d244aa84
# cee5f5cc3e244712bdb4f7390248fd1d
# 075cc113e4bb452f909c1a3bdfc9f3a0
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# f7c37cd4cb3b4f97869050e938560386
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 7e4a7d1d425e4daf81c35c077e1f6291
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 02a1aadbebb7452d83e4725323b5813e
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 285d2b187ff84c58ad27cc524c2aea93
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# ef6484aba6e7422aacd01a4c3358b8e3
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 0bd2199f2e0049afae08fa5c1c30081a
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 8a37a96561074b23a6dd5736d45b4b39
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# d543212ed50f4ea08b44bdccaa22b76b
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 85a60eb4a46b4f2cba9fded676e75657
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# d22e0f7f9cb84497938a858698663ae1
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# da50a83fa73945dc8cf8d0fccfb52962
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 0c2b69d1e717437096a7d829198c4db3
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# bd44a8b174b242349f408b3981f8223f
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# a9ea5e31f3e743b18c55a268ae3defe1
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 7e71146f136648fe93de79955686d574
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# f041897ef7f443f080231012d08ea54d
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 0a715391569f4132a02d7b27f2e0dafb
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# d1289b1e5c0247e58a573d9cf0d9054a
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# f153c5e648294f63ac9ae09ff38f4f54
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# c479237353c54a04826ff67411c546f5
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 76a89b14aa6542dea3162ce6df658875
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# dabfab64b9284f13bf9fde11ac11ec90
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 7ff7596c39a94152bbcb1e898b730415
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 92eb743b200249ec924d409e294178b4
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 46844f20969a47ed9524c3c04c9b7746
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# adb168650e224a93be60cb5b0631b779
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# f62c94abc3b740b0baa151e3589d641b
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 23ed27b3d577468d947ba7f8d66a610f
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# cdd1281e3928443c9d7d1dd90d7dfed5
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 1a005abfbd5c41be89208ac6e49aba6e
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 23af0805798e4ec99d09c5b8ebf86f0a
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# ec3019a14e2c4c2e8c5877714a5875d2
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 3f22dec8a1bf44cfb39ddb19f8c09f59
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# ce861a4e36b143de973b92551f608684
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# fb8099fdaeff4c0c91808fec9e104983
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 7817181a11204204ac8db28cfdf119de
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 119e8e23239840b8879c80bf8b328ba2
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# e238dcab6d6e4de0b23abcea61264195
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# f6a9ec3248a64bf9806fe26ea8e74ddb
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 9eae554c5cef4ac1b2c74add5659903a
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# e3489ba91dfa43d09f7e541098b9be62
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# f55160f83c1146468f1577643337748b
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 51b23cc3406640f79eb8d105a42efa9b
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# a88668b6901942379d508470595faee2
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 2a1ecd2377ec43d19dab0366f2e9bf7f
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 34d4c00ac1a9464ea725ea7fb65379d6
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 5d45f39b6c38406886045baad62d2267
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 176569b9b4d5485b81dcad5cfc72b373
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 50cb33237e06430d9cc5f2f2e70e2505
# 6a55dc98851d48ee97fc21cf816fbbfc
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 00ea75014aa5439cb4f308717baa85d5
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 6527b560d94a471aa3a19dbe07552ec7
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 91604dcaa7404faaa3f4dabfe4ba9ad2
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 0e98eea35a044f20b629daf2fb6be65a
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 5e32ec36ee264353922f31fcef74faec
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 832db7b61cef44cab502e7f32feea509
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 2725c2f283854c97af1186b643c70d70
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 877b172198714c41af5ee4e15e12d2a8
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# c2d068e6e260472a801ffabc40430e2e
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 70780f4215bb408593ed47de74843eea
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 2a7b99225df14b0b926f326668832aab
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 8d305f3dc33e4e929315c0b2cd82d73d
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 98231a029e6943c49cf297168b1ab6b3
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 50f6ba27c17449ea8d5fd2ef46e0ce84
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 78afc717af974685bd825ed9cb668c8f
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 90c5e58540324ee18512cdfa956223d7
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 0019f399f9644415b8c498ccbcd13a5c
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# ef4f1df03e8f4d1ebf3f45d189b6c486
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 82a5fe06f3804fea85925ca048b30cf8
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 0c9221a7e1414af88c884a19902694f6
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# c497d465c0ec45fabfb6dc6186d15ed4
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# a8d32dc070614ddfb547a5b4c9c771b8
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# b88a7c7ccd4646e0b7fb32855f9504e5
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# bab418ee8cea4fc69d5ca8ffd3f9cb2e
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 1af01333da6f43d09ca051bfebb7304d
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# d5985c847c7b4bed8c5323f1a27b6f8a
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 90abfde68e184060932802d40dffc108
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 57512148028643b4b55ed5bb7952decb
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# df6bab5d33c64be2833b6918553edf54
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 338635fa30d54771a23c6daa3c6cf608
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 1b9a31a07eca471d8be3455de9c1bf7f
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 796386d5492d4315bf90c30ae20d4254
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# c7db8f31c53d49eabfc3cf0707b66417
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 12ce1d006a834660a1701062a8e024f2
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# b038a4f92cbd4ccab60100b5c8119b63
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

