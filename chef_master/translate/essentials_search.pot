# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-03-23 21:03-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 3481e0a5ca364c69bbaacdb34b4f25a0
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# ea347912469c47adb5e3603d9f825fb2
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 2d04e717c167429690a2895e93b10a83
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# cc86a183119a48ab997c7b7f81a10107
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# c936efe926a24c86915755702786c5bb
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 0008115ffb424653a9a61b84c42f933c
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 2c82f467a895403eb732d5df2a3b3fc4
# de2bb1802a6043c890c2c83609537805
# 378404e19dcb43b295c994d2989daf09
# 18946fd953f04ec594d317e45334bd8c
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 4c661f6c97f74c13915261a564b4af7c
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 3537b70b34b442a6946d38aa22cc322a
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 722a1c243c9d4c37bd0e7112ab3ca9ff
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 063b3caa67e7471395e85de86825d135
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 2922077b17dc4d6e9c49126138bcfc78
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# a8bce4109fdc437b82c6b0628a875449
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 79a8b909bcf148c19137d146242dc0a9
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 72a8a06b3d0a4dfa80de681c7d20b55c
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 1306b344289e4c088bfe91ec3fd27538
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 2e36eabb839f46db9a003ce5c8b5a96d
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 95a360d1c26144329c3e2b24b7ab60ab
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 0d1996b2b6e24fdba12149209654dd10
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# 18d6ec06f4fd4e3ba9d334042320e8ff
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# fc64afc593694954a4d4c773c17f4f4f
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 3eba53fb622248d49d8ec24c2aaef493
# ec210470d01b413e877e715ae4ff1ba1
# c1b2d950f42d4d7483eb83a7297e1a9d
# 96b1d03f977b434f88b56f49dd137689
# ba4e3586083b4ec69a6866c10397c137
# c24bacff72b94528ab3b069e875e813f
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# d0596611712e412587c332a563957c8b
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# a9ffc4b98f894a148f558dbc23a5e1d2
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 7fd252192efb4f089e4fefc1409042a0
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 7b15cba169fe4c7892db46970aac0c67
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# dd9496a181374f86ab6ff5e9c091110f
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# 6fa88fa6ec3a4c9ea6938b8dc3ae4af1
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 0c4513e74ad84b238918b5215d3f51ef
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# b4ef69e50ba64cd7942ec17ba9648fa2
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# e084792e34264f94a4e950a42ae95b95
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# c8122d7abfc54d0b939df41320812496
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# dbb850b68b5f44c0ba8b2a811f3438b8
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 46d64b0a3ad64262ba261491d6d5710c
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# 55627376953a4e48b739181b42bb4036
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# adcdaf0834ad4317a3ea0f224c984ade
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 8e8fc8c142024ce484ed4fc04dc21a58
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# c197d71882e74ab5a7bb25d368353aae
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 7194214ff2404e0b96cd4aec0304e4a2
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 3b54acc29bc54c119f29f30437a3e574
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 472278ebf4ed404c96522640cfc304a3
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 34b0ffe7984d40ffb3d72954f33eea16
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 57288e5664d8446a89e6549a24cd67db
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 81c45660bc2f4686b63ae1f07a0bf975
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 1c042640c9df4cb0b90434b8d2420f2a
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# 7cd7f511378348049fa6934682c1d049
# 57f39696ffae488e8540fd400f14472d
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# b1080211aee64f908ed0d38430ea3ca6
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# c413bb552cee44c28ac8ffdf906e464a
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# ff67c00716f54e7c9632e87cf7cacfb5
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 005b3db3b59e4089bcda9a42fe164e71
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# b71810f156554e99bef6b653fc9e91d1
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 44433d30d23c4ca0959542b3a7152698
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# e083f4e7b7be40e98f95d64643d9b4ec
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# b3812ec0588c4efcab0c7ac21b1ab7ce
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 16bf119b4f0a412495995debb7d6550b
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 91b5807a8ce3460cb4356256fef8d974
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# aae88309e9f24b34b51929fb9697126a
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 622cacdd574f4e75a351af9a2702eec8
# 2aa9439caf674e9e95d2908aa32b09ad
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 4700531a2f20411db99d73c14644a0b0
# ab87a71947b24ea3a85b512f3fa33190
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 7ca8afb5567647e294f5cd7fe6004b32
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# d598433c02644345bbbfdfa40fc4ea34
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# e12e3a7c74b9400887e047239b799620
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 67cb8b7088784f029697534f7fa196f8
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# f264ddfd4a9940efb2315eff10e48d5d
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 6549b0c078e644c692ed36ac1a7de64e
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# d9c1cee744df4f4082657cc4dedde1e4
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 85e8dacfe58d4324aea88ed66e5cce36
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# d6cfae2a78784bdc9adbc75c8bffe456
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# f7a2faaed2b34ab7ad8042902472b9ff
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 5f83c2c8dc324b18baa4c85ca950baa6
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# efd38713633f4223883358a64c9de7e9
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# 046523ada13f4f0788a24a6e46509185
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# ecb986bac32d4fe29a572319b265f5fb
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# 57ca3b18fbe14657a86ecc6ba85c3a67
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 02d8cd16254a4fecaec9c359386d8700
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 4a200b356ca540119ac1976bfa758cd8
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 19caaf8ef24d4b10ba4de731f5d6297e
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# e972101cc8f342589b04d2f2e2342972
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# c492eb43d24044aab7b346832ea78479
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# ef6c06cdcdb0459faa6ee5ba4617058a
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# acc46882087347fe8560c8f94b68af2e
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 5354a4ed853246fc8e03af2bcb2110e2
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# bffc4075729e4b05b9414be340840008
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 2105a508195b4ad08562c8ab3225d2c5
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# bb6c214fcdaa42e3ad5d7958569d74f6
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 2065e95d8ca64e7db89c0cea265e82a5
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# bec09c54046d4d72b186675dcb7b4c3f
# eba59296da0148cb87f34e21d2c63f2a
# 7673bd8e1db64d4380b0f5c1ba9a10a8
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# e08fd3491d8f4f3ea13ec67d62e0facd
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# d2126a20359f48adb670d73f90a535cb
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 6e1971d745f44b93997e163b16ad3723
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 2224ff4e0a99466292be65008ab2e9f2
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 616a763de7474136bdeea46be833b048
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# ec19e655a2874e6892b047e0a6887ddc
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 25650d3c176643e187706d2700d7f83f
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 6383b38fd2f74b0eb9399f12d89c3505
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 5a7c3f591ffe447e82229fac6a3759f8
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 8a4354dea37b4895aac72039567834e4
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 584a1ba8275b4245bc748e72941993c6
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 0da64f68e0aa437ba83b809e9357771a
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 7be4b26e5fe0425ebf2c641ec855f7d7
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 419904a09325401b903f36d3a46dff49
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# f4c7f186c8ad4ee1995b9108ad71b065
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 30d253aec0d74e589b9498b7810efc56
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 7c4ad9ee3c3149b5847b941d545b927e
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 561ec3698e5a4c3396dd9a1136fa5f6a
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# e758e424d88d40b29afad4897465d493
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 703679b8f7664a08b69568cbc0e56eb9
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 0d103113a10643c6b42a57d1b8022049
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# e686bd1d57614d6eb0627e24f07e9eed
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 1268f185cee4424aa2693d708c729cca
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 02e3e18c748e4f499ffe4146c43eb9ac
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 50ba510d87154f66b68b528e06ec74db
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:22
# 3ef7f3ff66e34c76a917e3241667d85f
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../source/essentials_search.rst:125
# ffdc8dce90b94831a2e9c910d75413ab
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# a64f493bfe224ca297f2d74bea6c5540
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 10e3cfe14d924d7ea6cb7084aa13cd15
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 0daccd6e2f3f48b1a06741720d8259bb
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 3e1192e3fa984117aaa74b82341f91ac
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# 821cd7f8b5cd4a85bf1a4ad1cf32adc7
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# f3a22b5edf1340688280e3e354f565a8
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# 1e5a8791addf4d85854ba4d3fc97100d
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 7e9ab1743c2c424ea9500b0ca605a1f0
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 1f38fdbd240341068179eacf4cfcbe50
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 7dd9de7e98b14fe6815273056283969c
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 185f03a181c842bb9892edca61ea0032
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/essentials_search.rst:145
# 477088fab26f478dbf77fe2b310ff77f
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# a79cd52129014be187a506fad20311c3
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 38570ccaa074425fab855a4771d56ae9
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 7446bdc890d74f11b69635638af615e1
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# f76cdeaedcc44240aebcaaed40d5ce52
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 88042af955134be88d3e3f288b611b44
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 13be8aea8da441559ef5d81b15f4dd47
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# a2041dde28b44607b62c46f99b60f9a6
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 62b66d3863a44b778e6326e427ed1d86
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 46615b26fcdf49b0a53d08fe5416ae3d
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# f2f90fe1fa0945f6a3f4e035ca11c4d1
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 9dfa5118093246208520a66b904e893b
# 24161a77ab794c9e87a11ba57670c6b4
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 4dfb3b87b7ff490f9ac9e49362b00399
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# c25c71b793af40cdac23613eef970a5f
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 1e81e5c543a64006b37b8a6ab243a1c2
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 33548ed8c8c44534ae5134e07f947b12
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 42aaa95c248e4289a40539872ce6988f
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 6a5dae02719248839ceac7175839d30e
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 24451c1204b143b0a1a1c1ab50996023
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# d7a96bd3cb6246be8cdd28e4ffe6ed24
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# d9a4f3b4a03e4798b26ad64b29782972
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 0a8399a83c914d68b5019de8bf381f3d
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 204e4ca914b24b62a8c10fea0370239a
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 9625d4e1c52348dabe3754ce7e0e3b45
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# d008f4f5658843328d47ea0dbb528f8b
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 6adcc1eeda544ed3a641120be04527b5
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# 51ca784b7cc44b18bb0c6b51ce925b78
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# fcf6b6e9370d4253898950f81f24f08c
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# c851e6e98cf045e1b33530baf1ae7f34
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 64addf6b48144036a9676700c1a34f1b
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# c16d552e5e7a4d8381e815f2b27908f6
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# f17ac767a97749cba8684cb502b9dab2
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# 1096e1edd076416693e6f052283613b1
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 3d0f11eed60d451fb9f0009df05db34b
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 8211ed3e109b41a6a8f150aa7e37749b
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 0ec0a1d0b3ad438d8a07722aca0d45b5
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# e1e16e71f67e488e8b43dfd462f48c89
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# bde6626d97b1408b99872e4aabccc37e
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# f8bb7c24f40b46e4b67abfc329e74b04
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# f0242baf46e44540ae79ec00d4753c50
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 12e34bbe86d84d21b3a0a6500a858113
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 5609dc86c59a4d2c82f2787c1c5bfa54
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 0f5eadaa57d24830a67d2bd2440c9ad9
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 23bc72db364b4f6391bb77e9615fd813
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 5b99059e4a054199a83e0f01e31bc4da
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 26da5a4152cc4df09ee4614e0c9c68cf
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 3ff8d72be025448b832a8c046b44a6c3
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

