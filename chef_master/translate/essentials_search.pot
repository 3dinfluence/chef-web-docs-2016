# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-24 13:49\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# d19eabf58553412293a0b8404a7b396d
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# fa817a6713354fc899c11a9dcd565315
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 18abd238b76d4eac86c2214c81314159
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 47eecbf9f31a409380f3686670ab9872
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 62318646ebb24ea58918c951b112e275
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# cfae9562bb8443eba861f6b8fe2d43b5
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# dafef0fbc07a47119b8fae1e9b1e9f86
# a71e86f04e3641669d51959b04af8ddf
# 20885d64a23c495ca94be3acd4977c9f
# 9a90531173f44988b4b771d60020d48c
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 90697f01ecc946d292febbbbcf4144cf
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 540b6c73083d4f13b1adae19943bde9b
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# fd27c9d587af455fbefefe00d3d8284b
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 903ace211d5846be9262c5982f7bf2c2
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 2fa090af4d0044249c02f69990be696c
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 0e6e5782a4624d04aab5bccc22eb1429
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# d9d23a36e56a41108a7eec1352e6cc12
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# a366762147b84ea0aebe5e6a9877ce10
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 6f8cc6f28390424d975eccb933302792
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 95ec618cd37e421eb8aa60f8b67d53bd
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 7b82d96277d64ceb9d68edc0e388a2cd
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 46a726041522417eb7c597f682a36a68
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# f3839d44565649ae9b204dc3db0c6dd5
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 60ec8cd00c90483c87f611d3d76b7677
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# e7214744ebb34aacb684ac32b1d0e0a0
# d1dcd64903214752b067f7de9906a8ed
# 6cb45ad25c114641983f564e294d051b
# eda7d1a0d2304b6cac98c7b00f950378
# f805378a82024404b29143222ed85234
# dbab632ac29946489e6cd26b3b1049c4
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 7acc29ce23d74776abc7760622f74236
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 2a315ae862c44804944968fcc74b92dc
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 7099a07b0ae341c69cf145b73ef3c0b1
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# b2022140d99a45cfbd52720620d89cc3
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 70e067d7e1324daf957237bdb3ea2a81
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# e017985a50554d32b02e283a7ef8a561
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 0f1ddada6a41492bae6b4c7d99f989fd
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# c388b67e7f4c414a9cf02c7a291e9e1d
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 45231d218b9f4ea7b1d9402d7b66c0b5
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 4d8cb8719078458dbba280296d65ae0f
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 48c7096c9e2a41a1b00d8c057749e0a4
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 8a677a20dc774f1f9cbaa420810ea0c8
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# de8737f28a20452b905511e40e8c418c
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 3129584e9fad4729b5bc3d5520e5ea15
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# dd90413ffe1e4d2192d818a482a3090f
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 72967d5a9e0e4a97b6f92f35c85c3261
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# f98a8ad78d754355b7ed390cbf836b6e
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# e0580bcbd08a4610b89a137d14a4a160
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 4be4626a4d1b43bf93b13f44143c2ed8
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# f336d44b317f4409b168a0e75e1dc4da
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 6c3d7ddc58ce42d7a1e4a9ba1580e519
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 35b12a4466f44ece9fcd946d3a71abb2
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# af4ca946a71847199d92afbabd867bab
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 7a0512d11b544e36aa85282acf5f58cf
# eac4b7e1488f48059964f3b42b08487d
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 167f50c02e1a4c7ca04b1c8d1000b038
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 8e3b992b91c74dbe95639bd4f1d943fc
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# e923d236d7e141d4b2c81a2ffc251196
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 7f0c789b9df04c21a25260bcf5396b32
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 7d122c1d8c1f4fadbab7fddd4449a3c8
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 05e1e03a1155403c9cb3c0fc1ad08a52
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# c72e5a7893764be9ae72b2ff1701c45f
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 196fd8d61ea44618815b9d7f384be59b
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# f2d6bbbb97b34092a3f9c62354fe753a
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# cd286771c5fc4eddad2653474431724e
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# dc5c772b08de4ca7be1448778c5ee08e
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 9d8799f9540d4f8bbbb4e966e84a5d94
# beac186d37ac4b13a2e03c55282d6dd6
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 53483fd90edf4a88837840d84b49e58c
# 2027a7d6978747cc9e67865d04ac560a
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 1edc48698ab74622bbea2c413095ed11
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 511056d3fef74ca7bfadff6d4d6e8590
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 5cd1cbe16b8f4ce08d7602c4e5349255
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 62ae20ad15c34961ae2c9272d869d2d2
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 5d41eae9e129437eb4cc863a5937624c
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 9f5a8af8f49d4219abf243332e68ef6e
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 70125308dc454741a73da314dd1da380
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 6dbe14cb29cb4f0aae0c25b1cb522756
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# ee4d4fbfa3a04d2fb26b91f208d1ffba
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# a26750ed7bab44c89b17a08f9e99cc95
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 6457795631cb4810a55b902a3483bd58
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 8eae798007c7444dbd76e390aaf420a4
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 3facd0ccfab747dd8ffc067cc4986c74
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 1f43c84ad0704ac5af4aef6d861cd9eb
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# c7de2d265d3a4924a9c10b1b57d5f7f0
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 62dfbe1b220d49c89d2d444c87c7eab6
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 40034a4bafa34e9badd36ff1905e7936
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# b83c61d771c645c596d3e27f4a3ebeb6
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 2a14b6ba2a1e4999a249a6eacc9d12bf
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# ad5ecf49e59546e3a0ba096ddc9bc7af
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 2dffc9c7736848318ce9d7649862a3a7
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 6449e3cdd3164c818892e136fb0b71a2
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# bf859e7f26b34e0abc04018e4a99f6b0
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# bf2df02bf5e74ff5ad138bad4dad25ca
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 1e6a1a85c40d471bbde171432e964b89
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# dfd3104a74e8459cb4278d0e5437eb21
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 7de078646a014c75865d196ce119606b
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 7cfb51fa1c3941159f0ebe1d926aebc8
# b82a9cd92739429a86a05d94474ec736
# 10fe2a95939b42e89435732820c09481
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 2830299e2bab4a89acf24c46290530f3
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 258fa339da7340ea9edbfe54db82f788
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 509a7760cd084d039099c8edba2af5d1
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 57a96cfefaa04a99a41a0e5f89aacdd2
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 675daa050f5e4689af1bfc01903c2b21
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 4e9bfe69557546e998dfa2af860a6129
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# a6bb0b2682e0427488861a68336837ab
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 489b78c07429442292cc2953551f1517
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# f9d047dadcad417cb6f7c557fbfbea72
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# d598df96e1e04cc48a0510228f7188af
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# a647b5a3f1ca4caf977132a91ade58f4
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 255cbc9f912144b2850b6677bfd2aa80
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 0e3d1841cbbc4fb7b9e7c09b1ea4f170
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 2859d067b45f42598de1986d65f44708
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 2ac02936702548a082002a68bd378cab
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# f8c13455a62147b1b591624c71345dac
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 16277fe1044242ca902c5779d6ae65f2
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# f9b66da5d1df4cc2b1968c24757ffb44
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# c1fce5f770d84f978564aee5f98c3d4e
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 9e6f3fd27608469f9cf24e22f03a045d
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 828ae2efc35b4de9a81eb41aaa5f3a8b
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 274be5b3a3ff4c22a76bc065b5cc8645
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 6e021fd27b58446da61eeb964018a70f
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# c7989b464cc64a2dbf470b670650fb25
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# cb3c4e61cd6448158da2110f4d2f3e1f
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# e246e75154d54063a1b1971eded5ae4d
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# c5a4b0474fc84dc2a6695e6532c92fba
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 8979a02e96704af3b7415cada91dfa40
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 648fac7862284b5ab399c1ca8ce2067b
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# e004ebbe909b4208ac47898c12f0d8be
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 7b033ac12ad445898bbec89002e1ca34
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 104fc1b7ef3b4ea5858bdca11cb43fc4
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# b793bc22e0314c4da71126b040208769
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 16192438a8fa406f84c9ddff5058b5d0
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 0699f0d18856440eaa48833f51e4939e
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 0db1d104d51649df87d24ec1d9564ea0
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 62bbaf9389f94037ad9e91bd6c22c5c7
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# 39928335be0e45c6a00a0a8e67cb9b47
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 539f655a2c5a4dacbfc88d9d72000dc1
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# a5709f7f7dd64f12b35eeadc36801b12
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 1dba128f7e784ebbb3eaa5b48375a7cc
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# b27573aaf49e4a4a998b0bdd070aa173
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 14835b2e07a54241acf6859c2e45ca5d
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 88c9adce571f4cb59d412527ef66aa0e
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 4c52757a2e9e4bf99a64abc7a33ecb33
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# bd06276ce3324ce98a20ebcf023ce43d
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 1f68fa61fb174f23a2fc60a1afa7aa80
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# fbb8ea20fd2b4c70aade7aa785614d07
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 380b140a78c744d9a26a31f17ccd5f9d
# 1c7dce23b45d46e68fbc58db8edbac7f
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 67cad8c642f74d6d89ce9f0466f83809
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 572e06fdee5b4e6b806452cbe68f29d7
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# a73c9b71be8b45b0841d3d94d0ecda7e
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 4fcf942853784c1aae334ac70daee6e5
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 6635977ec0684a78b8296cc8f95ff030
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 56a72ff8cead418497af013264fe6c76
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# f1db34e5abc64f9ebc8d218308b6815d
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 1aca62ea95dc44e9917e6175abdc9d36
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# ad77ba5be2964cf58aa66d0cfaa9a27f
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# bf25016d3e464361993328c45c10eba7
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 0914bc37548b4678be3193510b7b6c20
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 03f1c4c7837e4bcf8c5e57f269df265d
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 17db2f6f03834534bdc796ef41c0ff39
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# fb0d52c4d4f946f5b594fe7bd3e28cfe
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# a77ac62d478547ccb6fe4d4e64363b75
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# f30d034b7337425d98fd5f223a65aac8
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 2982bc5db40f42b6aa5682138f26ce9b
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 8d5433663f4946b78666a35dd4e73ea3
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 7ae6815b499443d4a970519d0635a904
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# a9025303d0464dcb87eddaf9e11b995c
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# a9968c1b631e42808a86b3917a28fe90
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# a27794d2cfed435ba71573f4839374a2
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# e9def3c667e44212baf7636ac012c503
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# b4beb9770091433e82a9bf30b8c5d87d
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 0703f075b6284d72b61d456355f8358b
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# f819f0196bf848d3a378f158d6687fb7
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# b8ba29802db045d6af37ec2635fc6f87
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 210299f960a643cbb5a9148eeee953ea
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# a2295d8fc374459aba2d1c9419a1f8f0
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# eaa03b0967e64d0e9970bf003b82d2bc
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 0c2afe2fd7da41928b5f252b424c7f49
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# bdb0fd448a8344e9aecafff78064d191
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 1347a7c5a9884c9da3311d1c4ec03800
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# f55026fea4874ce6932c3ad75a9b53dd
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# e0c9ab955900487ca074c37240440602
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

