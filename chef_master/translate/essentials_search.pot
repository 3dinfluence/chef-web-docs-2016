# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-25 13:38\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 4fd9ae0fd64b4111ba6a6dd0d18b4b2c
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# f051f6601c5543509bd073f109d8cc05
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 731920c1cc944672ac306f8861b53c4a
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 28501ad652604eff9f66d16e245b9f07
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 5d40e546b1fc4cfd8f3d8092979a70be
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 6948bb647be24a3da6eeb72c4df1f49e
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 069c3a94b48b414794556a27aec7c8b8
# 49244f65c8354fd3b70a664085421814
# f0bc7b7204a54cf0a73dd0b1c3b5bcc4
# e4ed1db230ec4a018153fa28cecba45b
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 022f7f38c2ad4b79a00faa61ee90fc9a
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 9f8d458191494f4e97fe1cd7883622d9
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 887edceb12734ff5a8c036da4a34599f
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 1cd66fb35a9e4cc9a087424eb2a3382c
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 2c9f64f763624fa9a3026dc6d6076d37
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 94ede439b6dc44bda9f1ffa0f59515f5
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 8534ca5fdf6e43ceb6664ed7122d2f07
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 6148b20f6a004f6997df644be935260d
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 239a66cb84434756a5b9d3989160c0af
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 91c099a99f6a4295ad2b1b454dc3c94f
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 17f2fb0a63124015b4969cba978005a4
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 0787f10dee8c4e1ab38e0e742f4805b0
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 39fe5da61e8940ff8addf6648ea32877
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# e4ebe7165d7b425abfedb2b0cfbb1092
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# ea79bdeb56864be2a07e7a1cbd3ebb0d
# 28c652bb0c3a4c279f905a3230cf8d50
# 27f87df297734770aaa3534f998919e5
# 567f94e686fc4cbe9a66e22467a361af
# 07500ce0f612433789a404e381155999
# 90d7f4fa1ab24e60b15930ae3a76394c
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 475fd91c6af1403eaa55459a63f4a224
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# ec73c1a09ec44b3bb3b2098f1f5e9891
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 40436a79413a4211921f8cae4bf47d31
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# f16653237c134f30bf2e587ecb836332
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 0821723e29ea43e7b7f3f3e6e487ba0a
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 585b8c125fff467998381b4703cd2f3b
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 453905ffc5d3471e918c60eefd372311
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# f4d1d5d115ea4616a183d36e1073d03a
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 504f45c9a38f431ababfcb31263cd66c
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 2dde1ae42f4246c79db9bc8ebde9427f
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# db1fae24c2614c1e9f2ced0d12e0790f
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# e7de35476f65452c8dc803c2d663a614
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 88eee0dfbed44e5f810b30cb0b3afcd2
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# a2688dc57bcd449fb47500c57b471309
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# a98340fd153d41bba3a021812906af49
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 448f60a14e0e44bbab2cee38e0b171fc
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 8a36826a238b4055b886ebe9e893469e
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 4a8d3fba86da44239834d2289940f6ed
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# f86370da32984428a5481dc8ecceda18
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 76b151df3fba438081b12ad56574d05d
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# a3daa92e2ccf493e9b7c524f13889500
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 8a8040bf493541008bc89757c22e0b74
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 7dc83ca2bd6542fea1b95e829877f5ab
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# abdb8a0f75e346ef90f9242d76dde239
# fc052c18ec2a4796a97c2a257c8598c4
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 7641ff3f290740ff96aec8d6d2cd2fb3
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 9a572a4bee0540df8e3a935524eecf88
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 9e9941c79c764773a8126c44eaa1246a
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 9157dea4da34412da6d92c4dc1c2255f
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# f812c1b961a14c15b63d54fb06db0896
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 8b67a2ed69ad4b7c8a2bc454a8e9515b
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 2131df0955974cecb17b99da8d7b1c7e
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 2bd203256cac4e27891c37e02a3ca9d3
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 75343857636c47e68fc6e9277fe2852a
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# d0e36fecfbf44a0f9454eb212fb04ccc
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 7b509dc0f83d4874b59c8a46fe696317
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# fc3fbd20e8284497826c578e682b1d91
# a7576e4b2e4e4b60866118eb19ebff79
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 279cfbf9eacc43d0b81f8c745065c5b5
# a3d16afe540f4db68ae7ad2bfc18e232
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 81c5cbf1e73a4b25b8063c136eaf108b
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 367472a780594a618bd178403c9300b9
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# c87d85b63f9c4b0a9ae2787ebf15f1b3
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 8e1b65308f5b4ec98f664a33b9ffaf77
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 542e887c9ab4481bb0b155297d6c9a11
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 52c2e1d4352148ccbf7afda032b35be5
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 083847b1e6254892946a43f9cab0d36a
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 7950b71248c44ee6849b0706b59135e2
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# bf49d0eab76d47f39f6191ebe3525a0b
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 402ee555a1f047de81d2ba8be3de9d1a
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 9d599203617b40b9933ef70cb310af62
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# b91719d42da44f308192ff0324c32907
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 77e181ee4acb46ee8daa07298a798af4
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 6e363867205d4542b7cebceef1d77b9d
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# acb98ff789c2417392ee935ab3afc481
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# cec1a5d12a9347d2ba6f3306f0a4bf69
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 9b49bfe181954ae880942370cab7f0e1
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 55a6cd1bcbf0460b9cdf208dde8db738
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 1c9be83603ee4208aef088d6b969a58d
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 6f55b36af1404d7facd84ea47f10e1dd
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# d08cab45c697430e9a97befc5d51ea5a
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 9288c74a49544923981c13db456c042e
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# d88c74470e5b4a53af63e2c8e226f8d2
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# d635dbdb62d0497da9485ed91eb7b2e7
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 3df8dfd4e2864a928bcff8da2552aafb
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# f015791de0704f26b5dd666b22625816
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 28e7c54b4e2c4129ab4b0c41c0d7fea4
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 9a682a5fa9084985957b1f8561488664
# dd9c6eafa6da4567b77192f2a8915ea9
# d4722ad3c514417ab8f055319d779942
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# ca9031771c524baf87ce3c5c1e203634
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 93182178fc5746f099932c380403a961
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# b212658e23b3484a823fc55896aa8b26
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 77250779577742fc8f68e90129890c09
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 7f816954961047a7bf879407ac59b47d
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 136cba4e2c3e4e23ab038c9b1e6be075
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 92074ed67eba492c93d1320080a06625
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 9541c3e58f184ff09a5406703dee2fa6
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 76b9ec260a874a8d8e66f4404eddaada
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 8fda4835862b44e2a3c8b646e0d52666
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# ce97063d843f4f0da627bf8592b025d0
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# cd2ecb18847548e4b51edec7dcb1e3ad
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# e78ac0f2d60644f8b3b7f983d72bd157
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 1caae7132278466eadefc311909b07c1
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 25b9800b9ee54a8fbf88d2d33acba262
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# f3aba172b56a4b21825390c833e7813d
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# b6646a123040432e8a391a738a997350
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# ed62e91977c34f3eb664dfa658fce9b3
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# d7a24e1fbdaf43bd8d260ba92fd191fd
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# ea8fc738eee847239853837645a2551f
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 390cde94d800423aad0746f5de95d028
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 0b9346a17f1a4a79b6d29a7d51c9db5a
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 2283d42d75dc4beea8c4942f6710796e
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 5be1be30cff249eb877c2f1e0d912763
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# a64f78dda8d444c88dda55614144a5eb
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# ea1267630dd847e8bc7b0d6a148cf4ba
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 4e49752784154aeda954f0d9ef5f7019
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# dbea5414defe47c9a1069c2eef0c9e53
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# fb286d4a2ad94e0792f481f2651820e0
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# c5637bf158ad4e9fbd3d0b28d3e9de7b
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 423c6e5abecb44dd8a8b6c78b2ea31da
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 6ef2e71986024145ae3c4bb3a52ea075
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 873d161985db4ec1b7743330ade390b8
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# de6d433f15224fcca70f234fcf6d5135
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# fbe5d927a8444421b66a0ef74c91c004
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# d92bb8b7f84a409f982d3e41a465e489
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 6f2613ddb19f4028b587739f41fa1603
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# ed201e9e25124d84bda2f2d50224c978
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 9474137293754840a68aa5588f7c316e
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 107037d049454b6290bcbcbb18746d55
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 7be52635bfa84475abedffbf9dfc6e1d
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 95fcfd0a93de4456923794d2159a74c2
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# afafad90a8344a2e84545059b3685d5c
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 59882dab512c4aa8ad77bad536c6173b
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# c5166dfa7cba4ee7854649397091e693
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# cc1f14d1f53442f6886cdf0ad15f6eea
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# bbf4b8c41ff740de9b7da75b09980afd
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# cc780a6ca8cd49cab355fa4d53f37f07
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# b254a836621e4d4c9f7e3bf9cc928ef0
# 83a9f2b7e7714fe79a05c3c35365a3a5
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# d2fb9a3dd9324c778e0b5bd4ef051bf9
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 7b25a9a6de3d47f99953d22a2da947a0
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 531fda68cf2c4e4dba39a7ae673c7e97
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 0dc4cd46beb84d91889736418a686cf8
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# e37a410206c148f3ad985de082f5deb8
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 8803464be69e4d3face5fb30ef078da3
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# d0083f013c184161abc5eff5a1bd5dbf
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 541e45b9853a4579b68a7273d254544f
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 56e97bb807894ce7b440aa5ad2b1478a
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# d0dc8f39ff5047ad84cee872e4ced566
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# cb8d0bc0c88842dda591691bf4939d2d
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# b7b408548466484595269c036e882e84
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 9cf1353742ff47089c6bba508558f7f8
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 74d26b666a664981aea84fb5acc1af50
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 64c0f40b6d4b44cfb636cfbf42fc5762
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 167f91a65bf647f29154b13fd6fb7c43
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 334a85c85bcc4d58b09808bd3856bae7
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# fbb9455b756c4865a8951f3576e4d4f9
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 2ca47bdb64814404adab439775c15940
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 02a7237f9d4141629f63d45b5cdf2844
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 9c2489346e5e4b7c81a58b53d357c43b
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 7e3d6ec8b5264bf19414cb52777807a0
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# c48953ca1f43458d9bb88be1c8e3ee9e
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# c883adeb2429474eaa720959c4735ae6
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# eb04cb7865bb41738247f1d7c28eae63
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 20b936cb71ab4c8da7142f0bd0de2fad
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# a47dc577952e449d85a75a1d438e262d
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# ace6f6fd8d8540958f97ce425ca86c6a
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 1ff069ca809f4550b7d7d0bceb168dc0
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 9299e7f244f44fe792a280f468c9f8ff
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# d52cce7ba93e42d4bd08fe008c62ad9f
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 2a0435e1e6ff41f2b6e5816bc8db418f
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 0b702d9c7c2e46378083bc46a940bb65
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# f4eab626157a4aa59b0f57c003d5aa42
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 3979b4876a6c4106b835deda5977a4cf
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

