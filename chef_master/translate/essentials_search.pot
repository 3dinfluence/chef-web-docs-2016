# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-11 15:41\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 3e4b7a5807f543a0938a15295eebff0d
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 9d59573e64de4c5b81c83a79f0565fdb
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 48ab1a8fc04b46889c601c9f0f190c04
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# ecca93514b4a484baea4e68386b94216
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# a148bf4b4ca94fb983b5af28d7769dbf
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# b3c20d0b293b40298b344c7acb4014a5
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# ffcfb95ed2d04bb2841c3bb5aa68c290
# 1f8d5c902f5a4490830d607ef64918b2
# 4965b46db20343b5b329e6362129554e
# d4ef96bf0f61452396313446a44112c1
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# ff757484383e4216b4f33247f35d909a
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 5cf67b5c2a6342329a214930fc9ed700
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# a60b098a32684ca691ad2599bea58cd7
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 60e631fb6a4b45a283690bb8e3e5c169
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# e354064852a94f5c895125c3704b6cc9
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 3858edb3592646e99c923ba371ea9257
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 448395a2e32d480180e77c68149a4021
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# ca3d93831c0843a0b756ebbefa44394c
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# b3bafb17ff444006bee34c18fe44af93
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 4d4c2b787b6d4b6f9eae52a3bb564366
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# d84669d74ebc45a2925758ace2cc3480
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 0f0e093b91f84bdaa753b01aa63d53a5
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# 2628aba56fba48e59b11bef271f05189
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 396f1af2be77493697c962c0bf793228
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# d32c9776f96c409c97aba4df6de17c25
# eff67dd255d340b3ba64f60b67356b97
# 2e41d86a0a7e49eb8da52f91242e45fc
# 25a400183bf24b49828b107eef7c66d4
# 59c8025bbc0a4072938c3b990210d35d
# cc08a00b266e44e2b98d11a9b03d6e93
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 9713d63c16a54507bb3a74a594ee3cd2
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# e1f4b5dc5db447beb5164d8d46159047
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 619db8ec83134bdeaad100978bc6bd6a
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 845059b0c39d438bb21afaa6dbe2aef3
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 947e8ad6a68e42299094e8a65ff4da61
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# 8ef8891ab6c24c0395e909d3fb03af2d
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# c9fed4695e764232b7b15d798a83ec1e
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 08b00abfb4174f82b6369e6a4cba2096
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# 23edbce06e00415cb6ba90f36bade71a
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 15e950551d79428daabfa51831ffcad0
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# 55695d2496924ce8ba69780122f89986
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 79c7424361f347d1b1ee5e8342d1477e
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# 02eecbc1f63f4a4dbfa26d56948cc1a4
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 32028b5c005d4f1d877a64b7656bf8da
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 8c892f1e479a4b9a8d784319fc48f990
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# 44d41fe7d6104ac5a43a00c6986cf23c
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 58b85389b33d48f79d0ef2d910d098a8
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# f9bb42578fd344e3a38642e1319ac769
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 29f9fcb32e854e649f984ac2f8d316d2
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 4ccbcbfdf6ca41aaa0d2056a67a1f0c1
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 1230fce6278b4a55a953a9f12759a889
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# d70ef2b19e4042729f3fb19cefc53ea7
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# a89c98c8d0984f57b90516d0e84fe5f3
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# c025d4caa040481fac95709b36c7ba7b
# f0d471bc62c44897ab63883be60fe191
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# b3be9c14cd5b42029cb398c5532699ec
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 56f39e85928a4bd0a5eca5977a158a68
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 4f5d5ca6eae8475fa25670d285e3bd1e
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 95a8ee03564d4a0f956e56ab60c7ed87
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# 355063975ea54d9680f71b80518d5cf5
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 48bf01556b344d7b91a3a9488efc26ca
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# c1d3d11502dc4fb8831e1509ed3d892f
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 1ced1c750a654566b18b65e4a568aa97
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 9e7d0404bb5e48b5a9823a9bc72d6ccc
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 6a0d494a38194728a35a6ac3d9958eb6
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 5b3d8f1505ef4083880d86cb2b1b51ca
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 23a32a8350d7465d890c07a0598c7c2d
# e60c680e5f1844e9950a2782d149f85c
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 387c717f75ef4e4ca3c9bf403e7e0d77
# 859784ae98ae49efabac49fdf097174d
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 10d2d0de9d10491aa0570fb0fee8a5cf
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 2fd2d1946cbc4b1ba009c7de22aac227
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 29a0ceae3fbf4ae297d399bf9fdeb786
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# a96d954a09824d12bee666f766855baa
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 86c7eec359174d90a09b0a268576787a
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# f3206713793044399ac8f80ed22f9d61
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# d59e534bcc1b4127852d338f554ca5e8
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 71db93429ead4dda890ea6ee49c24687
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 5b58726976fd4a52b5ec7c6278dfe76f
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# ccc85aedbcee41afa95ba33cc3d44b95
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 4c336a5473bc45f2a89e69cdc18792a0
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 7f070f89741c4352bb65eb127b784908
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# a72027d0bc0b4b7e94ba805958e1f494
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 7f9730ca03ff4f749ec50ee6c5ead41a
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# 890da49c4f874ac38ee15632c30554bc
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# a48204b7c08048deb5fbd88ec7b86776
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# a4534119873b4365b9cf63ab2b8a2187
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# d96f628c262c4ad786303a09a322ee29
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 74fe29cc2bcc47ed94998a1aa181a39e
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 26ab24bfe7d54f648ada8a941c9cbf46
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# b15db6d6d1074677827c355e73bea1b0
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 857d0f8e432f472d915f2bce387eed01
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# af5a718596e54789bbefc79083cd7a84
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# d442f5f739784bb290026529d135ecae
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 3691d4abec8548b2ba74bb61af5fe0a2
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# cd7df7ddc27f44a793471f21209131e4
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 72dc9eed98b54a8fa751c5403c3cd8ec
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# b9d9728335f64c3fbc3a4aab442e8d2b
# 15975503241c4f8ea35380af5a2a4d33
# a49e05d0ab8c493b85ca997793da5959
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 2340a0f7257241c4aab5526455f15c1d
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 8a76d77f37c441569a6039fd769d4901
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 23011f1bb3544b68abb4ba1e78bfbc75
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 7595101229f6412f8573fc73fa357e76
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# edc1b2b43c11475bb1aee09c91bc8901
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# e2df25d75adf46c98136ac24cf56f59b
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# fa22c5129e624ef5b63a81ce55191fe6
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# c015e23141164be0ab6eb9964009a6ee
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 32a5835c6b3e4f06b6f842dd27134bd2
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 1469ffc1b46042bf94a3c070679000ca
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 31dfaccb574b4e8a80bfa0bb957a2f02
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 274fe531c8e54b4c80e5f1c5736b9d84
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# b4a17e0af24740e180edecb645847948
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 8f7bd5088a90412e88031a3749b96ef2
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 6960d9b475de411094a155e2fbe4acd1
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 8fffe165ddec4a3385e8b8fcaad493e3
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 54c233f222bb431a8d3d264b1b28a052
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 0faa3fb99b534207ad5f198db8c6ba5a
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 94ad835ea9434e83a047aa7ef9d15dfc
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 53d6e24894704e7ebb942a1fc5963e41
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 075950bff6144f55a91d85fdcdbaae7b
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 228ebc0e9bf24fd8a9eece3233603a6e
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 26133408632b4742ab9c415c2e651cdb
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# b18a7ba7a0ef442eaea5c72f4eb38597
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 9eb5ef151e6c49c395e26f30c5b69b2f
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:22
# a1b03f791503481999ee1cf73ac59ebb
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../source/essentials_search.rst:125
# 451263fa158e49c087d4429d8b9b9b5f
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# ccde5f818fc1460294f8ad7d81b1fcd4
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 178c75b21ccf4c0e99fb55ad78f43bea
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# c958346d397b4f88b8b219e3302e489d
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# cb897210a10b44c3a024459230534154
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# 762d5e2fa65a4f3da383170e6d2e4eee
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 1da94caf89e444519a290c8c40f2637b
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# 99ad7b2fb3764b2f998b80438a16294b
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# a7dd7e90ab9846f799844710c419a741
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# f4fa9e4c2d5d42809923d49d111d1382
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 981fe25f1b30484c98e5e114bf66f9d1
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 316c4db95de64944b640a83039dda480
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/essentials_search.rst:145
# eb5104d6c05c4a6abf72b4e124a06d22
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# fc0cc6707f534cce9531db33e5acc289
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# e9d4074c2ea948618b6c68ad9933edba
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# e9d31370840e4fcfa3792454c9c050ac
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# d5b535d072fc4df5aea4a2f7261bced8
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# e51b492f44e2472899b7dc91ed1dc494
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 7867df4ec66a4ba9bb9cd998de77aafd
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# f264aea95757485bbedfa69c1b7b5c3f
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 51efc2eb8d864c079c501f8e15808138
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 0d9f1d55d1384134b5aeb63a604fdf8d
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# e4b03087d2c74ee2977abdce0813c6fd
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 9e6f1120448a446aa958565d9941e4f0
# 482f794a96364de993b12528cf39432f
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 68d39391e7cb487b8bb20e432bcb9d99
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# 3bcf3caa93ef4a198eaebde3b8e76880
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 63163d7e8fb447009bf74c07f2115314
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 1b0c579b6d0843f3b4cb33179349798b
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 483710a883fc414fbbe6d972cd0c080a
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# d264f1e99be04a6abc73bb768d0540c6
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 2c3395b1724c4bbebfb7c0b24fbf1fc9
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# d0ec02ff2afc4fde99dc50b956fd004a
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 0256fc229b724f2a86af8eeead087aee
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# b63b60fb253e4d9a931ed368540f3179
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# fa590defaabe46578741f87a85354152
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# b3c3b665447f46f2b4549b7be70f5b85
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 619e914f597b440aac629f2370452ec0
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# dfcde68bad6249feaecb8604ed30bcde
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# 0b1a12a5c28c479992d83a28b5e8605b
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# c90ac33a822340fda1a38cb9fdfc3a51
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 6cf7368eeb5a4ea1bbcb08b259b7ea3f
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# e4e8ebac71d747a494da17397826a588
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# a59830d823264c1eb118ba767ffcaaaa
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# a9baa22044c84898bff6f3167aea9f11
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# 63f8eb7e74ea4e35a3938d5d5ec1f557
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 75f805fcabb746ada539afaeb6c9a8b6
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 372347b84c3a4c0da595f99b520206c4
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# be9c82df9474472d915e7e9b9ee1dfaa
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# df48059e7fd24f39b08240643cba36b5
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 22815b48469e4b958c5fde581d4487f1
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# c5883bd4886f4e92bb3a8e92477e2185
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 86e0d4ef1ab948129223bd1a43e57d71
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 415e608d585841e6bfa164311c858136
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 26c4383357754275935efe46e9fca2d6
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 94b802923fbe4935b08617d93dc3ac72
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 4609d3a1aa5348f4a2b82b293f624f3d
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 8c503da6a71748b4ab9ce1e34c0d95f2
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# e1d8b89969d74e8bb9b00c9c80a63d78
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# fe0e0cda1d774dc9806817076c8b792d
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

