# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-08-26 13:03\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# ae86a3bff39a4cc59ccb3b5e6303f6d1
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 7bbd8e56dfe64fee8a29b47a411243ef
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# e33ed9f3d95a4624b8adfe4967a6f8b7
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 5ff56416d4784752b80ecbd023ca54fe
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 248cb3a7a06847f1a92f064b4b5364d5
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 18e1aae1dc1f4d7aa586c5b898bd0032
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 528e34906d354e7da3768efff38ab793
# 8d18d56c09354f7090f775e2591dce02
# d44cca9155924b4aa807c06875d4821e
# 5361dd69a789458c937b02e6d0106899
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# cb1a15bd3f974fc98901931b5da34769
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# ef4e34fb3852440b98d226edadbdab8f
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# ed12ebe5c99e46d683dbeb3db4904ffa
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# c688a576be1c453b9d31761959f3b5bd
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# c8143aa591d746eb9f1c217ba2c58952
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 2ee713147651400cb1763f5d23715128
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 337cd553286f41c38a464147c7b00b4e
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 0c0ddbda30054491b858996b31fe0f2a
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# ad9d2c8a28ca480fb2a42f213fe78e14
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 380b2023ef4448419c2f5496eaae6384
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 126db649ee1f42b19af32a3495f568ed
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 9c929e8f8ab0450385d1f3c0edcdfed4
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 4b0f97d3c0aa468aa397596adc4a6c90
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 719e99c7cb204d6c8cc9e3a3fa2775f4
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 21a17fd41ef3490b961f25729375b1d5
# 8fa0cea9b82e4887aea1bb08d3653ede
# 47220e010e464f95b7aad52632c1fa74
# f0e26b8f48394b368d3a84f4e5551493
# 4e5f4bb9717547c0915e25de91ec5e54
# 087945da180d4fca9aa8b455f3033778
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 9a9f4ee9f2184ba6a04f6a055ee8e9de
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 9ffbcdda9f4c4eeca1d6cc3dec345a89
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 3505d2c547db4f7d8efa90f2ea905729
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 83532d19c659499a9a1bd4c4a9e9976f
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 76528fce40714acaa36e3f2adca0516a
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 289db1adf81e42d888c320c1af6624dd
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 58d47987f2cc4752ada99ff78898bf06
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 49fbc8d930a141c3b5253a7582a5b66b
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 2eb4d4a74dac47afb9657d6305b3d0b4
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 383ad8d61f8d4b72814602c9dbc4aed7
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 39b46b8e7383449a8d0e971b97544e43
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 70b32d15d9d74422af2899870f2f20ec
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 515d264a7a174212b72c03c37f8dfaa1
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 10fd82b869ca4da38628b2a75761be67
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# c50323e2a3904ccc99d6959a993c5e15
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 6165def8719e46ccada49583956daed4
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 29bc7b6f7f6c44ae841c96a933f3752e
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 9b168f93bedd4d1c860e3740cfb7a95e
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# c5d9096d28704af6b41ab7fefa02bded
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# d90cbdc2c2a64b2fb1f06b2ccdc0a629
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 839bd12bdde847f3bdaebde4d325963b
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# a5dcebee59eb4a12bbf72ae6dec803ac
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 0d7c4e46ec14425cae701ed371eab514
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 97675b3765ea47418ce974fb23d612a8
# 69326e637a9247cf9fc7b730d3b8fea6
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# c032136ed81046d3ba02eca8eabc058b
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 4669dac6f32145b9918f98e5b48f88b0
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 89f74f6101194556beca02fcee3f153b
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 12cec1b4a3364463829bbc167452ed21
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 7985eb4783ef4c3b9174d2192346ce0f
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 0a1d777300f14af89fc1a0825e2e9231
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 75455f3daf474ed18f960c12729ad7c5
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# b50fdf53dae04459a7f2ff17b8412af2
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 2dbde511de7740739c5ca351e7c1e78e
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 7b4875b2c94c42aa983c86b7c2d14fc6
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# bd50589bbe4a4d21bf5e968872e8e503
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 804e401ba34d441698e788c043776937
# e2df094652814b409b567d388fafc25a
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# cf22367fd2304480b7d8821774b2ad1c
# 7683a3648aff4c7aa68c2cdb67850157
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# b5c373418bca4b14b9e1f8a91dbf7536
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 25c53d86473b420eac460639326fd1be
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# cd16f0f57f094147a7ca89de4ce1ea41
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 9285d47e7b5a41a79933a2b9bcfaee89
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# bd40cea070234d60a229cc936f5020f7
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 6788714f27b040698ae5e45d903c6f94
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# dd63d8f49ae9438d94fa6d3985e58c0b
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# ef3ccc6779f44e4eb329f792574d284e
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# f81da48726a243f4990aafe8754e392a
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# ffa33fee63d94366858a10f20f33f9a8
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# faf4b5e1b3a540bea61e0e75ee71169f
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# f86dffc7ed6448c78d8885c287e7b3e3
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# f34e88c013a849afa6aa41b11d4e29f2
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# fcfbac89b3e84d6bb85b91575855e074
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 19503030c2ef4db4823deee000a41e7a
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 2bd76b7432cd4f428ca172540e77a897
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# fb91eccdd657478fa31c7258d6484f92
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# d72dcce45ce6467784f4bd47851290e0
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# a3af177093d044d3babe4ed4bdd16b67
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 08964f8051dd421cb911d532c499317b
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 1e67d39fe78749269f3ddfe59b064a07
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 41f8278e95b3454fa17f630f193b0b46
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 9e269d0ffb6e4d41b2cb0fda78f57b00
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 0a94b5c8a4354f8daadc5ba4c57df25a
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 4e575bae8b1a4974b8934a59fe6e6329
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# fa922e1ee99048aeac449d483dac02ad
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 274cf413d75d4745a74d1dd6038889df
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# ab235616fb634b799c7027dfea731677
# fe2c6190616646d9b798eced6c12a9c5
# 5e5e8ddf3f0340769e8ef563005c064d
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# c64f1669039a498b9568855ef0e89ee7
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 20898cba2cb14f3cafad8c406dbe6df9
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 8f0509f03dea49cf92c897f4131970cf
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 4767ca14ecb042028a342e5fab90d3bd
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# f38cf106a4c3478b82eea9408b1ffb78
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 4ae61376fa8b4be5a4e1b5dbc5603b13
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 3ba4c462135d46ebaad814a3ceafc614
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 468199162d4f4ccaa241b69ec5c9e19a
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 3507b5b0d32142959ef434f4cc45b07b
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 354313a39d2440c8a7fe50e7aac15d99
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 907079376b1e4d18a8a57bb936fe2e02
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 9efff596bcd3441a8f97fc22647cfee5
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 647859ad0e0d434d9dd5fe5cb853ef6a
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 5ede23d5a07c4de487b99c9b8f44c95d
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 760bccabee244628a8c26c49a19e6723
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# e4baa877101747608415e3abd325c8cf
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 48ea7984a19a428a9ed9ae038681a16f
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 09916302a3be4abcbf1b6fbea4ac2167
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 2c980868803345048bfbfd94b3c25620
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# eb0cf0e72a91434a8d61e853dc24e793
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 9cc63bd973ba4131914a33cdf4ee8193
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 822690eecbfd4014ace070fdebeadd49
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# ddba2d88994f44d8bc3519aff235ad10
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 046404b427ec40bc957f537b61c4f4e2
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 3f08ce031c0c489c8e911bf360f27b49
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# af8c9d17a6434bf494f10758a20d0b15
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# f7c69c185ce94e5d92aeff25ea2c1ff5
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# ea5f845adaf344978d7df5b8ffd3041d
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# e41214f591cc40d18ab7d6bf9bb00cf3
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# fbcdbad96244489ab30fd927d40b1a07
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# d257ebc1e39b4b46a130da58dd67246c
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# e3f8296503db4d8991b0fa8f9dd414c8
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# a073349615524665b5055283bc0c558b
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 3a0a8df1f28d432cb34001b0b2144f9a
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 2ff6e29f638b47f682f5e1b374533cb3
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 7eb17a5660b843018b2f8a72260753ff
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 0aad15033ff84c51b961bfefef2bae0b
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# e0d368c7ef104aefb40e2a6670460469
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# ee967144a3374ceba3b301877b844935
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 5366c4627ac544149bc52b62f21d50d4
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 589c5288f94743288f0b01327f1f711e
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 61954f9ea9de4b8fb842b0fbcfb93863
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 3cda76c051ce4fe0a0040526fff21d29
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 333b4086f1b24793b24aadfc64b1853a
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 1bce4deb4067402a935a9c8b473bd4c4
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 2828ad8ff30046af93b01042ce4cd564
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# b539b3cd22444e0490df6b90c197c9cd
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 19334bcffcae46829d3b5169fc3abdef
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 7636b88ec62643b5aa000352b2f55cc4
# bc8b56e8093d4105884ad736af59baf8
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 04a4311cf1e04f76962e47e2e496131b
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# c4a0e931b21c486cb757f371affc7cc2
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# b9f44e2e161f4f9fbbe3fb060674b505
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 33394fc914ad4faea4337fd28c149477
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 7b13f0d06f4e45838e52f746c9c568c1
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 1b1811e83a594109b11ead1c14ad97c2
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# c6c98b2d445948a384ed3eec3b8af21e
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 4038ccd56b1d4248814f3fc1cb539290
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# a267ee0a639644b9b86294494320033f
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 1c2d114dc61243b18bae69b906bdee7c
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 33c3b1d404f84d9881ff5bf8ca1c2906
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 8ddfafed8481402c87399a0445a2c187
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 438ef24f34794354aa8019b5476486f8
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 54c1db5461ea47ff9189b75f5e1d675e
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# f6ffd19b22e74ccbba26277b71e4bc87
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# c7a1da0da3b546f19628199e02d62e29
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 157d82cf6b354f6394387876fc20cec7
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# bca42869d97e4ae1ad0e5b383154df75
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 420689c61af84374ad1c6f1993fad5b1
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 4dc54645602243069392aab2008f81f1
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# d7569bc59c3c48cbb0d7dccbddc18716
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 828e9a0865224cf180d354a2d9d76327
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 58a482e2f9e941898c7ee79ee9bcd343
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 204b37b24d5740ecae8087df0eb579e6
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 4f2764b516eb4370abebb7c9a633e78f
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# dd95b1efb4674c88b41e08c11b26f86d
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# cad7223365f64030a7f82dac5b0053ce
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# f76561a693f8488aa85586940d6ac48d
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 687ae99a3a1d47cf986e53f3c13e15bc
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 4030ea534a8948a8984b93897fc4b3d2
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 46c63299c40048a183d766e10bb41652
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# bc333cf4ec0a43dc9dbc10e68dc6e0cb
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# ca64758026e84a308af4ddff8e17ae87
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# ab46ae37a8664498add75e37fab883ca
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 8309733292864a19b64bb16a59235094
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

