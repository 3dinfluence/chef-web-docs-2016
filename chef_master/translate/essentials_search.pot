# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-22 15:09\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 7c5611ecdc5c42968b502ca868e95de4
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 77022488f155441c83755979101523f2
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# a951e8a387a1470082d6bd7601e1178b
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# cabee3e25d1b4752a37bfe8c474d9b23
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# b43346702fe242dab9dbadaef2efa502
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 0071b3f124f54349a7547d2e8c824275
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# db5096db9aa541b8b3aff23e221f5926
# c7dbda895f434d1ba710326b6eebaa81
# 8dff9a2005a34de9b1ac249f7fc613a7
# f1382107f0fa4cf88fdc25fc9752ed93
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 8e3233f125174aeb98c287d485e0a323
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# c282edc7227a442085bbeabdd91d522f
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 4c9c820d27384e7aaee9ec67d71297c8
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 81b133e7dae24366aa5ea9beb13b3059
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# d52f3779141d403fb2a655c0787226ac
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 81613d11f4fd420c860bb592a20c62a1
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 42397e292d1040609081c1a19e6ac024
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 9870696edef14ddaa81ebdc28fbe6742
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# f10c831db79c4d37b019f73648c8dc00
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 07baf322cd2b468dbca43090e14a6cff
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 3136cb260ad943709bb879f185d80404
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# be07e69163c9470c9f702f493a8f38d6
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# 877dea98a5ca4bd39f40c2d20a7b2395
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 86e4aa5825134899bfd3fa214f8770eb
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 155225127eee4488b72fe92a5e8043ad
# aa4634cfc5e84c3798b1c9dbfd9833de
# ddbadab246a5424382585f2ad8a4cab8
# 54233edafbb2495195f376291ab2f4d7
# 9bf84eeab12f4420a8f9148f726887c8
# 421e3b87e8b7469183645da844137010
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# db7c4914908b41549b2c74de22af4a6b
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 6517669012e04973b6181e41e85b21fa
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# d30095d21c444c61b20868f768081f4a
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 71f87c5b28aa423988beb1fdd2404781
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 138bd5ce2c0245feb345b855c2fd234c
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 48cdbefe156d42fa8365743be10760b1
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 6c0e2767144442baae1b28db1117a53b
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 59726b83fa86424bb760af1ac010892d
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# c57caa2351ba42b9b5cbbbaf72fd908a
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 57a05648156845e3bb746f6d27cb8b3f
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# fef2581f51eb42b9ad6db2dd05b3e9b8
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# e5c2bac3f19c4ca3bd9abcc921babfbc
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# e3690a096f9343218dc85c008ff16a1b
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# c4a2f2b2342949f28ac7c950559e3d37
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 1c7516c5ec6b423eb0c25e7e9f36a826
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# f5a51228f6af475aa61a45dbc90c5576
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 77e7a040a153443ead447ef72810843f
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 0bf318e1ee71498d9d7c5e54944b053b
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# eb5dc6d32bc5419bbf2e354ca9ef875b
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# d6fe7780b6934f71bd60db153a324e88
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# a271a3a566d64ac9902c9e3730b4f646
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# db38a5e07a7f4798a9732c2f329d0934
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 26668de6348444d98d9f5258e8cfff7a
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# 8d632728eaec40f6b2e66114a0ae998c
# d8b0fcddb94641748361b6a4c8f3d7cc
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 7125fd4f93e1461fa5142fbcaa52c7c6
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 5071659e15f34497bf0da6f24e1b0560
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# e1f1cd6b92354d66847b4306467dd429
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 39ebb4bb46e64e288a883e8f0e413c6e
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# c6aec44718cf4b839dfaf9a29918b4fc
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# d5e8bc85263a456297656dad2231dc87
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# 31953bb775d64111a1d49b1e3e672f1c
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 0f95fe28ddaf4f5c87e17d31fc531a2e
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 2ce83394ef36483cbc35f61695520a81
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 439733a287f249998336a43be0c78d4a
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 114379602d3844f091c77727df3e76df
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 1af7d99ba41145a78a017d7baa581895
# 167218967448421b8dfb57d74f221845
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 12806359de714635bc92dc8408cf4356
# d95bfbec53ff4438adaeae128d3e560c
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# fc5c74e6e4fc40e09861372fede64916
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 4c37e2f05ece4e789b17f8467e556cb7
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# bff292224e0d4bb791648589cd9a7cc8
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 552efe7b6ec04dd5b647f841d5125233
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 577ca021267c4d1c806cad8086214229
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 94263d3244a9400b84f6ddc0151ee8a9
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 0c580eba8c924523a95ffa20d123de72
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# ee091d75ec9e44ca8ad3626a2f021690
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 542047b4d09e4294a4e708f15618cd1d
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 2ae196a8754a40f1987ea66077abb76c
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 5e8c5915e07e4212a88314a801e33b04
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 457e7efdbd08484ba8351cdc88f57201
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# c45421d6de58418f986f4ff6a2bee60e
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 2d488bba5702424db9798e72a20fc377
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# 58ca80651b1f49128b8140eea20d0661
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# eff8ffc8b8f745e8a78d620b8e052d3c
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 7037076d58f6474c9d602e700dc6bdb0
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 21361cfaf8c649379f6a04ebf21ace0a
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# d4dffcdc59bd42538d4bc35ef75a58f1
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 34e160cda9de46799eb8e598a9efb349
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# a84eee129c6f42c98cc75c68fda9e6dd
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 0d9668d9d5d64f458be9c1053210114e
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 3a531dc025524cc5acde19b66bce848d
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 09a8e8baea9a4325a4bac7661ed2303f
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 8fc296c8f94745d39a6f7c0f5dbbf907
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 64307b6a1a294d149ec806f0ced12730
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# b2e0bd710b9a4b51a524e6771be41a10
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# cd0e8fbbf12b4b3db361f64abf7c21d2
# de4dd3a4e5ba4f3789e06349d8fb14d5
# d0084ef83d94417facbf61df74e204e3
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 2045dfd481984b4cb06c368b1840e1a1
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# c1ef0c93ed874978a0bd4b1a96b6956d
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# eca9d018f06842aa96fc99c356e598a2
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# d00ee5373c234246809d59394bf4ad0a
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 2ce70ca4a7e74de1b29fff88677ae46c
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 1cb24979d2e44031844e81f1c7918cd2
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 455f290204ed4613b3a89f3159cdb6a8
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 0aca894a813448878a817a8538a5d806
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 344d2478675b499493278bb3d4c12393
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# c28e99b358bf4aa383f22bc4d369ab94
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 0ad19f222aa64b6589249dc71ae9eb68
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 973cd66372a842bca9e3112b7f0e449e
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 4713b0618cea46b595750f42baa75623
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 0f90ba83b0374af981a9ab1f5ac84717
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 0c2f3a3499a542e5b2c2afb1d1488c12
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 9b904e48d97d45aa887d1a4f4e603475
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 94d295005aa7483e9bdc74ba276c7b46
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 6dd504b5eb2046648fa36edda4d128ec
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# a8ff7f081ea04c269bc9353a749c1a60
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 92b3c00d307f4aecb1ca4c35ab48249f
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 4f46f124376f4a02a17fd8a93f2a9cf0
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# a0d542a8336c416387e82d34d144e368
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# e814b1de48874adea39a4e624a5a70fd
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 9a4c74389d8b4d2c8e024ef7bab15bf4
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 3631debab4ba4735b0c7fd48fa80ce60
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# ad033cd5a38044e9a53793af8a912992
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 113803f887054a69a57220adb3e8262f
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 969c3d66352b42349e35376e728f82e6
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# db4e040bfc274f4eb45aa15fb82a5d22
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 2e0fc8bee997468caabcf2a631cd32b6
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# ac081174073247ca84d4d641cd5bcf4e
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# c43cab52111f4a3aa1f854c73e3376d7
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# 86aa540bc1ae433281c0a0ba2a556529
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# d273e350f303473b81060844021ce47c
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 31d22fc74a52484bae5b088e45926f54
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 2a12c7d92cdd42928b9e6b0c7e70de36
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 29fe5882bdd94c62b17c9c304d1b70cd
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# 628805fb58a441a39a2a7488c3d29f40
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# bd2840e54ddb4708acec8b0690f54e80
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 3eb7ac89968a4779b3ce0caeb974519a
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# c25b6aefbd9240cb8ea2cff02ebc907d
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# e0a58bd60bba4e2db2a3086752a1ac6d
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 5b4d96129aca45e8a3a66b69555bda35
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 60db744b7b0d43e5b3a6756caee58b5e
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 6db26a22b9a34656b88b9479e92d5161
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 3d4dc495c07b4b569287d9633f85422c
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 03b79f2cce9144a1b88d9525ea85da76
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 07a6acc75940465dbd63944aa41a0988
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# bebd175f4cfe4261b00f1f372447f438
# 231b998d170b442e9d0d41c17ad0e77c
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# e10bb82ea61647d4ab3830145c397379
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# d9fd1e803693472881a46e016297aff1
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 5e965538c4da4451ac3ee0e36e9f68d2
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# e6e7e3c62fee4b589f088c8584c5f89c
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 4736da13ac244b16959a1060bbb8005e
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# a8c60eafcdd04e12b3ca9c8d176a3b1f
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 245fe81ccabe4e229b2d0e95076119ad
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# a6655c94ae454036b2da5c4688d5da2e
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 3356bef391084f1f8330d5c83ce2e06d
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# c7ebd051a78f4019bd1e96e0a920fc40
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 1a825d5553aa40a3ad5dac4362827a5a
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 5a423e9b36cc47b3b7111b009128c5a1
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 027a512b94f7444f846312a933beb3f5
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# a16e06d2b27a4e59a9b56562b7aa100b
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# 255bb1bdd44e4c5f9dc75a11416fed5e
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# e7818340898a45ce90b82bed50376710
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# ccc0eac54f414e43863b7b94425f1116
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 55c04dffc47248a4858a2d2fc86d8b6f
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# c2ce1052463541fb9dffd59b39a1ae73
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 052ae2474e9340cb9f23c80a3cd51ba4
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# 531a33bd1f1e4f6090d7ff91b7c1f845
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# b407b182651b47dcaa7301c1d02898ff
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# e479fb3b1c894252bd9e21156fe3f8c8
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# e579590a2be940e589b3bf51d3708e21
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# 2a989148d922449c9fa54c587425daec
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 2fb5d0442c814705873e330449eeb325
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# b456810844db430cb249ee6b7930665f
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# c0b4528f26534c959faed47d343b2269
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 5c33fdc8cceb42ce90f9409d6ce4cf83
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 0d645d55228040e19c7c1d1341c5d5a9
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 388922f5b72a42aeae39e504cf5f49a7
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 89c7491fb82b49bf992f0b2651e8001e
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 639cf92124c24cd185c170a870a80227
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 621d25eaa0774ef5949879e479cf1539
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 823c39014f78467e9c6dfce6cc28eb59
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

