# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-14 14:12-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 10bfe30eb9ba460e8a811e0733e41e12
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# d0adb920ab0841d8b1a5a5b2e1fc228d
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 71ee89f4033442829d0debd7db03c90d
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 81b60c8955a3487a98c2817907843390
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 66ecf7f4d75f4ee2b7238c9f1cdad20b
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 41dc7f6d6c5a4923af01cf6dde7b6ff7
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:22
# 39e6804a0a1c4a9ca39ae537aa800f29
# 8f38cab84a8f4999b246efeed85dd91e
# fc4965a0111c40d294811af93bdffaf7
# 8a3051ca8c7345419ee7eeefd88ae63a
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 400e767f9d2241ccb4342a8915b79ea6
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 95410b6c225541c09bdb3f831bbb3bc0
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 310457e53edf455fbce3f7ba386f82b7
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 9a2608ce387d4852880d39bd8963b31a
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 0e76c4f1f82949cfa79cfe372973a0d1
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 4a50fee7b39b4f6488659f892b20d819
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# c4355d5c4a524baf9163bc85502610c0
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# f0cf54b6423a47db94268ce4a7f059bc
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 34b6c6a0909b413f9006403eef8f9dbc
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# c06d64d1533b49e5b8438730d8a6562f
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 9656a9e7162f40879075ce2219f99401
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 34fa2505bde34261b14159bf71f6b887
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# ee534a49e31448cfbb6d99d06d58a9de
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 1dcdb18fb9c549b28522648e0ded0e0f
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 975c5c5c48054e28962ac7f68d117ce8
# d7565a57c1ab4d6490e52726d739f4b7
# 555866f36fdb4fa5a7d8aeacf3a98164
# e04dbb05dea64422a5484ec8be1a91a7
# 70d459e928594a4ab4f8844b94a497c5
# 60ed6255c420491b835332fc5ca04400
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# c147adb7a3f74cd49cde22ee3e55d38b
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 98ddc25f450347658351bb8445979f0d
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# cca32b448aca43e7accd96918dae508c
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# 7226fd3cc4af4214bffd5a1b95dca050
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 6c66d173053d4add9a965a6387930429
# 2046e5812af541b7b4ca218457ac187b
# 0cbb7df99b704278b16a83a6ca6a1d08
# 55fb7c3885654f66847fe1c3e67fea6d
# 8aaf2ae9ebb742bea49cfaedca4761ea
# baaf804c5eef4f4c9f566ba27beae507
msgid "or:"
msgstr ""

#: ../source/essentials_search.rst:34
# 190844a382eb4c05a743c9486d7ce302
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 7e34eac7a57147318b3dc923e266a034
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# a1011ad5ce484455ba257e22a1e89998
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# 676f879ad11d4971baadc0188ad4e5f9
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:42
# d5e3faa17bfa407ea1efd1a65496a265
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 702916fc56ab4a86828e05f881bb16db
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:46
# 43dc93770e76458db2d62c01796f13ea
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# e0aa8eedc98348778c1b370d125fa138
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:50
# f3d9727314fa42668d87b155e765f89e
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 952929939c094a218da88891c68fbc1d
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:54
# 5805d2ba9dfe48b99da1c0cc55afdb96
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 2e261135f0824e568111328d4b86ed9a
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# b06f4873616a4e8dbe2dccce46240315
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:59
# ab40b3f162d44f7c9e7b057a7f8f8489
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# eb531409b69340e6932e29adc69ffcf6
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 5783702ad9ff4369836fb6efee377a1a
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:62
# 499e875d281b44d2bb552fbb3cee8028
msgid "Search queries may not contain newlines."
msgstr ""

#: ../source/essentials_search.rst:65
# 4d3f186ed24b4de6b0d721e45c8da8a6
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# ec63525c9ca248669340933b67cf5e45
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 2c41943638744ca4b70659616973f272
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# ee62fcac5b324a239427131a6f0f03c8
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 17c939dc408149f19daaba337c4b8a09
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:69
#: ../source/essentials_search.rst:81
# 36b1071bf10740e3874c3861b76a66c2
# 08adff46f93949fdba0dafe74b4dc626
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# a877e5c06ef9413dae8f47450bfdde69
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 93605542b03a4ab1afe24573fcacab32
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 3fe89f8bfa3d45d9bf45d022d572dedf
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 6a10b6ec244e4156a76a0e2ae501cc2b
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:73
# 83081ac501e64f86a8f3a41aa1d7d21e
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# d0b4611020bf4ee4b15bb709e426c7d0
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:77
# d1dc7d8ee3a74a74b4b36c5afa22f47c
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# fed27b2edf0748b5b5dcc34271e5959c
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# f1aa6f383f4a4c46ab73e3ec1709f3bb
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 6bd6bf04c8494c20bfb50255eea99897
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# cb2d42d806b74395b32f9644c37f0fa9
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# f3631f6f15d945ed953160e728b87f32
# d8ed7d9279c74d1cbd1b53b5121bba63
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 086cd749ba3546b5a4de50c88dbeadeb
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 3af90b8a8af6483dba99eb3e104d7305
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 6244d413da8b43269d2d57163d7e6820
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 0aadbeb8c6f24b5abf1a3168b4ceead8
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# b9309e3028ad4ecdab03562238b4d19c
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# e500629a53d148c88b2731a7bad9d832
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# e2f2d87995984b2d845ad64d0cfac2bb
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 60fdadb3e6934ffa9945da0ce7268f6b
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 0b80bec6fc2b4d378b9459dad6ed9a12
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 03624d08b57a45eab060a14eef797b6c
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 8bb3920de5c74d9781139b7f35460de7
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 880e51dec6ac437080f0b142bed56527
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:93
# 9b1258ee0aba47f29971e6cb43f46a29
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 10accbff110d4f3791e1b313e5f71933
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:97
# 6074d896c3ac429dae7af9477f87d486
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 36df96ac1e6d4fb4aa32fd90bd529bfa
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 7315978a1b1f479896fbcc6b43e046c3
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 95d5c207fc9c4218a72ae27662d1073e
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 746feff3fa0547e4b25c8fb466a66b22
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# b807f5aeb8734a85a6be7390a4b451f9
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:105
# 2ed2e5fa37e6488f9b1ab3b0998502ce
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 56303ee2f440481d951c4771fa3b55be
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 5fc937a98c8a45cd9dfdffe012b1e8e5
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 2b20e5fa5de6406f86d6221ab099022f
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 2752f08a062449729bf95545cdb0af81
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 40d721d3506548cb8ff150ec172bd164
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 93e32160b4244bfd995ff937c410843b
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 7421c69a0eeb47a1ba09dafc3673062d
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:113
# aac050410aaa436281cf7b3192e94d77
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 1882778e1b17447ea9fc1634fbe54cf1
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# e7ba6247eeff498e8a252a76fa2d3a46
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 3df607ef27594e8c87c84da6a6a7e349
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 499ca29f0d5840b28bcf289b9312ce24
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 4d12a27ff5e741ce9e08827a24fcb8cc
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 004cbbaeb38a40cbb3327636ba3d8630
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# a4f56872696f42e1827f06dee841cf16
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 986649a660be4018b742cc4ae8f8a9e9
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:121
# 7158d2863ad3483da31d2dfa46547364
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 6a23b66d77ae473087aa53bad51cc33d
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# b2d8ace60af2452589f73f2e2918f4c1
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 4fa5a5195cdd4c778b53c89fc9de69cd
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# bd1fccee8434448a93d3f684df4c32f9
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:127
# efc841b2608f4f12a71ac686a004d1bb
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 38ff5fb4fc2042e6b64ad97ac76292f1
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 3b1ded151424428d96f7ecb61b80667a
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# e469160448624f4d99167281891c5582
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 89e396ba3d3948afa83e48d5b6c46e7b
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# db47882267a341f5b59fa65950336db3
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 10db96e617824771b794ad095170cb06
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 4835e664e8d043a78a8f80d828607085
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 0b28a6bbb4aa4f28ba729dca869bb119
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# aafffc23608044c4a2755315de1b7c39
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:22
# d56ace6ee844428da7671e695e8efddf
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:30
# d9673ba199cd47579c34349f49d24364
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/essentials_search.rst:131
# 3757ab3c282c47f78eb08f3d712adab9
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 5c06778d5d3141c4ab96707ff1578c26
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 6eeb16cc91d9432392a402989c7d6620
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/essentials_search.rst:139
# 27ac2982aad54157bbb50646a78464d5
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 53a3af9d9d284a49bc9545c4fb3c1c94
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:143
# 61d2395aa75a438e9977aef27f8ff8d4
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 47b9ddee25074e81a1864839029f929a
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:147
# 492a8e1c55f94009ac5e49869a062f52
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# fbdb5cc6c6454c0cbbd29f20cd8e6545
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# b616382268d64cefa35f5f7243dce250
msgid "For example:"
msgstr ""

#: ../source/essentials_search.rst:151
# 9fd9075be6f644708ed20235ae4d3f03
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 3ed6a37f62964a20a23ed2b0331551a7
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/essentials_search.rst:155
# 3721e61febaf47a7b1e0d35420972367
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 00f980e89f554b97b221cd6a89002c66
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 7a0bcc8c327c47bd950838606422d9e6
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# ad5d1b6a0c63498797b4c2b3a567772c
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 926526930fac42dda37de32c9f1f1323
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# da93afd59140452bbfb17159f50c0212
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 7259096b3b214ce99392e91d1477d4c8
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 801f7d17207c4229b1b219bb105bbd14
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# ce13eba46ead4dd48ae4ba442f027c08
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 2d43341b585341a9ad316a4c6c11326d
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 1e41ec17807e4cef9ccb97386d532021
msgid "To search a top-level run list for a role named ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 6cb752eb85e44c79922c9000b517d11b
# 4b3e6854d5b543f689f77c91427f1028
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 40b72920e23a4ee8911e1b41feb2e369
msgid "To search an expanded run list for all nodes with the role ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:163
# 213633c166c54f61abb2b9d269edd382
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 55fbfb26b96340aeb6d4cbc722a7a024
msgid "A node can be searched from a recipe by using the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 5fce653ae4e84db6a9111b7059546718
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 6d263ccf36e34085be2c35ca32f0bac5
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:15
# 7e2873ccc126490db16e8390ac560ce6
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 085feddbcea747c1a254ea903b8cd7da
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# 65196a2d23af45a3a5cbc6a94045de5e
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:24
# 6eee76ac1bee4021afe858fd2accad10
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:28
# b6f57ecfbf124a39926d680708eace16
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:32
# ab7eba911aa64375bca0de4c1d5d7d9a
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:33
# 493c4da8f3c74db9928c9dfa04c24faf
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# 9d60da0716e74bd1b86b59dd07288791
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:39
# 63f2a40b9ce04f26ac9c2f1cafcece46
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:"
msgstr ""

#: ../source/essentials_search.rst:167
# d71f4231d84640bbba8ae7d69bbb5a35
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 994d6ce3bd664c20977219fe6d9eed38
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 691b1317514b46469df07421f399bf38
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 6081c602fe0346faa992120de925b748
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 86a8d5a2d6e3457bb22ce6108947c2b6
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 3d15d04712e84c1c8414125a2097d1e7
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:173
# faf82e9cd9ef4d1ea6038b3b9e901d96
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# a058100fdae044a38af7349675bbf647
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 599aed8aada049daae4dff071d540515
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 65100ef66097470fae8f50c0d366ae87
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:179
# f37aae2b0e8246b291f8c740b7d4f26c
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 8156400f5d6947e5955f5a463bb03852
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# f4c2a78972874ea996da47a3c7e9e33e
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 08eac512cd874b0ea5ae613e9db2c6f2
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 8fa1d9c909094d70bf9252fc807662b9
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 0ad0c78ca0b649c2a84648960b944f12
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 8b70d2c9aee945c1919fde08cd226ec7
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 602a87f4bb4a4c038dd52e754c74561b
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# d14e7122bff24ad3aa202e25313998f5
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# b577baba249f4804ba1d1c24219e47b6
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 8b31c788b1da4824aef19e7e16a6bbbe
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

