# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-31 12:18\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# aed4b9e4965a47ed8876c3bcb749476e
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# cfaf751fd98f44afb2f3983d9b92f6ef
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# ca1a3886aad54e61aaad0b2d4bafa189
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 5d00cbb6914541759f979c860d89ded5
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# f0b9d530353946c08176f92ddcba9d85
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 2648df30ddc54eb4ba696226a3bf66dc
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# d94bc5e60c364d0b84f32d6ad3123dc0
# 951b76aae76c4fdbb125b31a76fcf509
# c5a64a63f70c468aa7c5f2b45620adc6
# 81908491c56d4169b7b664f3d0b8903b
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# f93a81476e9543ee924ac85406f4eb4f
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 34230c0e12884a78ba306238fa3f2a55
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 88823a6511b94aceb1c0c63e049550fe
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 43a1080f207846e094b30aac90b4d0cb
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 9b37dd1a2a2b47b2ae211e01361431db
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 1012dfd011724cd5a355b6b81c69d7b0
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# a1233566b4e649e99f50d05d8144fc48
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# b80710e06f8643d4b364e0d0af21db06
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 751865f33d2f43fa8d96e49568f37788
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 711c8bcd78444c129d4e6ae5ff6010e7
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# d1e552836cc84f738b54d96a5029325a
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 36deeb4c4f124172b0b07f2ac04ce5e4
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 36587201d040419baf35df4c305b8c34
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 64a7cf179be0480dba2860937a004bcd
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 16fb361bc5884d628527bf7c077d0352
# 5d6e97d046634418894a433eaae9331b
# 0a73a8baec464289b697f5ae1b2d7e11
# 13cfe4b5bd91424d976a8cf3b606899a
# d83422d6ad4f450094e15238f3f46ccb
# 1b4221f0dfea4de79c0cf81f7a7ab2a9
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 773b80030e714c04baf5f1c6a4613dc7
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 7ce3642f70134c6f964744978fb7fb51
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# c9d4069484224b649fe53c7f3532c36b
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# d640333191ad40a2b71d4c05ae94b14b
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# b0706f5d3bf34ac1abafc8c50133eca8
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 1b2842da5cc141f1911fd3d041eef1f3
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 17d84beb946744a3bb809720ba66b066
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 7866da6d5dbe43e78672b92209358219
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 9028112d811b493ba191d358296baedf
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# bffcbddd94d74a348ff905824f37cfd2
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 4015a749356a44e28b6264acd4ed178a
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 998a04b4768f4c4f9c44bb7c8f30ad66
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 0b93bb5595cc4e4aa26d95d7b639fcf6
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 9b5cbbd472924fb59bb70f04841b50ea
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# dcd46b36911642ff8063afe8f22ac392
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 08e7cb90341c4144b3ec42629520adb3
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 74fc216c6fb4496d9c41873376dfc2b3
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# a14ed106a08044219b9f82504738f75b
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 0fb7d42d3a7b4ae7947dbcf20d4bd622
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 012caa1eed864da0b6d56f878e7a1038
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# c5a458a0ff4d4e9d94e561fe480b6604
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 259dfc13de69493daedb460e6b56d97f
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 55dd5f50b6dc4a6888222bb57a0cf8c1
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 770328f12261470d949495ef69f2d9ed
# fec866b7368545b1b25b54101fde10ee
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# fc26b319c4324b69a9b37e6552887a78
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# dcd3f4654333484d844694c8e714988c
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 538e4433300c4824a786adcc9f44afcb
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# cffb09b3d9d6466a9d3b0c6ca53d2a40
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# be190cf8cbdd49be949448f27af68872
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 82e4c40171d249bfbdb79847bc44f33f
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# e8341ddd38b2440692fd60806fa98b68
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# e034948068a84c0699eca79b59c9bd0f
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 02fbfdc9d14649a9a9557ba3f61fdfb3
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 9b00cc5ce5f74c8ba28da664d3bbf1c9
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 04c08e73f7784d06ae0ea5051bf406fe
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 034340c0b14a4b31a518a3d9982d3b7e
# e4098f3762574d4eaab55efa62edb356
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 2f67e1f4fc7f4c24858f5f12f047f902
# 1b6f27f3ed7840ee8412113b09f248fa
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 8e832b1c3e5b49f8a22cd65b368ad41a
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 914eaf110b294f2fb5121a2302a613a8
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 77fedf3ae21749319addc34abf1dfd7e
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 18884ab9c0a44d0ea4a1f5a8f1bbe8d1
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 94ee4df5a9a24aa88fc6e67bf4bbad80
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 8d1b6cd0ce8e4aec9b94a961ca2b0282
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 3a8abb019fdb41f9ab1fbb93ef458958
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# f07b0ec72b0c414bb6a9fb79217b8846
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 4e73864e4ff14bf3a2f05049ed64856f
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 6b1f822ca245495e933d470dbec67da5
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# a9b22c10252d4faaa7c89d48c542585c
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# b7803ea9b95e4d5eb21bda85d9a8d6d4
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 347af130e53c4ced86fe003be0e5230c
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 10c01f1d123d4b8c9e2b798c99466eeb
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 951968ca7d214708a193eed440311631
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# d82e4584e7984973a23ef90b6ae279d1
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 9e9690ee6a1e4255a89e82e88752f12e
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 4ab7640d96cb4f06885ed0d60bd1dbd3
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 24bb89160df84265a54e129fef78f221
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 9a388da0e1aa4195a601a86d38e77552
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# d19cc808b1d14384a81eff80c630e1d3
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 2d59a09c16304e309d14350405d140fe
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# bcac8f9af01f4b60a3a2f8e11a4e3b8f
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 6651ec17b8d4440ebbbb40588cf86f16
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# e8184ed381ae42b4a04f50304516634f
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 31d9faae26b24f9eb03dcbd2cf283976
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# bf9cbce577274fb5a0d8eba8f7db69e1
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 1071e95f7e6946c88811b97469389e14
# 41d212ae89694be1b8ffa49b98b78b88
# f978f919e5154e329d8a47847942da4b
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# b44c5993ce2e4b43b92e776823ce855f
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# d430acdf9be241cc88f322d7449beb58
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# cea06626234c49a3a17e2ee28c45fabc
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# c6df94186a3540a6be89b8608be71f7f
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 158f687569444522b98275c32485b2b3
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# df8321246f764347ad251352dbd1c4de
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# b2dd31e381c545699208198c9ed10e5c
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# a8b65aff80634044988541e839d1c234
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# a98f70fe11f44cf0961c1d6da2270634
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 534869f3c7214ff2af1220c6c29c3199
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 0c265e57919a4e84b47d7ad38fa30ad6
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# ddf6fe289dac40f1b7571e743de81935
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# e0c3eb6eef6a467fa5d9d6ed90f01463
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 3b522d8b7b2e4db991372269066ffa1d
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 954bce737a524f1ba0d6538881fdab3f
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 66fb32491e384898b5dbc92f4b38c86a
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# b500f413e94545fabff8d1b32ba90aec
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# a90ed7abc00f431d95330803d053f769
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# f4353c82ee1946e792c5b2f825f04d00
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# f73c86b34f5b4225a3d4d09d606682e7
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 7b5809de10f74507bb2b49020c5d446e
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 8a9ec524958f4c71b42575613776af92
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 45b86889681d4cbab865b3f8875d0e34
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 0f835f891b824137a01853b56222f0b0
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 52440cb9757845a6aa9875a014992da1
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# 6f26c15233a1471ea4ddc674293a7eb2
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# d65dc3c4623f455193943079844f0e88
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# e7cf1a2196cf4dc8a99b3fd0fd141f3a
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# c1cc3987aec047fbbd6d1b029c833617
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# cc0ea2b202834442ada83211f989a5f2
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 9535cdd4274344a1b55f304cd29cd6d3
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# d8ac4316a26c4dd8884020f311a760be
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 7253d503fa254f0986d88078f2e518ed
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# cb81627bff94411a99a1c231748be83b
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 45d95fc141534bb8a47811f288e5f283
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 88543a7817414bd78b535a0205b08699
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 34cd0626b5e04448b0c2d46a5c221c33
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# d6b236f9ba9647b2ab7521a618618cbb
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# b099812cd4c840c1870c498592418c9f
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 0cf91cdb34d4418cb7181502ed067b38
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 18a6d027095b4fda9b90424bff0dd8a7
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# cef581f14d3d41f893a41feec636a268
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 873da563dfd3443c93e168cc05f6db67
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# cb071841218949b0915ab3f145942af1
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# cbed640c9ce944dfad1ea50468e4a58e
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 04ed91ced0cb43798c75f552f1eaff8a
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 829d0c2d52c64b93a93eaeeaeb3f5646
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 7286a06e59e148a191607475d8e7d91e
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 99aaa503945f4ff7a43d01f69f4ba59d
# 5d811cac4a8d4852af575443e891fe77
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# b05c1e5e64804ca9b1bbb44ca9c7eaeb
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# a8d2629f2fc641a78989b4fd45eb0123
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# a25d2d444d37485cbfad151b65901def
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 7ba4496d99644fcd8c4370117b799124
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# bfedeb326e9f44d4a6d2d88c8853e6c0
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 1c75fcdb79dc4afab7751078e18baee7
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 0819602223c54303a06b16b1ed775af5
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# e6a66ab1b8d048beb057fe3501144f6f
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 083b9c31a3734b57a336fe57d906d260
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 177fd16343284dec8cb4188856c61fab
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 3c5fdbb7d10d47b786e6de7d50394906
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# d18c6357151541f0b3615658203c8bbc
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 64b4398375f04269b7d7795653f9ad10
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 2665cedae33a496384cc1c002f65ec37
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# afbc2d22ca2646eabbd5dddf1c1f5e60
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 2a79b4c9f21246cc8c6eb75dd21e4791
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 7c61d4e6b7c34eaab2e5bcd3c8567070
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 5d167fc5f5f645f3bb03fae924a68e18
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# d407654dc97a407b9f7f6dfb31d8f7e4
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 44add68cba8541d9a1ee43a38c774a1f
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# a44c165f6d6d4123a1e7a702b3899624
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 01143c83a68648c39569cbf7973498ad
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 42a1a8a0522948f9b75f78db52ed52f3
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 5c49ccd207d14a7e901549af3bca54ad
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 21d9a7b4e3e1460a86320cc57a6e7315
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 7a7b83dd3d304b8494a51ca28549a28c
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# f96ee0ea853e438db25576a3815374cd
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 1ef8f28de3b9469482cfde1ecefcbbcb
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# f410394d53e7417598542d7e950bff36
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 28f9d1e6c32d434ab24cd285c2378c01
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# c0643a9256444c6f8a6debaaeaf780a4
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 186ac8dc1ee74e39a5f52b9649646d0f
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 5c1ee7fcbedd487bb37bfd5aa88b22f8
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 60a78b0eaa804372b32aae3ceb77a0f8
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# eac36fef290a4fc5ba1da45f524a6426
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

