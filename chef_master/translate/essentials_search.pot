# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-26 11:41\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 06aae44850a347b3b983f1f8e51d197f
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 6ad062d0991b49c4917278257cf5b23f
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# dc4f01cdb422431ebd70ffcef32f1074
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 7d4ab3bdd8aa419c9cadc2b74043b253
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# fe13af6a29e94021a791b3909e5677e0
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 5cf580b3cf054c0e890bde940fbe34d7
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# b8c4721df0d84757ac003c704c8637bb
# c32519e85aae462b9fa6c606bc5ce28f
# 1759ff00480945b5ba02677d976b839f
# 10e88a1a3f2f4cb3be30446443a69188
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# f91d8353921f4bf09e929f89983d6ece
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# d37edd079d9c416b9e709e228459436e
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 68e24572c7524d7a976199f2491523d4
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# f1827570d8614ed884135c10950d9819
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# a8930e3c7ab84960939893c96699e521
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 35ec6f8df9a04135971611ae6d3121ff
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 2621a50732e548a7b2865a6030ee4aec
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# e2bd491524424998aefb0adc6d81b909
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# b75715147d48403eb695d90109f28455
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# a7a07e7107b640f7ac926e0ffe7116c9
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# a06da5b7b5ca4d3e82058f7e242ecc1a
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# a77d2d355ef54fdda5de136dfa46fa69
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# ab85aa062d7740149e23d58c6a89f9fc
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 910e400413c44a9db0360f734dea6aec
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# d84e0885b7bf47b7a49c59c4605c64c2
# da364b2c6bc449eaa39eacb2f6f2b953
# 459643d78a2b4dd396d2d63b84ae89c7
# 34f1c181a98041dfba95d993bd22a0d5
# 8802cee13cc04e9391b120f2e0c705ec
# 3269be98917147fe9f5d9d53af3aca82
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# bb927003752e42cbadd7394d219606a9
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 8852852eb04546bbb71d885435fdb1ad
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 6761625ac2574a54a0f1ce58f1b3d55f
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# d9919ae6b4fe48e3ad05519dc4c4be4f
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 08364cf94b1a41dab9a57b49621ed796
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# ff4389ed10c0408e932b0b3b2a0b8006
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 82fb3f7bc0f748dbb3c0f525cb4df523
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 6e86c9eca8de4585b102997610afca28
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 833075612c1145729c37aad8b28383b5
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 3cf6f897fe7c49cf9d444767c5123212
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# f206abbf587648078c37c13d42013289
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# a136bded588745ae867f16c105ff5f39
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 50ada1f0f005473faba3293ee0b70179
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# ba357d568d134db39a90a6b65525c096
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# cbff8c583ec04b0497f2d47da5486b32
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 725e7e0b04774a329b817f0b27628181
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# faca7deaf4514f7fbb97a12efddcb1e8
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# cc14b3aa822e4a7aaac8800eb79b4034
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 0c97a8616bec4b71b56f5ea92bca7f68
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 7fdd9519817e437590b139aa2263f70f
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# f507de686dcf4da189c6c01c31b31b44
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 2cc88064dd9640e8aa8d3f591104eeae
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 75dcf16e9cf041c197b07586316a3c89
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 6aabce930fc24b95a67847b798edb323
# 67c1b7930802414c92e4024fba6eedb6
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 5ef1698cd5f24b98a8ac0fa449db8a10
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# e30aa8392a1747629bcf28589ffb4f48
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 114dab057b2048d1a8e6b40a97f6fdad
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 0e1bcd2704e5488a8cc0dbecc012ea47
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 7bb85c60b22544beb7e97186e27ef5c0
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# f1f4b8bc54f8445bb88e3bea5d06c618
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 6b077479b65c42ae9bfc1f098771344b
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 3d2510d1ede74276bf5f9c94bb38879e
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# ba9e19b08be94adcacee08aaba77e064
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 0112e566e9e9432eb96f882778c556f1
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 94be6e390c4649b7ba24af3c597400c0
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# ef5664c900b442f380f48d549ff68d61
# a6d666d039184aca8d5b2ab061ea8c20
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 953a9f90866f40abba44d5f414664bdd
# 539ee6fc4ce64aa5b26ef50bca70bbc2
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 76887f1eab184102a5b8a1262da15420
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 7d3efc9e753a46a98b61af60dd9b9d03
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# c7178766314c4d2eb237e5ad7afdeca8
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 5b71c16a20854ba682285dd8837f2962
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 68ed3c32708f4909ac4db9c165417bb3
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# a247f7c2ac994ce5960989e3d973d85e
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 4c8cd643d66e4fa7b7b88d7b5775e722
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 496e771873294ce4b656b16803506da2
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 80e4a39efd9b4042a10c4b3dac0f2a50
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# c35c7dd37fb34499a8b524ebf7296215
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 99f86881faca403d9c09b8702d5a1d9f
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 22b5d7cc17cf453299d3cb1fcea883b5
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 65a2150ad08948f3aa494e0262f160c5
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# e199b8dc97db4b82890b40e930881329
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# ea326cd75a0144808b78c227c5968332
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# c68a384421494362a264dc46db55bbc8
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# c31180f444514a8db35cea6a73b5be1f
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 0501e3d221e948988cd80a268ed1f9a9
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 9a061877b7f442d398829ece04df3544
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# cd20a532303246abb94a7474bdafd338
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# d7492f829b2c4941948156d6c366e0ae
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 91ff3775c95141dd96bc4d2c066f4278
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 519d4d2af2c44a7bb0e1d06dc75cc3f0
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# ea5d9b2369f3471da3c39cb1db5f940a
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# ebfbcab6ff9e4955a4881342c46efb80
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# bc66f162b393452f83bd02921ddf9586
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 89d9e019dab74da49b02e874c064ae19
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 66a9526cca9f421ab2483a2b927808d9
# 2f2333f6c49641b49821138d97de0d9a
# b77973098a4247ed97b79c34486244d7
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# ad8550d1f6114f4885bee7f48eb8e496
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 8cbbc07b325c4f4f8c447ea74c029dcf
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# d8df7d19639447cda07ee6190ecbe82c
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 08590f6350034e2dbf43ad56988daf11
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 9025a98d442a4f01814bf73e2904516d
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 64945f9e1ce049eb8ff6f19f06f5e79b
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# f36f10cd0aca44a28db32a5456a3a150
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 4117242a1e5646b7b3ad6b00c8d45cd3
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# f2c82c877b0b4e1d9eecb7b339cb1715
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# ca2b9631d6cf423085d08773cbdc1e38
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 4dab8860e84c43ccaeae7253ad5252e0
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 6811624040ed418cac1091aebd4b39dc
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 921f9eb6ceb443d682d600cee19474e5
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 214d72404d6d4cbc8d48726393b48e9c
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 63cd5fbf163a453c9affd94ec4f91528
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 5bbb6438da1d45b2aa340324109c221b
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 1e8e22c935564bb7b9fb0c34d5f6629d
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 3907b6fa5c7e4a2988b4fedb59a3bef3
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# fa697f9a95924f95898cbe9ce2353c5a
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 9b077dd0f5be46ecaa439c9bdd31b3fe
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# aaf0aba8964242e1b8385afede50ab2b
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 8c62ba81e68c447a92caf1779ec7684b
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 2576ff35f7584f3a98cfa7177a152b34
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 4a90ca4d0685427ebb03153b381db0c6
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# d1629977821143b9b551e4a0cd4abdac
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# 10ce7c65c6a644ffb5572bd196d44879
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# e1215672042b452bb6679c2e8e8c8eb0
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 8284aec43af043c78ec8a66df9122b4c
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 599ae6edcdc843ee8a99d8130c676e64
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 794b9882cc9c4290a27c56bd37a267cd
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 4e85c77c4e104d41b3fc88ef0bbbfb68
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# b79d6c59b620418d9958e7c70ac8b855
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 3a4fecf054344c1cabf9d4780cddbeeb
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 983c06c1c950479685c024839a321df6
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# fbe318ce129b43949df4bf794d49de82
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 57a2aad438364d479b9e47acca297b70
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 8b8beb449d5e486aaf73462aa6e2226c
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# 7ee0910b5f324a50b7c0bf9bf6ce68e9
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# e9b39eb37d1742f3a708896241eb93f0
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 59d5f32785d245dd96b56d032c07751c
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# e6923c2194da49689b1ce9e88a716ca5
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 6fbc33f95c12457c9f15f310bc5b32d7
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 4a960fd4690f4bf8a0b1ec367b9d3cc4
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 614f528b1964419abb23a92f00f9b450
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 80490bca09214f008422cc7ff551f5b2
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 6fdcfa47dbdb487ea20d384299bb492c
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 47db4b25c2614278a2da3afacd296a67
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 134623e10b4842fca5d242550811f5f0
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# f4390446b537433e8a6019bdf548358a
# c11551e11d8d437bbabcf48c2cab1919
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 3d43407665764b8ca525099d0a9ef713
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 4951399a7e404c338a495714ae15e0bd
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 9f7ed70728404195b3208aff2caeaa63
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 6a1f33f52a3647b4a3ddabed4231d76d
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# e6f9f011ec074cdf9706ffd5b27d0501
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# cd9dd1d18ad54be09bd8466ccd3158c6
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# bd63cc79b10e4e01a85d94665934a2f8
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 0fe6e538f2914f3e9a183000863e0567
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# b46f8601439b4239bc8aad3e561a03dc
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 4b35b1c1dc6648119ca5532704f41900
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# c38874b356d24ac5a123d949f8e52983
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 3f2bd71f55ec422691e2a81b15e9465b
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 8fad02a18a2c443c8dec65115add4bcb
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# bd4c2fb998774fe8a40fb4c72e20e457
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 686da51835f34fcab15215329e222f63
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 1a482fe0ca5c44ec8b19cb3ba0bfdc71
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 1566c7c33e7d4ed2a5f76fc73182a458
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 587cb5e6c7234834b7f3852740065eb5
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 5612a5b9b64144c5b6e66f2a33a0afc9
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# b4ac59bf8bd84b9d8294aff289e3f25c
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 44d29f98d2cf4d9f9bdf37d9ee050c36
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# d74e072fbd7f47718505915fe16b657f
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 63b77bee600c4e39ae6e553931575844
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 0c248d3accdd432395b96be8a629dee7
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 1c6d2b11283b4753ab2119180fb53cc5
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# ee4c994682a846c3938d8fe39383854b
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# ae12d98f496341e7b5a1d875fe689957
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 6ae0fe0d34ed456c9e5be75c487cf62b
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# cd33f61e4f8a444ebfe90edb0c48c11a
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 1318b5f0c21c4e4c9491d13d47bb80e3
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 92c47c1a73744895a871b7e88e9eff34
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# a85f6fe71baa4157835ee65d5f0c3f64
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 0e9c19ceba9b42999d5c31583104145b
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 64f8e8b6edf64ce681195b7c46362c22
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# daaccb840ea94b5694de1b9ce1bb3c56
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

