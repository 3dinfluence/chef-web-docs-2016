# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-08 14:52-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 9c7a4cc0c5d44d46b35cd4e96c86e44b
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# df5f6d2b9938424fa12750e27e2e3031
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# adf5cc59b9534db588248475811871a6
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 163c2b33903246eabc74eb3533d6aae6
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 0985ae978ff1493d8138f5e2a1014c69
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# c11547a09f4e4df48dc9aac1f6bf1c6a
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:22
# d333244546d9445e8966cc12622fdc8f
# 14fa955e3c5249f7abd22e4e46b294a0
# 258ef2ddc41c43c287456b7c11ffab49
# 2d12b96f715c469fb1b55e4e61ae45d7
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 57df93a13bd04fa3a37d97137b2579e1
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 612a730fb1d147428292644968e86ba1
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 4f0882583a5b46709bb12f8c5d226180
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# b902a77b020e4118abe835fb3489a6de
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# af377e5a421e480aaf788ce7e55b76ee
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# eefa386ba9d5456f8ace6596d07fd2ed
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 9b7cd57620c84508bbc8ccc82c872f46
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# da12ef0ac3ff4307b027d8080631fbc0
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# a932038e6ddf4d26a6cf089b5b3f7255
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 315417ec8cb04fc2a694d43abfb8ee5e
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 6ac9b80222394ec396f23990d78757a8
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 6d266c5b1d0946168ac7c1903672e96f
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# bfda985d20c74d008c1291c5f770b412
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# fa6b56ba4a094837a4a5b6cc5090d055
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 180112e6beea43ba852ca229eb350b31
# 353df3801541446594733918207ba215
# aeddad5c286f4745a988952a3eff44cc
# 92132d2c2c76483ab20c35c322c1ae6d
# 4598236a144a4892b669b8453bbd31c5
# 388a34c25a5543e4acbbd6a446535afd
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# ac3ca46a4ba14e21a7d81e5c156dd67a
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# ca007db734fd41f89860491e35beea89
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 37a43ba39603455baeb09acc36d0a45d
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# 7b40a6162ead4b088bd47e28b3041520
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 2d628437b2974607875cae33c3e97c8e
# a063a619446242b5a40831d60693c4ee
# 53a3e48cbb7b46c4aea1b0e4cc216cb9
# 36412b84a95c41d68d97cb3c173cacff
# cc1df110180c4134864ce1dd43779e1e
# a953d16b9b584bdeb7798ad27ced8e5c
msgid "or:"
msgstr ""

#: ../source/essentials_search.rst:34
# 65c57b8b3a934fe28144adeaf537cab5
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# c4aa68db3363480ab86c7ce5282f3b03
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# ed791ed395b3477c8b46c56e87f8b112
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# 76810394d7284da9ab3b23198b4b084a
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:42
# 6cf2f24a504f488586e4e26edcb2ccd9
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 044ebda0bfcb4fbc90f1e69fb7ec7ab9
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:46
# 1ea7d27b66854586871d022fd36ef6fb
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 05a567b959954317962bbd48f2393e2c
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:50
# f5535d36feaa4dbcb2915617365741f4
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# eba200f55b504e4b987e76017661d962
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:54
# a8362b36e6ef4284af101db573254bab
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 60cac7c6cc1e4efbb877d82552ce6332
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 19ca7a0f80ce411582b7395e182177ec
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:59
# 6a18a028c1ed4ab583ea2c89cc73a7ab
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# d940d306b2784aa2bbf53b94a139cc0f
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 60c078b055ba42ae91090b2a154375e7
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:62
# dc6044edbc02427ab7870208a9ba832c
msgid "Search queries may not contain newlines."
msgstr ""

#: ../source/essentials_search.rst:65
# 206f65791522463fa9b0154d830961cb
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# af83818664a3440da678eb7325caf378
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 412a1a837c104413bb71fa0bcd69226c
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# fcfd22bdec45482ebefc1dcede2b6732
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# d5c60ffe0aa4456facaa575ed19ab6b5
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:69
#: ../source/essentials_search.rst:81
# f288d029f55f4352a6a663e586bd919a
# f2474b9312ac4b4996b1a8e527226f1c
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# f413085ebe464c98bb5d86027c56b86e
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 2bfb5c6d4593489f9c7bc9aa7f39e080
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 5111e4af90e1478181b9b9444181fecd
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 22bfa6d3538b4dccb32e154c22d7c528
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:73
# 339c5e1a3a504e3fb188f1f19a6289b3
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 6f4b6efc97194827aa586ea5cc5ac9bc
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:77
# 1703e12b421d46adace7ff39faff6684
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 54a9114ec2f14e5a8aa30116a89ba160
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 8489a96cf33b4c0bba786ade39612a6d
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 5c8c95ffc33540d3a3d9ad78ce9bf745
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 5deb172c47ab4d5c810845e4e7353b55
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# d133c32f97bc4452855fd68eb3d17358
# 46997ea643564bf888a24a1735dee977
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 7165ea613c1e4640a4832f3690a175a4
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 56df73538dad4a0f94cda10b16930fc1
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 6f06b244c82d49aaa11b670794f9f152
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# e9cdb82d65ae45e49f54f5a4574cffc0
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 76e1dd2f88804ccc80986e5d631864cf
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# c23d68a524b344649a66b1e087fbd8d3
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 024ef53ee4d141a1b4f3340cbe4059f4
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# ea687490529642598c9e9acbacddf4ff
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 5e8441ba1f2a402189ec127f1e15c11b
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 1fc0f6ec0ecb423f939d330d3448f661
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# e21884f01cae4ef7a888bde32fdcfbad
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# d8901684ed01495688e6bcb29b52a7f0
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:93
# 341b61638b0d412d88c7004100654007
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 61bde9afd95c40cbbc779ce45200639b
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:97
# 95d0e302ce8d48ecb02fd4a39f209253
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# a4a56fe7a1684bd180ae52e31c00b71a
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# cf1a31649cec451298be339ec8369cad
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# aa7b65a9e08e4012abc8c3caa86cc006
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 1b0d27169707444894831d35d071f188
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 5448e0def4124b62b0b9e756b81bb228
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:105
# bd2ab232b8e94153bb6635e1410c514a
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 3b0b3bd55449445187809dcbbcfc880d
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 19b9664e8f1c4b208685d47af6708b6f
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# ca375b274dd34c589c252c23f3403526
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 66caa6bcb01c42559c520b09d3a9e9c3
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 3744fadeeaeb4607a48eee9efc4d028e
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 6b564cde84c74e2782be1597bd186672
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 1e8c4eb973e64b0da031a70abcc655fe
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:113
# 7bcaf4037426421abdf0da6cb57d3816
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 42b19d2f02624794a6743094b2fe4add
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# d001da44119b4d1092703ad84b8f45f2
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 50046bff51c24120b58596058552901a
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# f3f9905e8f904d41ad2932c95457143a
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 3f9565980e4043928ba47c821d513544
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 125332eff9014c99a85c9f0136746cbf
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 390766b23ec84177a087696d5bf3725b
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 032d51672c4549c286e0114b3f6c2b06
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:121
# 5f92cb453e554306bf54fc74f7a34c0a
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 8df8604c67974b41bca5a7d1bb7471aa
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# 57b71d5e117c4f4d9894f9e7ed2d0ae2
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 7559625ae18d4791b338f36758b3c8ec
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 093c38f218614fdab02299ec5de74601
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:127
# bf5a0d8f5c4d48a4844e79012309c66c
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 8a3b97b78d8b41fc9a3eb5935e5b0968
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 546850cb35a84cb18456ae698809e83c
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# b8031efde5e04e748ee86c3d2c5ad894
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 32207c15b6864fe0bbaa65ef90d1ed86
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 987d3ec0f89c4c0687bad44d1a656c50
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 52702a0ba881421b9169bbf0c3e524a2
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 59be50e170f74e61a01ce423a52eecb4
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 4ec86f52890d4972914bc2d4cf94ef4c
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# a764e92c76104b588fe760837eb0d172
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:22
# 2fba4eca483341418270affed34d2f87
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:30
# 2a543d0ba687475e8c6b9456c32eb680
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/essentials_search.rst:131
# c9b51ddd8f7e48eb9eeca7d5bc17ce92
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 41ef7b673de34714b1fb63292a02294e
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 9b318c08dede442691a7b4269c7881ce
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/essentials_search.rst:139
# cacc5f39b2a34bb9a561ee22ab85cb68
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# dcedfa99ae6d47fb94e2f1137af1c8de
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:143
# de22e27c0e06447ba27b6681bd1a3bca
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 82e55f0a5a3340bdbb2fef8e426dd4a3
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:147
# 97c3737c28064cefa268c3f1291273d8
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 25c85159f8a94586abaca36e468d5eb0
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# dc024aa81c43402097d2edda20f24ecf
msgid "For example:"
msgstr ""

#: ../source/essentials_search.rst:151
# 34de123c0e98430192cad7754757d5aa
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 8526402ad1f7423785145a96554698fd
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/essentials_search.rst:155
# 728ad3bdc7cb4ea6bb514f7b70c39624
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# bd62ecdfb28c46678221a8895f5812d6
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# c9edfcbca53b4abaad5c0664082e01c9
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# a353afd803e44fd2a5877a0e4d7ae2d4
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 7465a9ce79e3402fb647931efe659647
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# c3e27fc837f5404c991fe6f6530d9ce4
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# df36a80e4a4b449ab7b5f2975a1104cd
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 35436a97dc534225978585ab15d07aa8
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# a00ffd03eb814c3fae2f610cf9dd8bd0
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 1d1d8bf64f074d74aea62c201d7caaa1
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# c3d147671cc8428285026f8f95d266d2
msgid "To search a top-level run list for a role named ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# f0fb7e18842c478780a2f3f04d5ecc19
# b7174314d3484d8da92985d33c96e7a5
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 65bfaba381724342b73e4b71bad81751
msgid "To search an expanded run list for all nodes with the role ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:163
# 95e8a2680c1044eca5cc276f8cc00890
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 525801e6aac446d7b8cfb5e52c453c99
msgid "A node can be searched from a recipe by using the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# b9a41c6368f542aab5ff42f713ac35e9
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# e830c415025a4dd5b6f509979ca99f02
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:15
# 80533d9386fe40e1a4b9ce3564517db0
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 80eb3b5466594bdeb2b1e49dc125338e
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# bc70ed6a0f214ae48436284f15427a42
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:24
# 850a04cee8454830aeb90540e9ac8878
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:28
# 1baca06b224243f18308d928f78b3297
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:32
# 0e808b2ecd004105821d63f67d88e588
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:33
# 3c49a867097c494e90af220271a94b5c
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# bdb8fda504f34cf09477ea5deee13155
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:39
# 770e1986447e45d584de83ad4bbd7fd3
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:"
msgstr ""

#: ../source/essentials_search.rst:167
# b51078731fe344279ff8e3587b468bf9
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 9770d8e10f944e6cb3b12b9013784b84
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 697664b6bc0f4503b6ffa217f531c3d1
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# d36c5d092c2e4ea4ad419836360812f0
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 70994474d8b541b58885225f55d88efa
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 7bd502004cf7475aa3c371eecf076095
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:173
# 2f5e3d86484c4292ba78d8c1f0e17088
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 4f31571cd18e4bfd819ef47aa4dab07f
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 3539c419f2ac4a34a9b02306f8d8912c
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 77b2c1fae877475b8a462b01a0b0092a
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:179
# a683d5c463bd45779c51fe4d9b040475
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 56ab20cc2ae34a48a4a5ba266f418276
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# be5b126c98484c76b62d2e8d791f4857
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 8bbe7215f5284bf189656b69cda8622c
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 32482e7b6a604d708c4ee0fa54518816
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# d4aeefc589f6462ab2bdf9ca18fd6e53
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 5e1edbd68d9044188629a19e90aa4ef7
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 6c6de9264a2b4658b70f5c6297b9070c
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# d8c22ac9768d4c86b6f36fcca0990dc4
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# ce090e3c1d3745f39263513cf86e66f9
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 5d04dd6c821946a68c36794a784e806e
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

