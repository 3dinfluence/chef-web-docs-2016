# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-07 21:21\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# ead82ff35c84436aaf5ba7de5a06137f
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 6dc27f3136f74d689de84424106aef3b
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 067b69238f154974b40faf015a58b56d
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 2a931cc4eab74cb4b719f3bc7a997c55
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 65e0fe7e9b284644a1038a6ed1290abc
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# ef3786402cb8401ea070d7bc6c645fa8
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 6c33db0cad4b43fbbec460aa553c2dfe
# 0b5c1db8078d4fa386e90d8ad63bd818
# ab3be128b2f6464caa14aea45ea38be2
# 70771aaccbe747e5bb9fa0832116f8f5
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# bba7667eeacc4f1a9065448fdc78272d
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# c8f80ee376a640fea2202c5be76d53d3
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 67ea2b33973549cc8bc2a55a392584bf
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# eefeb80a71224edeaff6274219162cf4
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 4fd6f10da5d942d7985d9e8e85a97050
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 761ae67ffe2f4e7f9e97b0d3d43dbe2b
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 294af7f95fb442f3a1f0802afe615db2
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# f612d4567d7846ff86b691d7b1832572
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 0cfb969b8dcb4c3299de4b73be9616f3
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 32a9bcc684874fbbabc27afbee1c6038
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 0340d0fb58ee4458824849dee7fd7db9
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 759ce1434d4643e28180c63c483ee6ce
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:22
# 9cd5b14d307a4636971bd89ad076009d
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# ec59297b10fc4823b88f73601dc9e7db
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# be5c0d76224842b9b6fe88358e85c471
# 67eb9f6ece214a99ac7908617c163261
# 25bed64e567e467891f1d79d86aa09eb
# 684ef6c326064de7ac672c953291e856
# 879e5638af2148e6a65618286bfb357e
# 6b425d69622f405db0370e13c2753f74
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# adee1739e24047f1b2d5a657075268b8
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 1f14d376ee6f471ba6efa9b50fd9f353
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 4966f6507c884ef78079180497a675a7
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 1021c7f4a537450b84db44cc11ddeba2
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 36b310a94c334781936e0d426150d206
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 81f0b5e4d8a44fda9b37cd015d27a72f
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 9c00924145e54907bc703fe622ed8324
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# de9feeba8f024d97a7470914f777a4b5
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# f00f8484c222432eb57ccf0c14990a50
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 22c976e6d9d74725ad1f32d68f0b5af3
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# 22a70b8573a24db28e0bd3faac7bdf37
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 436907c677e54c3fa629f83e3dd83b07
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# 3e9ded66a48b466ea25d666bc4a0d114
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 89c33e72ea644932bba5f8cd423f60bd
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 0d328e8a232942a5b23d9ace9d6bf198
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# 674f62cfe58d479c8cb3619de75035ee
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# b5e48efabe414c008fd3765298ebb4bf
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 2dc0b2babbed4246b205a0a7aed8dd2a
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# e16d4dcbab314463b825687db78a9d49
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 98675998b62247e287bb7b3a9d799e8e
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# dfe12b035ab74c808ccd3e1186d9e354
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# ea4f38eeccd84829bb04193eab5dbde3
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# a7a1abb192f140a097fb814bc4a7b9ac
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# cdba952599dd410693250ab15d970aaa
# b6ab2727aa8d454bbad906aa6eb741b1
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# cf17a50f4157456bb6ab493aa89d0a4b
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 46edee75999c4bb3998b3c1090c9ae9f
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 2fbc1bd4dd9c448cac54efe435e5f691
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# cd8281e0492f4e9181003941acc8e5e5
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# f8ef57ea2231426293660d9fcacae9a8
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 87105a5f8f1e449fa9a1b3032549c9bc
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# 51c502316cc44c3983eea4d7ba5a64ea
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 42d86f0666554f8dbea4d5f3773fa4c2
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# b3c8ddab08754baf91ff4e6a354faa65
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 5910df1d6331459e91417f20d2b969c1
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 49f49ac056994e098bfade90335d5714
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 7400d88ba6e54c679db5e4420f5415b2
# 8c804874e6ad499f8f69dc0754cf3dd9
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 6d809c31ceca48829b308d1f55bac285
# 6a384737e9834343ac8c72aecee87d33
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 25dd744e07a445009e11d3432732f0f9
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 8ee39befebfb4ca3a772d4bcfae4d5b9
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# ea2ec9353c86409b9d3c6dcf7ae642f4
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# e1a2bc3425ba4a078dc3c7b0b8fb94a7
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# b71732b810274d34ab15b72de6b7a937
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 1b0319d0594147c78084701577c4a6ff
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# b6547ab3552849a3acf85dabdfe8c712
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 69a7eb6cbee44a5cab9e85bb1614eb78
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# fff564655d9b4692b4fe868dd79e6ed0
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 8cd76359291c47d795065b19124401c5
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 0cd1a6db2d6b4e42a7dc9ba6227f7f60
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# e97b43b384944d2495217937a4c5f15c
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# 2bafe0ba391546b5a65ce288f1d6c91a
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# e8dc9e19ca224ed4b0d95701e43558df
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# 7d6ec1e2a5d2451cbdc013742fc5a054
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# b5ea0f69934b45588be0b41827fbcbbc
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 0ba4d0679d444a0397fcf6dfe34d4ca0
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 40143279e36c45198640db939c49a1d8
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# a978c77adbe04665b9f66099b5e6f718
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 0d06c7a585264ded93406ec173c2f5e8
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# a8c616ac4bd44ea0b3fd314319f001f7
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 46683918c2ad408db1e2f85b0bf2a95c
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 3fda04596bea42cc84e81fdb17a68dfe
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 7904e2e0bbf24ca5b0c5360ac0bf7d2b
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 813bdc375d6c40a5a01eda89d8166c79
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 3013855025954d0ab769b6126cd2bd01
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# a453b814ec0c49f6b63e3603b1e903c4
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# e6839d7e7302449085a3fb777a27c0da
# 1220a995b9ce41bfbdd3e0fc5e10be6d
# e022edab5e294ffd98c8d3653a059ce1
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# a54b6a772b564a6b8e791fa1e0758425
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# d4fb77e340954194800605caaaf2a396
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 344342caa8fe4391b127a6b4b3db7a7a
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 6ec5c24a46ef4d0a90fbfcb312982c6e
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 9b971fbb3de4492bb4b688ad6a884303
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 41a4ecc29eb0473d9bae9bc94a072f41
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 618f58e4484b451db56c3df3051ef032
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 22f63dc9917147b6b4ba2f608713b7c6
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 3993c4083d29439e9cc658dff3791e13
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# e2802cd57c5943e285633c7bb767888a
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 34b94abc890248e9a4aea0cb49fc467c
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# e72ca1e4a7864d7ca1126e75ff0a2c4f
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 0266853cccf34baf94ac46d1da99aec6
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# c0fa89b260db4160b8dd01990bfe4c0f
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# a67908c5bc0d4841b67555523e10d470
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 73c59442dafe43a099f2784fd50c1d38
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# f78b46095e1d4ccd868e7fa1f9a1c2bf
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 7783b6a387494a75b8696093738c4924
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 38afdb847e6b4eff8e51a7da052373d8
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# be38a31ec4c544d7a250efd5d77e6154
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 85aedfc175dd4c319b400ab598e974a8
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 63a445043f4940649d8cc964dd4291ef
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 70d62d4fbcaa4e89baa32b6d9aa49639
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# fde25bae40eb484aa55308b8c0c247be
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 836f8654db9b4ff49328bc8d068bea6f
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# 534c746e9797402d9f7c7f725ddf9aa5
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# da5b5a9601a44cdfb9a3c0f155414731
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 216ced6673d84769897452bb70d41c54
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# fe862b0abdbe48e1afe5d90dde376f6b
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 651312dedd8540939e3df64bf3ec14b5
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# 634246fec56f487f932187e98d784fd4
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# af5871b876094e949a7ebc9bf13e3742
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# 8f9563e43a07480c99059b60a4718df6
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 4112da2445b54c74af383dd07a88004d
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 5cebdd24c24e4963b65b4b4f8d8e791e
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 3e7f162ab1204f6a8b124ee16fc70e08
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 5bce4f0c3cc841afa22d2f03dc1159a1
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# 5c143e27a22f4c79a2b752ac94bef911
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 6af11f5b364249f5bb737dbe83800f4f
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 107a25c503a34d2a9600abebb862640a
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 821d275f2c494e8ea1b5106290287e3e
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 2f77f1fc713a485c89ad2f7eadfb6562
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# a1f4c304d1074f23bdb1602564abd18d
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# aa0d320532fa44efbbfe5fa53a71655f
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# fcade019ed6c4606a9872ca8a5ebebd6
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 5e6e10ea6b0947dc91060207c37edd18
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# c24630b85b60481c8e2cbd7422e83764
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 20ad01d21faa4da4b0f9cc1c39573154
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 025a65cd1aec409db9f960790fd08a33
# 8b3a139426264455bfe7cf975074a5a8
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 9fa6f2d4d76c46b1b3c8340d75ae49c0
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# 4d184e9568734a8c85fb0b641689953c
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# a9ed5cac456b4653abe2650720852dcb
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# b63814a1cf04436389cbad10903aa293
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# ddebf133eb3c41358c4e8116c9da9628
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# c42e650d7ff640a2a31519e8f43ba36d
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 993f99bcc54c46dd85659e591eb0ddf8
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# d6aa608472564b58a70eb08f13186bb0
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 5ce60adcc9114483a76fd4daa0e7d637
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 65043a5089d14d6b8918f7dc00e558f4
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 840ef0ee95404bc78012f6958333e2f6
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# de9c40596cd349298fcffdc9c4f09a89
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 81f1db9a40004243974df1cde0fbe8aa
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 651878efd5d14454aedb35fffdf92094
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# cdefbc3475f7416a992d9ec79678742f
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# d7e2125dc051422ea68b6340db6b0bad
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 89269969c78d4748b0b444bd8559311c
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 0a9b1edf6a94421db29f68f0e573d176
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 7d579eff20c448b089b95129304f3b02
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 20564507717142639048c4ecc672dcc6
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# c5c86622f6ca40bcb56d8fe386a29ebf
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 857ef447b20941dd9e6ecb0ca11b6a8f
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# c2b05bcb717049d68d798521b653238a
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 7c5f4b6b86c74fd9b2214ae8d33f9344
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# e55fcf7d72a6497c83b289aaf47dbcb1
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# d5199c97c30c43daa057eb328315e234
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 21069c4d3f6a4590b7824bcfab70fb58
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# d6c689c59e5b4ab481b7f6739706f5ef
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 1eaecd310de243d098d03fd5107ef2bf
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# a4241086957b4767873a6569b06a0138
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# e6a6d509687c497db368126372f153f5
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# bc4c38c3768b4c2494db4a7702c10c54
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# c4cfa37582454ff180c6bb69c664b4c8
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# e03ef59d4b114c36bac647972a289a9a
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 2b1a70405d984960ab4927c04d18e268
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

