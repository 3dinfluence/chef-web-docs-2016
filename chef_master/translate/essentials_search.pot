# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-04 22:34\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 5564e85651654335acde64dff82a1753
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 97b17a00514f4a15a92f983a7c140279
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 0cf246ad8a8a4d228ab520d9b7001032
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 00d82d72c11848d287fe9c8f783d2c54
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# f157cabfb74741ee86f56d0d0b4d8def
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 2ab54a2358d54116beefe0a10a311468
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 223310e8c60349a38a5ba13795565a35
# 56fe573b419b4765bf038187a2eea1e7
# 37b52c675d6d473bb87108449816d608
# 61790964962241168f041de1c4bb83f9
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# a2064f811c5d4dff9e13ee2a7d8fc9ac
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 55fc35c978c949549aa8a621fd6ccf7d
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# d953519b110a4560b95774daecb61e25
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 977ba31c909c456086336e56cb79d7fd
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# ac0b2a30c4e64cb49a1642edb21a2bad
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 7876d099ef624defb3c0f4b12956acd0
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# ef542d02fdf54ed48387c573f89dd1af
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 245cc44083224290b29a2e48eb212004
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 30b4e4f1db904543bbc9b8ed2f1a5ff1
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 8bea1036d3ed4030ab6eceef72410ecf
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 9fcdeecf2eb44e7fa4372bc94f8d5300
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# e7d37790d9564b6bab4263532d2b69a2
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:22
# 120da267127741758467f37705e4ed36
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# ba30e7bb35a14714a50a4b37da1a411e
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 15ea34959033419d947ed5ba42aecc2a
# 687667f86cd04ea3b9b3dc3a106b7576
# 83dd8dbda92c4586945ff01e3c297471
# 8ec042ba8eed40f8a8dfee1f2140c391
# 39fdccffb0e34af8a7f7011b3f8d9004
# 5896b7b70afc4097bf732eade18e5adf
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 27d30e0836a848adaf9dbc1fd1c2c440
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 2b4b1747608144d192e1c0544997d548
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 6b82d90e96974eb7a148c9427ddf5402
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# eaca19c6716d4a6e96eb7562c8143cee
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# bb145fceee45495e8bd7b19c51504d0e
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 574524ecb98f47b4b707d91386b22fb2
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 0723ad5665b9437190996b769a46b308
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# af845beb0aad49b293655b77e3cb174d
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# 039b72405c8c49ff80a322ae38c57299
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 83e6bd9e8f61406f8141299f05091594
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# 558c7959fe724be48fcfa9e0b1165c3d
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# be17a8e5fef7495db245cb8f13deb4cb
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# 5b47fa4cf9c449fe8da1cd2fccbdd4c8
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# c2f865038730427c8f5b2a7fd4b78179
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# bd918052b6a0458db37cdd9fc6779794
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# cacfc36650ac41eb8c01d34b0202256f
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 646bad8c57c147d88c60f56719719796
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 7ebb95fb4aef4d87a9f7d36bb6a3c21e
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 2d9866a3b9c741f5861af7fbfd760c84
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 1f9cabd10567473ba3fadf9b85739572
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# d3e4afd6a5de4d5894a4aaac4cd5a83e
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# d0f53488b0f14af9a071c6c838d78ee1
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# de200ad840294f9189738763b112c162
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# 02ae1adb93cb400e94dec7c8490265d9
# 9d4c35cb188445a1aaf6156dd5db545c
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 265e824630fc4ae5b4d03a0db97e126f
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 1bbc1ab0c04a4376b8422b093872ca34
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 6af495f9250a438aae4765cd47d9bf9a
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# e08e57687e6d45f2bac75096178c7819
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# cda3517711b447319fa8a05e7d1f3cb6
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 5261052b3abd4d1cbefb3612e3a21c73
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# be16f98dd074491b9a6a63b5c46202bb
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 8dd585aefdf54473ab5cac8eccdee62f
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 95377095f616470683e3806cca9e478e
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 4a4e7f86aa1f4a029ab1c072d90c1003
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 870400c61b524f449badf8eca74d6d51
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 4d95cc96583b481f87d55760c229ebc0
# 2a71c1748a274b4aac392b95159523dc
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 4da81a5e1c7a4d25aab2b71a2a186657
# b4b79b122ef248be86712310676d74b6
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 648d86527f3a4ad4b5a01c8137b1db96
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 49e3c60fc0444e40b2559d0d0feee2a6
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 88fcf8abe12e46f390b6925382d42c5b
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 90cce7df005f49a4a944c56201cb8750
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# e7ee2acec1244f7498b63179ae2d1968
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 1a449c95ac6b41d2bb44efa78efc0801
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 5e63d505de224fb186373086e1a6ddfe
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# f0be1e493ab44556a572573c74f8637a
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 8486a0a942e24ad2a95f5de2040c0553
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 21b58b1502c040b19f31a43b02bff87a
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 80d56b15eb80496b8646277d2dcd9652
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 42a5782bd60b46ff9b521c7b43254157
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# 4e015c8667fe46bbaa54757ec4a86080
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 1c12afe8b7e748129a5be05df50b90ef
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# 64a44bc2cb954befa1036cce8685dab4
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 38000a1e0de94be1916646f61fc817f7
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 523f5a4b1b4c441a9f12721773e00f56
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 456ea73606244756b057c1d16e9e882f
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 352987efd91243ecbf7235acd2468d8a
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# a231b7af48b949f4b3901f92467ceaf8
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# 7eb9f6a5f05b4185abbfaf0828e5d563
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 2a5a3493ff4a42ce8213e3a32dfb93bf
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# e8936e175320445e9603703555c9b800
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 843e9a19ba364277b7d133382cda996e
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 1ea294deae3046fbad4565f5cb59025b
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 6654a4dc4e204d56bfc2b5c4e3837dd9
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 4dd21eef5a824ea2bcb00d94990819ce
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# d9de8e0ef6a14f3f9946d3cff7be2595
# a237a120b47148fb967d86fb287ddb0a
# 6af64c5dbdbe4c5db1028e66ffc8f35e
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 2699ab37b95c495a9880de3a54384c9c
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 2eaba4ae281d4c399e230bbd8cee923e
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 786e4dad46d94319a698fa2088c097d4
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 2416b352fc4f40f1a8882bee9dba4b6a
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 29c13dcaaa5f44d4be4afbec3644df94
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 3c54291211eb4f1fa65ac689bf1ee91a
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# b79eb69837c444759d98456c8fcaede9
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 53e7e9e2c97e44ebb2f384272469c089
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 9a2a6736c1324997a24738ceba125c48
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 35b285178ff94e20add9dfe796c2db7c
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# f3c31d2a6d7f4abba98314d8b6042dcb
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# b041f22edbe447df89380b5010346550
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# b28ad8dbbeea47baa9fbed6a19db927a
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# db23335f52ed411b926f576e60797a62
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# d88e05fa9ad54bab813c7c7d4856baee
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# c925421f949a42a48095a468f3f910e5
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 21e72118069d4d269d6335dffc46f8c5
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 66dc4fd04dbc421e96b94d63c4859f8d
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 81f692feb9c041ef8426176ea2ffb85e
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 9df7db65d0184eb69a6be3cbc476fd77
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 951c7e6c4ac64384aa93c277c2cb357a
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# af443a98dda648e8bcf406aba1a5b8f3
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 5e5d2bb227394d52a1fa73a6917df42c
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 56069b1e8aa544eab16108d484d1c0f9
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 38c6fed7249741669851477f6ec0fe9c
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# da22954796a9482f868c4b5e18be86d5
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# f1af852a6d3540c98a49697f1da91815
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 00279bf5db0547b6ab70bb612ead65cb
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 56c6de53402d4dfaa1f9f0263cf023d4
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 639acbbb9cb94d87a669b8a13e6c34d6
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# 940d848ef7294615b633e477b1f1c6be
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# fa9e389aa15e4e1c834a26b6592d0d0e
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# e41edaacbaf5416eada3bd6080dcb630
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# f1f30730b5794d9ba94abfe95b99e782
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 3d69084db9c045f19ec11a53e1d3c8da
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 01b4115740f947d8b1735e5999c49c38
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 34038716d9a443edae14baf80b29cbe8
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# 9816727f62c640bbb26697d697a840b6
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 94d2367ad30942bd962d1158e6e3e8c9
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# e9a63b8d54bf4c07901b5030b9be5dbb
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 7ed2d1e5698746d581292b870d1c9bb7
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# b2275635c27c45d1a7f34282ff0c8409
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 532f1a10302043ed975d430e8e5f90a7
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# ec89add7c70d496eb3318aa867660a53
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 2d512c216f1441ffb43a5ee79ad658d9
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# e98c7f89fa0a44f9bfb62f7661fe6d01
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 1d3b1df06bee4e249e49ce8150704db8
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 2009c71081ca474faaa86f885cb4cff3
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 1bbf42a3ebd44090a43a51749f9eb02c
# 6c0300a5354545d0900898fdbf5e766f
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 62f2be30739c493e8bbc8a3551ff4b0e
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# bad214619f7844a392f4cc2273b2806a
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 61727c6a77a8497eac05b07c6f78169f
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 5a08bc4f468643239b44db51ce5eaf8e
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# f2696804a10d435dbb1230e446b76c02
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 05a4c5c7e9234400895f4b44724a6f74
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 585061f7a94f44b0bbd41e5f8ee71253
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# c8d6c8ed08e74d6aa754ab46c3c24086
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 12e1c68ccd4a4b20b26a23580ab0a9db
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 6ea865ede7e943bf8abb8efaa469022a
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# c085878aa57b496ca15fdac1b807f48e
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 8284b29cc10b4b0badcf1cd5d41590e2
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 26e99a4737994769a30cbba48d569bc2
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# fa70ae4bfa3b4681a9807a96c2098343
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# 9b9dedb4e19744f7aa5a1e538d49ee2f
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 0f3f23a42dba4b9492a1c8b54e4fcd6e
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 663f012413ae4a7a91068b05a4cf3362
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 079f58de2f434e2bb29a8fbf2da54b76
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 2f5add23f55e4d5c94389e80a0f7cd86
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 4a21ca60ba06453488b5cf434c42abda
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# 58e3fc20825f4e898f582bb613cf75c5
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 162dace84ccb4df5a47b28633ea31244
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 47468531d3904e4d921fc66244306108
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 056f701f1c1542a6a9d566e059e12234
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# d1399d8fdd9b4565b999d2699b1e308b
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# d0a09ccb913c44a7bf3c80884e559060
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 9a4b08160bfd418c8ea272690e8f1bc5
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 013dd515e61a47288f802c50846f9170
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 6182615f41d74699b35127dbd7a37da4
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 2bdc7d4964474e89a108cffdb6028d3d
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 6d8c5c9f6a1741e09bf342b11a575b56
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 66190ad9e59046af867c9d3a3d77b6ab
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 171b8f8fab034b5487e7eb55a4825305
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 1308001212a043958b17bf37bba71420
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# da3edc925280484b8960ebcf1e21d441
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

