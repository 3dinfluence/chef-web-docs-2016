# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-09 00:07\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# be6e99e924b649328d1280b426bd4a1b
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 146024efa4bd47358f69d7ed184423d0
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# ce299f59c28f4d19a66da3e2b72f0ea3
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# b0d7f8f12fac44a98d3f46219d92ee1b
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 3bcdbc786b7e4e11bab7e4165794767e
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 6cba0a09464d44598d6cd95577f424fe
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# e3ff6c6189f14d2aaa76316d3f65f27e
# 280f524453e44085ba827cdad6c7b0d9
# 856c7691b5694e71b7ce630c2f3fb13d
# 35871e6e0a4a442f82c836fe379295c2
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 745f4072e704485f811b279575ba875e
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# c66f1b0249174c998a1b0a449c4a9832
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 02fac451f1e74690869bd35fde4a087f
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 306530f7164e460e988bef08a12befd7
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 0232d91e151a4b598d8115935750d304
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 9c965543b07249c3938d2917ebf5f11d
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# f00933e8f0c14449bcb633ebd1ddaa7f
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# adce1495a3bb40219b4b9b3a2d956e52
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 484298ea8dd54da0a66ef64352a1a1fb
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 57eecde7f40d4d18ad3a06c9bad1d784
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 97f3b083340e4c9cada6dde48ee5dbbe
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 7331189a771f480eafb522f7458ce42e
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:22
# 1dcac8d0d5564e459f8a203b70ff32c3
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 8cef1bf95ba7418a90117a48485f9773
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 73ef769ce79d465ea5b9c5e61ec9c405
# 917e9a5487024a74875fba21ff3799ce
# 428d07f37a5b499faff02cb993ff561f
# 39a4afc7824748e882fa3e05383652d2
# a8043c62d8844ae7a9c7bd20ac8a7577
# 06a86231f8ea43788173fb5b0d6976a3
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 05373839313345f9bfab48e845b96511
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 9ea84274512b42b59943c705562cd361
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# bde026896ae745de8b210989a9f4b54f
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 70980a3bb06346898aec26fb115cf745
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# d97af123d7bd48979de1e3eb6255e794
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# f2307866a2b247a4b8dd180bd8efd4e6
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# b2fa4d4e97ae49c19f21087b87d26b77
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# dc7d894580224e51aca0794b6a8f37d1
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# d604bb45c6bb4125900319bf3b67d5cc
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# abefb6031f1340cea1142dd1b428faf4
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# d09f6d4221cd4bb5a5697dcecce5a272
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 3499d6c550764ce9ac3d7ea4f47a187b
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# 1b6a7f09eedf435c89123c5ef460ed15
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# cc33806d8aed4290977c168da1506ab2
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 96dafc9350e145939d89af9103f0afd0
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# 08da4afb2f19431f9e10e8951feb7124
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 4fff0a88f2f143aabf78335201339bcd
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# f829622ae4eb43a1a7396e0a0905d1b9
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# ebdbdefec0014657b7745edb1db18982
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# b082af58db804371aece78b535e27fa5
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# f1661246b2dc43c894f31af00543780d
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# a15566adee7f4a34a94d9a4fac2e06ab
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 7dcbd0af8a58443bb64cfe7af990463c
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# c9c530570c024ed7bd2a6e66b9e80fe4
# 82a2cd53d3ab44f5ae549eee46b19c84
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 4b46e5d84e6e49ffb4bd9c7a78683788
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 5a1fd98f7a4249b0a55b90cb4fe52872
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 4d425198906b495794c764d9b7485137
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# a0f6aacfb95c494eb1c3b71bf91a0a7e
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# e1e0654662e64b47913ab2ef4db66930
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# ef34b9f2131c4d9abe99d86195bdde17
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# 889a783bffa144d1acec97a780691d85
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# b0c83b60ca05494d88d71133cee514e5
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 463254d523fc4bcdb75f04a05eea19be
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# e738efe14ecc447ba2b8300a60cb3f1e
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 179eeb0201114c3ba843e5f7b35da0fe
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# c2edeb78de3b4c4dbfaddd88703cd404
# 8faf935f1f5e48089602d18fa513535c
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 4e8899050adc4a77b3bd85ff15d04acd
# 624f30bf534f4f5384ae73e1cd2a4640
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 0ecbd2804c034a96bfb9c6ee4a4833db
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 5512a9d114b146d1a63ee50611517bbf
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 98938067633343a688001bff4438a4c7
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# a42f42b2a7144a38bacec93ddfacdb5a
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 305a962e6cb8410db45e67ef3e9dade7
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 93ab92c2691e48c8adc90978ca1dbf89
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 1ba0a24d77c5400195b92e378c269ed8
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 6717840c36bb4b0b878e03dc088c2c02
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 5c74878f071c4373acdb886b4ffd24fc
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# d09609e14fc345239a3240662c7913ce
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# d7cc5941af15400eacffa106206ff67f
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 7a00b1d9774845de92a418aea9a1c104
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# d69016eab0e84dcb85cc4ea40e5cd3dd
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# f82c681b51e24e25ad7cce2e90a76de7
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# 70066c4662144d988d6f19f3ffbec97b
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 529f094324a54e4a84c154d12c1a073c
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 80895fe93d6d4632bdb2ff8a3e79c6e4
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# b2d6af70f27f49bdb2e3bafca9eed813
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 73305b0923bc4f77abdb1b248b734524
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# a8107843634d4504a2d33ac1a9900c69
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# fd7ea02338814e3eba8fc73d089e31df
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 66e90b1e07be4b6780d0c923912b4f28
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 346f4cb6a8e24a9f8d9691295e4d7fce
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 64898c7101df4a54aa0dc7014e5a688d
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# a5a7fa53487a49abbc878cc81d4a55b2
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 32c7552ce5644bc389d4428d4695e3a0
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 79670a04478a4b4cb1be0bc9998a3640
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# a81dbccceca0422291049c47e9588f4a
# e08cc36ab640486897308b401932c770
# c9ec6e4f8fe64819ab7a3988612d3156
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 0f92132bcc524205a957e02292769af4
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# ffef1530159f48e6b85e9260cf8b2c60
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# aa84a129289c4ccea31136b051caeb35
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 530ab09c4b4e400cab24b51460985857
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 7e5fc150bb144275a14ba1fc448e9090
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# c334e52ae4204d289bbf66b8443973cc
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 2945b65e00414f90acd3bb98bb314864
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# cc23d0e29e2440e88481608fb5566b1f
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# c52b8678b5174aeab75789164332637b
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 4242094022804541b7fc1b16c2d17523
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 54509457f56146d893bc015cfc027f6c
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# e3e7de8ec58f4d3385b3bca6b418748f
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 4a82970bf1f1468ebd70c6186fec430f
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 323035e95dd244cc8f630ec19b68a63e
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 9dd74f55528c4e1ea24ebf3eaecb8ae2
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 6d5d08d199c4453bb83a90b47f971e37
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 8b70a573a3cd45689b0ff2239bfe45af
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 2ecf7f356f7e416a8f87f7a92edbf88c
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 2c2935ebf5714783b3fd5b9b74a283b8
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 1d83af406e2644489c1e9fca96c00087
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# b52770415ffa460fb375cbe9f7ddb293
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 9c21063a32ef4df48c8bfe5c7c285e81
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 323913dc94c344e5adf40531dc690ef7
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# e70c699a4187434383aeb949f7f7025d
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# f0748659884148d9a2d70a988c1aef31
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# bd0ac88e23a847f7bd602bafefbc5423
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 8981e0965dce423aab7fdb99d29595fa
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 1ba3f392bebe4ff2861621a0fd197ab6
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 3cb272c58a2c4102a17829ebe769e6b8
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# cf231c76bb4f4353ab7be807ad7f89cc
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# 56c5ebeb690d47779a92f0698441d949
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# fd85b3c5918a4f2ab5023c571c545b43
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# 1c92a5491c9c48c2af26bd2ad05bf52b
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 2fc4fa74e3d2407fa19a38869863b0d2
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# e858f3d56e9b45089121909f949ee5be
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# d1034b86daee479d84e6dc27445614b3
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# d1b4db86277e4ec7915f255e8bb437b9
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# 091ee584fc7d4f23bd119e7713bff7b0
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 6807b5afd63b42c48590cc2c6503566f
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 7857c5b8e5384e1caf05bbf442c7bc4b
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# a5d7e2d77ee645349a26907bf06ccc54
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 28599f51d6f34f6aa789e66b4d58bd37
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 8726bf283da544acb8a6afc1ab4fa9bb
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 0f4f4ac3b52a46ac85db2d4c55948470
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# d60340dff4a6404299dfb65f7213c1cf
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 7550f09a54a74420b97aa00b9ee8c962
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 979956feac7b4037b705ceee8a6c86b9
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 7415da32b60b468aad58bd32233816a0
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 2f18ce02476d46b2a25c0fc3aba8f08e
# 188c4cf070954e98b37c036f203f206b
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 93de29d091254905a36ada289621bcd4
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# 20a1401daf6e4ba1ad9b41ac9d28edb2
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 892252b46ab04e7e847878f0b2769eee
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 6648654bce2e4b5db25878a0648d06b7
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# cf0ac23c71b8491990a751904c4ba11d
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# e908fc0600fc46239769338889eda7fe
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 6ac579610f304e5db6b36364e26b045e
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# bc8bad30f0474a2ab822de7aca6eda1a
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# d9c55cd03b5e4c5db826fc9fc7148f34
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 89282d5d56f44d74a2079938e46e4b8e
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# a0324163f20a40f1883254f6a59a09cd
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 1aae1404fd3f4ba7b7f877d3def7d974
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# ce7a854f9f954b288885bc9d3324450f
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 82869d2d43984e5b96ffa62c191b84d1
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# a9d592ca950f4571b2b102985c776a3e
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 15a9e7fe1e384b51bd883a44bdcfb26b
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 8672250ae7ce4aa48f62f047ebd8fd64
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 15134b7ed2204aa5b41ef760c72cec42
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 6f78aa27d9dc4416b86bc2e7607677c5
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 70331ddd2bb84bc3906725732f2cf052
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# 8608983a89b243609026264e7c77e2d5
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 7536c4949f3d48c98aa72be83430bfb5
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# cb440ae5e2de450a81609594f174dbaa
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 7e043f5c1c864c4699e55a08b9a05826
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# 1ccd06aab5ea4680898abff60f9f0842
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# e759775220004d2b87afad55079f5d0f
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 4650260bd1da473cb0020f1cee3df3a2
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 0fd7d2b2b9f54f3fbc1ab68e43387f99
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# d6ae4bfe067f4e3680fb84d67931ecea
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 068afb9f586d46238c350a29f140cf22
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 7be334854e864bac82f1245f31a4b14a
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# a673ffdf867d4056a83c9b6b5f75bb38
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 559d0e75caa6470cbc37fe21cb1cfa56
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 2f91a84ba93b4e4d9c08dc431dfd7067
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# dc24e381096f4f628e936374c0e9e545
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

