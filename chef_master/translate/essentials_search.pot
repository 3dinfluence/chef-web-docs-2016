# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-09 17:31\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# cf1bbfea5b67418f8a4394ee843f21f4
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# f60930787f184d539a0d94d167dcf310
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 8ebea44972784b59ba87e366b1abb9b1
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# f51e1c834f334a40834f9706cf5b1fd2
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 0bb06711060e4a11ba38773ee1510d56
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 6231f1f8069d46f6af50427db63ecd94
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 48d8e573abae49df8d1da628772d57ab
# 2e62127473ba48adb64c8c62d073708c
# 49d5c6dccee14cbf93d8ea9bd0a37c95
# c57c10e4c8f64c6db953e7bd5d162b63
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 4d8512520c89431e9dca5cc369557115
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 7a591233fdb1472082c0304a9ef7752d
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 620407ae836842499617149410e2305e
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# c3524182c1024855a52edf19414db88b
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 92dc5e2177b643ed99ebe7a7dc3e4c99
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# c117700b8a844d708199bad51b58e0c3
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 543c098adf2e4f01b9e66bd48e87dea6
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# e45520580a15488c96bf3b2972ad5204
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# d4b0c6cf097f44e0b5976c8c2c8a2127
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 528a556e38ff42ceacdd5c18964b4aaa
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 2d6f2e2e30da45b4a1a5bf6f9b181831
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# a8d265d1fbf14b12805055f1223251f4
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# fcb5dc58cbaa4888ba5fa37be76fa6ac
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# d75b8722dd1e40ecac16925738f7ea31
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# d76b72d70f4c4735b607d2f0bae4ffa1
# c638689ccc274eb28fc16d2f9dd93bde
# 4ab48dfce13744c3aee189234e426cdd
# add8c91109fa419fae1eab09c46e1312
# 5bcef95c3ef54787943329370c623a1d
# 304aa0097776400884273f47801c86d2
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# f74aa40798bc4b23b917e448894a89d5
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 0563391686874693b910e148cda7beb5
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 655b186ba345485a8437490c45090feb
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 9492450f19734476a642c419835fd6fb
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 090b7cea792d469592ba323e2f064f36
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 41dbfb1c16514c7db15d5f90f6bc15fa
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 3e9e396bd6b6494dbcbb7e4d1a222715
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# dafa830c5d8b474f892588648b12dbf8
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 8aedf8f091c1443e872f5142ff790fe1
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 15a565f4f6a74b6bbc254eb757f463ba
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# c55a13bfcf9546ad853f365840a6d3c4
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# d5d4eff7a3884ce0ae0b6c2980266e51
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 728268b2ed254737a39647a1f24d6584
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 90659154bc58427cba092a078cc219bb
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# d2b3c9ff88354fb78d966b943ac5c508
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 4381f8d1c2a3415a8e7ace5e7557390d
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# bff691e68beb4dc59489a317e033dc89
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 7d0d49fa69054486bca97ebfabeb8308
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# a1f8d225e19e4611b739fb9abf4767aa
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 30bc1a104865424699e8eaf81d539709
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# e2052e5e820740a58478b21013d3d1ed
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# f1f955b4ee0843848f408a51d7ca8ab3
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 747291412a2040299f9efd2021a117cc
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 5e2311fa56784595a82eb8d0a0fe3a50
# 05e4da2dfc9f4f23982786e59acb32a8
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 806d4da5b5214963872733210644b86b
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 7ac8adda7a62433bbaa2a465e2f29e19
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 2c4c41f8e42c46d1b1bffa54cb2808a0
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 94b2142d99d144f2ab81142abfae970c
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# c7c07d2a5e3e44f89cc1066a5f32758a
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 605eb29faf1249bbbac3bb8ea497b168
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 629ff7dd57f8432f85a9d50103d46b4c
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 66cfafaf433140268f759fe8959a496a
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 70fc75f91ac745d9bae64a061abdbb55
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# e390efb636f64749a494bf1c4fee3b04
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 20046e6498bb4e3cbbdf573a7744098d
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# ceefa9217e4e469789ac51ed46b9c935
# 79e8e05307304e8b8bc0cd2136cebbb0
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 28bde5c4515a409cba6155ea2f436445
# 47e986b29de14f0a925b133670953d80
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 29c32f01d55946a2ae2ee835dd162908
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# e3375533b9a242debf3402fd4105d643
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 9aa9018ca63c493aa6b60938c5659db0
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 2a540287ec28433da407596b8829339e
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 2471321794b34a71a3f35ea43753189d
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 2f230fdd456c4183bf849da0b14a1c46
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 5ff854e01c184b29904bf0177efca36a
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 4a888870f15f44fba16f3015083eb070
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# c1c7bd818f1f4e449e0a4b7a69f33ce0
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 87c9057b8a8b4cbfa227ac1753423032
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# b79bb37d4b3e4a968a3cc3145a5c90b1
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# c1e9d35ab9af4653aa11aaaf777b7eb8
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# a555d46e3d9145368493d3e20ab6ca43
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# bf07915711a7480eae6d7f8e968bb6cc
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 3acfb35b99e2411ead1fa56857492292
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 9fc94feedbdb4c7cb5863d8821330fda
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 27c2e29d2d7146d1a30faea30b27c818
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# feac13c186ee4e699255b0aaaeb87d26
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 66deb5438cb149f8b2bf37f4dd1795c1
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# d0bcb69bdc794146ab345c80190da548
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# f60998abd9724be389442a5baa8a71f0
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# e050538f2b294cf794cc0410ea10f68c
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 3961151b3ff64672adbefcf1ee5f7fb8
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 7540032b69bd4385922f0b8565a97d0b
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 9a37145a37364d4b9c4c9aa8a3a89f57
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 5d6154844d9d471aaae1cbba309a47bc
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# eb4bf69073584959958688a177f0044d
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 4cea683f9be04e6491a0a3b4795bf261
# 5aa7bc000a4d455eb64de3bb4cb82ac4
# 88e13da5ec8b4e18b311ab22c728eba7
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 4fceea9399384e88be9cb2960843a45e
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# e6518027a8e540b5b3c70ccd0b4294bd
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# e4c387a7a5fb473e99a97f6d75037c69
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 712c9056c8ad4ffb8dba913023473fab
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 6c171334122c40f39b541d35269be67f
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# efec06618a7646b79287ab1f2c953884
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 4c0945e250314b58bff167e48ac635e1
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# b190c501be41456588277e88c2669c8c
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 6c0ebf66809d452d9883937db9984bca
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 458043e19787464c97d5abc2771f6a63
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 7278fd1aa89c4500aa054b920b170f06
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# fd1999a0483d457cba1eee8d1a3ec130
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 9579542b23174d7882c82fb3959a8ddb
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 401d37355cd8414c8e6284a37d3e55de
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# dfde8c7deb16403fa8e7c1ce94e09753
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 87f3795c6a1440ef960eebf78bb852e5
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 7df13119e1f04ce9afdd987b6f541545
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# bee9b2353dbc4adebd1dbfa53a72463f
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 4ec4b77951db4c278d894a585fb0e5dd
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 2c35bfbe61c7409da5a4872f8d15e2ab
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 96b8d713bd964088b5a1545f46972c48
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# bd9581a77eb444859f1db9d1e5c1a68a
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 56c56e3dd1d047d9958d4acdfc1b334a
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# e6a4824a673540519dda03e4a3b9efcd
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 39573a9f80724c59b7a01657694879c5
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# b9580812c1c346c59637db15219c8b84
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 104651cbffee4168a74874ae09cda724
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# f7f7219d1c8e475786448347ec30dc6d
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 8e554566fcc7485e84cde32d1be2ab02
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# f4a5ddb6dd2f4f64a6985a43c960212d
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 66a0cfc169294cea848324fa7ca978c7
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# abaf8d87c878469a9182010939e35a4b
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 5416a23469af4610ae4d82d0df2faa2e
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 68ef8b2bb0124b36ba263c52c77005d2
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 00a763d9cf194c5ca291c85bb6ddcce6
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 2c23726381fb4e3e9644bed596b4c598
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 317c4d9e2fe444748828cbfb9a7ef0cd
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# d8d1405c14b643c99685d06a986787e2
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 3792c463ada04894820dde1cb4ad7a1b
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 046a07fc17a543229f4e827b82e4ebdc
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 19b6857f3a2c434fbf3f6dd945bfc7e6
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# c276a9cf947a42649e1ab8ecb86dd0df
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# f611952cdb7a4243867b0cae2bd980ff
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 1c1721e77cd744bcb046a1ef6b7dbecf
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# bee88b1483524ed981cffc5a8d920c08
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 69fc90588a894b03ae3c1c9bcc841127
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 2d7f9b59f23e4174857130e374380c72
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# aa24026eb66e4d6098f6690dda5c6eb2
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 6515ff0c5b86418086897062bcb3e847
# 7388672b92e64b649d6d87f39b5f3308
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# a54beb3c089a4bc8a5d5edff9f1a75e5
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# b6cc0e4155be4a8683c5b3754e917ad8
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 04d199d175b0405091ce0601e9a5f1c2
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# feff03a06a4c466189a27c0c636efdb3
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 9b0b8f141cf04c509d85836d451e32e4
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 35396e9dcf5f46d7b1448824b9c52d68
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 0e958c733c1d4d68b74ceea9d7b05588
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 8040c5ccb81b420f998ad78f77bd0795
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 5f4b01925db94b1594435acf598da5be
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 03ac8d5c0b174a87a3080c8d9d123920
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# b247c59112a2483da5e189eb2dd898d1
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# d9bc24b0b5f1418a8b83f65901928944
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 2013a862f80441d6a1def12c8e0abd44
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 4fd44bdbfcdd45d99474bf4e9ab72e24
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 6a928b07ab1544dcae2ae421b7d46738
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 469d0224338d4ca0ba7ed1656a66f54a
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# ba023e06299c4af4ba61ada61380f7db
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# cf53dcb07261457297d7a8d90881a92e
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 13c10a4c8e524cc88aa0a8cab68be6a6
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 92125879512e4148bcda5808b993d41c
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 9852906ac8274143930b42f2b5fb28d8
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 562cfdc0b1884090b6ca4a4af2f3c138
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 221311cf336248ef99ffa314f54bd643
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 97977f34bef340008853c279d66d060d
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 49a014c3bf104bcc8e3223eaffa39f4f
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# aeaf44038967431e8ae8c5bc91b1d6ee
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# bf809b3827a44d9fa38f6adaa5f62510
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 8fd64efa41224057bafa6bc9ccad7151
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 3e60234a7d624df1b986492599346d85
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 23b36b5759bb485cbfed1135a5f25156
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 0d1f5d292eb940c5ae9d356ab65250b0
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 81fa92cefad34f6ab1097540892494c3
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 2beba95cef4c45c080ba69a687983633
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 6c06b37154454a3190f1dfaef902336a
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 722b0c03b3624d83ac85088e27ff0ded
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

