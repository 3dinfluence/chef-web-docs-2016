# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-27 15:26\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 007bca2553c243b4a3292330a3fe8d42
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# ee4acf6941744b85888fb10d30743dfd
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 730cd727361e4ef28b71f533eea58a94
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 7dca82106f344828a6ff8a94186f1c55
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 1854243c39c64b95b95432cbd8c0f7d1
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# e99d871884e14a529c4985f66821292e
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 92010e5772624b71b181e459cfa0830b
# 20f960d32ed041688601274a6e1c0b32
# 01d947071f7a463eae4564c2163b01a0
# 72f8a6c3f73945d38471f1fd776c6681
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# fc3e51373727411aa684b6d5ef450f8b
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 302ea5656e78400f8c70b089bd7952dc
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 164dca967b2041268ebd9c0de15126a0
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 3ce7dde396ae43ce9e81d72cdb387dc7
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 90fab84571d0405dbc121bb2e43289de
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 3f682d26e0924bd995a6392cc3be40cc
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 1e1f2360e4ac4e02aedd738be69c2298
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# ff89b7a60a5a40c4ab6589bbd524a1eb
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 028215405fea42a2bd59c1112a53d88f
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# be8f3729b47b40e09e89382734ae8256
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 38a0b4875f134a8a8497481cce8285d6
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# a5df8f3d41264f7a92467d2d04a1814b
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 6a1e06d9eaad4748a2ee66680c0fac25
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 9ed51501646044a1b635341c6dc1dc63
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# d930500a6fbf4cc3b9f44ec69496cc16
# 5e73d50579b04b6d9a828395ac90a7ae
# 4a521085a2bb4a4c811bcd0f4033be06
# 2a7b0d9a22134d178701a452e6f2fa84
# 933b5a2e7080446287ddbf18cd513fdb
# 0e61a3ce21974be7bf506faa43c0f91a
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 833b4fe7a0d64f6babefcf724eeba0c4
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# c1a10a94a9cc4292a201f37b80331aa2
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 21514645bdc046d3a1d411ee6e65b925
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# b6faee7016d84101a6ff2bf3af9fef93
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# f1daad3e89034fd0aa92e7f787e4211b
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 0c8ec8e831e94d9cbcc24b4dcab02f3d
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# aabcc8cbc4ec48d29861dd5e66fbb8fe
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# c3edd3dc43fa452f94d831eb764a18e0
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# e3094abf955d4109a858fc518d864923
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 2762d4f997fa47a3bff9e7745974d292
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 24c26838d89d4a5988a83c0090d046ec
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# e21c6c4fc1f04a2e8cc6d95cc5df092e
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# b97d147772324d19be0523f618d0dbb1
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# b8bea9fbd29b4b379ebb78e682fa701c
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 94f504ce3e6741dd91896bb89dbfbdca
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 6e616c80affd4bedb5b145cc37e0ebe6
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 962b422fed2742f9ad7308422346f6ef
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# dda8e51192a14ef09e1f3ce0bb89f4b8
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 16dac4f79aae41cc91a23f395311327b
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 3566bdfa95f9414aa9af6c50655ab219
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 4a784c4f652847d3b25d8ec8edd1a812
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 677af6e9f7c14886a48b44b7b00a6610
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 672d330cc02e4f9ea3a77c69b5513d96
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 08d503e385c040a0b4d0cd766e419f97
# 20d74caba2fd4f0a9ab0221bb0d69ee3
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 0e8316f18dfa4a428745c793ef68e47b
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 6e62013d0b15426ca18fb28d8af3bb80
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 50ae1f8e93534a05915105ad2fc4128a
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 2549131bb7724304b1da364e5dc9b915
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 477da73ee11141b1944e955084b54b3f
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 0f77113b6592433ebb3180feeea26637
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 903402651d1140ab9d79bf267c77ade0
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# c2295bc278544e0bac195d17ba90cea5
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 62f2954a8a27489291416327bcf01c05
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 556adc69822e4c6c87a34e23b06747e0
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 6294929e404f4e2bac0d17f69f2727f9
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 6ce94c8070b540aca46b2c3f841fa58b
# edad2dc57bc94ec8b629b19e8348ed98
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# d4069de816bb4a699b805c37087c8853
# 7d1b682729844900a31781af69854a3b
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# ce0ae21a06224de9ad03845280d77834
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 98721a84c7de440fbdf7d2b24d57b3c9
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# a2c615bf6f7e46cfaf80be2553e3cf05
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# da6ca633df834239b68aa24b84734f91
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 5b0aad9ec3b74cdcada855bb38f882c3
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 753f0aeeede443f4a1765256c45bf2e7
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 8acf2ac693724780a1c6c4187998e108
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 5ca25fb5a2f149dabf9167c03acaa475
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 62e9200eb96b4957af7d33a882a36a13
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 00e800342a544a95820e5c892fedd8a0
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# a465601ffaf34fd898be161e5a69450e
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 3f2576c2c427430ab7f300fc981c372e
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 5387dfc6090843f8be16b6dd146e38f6
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# f5e4c8243ed1401d8f6594ac3f99e9c0
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# f6283693723642a78e6abd7451ad0f41
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 3bc3828ceea24edb9acae3f0993da337
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# adf826cf626f4af497c55b57b286650b
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 9534f29498b44159bbf2d3305f8dc76c
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 54f2e787ae5e4e80b49d40389718027a
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# b1e3c920493e4a8da2c6922a4c3a5cb7
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# d056d5a8234947f298f6efc78bc31ae6
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# c16c96e044b8482587bc8d24fcbec509
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 7e90d270f1ff42b79f61100c945f99a9
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# a567e37a503c470d9400aa8d5f7d1faa
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 4ca6f8a7e389443c8a3a1c54f6affe18
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# bd8d1a23d0ad482c8eb1386115c43b8a
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# ee132e06e78343f086a669fe861cf127
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# d6481226adb74b628fcb57ddaeb7a9d5
# 87eb5c6a9e5a43619feef96340939bc7
# 514729a79c2c481da70f9ffbd0a1ece1
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 8ede694c9b0240d0a2efe23ad7af288a
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 4cb0ef697d4240eea0c034d1fb524d9a
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 0ebd43003f1b4e718aff8615b7e29046
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# f7d14234312b4fecbf76f1ab8faa39d6
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 51d8d28533594a06a9bca1dd9bd248e5
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# f5c042086451431698aead17e06d148b
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 41aa036bad774f19b4eb71833807a9c6
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# d88daca79edc4749a088c3dc2627d8a0
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 3301efef6a084bf49d4ec1fba8f009a0
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 992ed430a76343f9b108a2831e4ca4db
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 89f1d6662ed740038a7315177399b822
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# f15d35c8c2bd432897f3d91461c5a926
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# e758e7c181a6429aa0158d81b91dbd77
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# ec2bf102e186410ca6a013231d10d4dd
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 97a24a09297948f6a7f52ff18612b427
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 5e1178e6a9c8483683b746f097755a71
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 87831b2d517d47e283adff0c037ea3f6
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 713ce7c1fe3946c98962ae67fe546e44
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 8116bf3a85734b1184b88e9bb379e03d
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 314e8a07f54643f99ef306fc7af8f6ce
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 56f959a2757d498e8efa3f6de1e1f79d
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 937c336ee0c74de580692ede799df43d
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 4f834e599d204124903a0c9fb959f2d8
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# e9ba624fe59448e98a7314342ffcf921
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# dbf5a37f83554627befa3803f69ba37a
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# 8a420ceb1c3e482b99188e9a2c1297bc
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# fec0de6b86b140269274a9ed8926cd96
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# c7453782191c46d98f20132b51863550
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 3ef9c1e9f8fb4af9880153d5250db17a
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 0a3d722288324737aec3157625e6f1bc
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 94ab38177f4c484b97f2f251876214ae
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 7027b1a3045b47f2b88c06d5494dafef
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# d81344ccdd9d4938ba8f6ad4e9d48686
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 99f9497ced954015aad81762b92c3275
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 806ea47ff80e484593961ed5ac2662f6
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# dc529a389f1144b2a5c8232572d1a1fb
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 21d51c9ed3404e259044fabb948fb28e
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# 3167e7c88be34f9a96f5ad46736ec4fd
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 91646392fafa4db88fb0d1670bec05d0
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# d42d59148625451f8c64fef22005c896
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 03d465e12d1d45f490b371d72a2aca7f
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 910fd4915e254a33aed4ca07a61d2e38
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# c3a0c2cc859e4233be940d6411b505b9
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 00abe2300aad4555a0cd4caa1f06d54f
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 1e41aadb381e44d981c423c08b6da922
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 371ab49bfed6474c8020a0a8ea20538f
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# b62d763434ec456e8780850065f22150
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 4a77fda125be4c79a2407029e7b92655
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 9b0fd74aea284ee3ba0545d75bb71e6e
# 059eee30c2bf4719b827e46b0cc2e0a7
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 4912eb577cff4245909722af44ceded6
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 66bebf4e171f4c30af84cff2ef738fbf
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 7a198ca01cbb412284b483ecfd2f29fc
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# f035d63327694c549e4a87cdf6c9d557
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 4991262dbd9b41bcadf3c2dc1e0880c6
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 38514a6c105f4b6aae84e591d71d65a7
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 8880cf5064ad4ae2b3f4be055ebe33fb
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# ef802678d8664393b25174c74fc1b053
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# c5ff90d6ed4d42038425c0bd607101f8
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# b0c8ecb5d3e74750a7ec53a0298c6f53
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 7c3c588b7a504535a5e47092958d04c4
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# a99c1e89401c4046964f2b319eebdf13
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 2ee1b9fb202545cba939d40907501fcd
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 4d3f38d3a44f4241859383b61170956c
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 6bb2f7c6a4224c729c748aaf89c19a88
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 53ff77a65f834735963a9f5ec617d277
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# b9fc3304486a4853bd158c57b92f5fd9
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 8273cdf3ef134ff8bb0d65d818474523
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# cdd9ceb321a94db59e31a3bfe594fa75
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# ea0a4015502a49bba87d3a590dd453ac
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 8e91b10f630640b4a9b1ae9e6afed768
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# f0564414c8d0408eb61aa0553721b84f
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 5fa92e596f464ef99ee18767a3ef6b6e
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# a3f13c21c3514ba3b6645954bf9605bf
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 2aa20f7d79bb4b55ada233c00d374180
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# d79aee1361ff4cc7bc66ec6ec66082f8
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 504758f3465942fa8596d180a5091cf0
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 549903b9bb244e5dbef4dfaf53dcfed9
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 589c1a2ee99c46dc91cbfb33b74ec1cb
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# de349280e389479f81bd7be43a1d826c
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 3e55d8ac8420432787a0225180bb9375
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 99e3933b547541c38f761dd713dd0987
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# d46781750718411e90879d7dfe774137
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 9231ff1f62b7438d8bd3be89e6e65766
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# f91aed40eb224c27bc34c8260e126fb6
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

