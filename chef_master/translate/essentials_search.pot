# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-21 10:57\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 1710497b5a514102a22abfe1eedaae48
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 51ccb048282a4275b84345ef4862061b
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 4cb2b9b1930943fa8bf4d9b55df5453d
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# f018a80151474e918147b8e7179efd3a
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# b01d727f33d444a486d7c716639b77c8
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 3e3da6fb718b4842a7f41739f26b4736
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 9a9731b5519e4e82a2abc982056e7fd6
# a41ee95c92c34ec091e3fdb7e2b00629
# 7faead8022814203a197177cb6e922bc
# 8b88c920387e47958731bc672a2b1d8a
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# b779e2f356dd41d79f08cfb339578fb5
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 25eb630f22024b2eaa95ea847b4ef492
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 180bdf09730140f0b776c2102edc7730
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 0d8cc758f8bd450e848d6e093ad6f3ae
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# b5fb6ef1838147bea3d132f1356da4dc
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# df2410f86a434acca96d6c2acacea5ba
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 7d9735a1f5c948b29279c4066e662f58
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# b914c05674574198be9ab8f8edca29f5
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 6a383b405df44add97c471517420c707
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 391f298d48914f709e85fab18733c36c
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 872fed703c5d44c68f8df909fea31109
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 60d98443afe04f9fa80cfe2f454ab1c4
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# 21ae2e21c2ba48a681d2e54760191f46
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 239234868a2648eba8dc10382e690a9f
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 1bd61ea4d4834df0b36040a7bca47d5f
# ab67e89b738b4d10b6c8fb00509a5ef6
# 7e2c945c5aa5476c8f9002013b9a235a
# 652b9fa6e26c442fb803c879159c9e97
# d46a28c1bad647fa99fdd1a5003de682
# a8b71a6c7c204fccaf5b861bf6c6d63e
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 4e75f1fbfecf44ee81bdfb40382c271f
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# a555fd156ff048d0bf3de5984153e8af
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 369794b18f324116a956de529820a5b5
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 3c6c2adcef4b48be94523a3b5737234f
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 390fb57d525c44fd91d46fc9d71464db
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# a12649fbe16c46afb17632e97a71bbbc
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# fae16f0235404782870f0e66b9f3895b
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# f637b529e2484982a0479cce1aa6abac
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# ec1206dc919e4ccc8900b9b83ba3a1ca
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# ab0a675d60104f8388d18ba1d5ab56ce
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# ade9ca58e02048ecb7f092338c5e6a92
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 1ee4127bc7d24eacb18379e753871942
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# f4bca8318b134f96a8bea61e858558a8
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# cfa8019f6e1e4f66b5f89696bf086f2f
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 652dd553b1294af88675b211adb0985a
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# f6496b828eac4aaa865248d6a10896de
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 33f80d1911b6475ab0093a52b7c58756
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# df81e79a12ac4115aab41b2de1996f3f
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 3706839f41c047a5a58831858389c912
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 5f338bbe11ca4c9abd7639ebb102a70a
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 218321d768f64ba397e4b0c2e66dcd65
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# b2692ea3617d4fcaa4a2591df1067427
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# fd0ed92d98834fa6a27c7b140764377f
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# 8ecfef2ac4144c358054eb0d795f9b8e
# 419bd9a65e91477fb7d0474ed938e05c
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# d27906791fce43c19fd473a83da5f725
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# be062579b63148fc804078feb8ab655f
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 61f7de55ea53491f8c0e5b264797ba29
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# b10b9165ce4f4409b029cd355036c5d6
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# 4765cc6cb86d4d6a9821c22671cc0ad6
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# d173676db0be46099846063a7ec9e824
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# 9b8b1322daa04b759486061eb9d05508
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 7079cfcf8d934a5db80e730d148697cc
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# dd8b49a3d32f413e8274db8be2d3ef55
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 263c70af64b34ddd971cceb85ef3a373
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# bda2be16c83e4d3bae911e9b80df16de
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# ca3a237577e74a0385f8f66d785b259d
# 36711299adb14e7ea29e086b5dd607b9
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 7ac7a0f14d5048da95c1d36c809b007f
# 417cf8eb3d7142e5bc55ded3a32de255
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 14547e9796fa44cda8c38b861e4a250e
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 2e2838a845e94f34b61de11c61a517aa
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 11a9feaf82434ed49a9400074666a2b9
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# aa9404096b1e4f61892d2ff6aa71e1d7
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# de2664dff230491092cd1e89741b5335
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 93d36c65501c428e9871c19b74a682d6
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# c216758d394343feb531426383b20f13
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 8e9cdd6fe43e424899979e00ab8b80c7
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# f374d913006b4fb792903c9f2ae596eb
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 7da6eec3a3914dfe9b32ef8b19310a47
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# e2a4a1dff62c46a6b15bdd35b3c0600d
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# c398b6b375504ecc9eae59b7870ef304
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# 2ada08e80b1b4fd6b37d0d9befbb534a
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# e222a8097b6f4024a0b08dd005de1dcc
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# bc26d8fc458f4d86ac9af8b1e2f5fa0f
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 79c5e86f71d949beb94fffc3c1ea30e1
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# f219e776de914948ba0ac1f2df44efd0
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 34c9a189afa04612b0e9598598def472
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 38278ab78a724c19a280c70b69bb49e9
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 7672aea8cc634f3387e35be24ae6f0fa
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# 517221c10c3f4adbbb27f34790b710e5
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 84a8292a9c9b4a34ba32a008c7c4149d
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 25525f228e5246b2a1a1e6ae6faac688
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 867d9e38cac54c10a5921e7f10c3e2a5
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 10cb17efb7b74f61b0a170acd25b2b39
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 8459cedc6c304c4ba820308a80697c2d
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 163e3b90429749d79c7416b73ce0ba54
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 4da743acf5dd4196a7454e0a92d05ca7
# a16c5dbc798f4f368714ad36ffbe8429
# 95115d75dd0b4aab86ec93f71a946e88
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# d7ea61bebe34440fb21f9b4dfac534fb
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 49a23b990f174036a15de780fd359c2b
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 7f56f403b21e4e99818981af8b96773a
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 205ed9f2102f41a7a8a30b127ce319b1
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# ccef226b4ba0409da4588cbe172e51e8
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# a9ba30abc946467d8f0c900a72c0231a
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 58c751382fb842b6abd119bcc1fea17b
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 2da41659a56e4516a6947a3d3c99ef13
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# bfbad45b9e0b430bb822bb5de18b9c92
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 9bbb9e58b89f41aeada52dee3f4eca73
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# cdc5c2a1a4214a76913ed06249bb600a
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# dcda6533c06b4b4983369779390a5ebc
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 6cf5a23e3f1e4ec09cda6f270d15e099
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 147fe4924b3f43f79e7dd62a068753d3
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 61d724fb232a41f2b86673b54205b194
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 107a5ba74b0840ac9b7799e526e1e743
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 7dd7554274c74b01931879be43a99ea9
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 8fdd74d77af34a50a43c414c7900b3d7
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 9349df1508de4a329f6501da50a56cda
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 0f1fb062bb7c4ee0a544fc7f7c2af008
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 9fd60de10c114716a8b650ce6c2f8d38
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 3cc6498ccf3e4f50852900fafccdcaa0
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 8ea36a3803f4488f9140d39ca767030d
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 9c5d75ec91614bf9bbd825676bb10c2e
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 4428e03d9df94d56af6eec8d450d5fa4
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# dbd26e888a3d4b51ace4dd56e898be8e
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 36412b282d6f4c3abfff8be847abf9d0
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 20458ec87aba4ad8865c85ecccaad96c
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# a9126ea0f8ab4916aac557ffa631cc91
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 0a2543b9ade4423fb066214f94218a76
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# 147a9dc0e9464fbfaac851a245580a08
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 09618b71d4ed41c6ae76e10dce213898
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# 9144ab5da955495d92794bf4c641304b
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# b21c724b11cd40269f1ad90cbf693763
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 6a27f7a9409049d991268eeb17ea05ca
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 496f12acd7c64df1b5382b40a2e1745c
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 2fb95d42d8ff4a7ca0d5eed4c8431e9f
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# 9d48df4c4e394eac84731fc5cfe3fdd7
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# ae6b05f1a89447768173cef8eaf43e60
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 4a80318342b64e819ec87044b9dab05c
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# c227d94d38fe4183b3966709cfff329d
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# de8f97f8abd54c7394e684f84c569fd6
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 4ef12aa854994c4a842918e472d5e738
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# eb20047c85f74727a1df1ce416aa9333
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# e7c4e5f2cb664bae9b783f54141ac246
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# caa929bad847461083f7d21e570451a3
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# e833a47cce714f7aadaf3e84f670f5ab
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 9c2fb27b471e4562bd3f73c6bdc135e2
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 59b39bf3f0364bc8836288723e2e2d39
# e7f1b9e0f1994db98098e91f49dd0341
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# d56ee3f2e41645c0a28f877c890fcb18
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# fdae75fa643d428988cb0268887c54a2
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 3346b310c9704f6d9af823877081e176
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 57e61258bbf045b781ecbe176074f504
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# f1187bb33f29400d8212915bfa9b3413
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 741ee9ec2c4c42cd80799c01a74d1e52
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 53e512b6eeb3470b88f6100c59603021
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 749c2998a0a24e049e009ad90b7fab29
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# fa7c1d34a5a44925be987050adb7f903
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 9f0e9fe4cad6474a95866ead95349f92
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 04691fe8ff144f9eb496836391440139
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 1ac6c4fe2bfd465fa89c7bf46b9cf99d
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 6dc44d8617bf41568ce0efa8140bf229
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# d073120861784f4ea5b710825aafed6c
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# 2330cb6c32b541ad90a9d6628fb8bf41
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# a550a143801d42ab9d0c9af18949f763
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 0273dd40b55542fa85d5065dda8e46f3
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 6f9037b420c64a3183f80d845310baee
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 7baadaeb4db340c78a529354e1423e17
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 754621fb170844ee9e095a7e44fd01a0
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# d297037b51fe46b38f7718f7b41445dd
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# d1b78786a7604f4ba2d3becaaab3a828
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# cbff8c8c6a3e48168f7abf61f55859ac
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# a93c4ee1c6e84762b32c0e0899dc6301
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# 0a607de0d20c47b1ae7a043024ce50b8
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 6bbd02b17f8241089adc6cfbacdf43db
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 4e5abd2b977943f784ea189ab900d96c
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 342fffd644df4351a4e583e32e8fb38a
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 5c6ced1e1e94486ab801ed37cab2fe07
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# aabceb39ea194db49101994babb4e26d
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 27d6565bd88a467199e5a630a6dab235
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 2197d735c8bc418698a5a3b7fa3d5c2e
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# e59efe41b19c4c31868e5df4275fe542
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 4e8879c2569e47d595739593e251859b
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# a76c4fe29f244ffda17674403b23801a
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

