# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-12 15:43\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 2821101543b5412598d98d3bb2ed5f34
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# f05ea3bcaf714489af58112a9dee2e54
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# f74ba1d93bab41c4be4a31ccb30fa0cb
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 8fd47f6329334589b38e3cacc610f0b4
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# b6ad48369a3e47a6b5fd1b833707940b
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# fbc2c00260f245b5a25b2f45e287766f
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 3be32f46cf7d4fb3a2dc7710a53f6711
# 05c2375783a04ab8a184e32ba88473bf
# aae96e8ba42548d49492341f76bb783e
# 8c51a071a7f34c4a8d55ffb94dded388
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# c2a1a1f544374a72b6ecd6a7bfd481d3
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 9a659aeb71704b77b42bad6badce7285
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# b2e12984a73b4a8cb67a11e2222697c8
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# a0dd701e182440d0848cf7ce9c62c152
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 211455f107d24d0ab1946875e264e2e7
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 07590b2623b94dcc94a86354034c9958
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 1e8a685ab5d843419ca4c3e924aec728
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# b8d5f39a38244d6da2b0c3118f3eb036
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 1eeec4e286524f7d8de130ff707e804c
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 50d4be180c0c4001b3c588ad6a0789fd
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 56b4d5b903d041c5943257646a4d2693
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# a11ed6aebfb846a7bec0b3645f897d5e
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:22
# e0e54f2eda664144ac9285d4d1176069
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# b690d45d8cce446e8ce0b26d6e09272a
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# d81a4d018f004a98b9d2e6e0a27138b5
# ef88dd661c9b46bf88b0b16bb14988f8
# 448f92af259c486db48e6617eb9d50d1
# a3a614bef27944e98e9ce94b3e086af3
# 65f940c1be2140348416449c2b8aa92c
# 12d26fd2c5d940e1b70d226d7f6d3e03
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# d1d9feaa73404b99ba2af3770aad1cbf
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 02bfb4bd9c044c0ab615478e43a11a53
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 709640f49b1842b589f85232d0874dba
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 841924475a4d4a68b4eebe6fc27213f3
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# d4dec22a37df4716ada9018b092d990b
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 6aad082724ff419b8afc6b3855e377c2
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# d8a825b32c61490fba0573acb0628541
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# d9f213336a1b47f687c549a55be262f5
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# a3af9d129f0647fe88f4e530550773c4
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 2d8cb3bbc0ce44c3ac0c666fe5df50c4
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# fed9af8086bf4106b9c4bd7dad7be518
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# ed50d5921732450cbd997d1a2e02e3b3
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# 46abb8aed48647c49e1b09fa8afd28df
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 2bad0b54810c471c94a33398d33f2e93
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 26ec745576344c749e384f90430a6299
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# 78875b9b54234d61831666e343ead42f
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# bbba0a58793f4864a35c11c7c5254cd0
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 22bcbe7a8abe4d8a8b274288672899b5
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 97a8815b1a9f4a4da386cc023acafff3
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 06b2e23d16a44e11b4f1a66d0b1478e2
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 442c1eea00594c04bfbc3547e71f8a64
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 7b32913732934091989534f24e3adf10
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# c05e3d364003411a9b645bb1327ca43a
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# 836f0f96889445dd8fcc024797ce96f6
# 54ce92bfbf6c4d309370539b37c791ae
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 063bbd89a4b7474394bf6d59c0c6e3f3
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# d4bb2b8f784d43fcbbcd6831fbf007f4
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# ee9afece26544359be20de13918a6c8a
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 75b4530146f649d5b8b9f918021f99af
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# 54b9389cb87c43c9894d58f1e480d45d
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 6bf07bd96b374668a7866cf8e1ba0ca8
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# a63304c61c3445b18e17aa0b119baaf0
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 0871ade46cdf40dea1559032a539a79d
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 89556d549b6841858d1e6c185f1095cd
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 3ae4d4a31c824a499d2188915f3fc80a
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 425eafd5e5c542b089a540ac2c00a7b4
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# ce616ea84d2347efad7854752e225291
# f85cf814fe6f4e3397df349b40f86cb0
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 9fc8c6d009c744a99e2dea68cc137c2b
# b6320ee371804d58812def25bab339cf
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# bce33517c290484a8aa4afd9771cc6ca
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# fcdf4df33f7b422b9b30d1a653647a4a
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 594e8b0097394377a5ebdae5e9a0f977
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# fb168a240d764f1fb4ec36affa9a6e59
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 7d4ef10addd74a4ba2531a130bc10452
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 59f6615ae89c41e299f083c25e6efbe9
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 4af59f2a41884971ba625d4fd47bc83f
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# be58a5c97d924196b860b70d8b0e8a98
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# ac677d3166404a1cb558784826225eda
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 7a705dbc4b3540079765b0b6f190bdb7
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 199fb55a82ee4e019df4a408be984856
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# ee54545b7c434e508799fa45f91aeebc
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# 834abfa93f464eb2a2662c1f097c9907
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 6c088644c516440b9ed0e576faf5d9f0
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# 12a25b87e8da4d8f8edd2cf15f3bb917
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 3ac8081cbe88433a9c607b260a6304a9
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# a58aca8e93854959964d6da2c288e421
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 35b9bba12cbc4d8dbaabf18deed51bb3
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 1a01470a16944eb08fe6fd5186888fa3
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 21a4fe178b3a4c43aa44f8e4762cd828
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# 5d1243a6742c427094c6a2f3dda46bf8
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# b4e8a5bea778400e95bfca285f6e7024
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# aa4668ba67e140a2916b7eb79e5660bd
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# fd0dee52331b4027a56cefb068248ed1
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 3a90e308a7b44cec9f8001147bd7094b
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 11b1c93e9b554b6f8eafcdde214e4bd3
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 12459c4519ae4266ab7ea4d1ed1af2a0
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 4793fb13e3a6431d83431d1b7273f993
# bb9afbde0d15478091ffa752294130c5
# 1ab67676066b4eb49ce8d9e3069e8408
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 752cdfaf24cb4745b9f0e385ccb6d029
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 03c2db03ea1c49c893b7eaf9120d6259
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 3c72a217ee1c43a6a6e8062a71d633b6
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# efc0f62ad26f4c3b86788379a1c5c52f
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 53d39b17daed403a8d2abaf5e3a1ed05
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 0a867825d0cf4ea2be659949019960d9
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 692db0dfb3694371b981f937295f496e
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 455c838d8e19415fa877c35a8808d7e9
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 2fc2adbc50cf462d84c9d5601b6e28a4
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 1a7d61a1fc584cd98fad3833879826a2
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 5218ed30882c4ab2b7fccc2b4f417400
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# ea0b54f4d7b64120b6c7e55d18280f19
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 9f3e24149ece4975938e3e7b92542f8a
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# ee6446dc72ce45db8b7d066d96f9901a
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# f82ce20214df4d2aaa5fb1cafb6c30cf
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 1c13a763a7494f7dab6394242fe86e42
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# b20015eae44a4bcdb0bf62a916e59407
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# c184298f75e14b94a5e2a776bd0b0fa4
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 25a2a13d30fe4994980eb7844029c75f
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 830a7bea5781487bbc05364d01b2cf67
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# f4212a4ecbd64ab0a7943180430949ed
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 3f742031689c4d5b9ef3b36f3d463c59
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# df0c7fef4ceb422e9b72ffb6f459f9f6
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 6d09859bcf3a44cf9d021c5f6384b384
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# f28549e95c5c48a4aa5e2770076a6c75
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# 74dee7cdf5b84981b4be66680fd90189
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 25ad984081994783a4e8ad9c31e2359e
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# cc0e96422ebc4cee99259b835034fe0b
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 221705997b644a5d9da1c49d98c1f2df
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# d273e4e0472f4297852c8b84613124bd
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# 432dd1c60e414186a66c6a8d52f43f8e
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 813ae34bcd214fcd9f113fd8a223016d
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# e346e8147e224618a43abd0a275e234b
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 6803ec1407cf464d9f682b9792746b82
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 2667f81421b1488b9aa0f98b979c43e7
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 5fa3eb168ce64647a1b692bbf043417b
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 0bdcd22b42bc4ff0be5ebb592faa0a2c
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# b8e380ad6f084eb986e40920ca1b9e59
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# d0de2fd2d69942769cef47be58a434b4
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 50f16e88f56948f1ab7d5ee0b671b814
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 99e552b2b9884653889a7c74683c87d1
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# d4e855415ce04d41b140daa2b50a240c
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 2272a8ce26b743d8a432fc952371ffb6
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 32e5f5dae9324bba84289da2d7a76e7f
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 2940ee0c28954b43a334d084e65c53eb
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# bff676a9c72442a6a3f721b83c2cd1d5
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 71b61fe97b95422e8c52eb9e153d1e00
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 34b9d6f5eeea4e7ab3a977bb72f46be6
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 05638041f8774525b90ec29520785bfd
# 7f0b51643a6d4482b615833d9eed81fc
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 3ae1b34058114b919fdfb55d393c3f61
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# afd5ce5e50ee40ecaea7fdf2a2de0a4f
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 817985d54cf84337b8cbbe6a93e3350a
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 6081f082cc7046eca2c5103db9124cb2
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# a4a02822bae34a8d80fa1044ae3b1d0b
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 31244399479549d9a1fe9722c5116f1c
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 6b54f9d5785b4010a93c3114fb74e3d3
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 04c939c5958344818050fe5f31b0a347
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 3d4bde995e584331930db54feadb4c2e
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# cd41e3905405436d9553391e39c33e47
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 1de440e26f704379a965eee917791167
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 023fe1e138d345819bea45b4fdc74abe
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 0a937319a9fd4bf2b49058d72c6e871b
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 0e767a5b568e43d8a093e513559bcb19
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# 204cbaa573484a479148dddf94482515
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 6b6d4572e8724ec29947f171390efe81
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 46d3b374f16e4779812d900636dd7ba5
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 59d5c080fb8f4e7fa50212232f70fdee
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 438cc024ed9543d79d5e218ec6c91c68
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 843110864212411ea8dff8483cc41a82
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# f7987d0ead1545fb85db3449e3fdd117
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 91bae74eeb604e0b884c124ad52cd7c0
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 33c34277593f4a8fbe7600e5bd65f31f
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 7dd2119cf77242b29c785dc64e618072
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# 55ada5cff57b411a97a1f49ae42233b2
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# ee85dd3d061948fea70ae4bab0ad3d73
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 1f1fa2a7173a4b9181893e643a46bea5
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# cbc4515195234d15823cba9127811108
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 5037279a8dcc4f699c2c6e15d7d3d6ef
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 088884a566a24c33bbee339066f31f09
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 1520234114754b0da66891146c9dd705
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 8f07220be1e347778c77b870ff7acfc1
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 93e49bed949f4fcf8f96ea0416f11103
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 3fb9a037b3b749808fff4bb1a87e5e1e
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 19675abfd38d47b2b3ce7c40a57992c0
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

