# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-20 09:14\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 4b4351ab3e93479ba174dfd0834bc288
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 2d027f655a2d405ea96dac7192d67c31
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 3a2d210ef7654410b4022568d75139c2
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# b567405fb40849d4a3f3ca907b722010
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# b00deac56e2546d7aa16e2ebadc7c7de
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 31461d33b35947deb9845d83deb5d07c
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 6a9cc3d0082d47018ad42631c51610c2
# 90f3945f7a614f279465701a784595e2
# ffe0767988804c3e882c265663d905a7
# 2fe3f689d1b54844841f2d559b5b8850
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 572fb463b8654f8daa44669d6f28bdc9
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# c2957f389a754e338fc0b8974d8ae774
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# a48c2f29ff8749beb1ddf6beec6aaa5c
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# e95123499ccb428890a1c465d8490ed7
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 5203597109264510a6308f0c48f88af3
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 5db0e2481f734aae8078bf3f593cc86a
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 03fcf8e47a854f368da3405081e6040b
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# bd5fb6d993664a5ab6e4ed1b339e0fdd
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 26eb67637e5e4bd9a2b6740fa33cc045
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# fa9547aba0674e39bf3f4736c935899d
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 7e82e7817d2443cca7118b97fbdb9635
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 16c2fbb95be84eed8f984cefef51ac88
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# 7d44d1053b9241e5bacf77543b1ee899
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 34ef0fafd68a4ac180b5e51c0dcc12a9
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 606ad1918c374607a83540eeee9bda16
# 2fb8b9d72dfb48a0a40296245d1a3c76
# bfd09c8e817547ff86cd86bc8b4f4b5b
# 8ba98266d210465ca84bf7b865716db2
# f0487077c361483d931481bbf0b997bf
# 02a841ca267e49d9ab2ff8c8fca1e8d3
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 227b3d633eea4f63bf0ac570578b95fe
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 19685877eae24b7ba415a85a2e26fd0e
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 37d1bd2a0e80436baa41ff41ef480436
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# e93d950d3f8f45de9efe59d6d71b1016
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 4b45d7a8f2394d05b269d97d6a1788d1
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# e82f534c5c934e0c974109c1bec066f7
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 57091485a0fe43e5b623673dcbd6cf12
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 2688dc4dec4e4e87baf0cc4d76afb0f2
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# bd7147bd085643e09adeb6af58eb5e91
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# edf699074f244fdf982efbc8389c3050
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# d55920c8e1d44d72ba517a54f847642f
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 79c4c5b06fcd42829c8dab10e1f1fde7
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# cfb6e037054946c680b5f456bc9c3e65
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 136b86b9d97c416b8239c733681ab724
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 2036b902179e45d7b162e6d6b0bf922e
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# c2e34f0ce168427a9f35a819ba233482
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 7b3a2abb361440fd8462ee14af2ba06e
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 94014a6d553343a7a2431d774b34dccd
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 1b528200082c4f9490e68c50c7d61593
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 7f3e6cf1922a482a9436fc045968b2c7
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 09de15264f4847bfaf835d1baf38c390
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# a8f4af6d3b9f4ef1a8525fc3b18051a4
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 8ac842692a644008aa5369cd07a63ba8
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# a0d8f41b5ca548c6982ffce0e1d15314
# 40d3ab5f6c174530ab06e0cdeae584e5
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 0b0aae3911ad440d910081541e7a0ade
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# c50b89b4b998465a85f0a76c85e2758f
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 0e37ab831ce54c6b9ceb068dad55fb70
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# ec86a4568a884e119d0b2f8273ed8e0f
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# b05d612ca6614535ba9012042e449469
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 6d9430ddaf534c89b21abd550f4b83e5
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# 0fa5b97c88de4b209350b37293915cd9
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# a1a57f83465b42b9a8b34ca9ff77db89
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 8758c010501642d5b2f07aa169e4dad2
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 76e2e4fb0f52448d97c3ac3d43f5cd97
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 46e14be13ae044739fefbd30be6fa1f2
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 3b24d3a1f4284ef09d9f78756d0cf149
# b8b2e59313fd403faa9f04edbfb2cb57
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 6029f92ef66e40368b3b0b5bca339e02
# 9a828d9364fa46f5b54d8189c40bd219
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# f73f081ad98a4f7c9cf76caf565fa434
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 9be9d807c95943a495b35f22550def48
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 39029f2e2f5b4e35bacf5e5bd6674391
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 970235557a444d46b82c0480ee7f8875
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 5a20d0be72b949e881ba954d67bd7b00
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# fb1392a178fd4260bb6e37f17f6cc192
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# b98b0fdfaa394ebeaabc0361655f64e8
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 44fe4c7f37bf471ab9a44ca4889eb255
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# e5372d81ddf944abaf61e3a8b96e2167
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 8460066140534ce8b2a5565c1f5a6fc4
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# f396ae81decd476bad86fdbb46c85a72
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 34db8e17c9614c48aaa5d9f62ae2516f
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# 861c4aa064934f829123c9ecb1c2d3ec
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 2e7e9f5819ae4785be71b7e1f3fb7433
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# 8288b2b9b9b448ccad0948c695df51c4
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 35818eeca9fa4e76acd940b60e135f69
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 83733a3fd474442baff36e79b4ae1e31
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# d19d1d4f82794daaa748ef437f8cfeec
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# a70e27d15b3b40e8b2d6ab6d7eaa0c44
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 2a4bc4d75713496387f535cf67e42605
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# 33fc1c8f4e004929820d234b590e255b
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 7912e2de5eef44e4a717e2b97b460450
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 74fcac7a7f594a0a9c0ad756df2a6502
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 38fc3b9204964e449abc190767df71fe
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# b501cc70661a4e7d9f71c8d5f33e30f9
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# e5cc1afe153e488bbadce9904410df13
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# fdf3a999f45243e4a3adf4a8574b4ba3
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# cd2cbeeaf145498fbafd6c0c37d6cbbc
# 9a9fa5228f2544c289339771c5b34cee
# 7dd1e4f371744175992dea4cf98ea177
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 546dc7b1d3af4cf399855c7bed48cb0b
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 6326d2da6ce9493eb6b5f036bc613d80
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# e7853873830443c0ad46bf5fda235c24
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 930d2fae376440a3af82261df41ab6bb
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 9a396e283c7a44aca23abff1c6939b6c
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 628558123f2742068872e8c8fa6c7eba
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 2064b74cdc344041ba077aec4fadba0c
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 3b577833ff85446f8d12777f5e47f7c5
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 8b3b5adf06094415b7dd567843074038
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 32e65c26a754401fbda8da6917927159
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# c1f70c0c23fb4f37bfc644d82acb3ffc
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 2a4b034320b94d6c9ad22e0ac3b9ab47
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 7f4ccec120c44daaad30f23d17a4fe97
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 995028c0031b4634b6e7a72ec90aa1ed
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 599c6efa412a4d2aa9e49422a7e9e3b2
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# c9f91ce61ea24a15ba07ac00f30c9722
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# d99459ffc3074b7b926bc8d8ea6d17b7
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 0c9bd5454a76413784c2eb688e1b987c
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 454888f787634e319f8ea1a55a2e48cd
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# d4228f98e7cf4d75a134838c09fa135e
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# aa9a2b890ea6403bbdf470bb4af4563b
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# b79cbd238fce4106baebff98d255033e
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# afd94f59695d482384c3678b6938eb2f
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 6f2ee10ded774ad580ee35e6f8f78a13
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 68137fa21ecc42b6b7ff731db526aa48
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# 85e6c10bd90341b8b869f657436ebdd0
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 1cddacffc18d4847826bbfa62ba1a987
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 8668f5aef745454fa5bed1b9f57dc8c5
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 256bd4572cbb44978f4ea55bcaca3d3a
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# a595570509d94f33bd3a541d7b462538
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# 1dcf4a75a5264d0da5ba7b9f8b6ca325
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 622e09fda38748a880638822d2ad9117
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# b1225a048661409aabb1c0916aa47af6
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# b2724a21f8d84ce8ac8aba47dd61bbcf
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 0d1bd3fe5e0e405faf45231e49b47142
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 95e163cd589b4720b4780786f1647e7d
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 095daaf327254b8795cd702e239b8b1e
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# 011b656922d24347b4ac38752a31d338
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 9cc354535ed54e868bfb18f47ec4ad15
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# c6dbd151da0048d58cb9da9861f4093f
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 40af323d8a2a4dc9acd14484f4fcd8f6
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# d6eb49979fc54f00b83d28e173a4bfeb
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 6cfacb91f9e442ceb51363627157183d
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 122ba583316242b9b1cc3023d723ab8a
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 19d439b6a05d475e8156290eb575d1b2
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 298ad7f774dc4aee97a6594c2bc52ba5
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# aa7a2d4a12a048228f52f0687ceb8549
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# c4c234cff100486ba3794817ddd82654
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 81d438f97c0845baac54bedb09fe9093
# 26800b8742a64cb58f07a4597eec09d3
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 3c50f51eca2748e4a7a3c18de211dfd9
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# ffb54cd636bf4c6b90dc7322f7e63f2f
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# a2f199437a99459f868e8ca18038a822
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 2194f9bb84e643ffa7c1505ad2d1837c
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 8e7dcbaf5491423988bc5d855f7b53f6
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 66893e7653334036a636dbf7bcc80b53
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 5668ada6f76d44fd940f396bdf2012ff
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# f7b983cb7a934ddb82bb42d6436c8ea3
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 4370420453e649d28006584f929d5d92
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# eb3ede1346e046ac95803387ed6f6f65
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 58e1da0054d249c1b19dba191499758e
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 565a5720d7f8451aa7f44cf0d32c7f23
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 93a011cbf0504e83a0b79f3bda80de37
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 402fe67f7ca64d32baab53e489fee36d
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# ec7d831ba804463994c1ab5136be8596
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 494c32eaff7b425daef05f1775d3fc04
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# e2f3c2de853e4de6a098f9c3a09d2415
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 66ddfba5e2fb40d0965cd830279d9964
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# dd82ad65dbd542bbb56d538a702fe353
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 368b9d7264ca4e16a1edee5dba822686
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# ed1673d5892f4a7cac826da837afedbf
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# caf910b25f874c00985bf5a5b3c4a80c
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 359da12b67ed456683433d2d192a3ef8
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# decaea234e2f4395ba2a72e00fb9053b
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# f629a4b6274d4dbaa92a350fa42c693b
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# f131acc9e8ac431080e0978b0006073d
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 46c98f8a69ad4405bf9978cc35583cf5
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# ad9f3856e18246ae8b46e838b43748a2
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# dc02ea2c13db4d13ab11c291266d3c43
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 7722d704a29c4e98a8dacc8ac9395449
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# aa018ab4880a4a2294dbb50e94d921ab
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# facb90e5675147f08ce24125481ecbaa
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 554d2a4719ab49ac9b70e1df1cd8dc38
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# b7f25307034746d1826a9b06635bb033
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 6c4afd87ac42463bbbfcaec7d564ba0b
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

