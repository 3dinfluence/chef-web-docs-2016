# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-14 12:45\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 365665dbb30b450fb6edd7cfd24cc581
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 58888622cd444b22833930fa98b7a6c0
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 2f243e2dc8c44066b766565ee3973403
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# d313557212b64efb935ffa95d85bb81b
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 430b103f411b473597af71a232deb7fa
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# e2a1de7149814f4aa180a30c647d590e
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# dc4bfcaa54bd4b4eb90b1099b7a1f07c
# 814bc2043b2541ed96d3523df4f61281
# ba9b34b56a6647d984b831357a6ebffa
# 857749424575426c911a9a66cccae4c2
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 27a2f332d3a84dda95ead756c70bf6c2
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# f75fb434a7f640c3b64a1c2f1e2d7c06
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 4d1f2034784548e0bcb9c4004f24c66b
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# c3e39b10e3594b3a9a995a40c432b832
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# a9f56c4fe9ff4357afc699bb0117ea44
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# bee87f6d3a904aff938f34cd137ab710
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# f5e702e2b55f46c58c31c98f88af49fc
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# a68fb4e4162149aebc70be2d75947feb
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 674b288d45ec49c19fd3c14347a792a4
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 92adb96d3eee4f5f908f71875aecdf7a
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# f8597c9e2c234d638f400af664632349
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 92a64305adca491b8551bcdabaada7c0
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 4c631cf26fde4b8c9e38f720a29c1ad0
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 7c7b592aba804ecd8e1c28879fb3f47a
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 2f16485690e04d3284dceb46aa05eb9f
# 72ff8c86d7554588afa9cb669bec917f
# 8192011c7bd0435698e39adf31013cf0
# c75988caf9954e859d82746f718e5360
# d710e7cac48d435ebf40c901b4672fbe
# 65469c17b4204443a4f81e40708d5187
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# f480a2901c8d406ba214c9f87a55d239
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 05c5fd907b364dd9a7b20fd1ca240953
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 861edbb000a54f47803e59de36c92444
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 869ea1b3075149e89830d16d932bf694
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 266ad4cae4f14fca93cda0833249dd99
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 0f5620e47cc945129bf3dfb140313865
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 6b1b108d3f8541bca8c43c2f03210c44
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# c28f4132610e4680a7015a8726c1bfaf
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# e5bcde18691a45539beaa1cca01848e1
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 058ea6e17b854f248160a7e5ba1d61ce
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# a22f54529f934a77a8805e1931d3d846
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 5afc32d5fe064d01bad787023104da82
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# cb4787d58c154dfb80a8a6c5a48950e5
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 07f7855f15b447f786e827b95efde42f
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 1244c4680a6741378c992983e0cfddaf
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# be458459ca3c4d6eb8948348d2f87793
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 7a57ee27fcc94e9ca0e6b9620a354e44
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 1f28ff3857d7437abb333eb7f23244e7
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 345395f9d5af44628876c1ff49e451cf
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 25315f281a2947fe845e503ff55b251f
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 735df47e83354fe98324f47121e494b0
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# d8d270afd81648a496fd2f175c5653c3
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 486bf8860366422291d1ca284d2245d1
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 13c96efa8a2e42b3a3508bf300b5ccce
# 39d89ad11159407da6407ee482d2617e
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 2fc0b85e5570487984b1981de28eeedc
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# cbfadf85f2a14b36ae94d7fbbccbf97f
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# ab3e20541c4d4a3ba034408fc25ef62e
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 69239c8e0b15494eb7c4924c211762a4
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 091ff573bb63445d892dfe02b3b25f7a
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 8c39537095b0428fbc3aa29a8800b4e2
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 5de9092c9b3c42c49d7ed77d0132d4b6
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 7799804275e64986827a59268b0e970f
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# d812a6ceaf164a2c9dc3f081ca082439
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 8b4cba6f74d24b5298f0532d40980f8d
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# b78fd0a56835476ba564259bf883a4f3
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 99ff09903c744fe2a1f460dfab2905d0
# 86eb8dc9a4184f01a0e70f96cd6ae683
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# bbd0940a6e004b33b1ff7b643f94d707
# 5c5b3d272a8648e8a1804ba63ccba221
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 8d4cf67b47ac4a40bf75ddbef12d567a
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 5bcb05f260e84c759287d68ad9b111cf
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 30947546a860471abce92f5acc94467c
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# ffe2c55f20f94040b6bc2af31926eea9
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 33d5fe71ec4140549648c068553eda8f
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 1fa7d51c3aaa4755bf67f03b2d3268a6
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# d8433e606bb745fc93978cfcc9569e88
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# b21e6c24c5e44f24af14b1162f9739a8
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 72251857618e47bcafb55a0c48b75c74
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 596f2d9cb012485e8109321908e13b88
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# d2b4f1efeba74215a844b94b841c092f
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# c67264aa1f504cfe936741f57ffc9d97
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# dbd378ab3e1740d59691e13fd0f38738
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# aedcc8f6c3be4efead93be9867c3414c
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 7b2b5745da30405681b2f6b86d160560
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# aa57be7b0c4f44f9aaaf357fb9c7ec32
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# c32081cf95794ff6822f5a99cc2b31ca
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 9c5ceb42bc0a42f5975b8e4dcc9a1275
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 5bea630525d0426fbc434065004a7c98
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 095f8372a2e24aefa273eb8336f8770d
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 9115ff19f433471cade56b569767e59a
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 994873184c2f410d968d4309a88a66ef
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# d20120d6fa4c4e54804867b2410d09d3
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 9bf1c5a1d8e5468fb15dbdce7f4e9022
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# ce55aec32ef949198c5c61288c0a5664
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 870de6438f5c4fb19b4d2e945dffd743
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 973ec93b9cc64115bf3f31ce81c33a36
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# cc991cea780b479c87cac1e016cc2ee4
# 8a3491a0bd4941b2a9ae77c55ec715cc
# 87da953fad4d4c3abaa1361fcd02b5e9
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# bd368d7c82044bf7bbd1a333597e9df1
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# edee94bcfa4a40619fa0683c9b3e91d2
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# cb4d48c6b1304228ab3a320a7435419d
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# d3300b25c63a411995b8611cf7c8be20
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 27166b03dc3940d08d0f7a9b5b84d60e
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# b0aae33501874b30bb5b53911ba38c37
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 8f5127bc22cd4a25b963e4b9e2a2a77b
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 5a2bc430df3c45cbad4e60accf85ec85
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 4bbc7ffabea94c9984b9ab31cd1174a3
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 74b09c5ea17649828599052c61d3fdfd
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 2d70dcc9c17b4223a91f73d7f622946b
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# d8745b47bab44e0c8e10970a575e0ce0
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# bc790ea51c5b4c03a18a84d2ecf63615
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 6e9dbb7c11b14b59819468ebd3e58751
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 6eebefd5c22f4939a4df88dff02f2335
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# db566ed07cd34e5b9273f10808f4d9f1
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# d0cda5ec2e1a40939cc2ac1a712cd16c
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# e6f5703888014efa85d8719d2fa09a42
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 90d669ec4c284f8d909efa24dbfef75d
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# f5bc409e674f4a4887e2b942e2ac4d88
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 79acd454a68345eeba73169731c75282
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 3623a83c40e2490a997506ee13b8b309
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# dd97c3b408d34298a364c1ad0a2d4f84
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# ac3c03498a404a15a377044546e3a1e6
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 8e992c6ce0d445a59169719b91275f9d
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# e77c6b5e2eea4194a31f7ebc2f04e799
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 7d1ead78a9ab4958a582f03764305a61
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 687a0b29ef42486d972b6e8ded25dd09
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 12612a21ed0b44788489c0124ca309e3
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 15e067020b8a4a378fca8240e06edf21
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 407d3a5ac1084972b8002e2d2a6d00da
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 7dff7b6f24bc437c957fd056ec0aec8a
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# a841990320c54ebd96418dfaca245bd9
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# d063b7feb1dd4af99b5c613ca033dca7
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# bd6da4a52c9b4b46a747714eab0b81c8
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# c8e7d172fb8b4aa5ba55187bcea58b3a
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# c9693677176047218439aa78aa34b7aa
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# 5cff0b694a0c43f9beb5f879cb51fe3a
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 23c26e46d3ba4c089e452442077818c7
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 2c8160798a09405c864412b29783cc64
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 9b26be4b0dbb47fb902458c8f727e8f4
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 0ed0f6513c9743eb93690bf43048eeb3
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 9b006f1c1db54f91b2dc5a6760bfc262
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# a8c508c49efb4b7eab4ad505325d49bd
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# c33068d6be6844e38316f4da47956488
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 59eef1bd4f17476abe3e8881aaf9e431
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# d72fa18c6ffd4fd19e99f97acba67968
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# c3a061c7bebb4135b21bbd91105db297
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 93657d3050cb48409be6aa96d333ed90
# df5a1da867534037813e362dcd9858aa
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# cfd7642c2c324ff4b7b5f6a13a61d20c
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 557a90b1f6c74d898501c941468cc861
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 0a761e1ead3a4dfa9cfcfcac54386c58
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# bc52908d1dc342b8bc8be39657c772a9
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 28a3f5683eb44f4a84698fdffaf9d962
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 20ace97df3364e80bb1294d703e6c716
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 57ed766554d143928d0fcd7e6fe67606
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# c6e96d57afe7433da2ba9977d8b76f66
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# b42ec8b8af7145b782647a81263d3b38
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 79453b35bafc46ba8236d790795dea48
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# c8f10263609e4569a6cdb843a03646ee
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# e0fb8802803d46d197dcec912ab5b338
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 71848b47abe54346aef2b34237a1762f
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 2cf6b14d59a9442a9eacb647a650d7f7
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 7e6f2a74f2ba4e5cbb4a947b37b790aa
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# ecd2063c5668403db192bffd40149445
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 821d845a652d40e99cae88b7fef532f1
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 724ef1ae34f04a08a0727f0559e66ea6
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 5c3e8716763342828d317a1c164cde0c
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 5d514e59eef447278d5ce7d1fcd63ec6
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# d4b908e9975d4c7b9f059bd4fe02d7e6
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 0b28a56040d6493b8e0d4100a2c4d7e6
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 3f6c456ca6e74344b1f6c6af2feca98c
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 0bef15cc99d543399559b5dbeba90d06
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 285e43b644164c9dbbdcad8024db01dd
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 6ebe190b41684091bf62c4f971f471b6
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 67c08752d5fc4464a65dc3727e375306
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 58f19634d40a4affa7c65c38573870fd
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 63bdf1e49df441dc8094aafcdaa7cf1d
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# b3ac197cbda1477784e0023aece55374
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 07465e02c09842b08e0309b36656f136
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 788c65d9b0bf42f097dd78967dfc7f67
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 1006bd2b78e64576a27269eb7958bf46
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# e0adc5b51d68440d90752eb3c733b5f7
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 86132da8c5f54ca2a74e3797903f170b
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

