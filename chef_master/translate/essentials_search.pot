# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-21 13:50-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 833a3e5285f14ca98a6868165de48742
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# f59785dba2e04faebdb2cd2c4d75c3cc
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# eb10f39438dc4470ae9f7ff975572c2d
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 0b0821afeeb849c98313673822d33ee3
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# e8b87bc3673749f5a5213ae2376c70f0
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 3e6173509e9148ed951b180ef6e51775
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 6a103d3d42ec4a71bddc8a9efa757cd6
# 6128c871ae3f477f9e63ff8e3a60b3c2
# c37c1062731646068e27a995c15e3de6
# c25b25d4de0a4109a6f721e86a5f604e
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 4d8834fff1954ff2bc7854687bf07ea8
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 09f13b4d376d4c82a5d4994809706f72
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 5e7c383335d94d14baa516ac0e934b8e
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# a6b198b4fae942a88a9d68b975ae5879
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 46621013d7014c2680e5dee61d18feaa
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 057b3100a0d1456eb2afc492cadc2b23
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 7815df4b3b29480abe0295dd8dc27179
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 582a3cf10d384226bfc7c676ac670863
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 70c9d13c986940bdac97560d07bd6a13
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 1d6ef509d60c4828a3c7aa2ecb267dbc
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 367460ff9d874fa283b3d0abc08808fc
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# e313099b69a246b7a299fc426fcc3138
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# e25b2b30c7ba4f99a76719cc7aa9f3bf
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 66aaf996be4a4dcb855bbe106ee71a47
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 9aba3c65edfa4dc4848604f10cc292fb
# d826913a555f4469a1eab7d8c7efd198
# 3676467be0964e57823e1aedb7df04c7
# 3a02ee701c344924a5507c044c906333
# af5b3dcf1c2d49b2aa2db6308ccf8162
# b55fec5fa1f94987b8b454fb3e588c6a
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 5a825ee8533b40d9b21fef8d71d13e19
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 44fbcc9e241d419c8d78a80751b154c9
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# d1e019a9d29042518be23fcbf1295c79
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# 28b8e4dfc7d84f20b406c9e7276c9acd
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names. Enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 54d5fd5efac94ec891c40beee25057c2
# 8e833c7990e24cf1b234fa64e1dd985d
# 821ddf498afc47bd8fad3b85ddf6aa82
# 6dfd0806906b4702b6897ae17ec05000
msgid "or:"
msgstr ""

#: ../source/essentials_search.rst:34
# ce96bf3f08f04fe09beb9aee0bc8920b
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 8b2c6273377d482e9e48a3f4fc4b70f4
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 44898f27860f49ae900bd0e894cea494
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# 0475bfa5e23c4b8085f7bbc5dd33a766
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:42
# 2b99fe4f51804b5ab961c47dbce538a0
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 1ace710c01c443c4a4266f9322786f9c
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:46
# b8e02990feed4c26b7f5871a7a1d679e
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 13afa69cf98d44199c430ee2caaa8460
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:50
# 7bbcd5bb24d74af78dfd9fdb8d37dc44
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# c3ece6f3b9894d2e988c9dc5b6bc10b5
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:54
# 7c166456328a40e5976b8c67af1161f6
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# f31307dfddf34f24893c9003467dae06
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 596be135c8d94c58b1228e27ecfe5e60
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:59
# 97ac77b31f8e4033a66b9b245ee7a934
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 13bc101a7565490cbf168cd1177fd353
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# c89803f26d6e4bee82ac81bef9af3379
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:63
# c422c631100d457cbedd68360104bd77
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 3391bf6600f4423684c469a5f5316932
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 0dcd63c3efa0417f82a4622cd89dafaa
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 2ae03313472048788e2642ff850acf8f
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 3cba3081233f43cdaf615b7e230cc945
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:67
#: ../source/essentials_search.rst:79
# 863b729cefd74509b3d534f88599cc1f
# 0d8363cb6e724acf8f7a7c995243ea5c
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# df00a07544bf4a06ab868c15a950a8b7
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 29c798d6db0f49f88c336b60648abb44
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 5e39e7f44b054b78a55b20d8a4c0557c
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 333f2a4dfc4a4e989dbc4154dbaa1544
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:71
# ba482f4235954709929de52130a9d4d2
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 50729d1fa4e04964be481d705f8b26a4
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:75
# 439e0fa62dd240ea8de08165cd284659
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 6f40952acb4144058e459209e8a37270
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# d05a47e344cf4482ad6f46af2d19989f
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# abb21cd62f624526af0bf9b6bdcb390c
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 0e386b14c52a48cdbacf0bab9e2b0157
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 563948453019436f8603f665c4aa9b70
# 787f5249d23b4cd4be3a7afc328ec570
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 81b786b4da9d43b58080f5200eabc451
# aa2f9c94c7694a118bc43825f3006510
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# c3cad7e5ac0f4e18807322dcc1767134
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 459d9bdf2b2d4cc085f929baf16e252f
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 33d7f185cfa946acb34b706833a6a2d3
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# a53a8a741b244db5b630cae447feea08
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 68b966578f034be1b9d48bb6b604e1d2
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 7b12b408e6cb415199a41869375ccd78
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 72e7681765e34559ab9fbaa82299257f
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# ca2187cf7bf14028a538da31b367ca45
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# b9333510ea414edfa82477bd91fb05d3
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 11920bd028c44475825af975a2d253ef
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# a8dc0b3a803f4bdcbfdc510e794826a8
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 175452ad9ac54127bfaa223eebf2739f
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:91
# d1b854a3318a481e938957b5a6ed6b47
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 08a4da2d39e44b838f94ca47dc352eda
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:95
# afa7712f53f84629ae4761126edb2b94
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# f71ffd5e58c843debde3a0e23eebdf82
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# af6cfab98fa04af680c62b1a2dd5f847
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# dca5c4f0216643878c02c2fb2807f818
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 8fbabefce3c3419b87e920aca88803c1
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 11c57ec70f8848ec865409a929d72282
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:103
# 70882aef65d84974a553df1d4bae3764
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 5bab458a487345a587c9411f36d96365
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# e1028e8869fa44219d70999cfdccbefd
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 67269239fd054b34a6d4a4462951d12c
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 8c52ff41390e4d09a4cd91ceef574b8d
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 494803ccb4324808832d9c03ea355b19
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 77f5d0092ca14969bfb56d98e90e490d
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# e0ed4431f4cf4feb8b68ed78ef54aac3
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:111
# 70eb26ba3eb546138f21360a8e7d5e67
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# a599ff5840ee41e393fe6cd1c651251e
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 55ec85bdc8b14ddf83566f35edb4a553
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# e4e3ec35a63c4f9eab659391a61e97b0
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# e08fca2860c84bf894b96a989bbfda07
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 22c9b312dfe646df9cb4ee34ec992a9b
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# e58effc352d0477dba1658f48637eb53
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# f6c9a1c9a7954d029faa939267a23a58
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# aaf5a9c6f4734057852aeb50037b88c4
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:119
# cc448320ae3c43f8b3aa4a01b96623f7
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# e54cbb0e185a43d5889744df75093a60
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# ebc93817c14e4b30923eab6b18c63f9a
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 9940faf685ab42e8b9330c3615982e87
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 113932394eb14c6886081b091c1e4450
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:125
# d40366b13bae4dda898fa82bc6440adc
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# d64539212e294b258755a0097074337c
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 071e3c76e84f45e0bd93f06824e79bf8
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 8815de90345e4d86809955a5142f493f
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 90ad3f4ce36e4c06a7529d07933ba68f
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 3cecd888fd4742aaa72dcb204bdffd25
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 0270db6efab948928f6f4d3519bc1d9e
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 0015e6d165484dd0b0316b8e3234af51
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# bf72bbb3d66243bf8e2eb8db4d4d40f0
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# d755e1d1d08843a59f4594a7b9152e1d
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:22
# f5f0bfe857cd432db58703e10b1a5794
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:30
# cdee3fd302854f9495e1e489b8a86908
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/essentials_search.rst:129
# 74342677bf8e426095bee2103db1027b
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 1bb64672702d4417950e2870ce4f45f4
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 6aaf7512fe18414e9ee08717020ac504
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:137
# 20b42676e97e488fb4fab53f346bd6be
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# a23d80963ad543f281493c9295cc2141
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:141
# c21a5f0b285e4f858dcd9cbce0bcac21
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# d50556906c814003a6f264c4bdd2a5ad
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:145
# f17a912290e94ce7ac0e6efe25b00d91
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# d73fabd5420b4725af1c9d800c6d61cf
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 9a5e53ca9caa4cb18edfd050c0aedcce
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:149
# 6820336401c54df8b6416803fe8ed8f8
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# ef15c52931e84f35b9b5c5b667f2a77a
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/essentials_search.rst:153
# b124442955d2460baeb60fe75afbbc23
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 5530d5fbb52541e19c80c324f4385c51
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# e1fea957cb794577a6562a8b722a1ce0
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 69f09ba074e84c38bfda0aa36168d3f9
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# eb6737bb8cc54fa8b4aa4320820d0330
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 06e2fce279f24d27a828d3c8cc740fd5
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# d27263103d3048bd9094b7d89cd91f25
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# efec95c9037c470f86a4f6d15fa03a7f
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# e521315e5dff487cb01f20f5bf269e0a
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 674eab6efe004cf9859d973d1ea6cfd3
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# c65dc864dafc4d67bdadbbf374109718
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# cf7ed50dd1fe46f7883abd6db71ccc94
# 4870279c60234d3ab221b67ef5df8d60
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 587bde0cc2f941e994741e6af608d242
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:161
# 3788cab9e60c4e76b2018ab6e5302794
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 01450f8738334542afd8a7d00e65c915
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# b93d6d4be1ca48c6a608799de91f0401
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# a4737a7f695247d1addfe208c376e935
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 0c32c247fc394523b9c741d5def1eba3
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 5760af6885d2413cb3868e84b6922931
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 4d268ee4c84f420e8a989e011ebf5253
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 82fdc184187f450e96f7a9e6d096167f
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# f822aaa121214ce19264615d305cadc6
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 4190ada0baf3467ea419738e053e8807
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# db70866a831442f3aad883a8e26590eb
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 88d6aa36eec44adcb6dfa2180e9b07dc
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 1450023271fe448e8d48b969ec5ba30b
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:165
# 85eb6e5c75374fb6ac8adf69a84e773e
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# c6db8d91010f4d9ea479378af5e61a58
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 9c4906d3e39f45e3bfcf8e0437c5ba90
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 2632588897874950a311abdf9994bb15
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 27733bccccbb48a19db589dcdd290194
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 41fb952578294b09b45b882cf60043f0
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:171
# 7dec4a8c55cb42b98e1d725c930a36fe
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# bf5583e9076446e6ab9df2f956c201fa
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# e11e57a9516843bca81f532605808f11
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 0a53a2bc9ca54b54ba47cc2e8e4cc5f4
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:177
# dcb364ce5d64453e93f031257a1d6348
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 5fd7a97cdb884f2ca796789ebfd933b4
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 8378f83ad5ae46f8a5b0241ba8f2b63f
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# e67491fc73734a0e85e186fb00957264
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# db32be0ce6b7404aadcca8e60e96f324
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# a15278a5d74f43db8d378eaa7346b1f3
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# c22d18dc7b324214a266817ec7df942e
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 5a3ddb2e43c34863a98e8e0c22224c17
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# d2d67bed4e394c7da264dbafa9e36342
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# addf0ebd44354b6abff9ea7b10faf1ff
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 146e124b0ae6470782b1b0d257755536
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

