# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-14 11:24\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 46ee39a135b14810a21405b5d612e1e3
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 55fb21580e4d47f0967f76d5e42a0861
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# ea613757b96d4a04852542dfe940b49d
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# fb70aa7163344a3ca23dd1af84f09118
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 5b2943d4a5a4409985d11f311ebcf8c1
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# cba948496aea41178bbf747dc5b06ead
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 1fee768e2e774db995038b616c63024e
# 0bcc73077f1a48a2abead359a5f54f23
# 017f8e9383424d44b66092a5daddfbbf
# 225ac124915f47e2a92bcc931a5ec536
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 5419d9c3aa674959b7a180f95793e789
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# eff6e238cb1a4ea2b359e54bbafb9644
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 8447eef24efc4eefbf02ae9150e69d04
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 150d9455f2b84bc49d8f27b85d27301d
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# c2ab7fb3cf8a47f48ba611f1d12f183e
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 90686b76b1074da1bde46da684a313a8
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 6bc6bc72aed542a2b79b7fd171091251
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# b51b2512fb08498d8eda755571bb3e84
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 88021b952442452b9b43e041821ae89d
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 4182a8d6fb344386b4a2f1875650f855
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 7756c0db07c54eaaa50677ea9240c457
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# f4d2ff0e31104c809c10ae26b304a20d
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 09b8e3e8af4b4ffdb9098535d0f18e00
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 07a022f133744b849200376feaf3410b
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# c1cbc58b70a24a2d9a5ae50c22f3ad7b
# fb7fe5792af642a088872a59b3bd5724
# 62e6834aa33a4536bff8e224c12c62df
# 473b8bace88f4ff6a59191e5c9bc76ae
# 11492389b9584f189e025a22beb138a1
# bd5a4f30d3e34c058306c4fb4068e8e5
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 8c08ab0b424548eead7a6e51540cdb6f
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# b3c3d1703202432cb79606e5535a8d95
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 2ec87987814046b894ad72682b8fd836
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 17797938c12d47ee82605dd938b8773e
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 7878702fba364ee8b66955acaaf00c57
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# bd51cdaaf1f54044a0dc9860a29b2b6a
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 93bb28f4d905406c991d0fe7ae234d33
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 0cbbd0217e06449286839234f5cb92d7
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 651f2d4debea497d93cf9f98eacea914
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# fbd8bc3cf5834f93afed3313e3de3912
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 871af037f7004603867a4a9dbf35ddbb
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# b37f3d1d22bc49a99c6df0d7ced4b895
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 33716a35751147c28a12fd80f3c21f35
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 35e5dae005b745778f3d4a332dcfcb5a
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# c12ed3a320d64209a1604052c3e4888d
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 48da5faead6c4d40bd0198c3585f33df
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 2666a2cb9af3471d893b9acbc618bc75
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# e5cd33bc00e6442e84fd72ba964fc5ca
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 63a54ee6323d40a1a7f8b0b820a6eaa9
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# f753e66be6964c5a97504c31c97dec76
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 7df82f7ac31444e69e0fc58a225af790
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 108c0912e2f94f1c8228d393addeab34
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 8215db19ba5a4877a6abda4a27acebf6
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 3e86d099a80b40a1a4ae3ce83ce0da1b
# d80150f0aaa8496a8a2a0e7c177653e1
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# d0ff8aafb6574cf3930c3ddee36c0742
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 6952a3ddf99440fc9a82c0326b351da6
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 2159678ad4ff45baa42cef4e63259334
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 6fb4b6848aaf4e459edf799dbaae21c9
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 807663e8078647fcbd35ef44ebf1334e
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 9836c6dde3854bba919856fbe60734d4
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 298fcc2ea1e84c018b9d254a6b129674
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# f39b969889d54816aabc039116cd23c6
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 56fcb6bd52a745c9a3a09c995b8eea4e
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 7bfd9ef3624448348ed1c2721b0b2035
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 2a13d2d4dd9a44639f6da04741ecf2a0
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 9f20b435f0654e218c22139db60b9c12
# 3cf8a988ab67468da12f16567c64e840
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 28bd55dd973543179b837a4b81597695
# 5cb3ff7d10a24930878474017485b6a0
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# e6ac3ebdd78e4f72b48bab5335e7bee6
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 7ee6bf2440084dc8a7edc75e2467e909
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 00c673ddb53644fa9c61e6c9c6427ae1
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 12266a40b0eb45d984dbad3f027488e3
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# a1f6cf0eea5c4b7f954d930cf6c9d153
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 2731fb4cf1664fdfbb403f3d62668b8e
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 3edd5926cdb549b68d157637c75ca10a
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# babe8f6dde84455c95cfe8ff1b73310d
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# c55ff69c5005427ba026cf55db5aed60
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 9606d630c2484de7bc8a0a5128fb815f
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 30068f1e2be749a18874eff57e439c99
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 97617e50872b4596aff9bd6f589b07a8
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 7ff3dcb4917a4d35a2f897d1cec98906
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 59b310bd3cad4985b39744082fd737ad
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# fb01dd1d93034a6bb732add2b5609c3b
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# ebf582e8294147c7ad4ea3161801aa0a
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 8a9c790e2b5d40efafeae36299cc7050
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 0271381d1f28447fb7bc2e6f7da25a2e
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# e770de1381a94804b9587ef0e9c30434
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 428e3ff7e26b43fda7a3964e122f0a35
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 66bb9b9fb6ca4b15a53f085c76d462b7
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 64717c6e85624435928e4e0fe18e11bd
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# e3623c10b52e4de88c01bd58745992f1
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 0d6b2090d1f84b3e806f12b2423d83e6
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 6da8fb4e14ab4966beec7ccbb1ef474b
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# a67b3189e7e24fffabce3ece477312a8
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 04a1d6d621f249c08f4d3fa3a8341f41
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# b72499986e2d4e87aff6b2bd2e4b0f6d
# fe55ef53ce704aceb9b562c13215642f
# a62d820e58254b60b1300623d5db833d
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# ff406aa0af4a40e3962dacbe462e8c56
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# bda1b25b212f438cb3a554d8e509c971
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# abc164e34a07493f90e3af2f2b008399
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# b3ec182632f04bde93db7c85cb83f14a
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# b4f91acd48d14d37b412fa86824af835
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 0aa648d8581f4ab192ee114c8e5d5689
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 3be3d2ce68054e0fb18a30e50182d068
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# b290a7f77f6941f8ae6a41a91ca9f1e9
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# e2fd6f0cb63c4eba86bc41f5e1325270
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 82fa7319c5544f62928e4c52051c37ac
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 0bdc8fc6cdfa4c84b0e85ccaba65869e
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 779b0d8c437347b1bf19559e7b483662
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# dfe5b29637bf4828a60b137f4f9c5a55
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 8a0f413416d54779944795f30b6640df
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 41fb1a0a8147496da6f1715c830da318
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 946fab24f745436b9e47993f0a2ffada
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 8136e434f83645649f87ba15dbbc44d5
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 53a3d1e1736e441bb47a5779362ddd6c
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# c762ec0eced74a8cacdb5565ea391045
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 8b8b44748bea468d8259072994023fa3
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 12b13ae262ad44318bd73b0fe55ffc5f
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 36d973b530b74f06b209625bd4b575c9
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 20b83ce7069f418d864d2dd50ca2e12d
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 553e736404374df2925995fc37fa4e98
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 26f4269398ef4ba789f2464d2c9bd22c
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# 299274b7dd35409ea83cc83365627b0b
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# ed26eb18b1054a498de9cb74b7e0f3b1
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# a78a5b4460f34c9e85f7d554aae853d7
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# ffecb9731cb24b199acceb6f82f09bab
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 5e1df93e741e4acf8656a53f37bdf882
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 7ef45ee3ba184bb0956fbbaeae33f362
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 58344b0926bc4526bf904282b214ca6b
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 0a1497d48a03463bb1a786b503141d54
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 9859c0c41dc14ace9e2f37d81b8a4acd
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 30c915ecd8224b318589d01f37f01f6f
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# e7189f50a290447b80c43c499538e4e9
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# e49238fa41594592aa6d04bb8191800d
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# e0dfcfce56ad4684b49846790ff90d67
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 576de9674ade43fcabc37ef348b56d19
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# a17bbbd0081343a8b8c3e82d423b0bba
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 2a06238b425549d3a5a96156b2bc1dc2
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 86565999bfc94dffa97224014fc0c36b
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 2c4486c1091b452a8fe828851c832a4c
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# a4a80576758f40f2a67496fffccbc30d
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 95fbd7412cb54399b6f16e577b067dfd
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 157a884560f94cf1acb22945c17a58e9
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 7413dced1d9c49afb5456af138eed89e
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 90b3831fcf3d48978a3c96720795df84
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# e861953ef18f4426ac6d5b9a2b7e1718
# 875f710981704572a05b58a846b22685
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 88b3f037052d42cdad4ed974985afefb
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 45fe9cd6bef248dfaf55572c16abbd0f
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 3988cfdabbd84745998abd0d32eada04
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 944527442fd7450ea7aeb3a821fd8932
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 6dc78115b1b34ab4934cef8fa685f055
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 51e970272ef84fe985d2c9450068ee22
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# b4adcddf26274b3d923c66415230f632
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 6f7777027fd3447a8c1480696b368941
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 979a91a6fd844c19b8f6891d91d27919
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 5e9cac85f5fa49f9a33a90c143144fcd
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 75c20bfb7c1e47b9a0599819739052f6
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 89d7504e8edd47ca902a26ca534792c4
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# c1211a27d41e4b2284d0d7644fb96c3e
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# e04fb026f07c474e9eb4364eca623436
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 182196b36a9e4d088b2d6525b5bbb6b9
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# e31f32a3e9da43569f55438e85ceafc0
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# e02440c6fe0a47abaafcdfaae59ddd5f
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 88cbab35e29d4984ae59c7a2d90a67fc
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# ad18e84d78024a51a72b9c90fa76274d
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 9e9e08379a82418ba918d27f9254f01d
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# d6f495f26e6d4f13ae03225b934ba079
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 2a24a4c709884b6d9717e99f6068032b
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# a06a28afc6e44214985ef87dca3deaac
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# dc5c930c7251425dbc03c0f8e11f9133
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# e84cf3dc2260400aaf82361ccb3758ed
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# ba53f4a2708943d2a55b54d0619ddb15
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# ab54a8bd87944d118365f2b265e642e9
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 87597c729c3f46b6884e607278a8675b
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# b8f7a3dca4ed4b4b9bb95dfd9134ce01
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 711c7b2deb3d4c46b79bac3752b5a0ce
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 1346c2ee20174ab497ff1b863d5b4bf8
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# c0a9e5a3f9494cd2982afc0bd7552324
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 1b9f1d194f2a44fea2e24057176ca33f
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 6693b16fedae4c889b113e457b8cf1bd
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 1330df4fa6f743c89f455558abacdc69
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

