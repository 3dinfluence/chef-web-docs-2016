# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-01 14:30\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 5970fb42c92f4476ab869f244aa422c5
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# f11a89a8aeb245f3a86a1f852a240a7a
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 366ad1e38bcd47a1ad83e23c7bf28461
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 6ba4c50810ff44ca9787f904638b6981
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 0ff281e4941f4bb9a13bc7b9dbdf59b3
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 35af35e8c4164691b39c3029a91a184b
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# d36349c0fd5c4fb5abcf9f4fb6280715
# e6fec4cc713c485799fd56c929bae71d
# e5241ac3601842a28d75a73d63508e72
# 089fdc3c3b814c439cc882907295c9a7
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# a900e114bf574f358bb229320d600270
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 50a85e429cb345dd960c569a2eb5dcb6
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# b1f5c820217240b5b486fc5dcc8d5258
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 2d01d239376c4c08940ca469a8c28b2e
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 84edf81bac444a78bf55cebe1711bd56
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 679d6977637d49e8917fa32597a5123a
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 4b7f5c0f405c4ff99ba49004136ec993
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 96288ff6d7b342b2b708997bfe3bc1ed
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 7948a1848e44481691f3cd2085406da5
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# ef89c2f894f248a08ce7defa8b5de347
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# cbb55ce2ae3046acae42f9d39de90231
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 3763a98a0fba4cbc92870d8181f28847
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# aef4a0f407cb4d778a83da0f8622a8b1
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 57c7ec8945f048beab3252619d6ab2f6
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# cc94b04907b3432b86f95a56e7e119d1
# fc99a98f574748d68a4481d5b70f05c1
# f2eb9c1173364ac3bfe7016d49e240bc
# e0f515253fcb45c6ac75aab40b0b108a
# 49253d60e1d547b1a7467de1b658f7d6
# ce3702ca02f44578a7e40c64d98ed319
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 3df18dc0844d4f07a1ea50f487d96d90
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# c301ac5984034aa5965902735d53a6de
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 94e12333f4dd47ad809f3b888006158b
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 4ee91de77d7a4cf097bb1ca63de4c7e2
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 3c45d282451d4c42975503a9902ef732
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# f0ca7bb0782d42e58b68b06ebf7be3fb
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 0037a7d30bdc435992c7dbd0ce7b781f
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# e1d96b5637da4245807a2ee49870d973
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 0110e0c3248748e3a8020f69be32643c
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# eea8353f1adf44e7949e88406b14384f
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 6e7afbefc2ba40e78b63f9b465d97856
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 85a4a2939a1f4dc1be81938f7d17a905
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 6ad1a07486b4411db363e5ee442484e6
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# b3888bdfd19d4757a73cfcb5747730ff
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# c5d51321eeae4b90b36a0a4232760be7
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 03ab76ddd6df443fb2adcba4423400ac
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 758215810bee449fb49c33a452a5461a
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# a570b7bbae6446edb4cf0667a6046797
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# b222dce811d842b0886dcf2e3371c883
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# a6b67902478e41548f135afd1818ff40
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 3feccb968e3347069b57757a868ae707
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# cc252e7782f142818a79bd89259d3042
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# b5ffceaeb1684dd7b24a2bfdcb70ebaa
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 60d66613e4fa47159f4e26fc6d308e45
# d91f30a17d824c5bab250aeb55e134d7
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 92370c2539304e1e8110feb1aae42bdb
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 570d4fdbf4504e68b96010d741c5714c
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# bf44aa0bd62345f28add172bef94a331
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 04df942d59834f4cb5ba54d0f374cd3f
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 1e01d14b89314d8abc8260d38acc7a61
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 30780154d3e24bfaa552ebf346340643
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# bf5e04770f9649b8a552e594d913ae77
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 422ac139247241628ebc92a38e981853
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# ebcdf64948e2481d8593f0c9a4299628
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 1782458a781840008418ecb95a03cfef
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 5d5f1fac6ad74c98a6b0dbdacf6c493e
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 8f18a5dbac184e0a84ee332d1ac140f7
# 6cb8e67da7ae43c8b7c3c8fe83652187
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 154db9001cce4c09a33ff47a199f259d
# c5e1c37b54584d4cbd6b9def9e0b5ee9
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 6b1744f3ea5048e8857bddc5e268e029
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# b612b6ec553a4acc86219b1f02579ec3
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# e5a76e59cd5d429caa68fe49691b5cd1
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# eb8322fca283424886c23244d8e5b401
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# f0db85932a2d429e8b1204579c19e6aa
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 8f5b86a52c604ffaa079512b59eb17aa
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 6d094ce8b2fa417ba70930bffeb9e5bb
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# c9844ec3d754466884afadf6afd07f19
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 437f3fe2bd90478d94808590f4a6fcbd
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# f98a3a5022444291884494ea984ad52d
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 97ddcdbd54814709be09ed0097323727
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 3c621a93957341c4972e5252f43967fb
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 6adfe51d373042ad99bc013f0ae38264
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 892bc468ac214b72ab362326aae801ff
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# bbf110b67d444b38a790110b79161664
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 2ef6fd170c0c45caa2204ce1e0c56b3b
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 51d5c4397bf646f38ae9cd441c7e7425
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 6e2bbf8a01b541cbb2da14b8a64d9c1a
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 02c1294672ed48758b14b8a231b2490e
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 64ada92fb19c45a18e3be8b1ed6f388b
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# dfc3393b4dec426ebd6e8d66691dad45
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 0c6168fa01d04bc983b0675fc705b1dd
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# f4d181071fe748a0876a88ecd21309f7
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 4ea70431c3f04a59bb297a53e5bc8322
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# d66afb0a340443819cd735ccfc31d8eb
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 8e65aff352b74286b9d0bed97ebe3c34
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# a0d328094ca34cef8ba75bf8e7b54156
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# e97df4943a9646808110c0a1320bb68a
# beb9ffe0c27e4221801d527ce370ba72
# d403e295963e4bcc890e2196c05ea98a
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 4bc85b56511a439ab2999e71c23981b2
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 6b802248b5da485693e4918a0be3490f
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# da8362375d854a9db9423ed3459fe3a5
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 7a4d01e5ecec470a9f2146786190e93e
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# d51587a7cadd45feb3e08554027b0261
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 21d05ddf8ee84d3d959f04db08b642a7
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 6af0658008794514b3d7895d32407282
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 3c4a8deafb2b4376a4329c9443cc211b
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# d93c35a19d914bf68c64a9f2e43eb591
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# d116b62284e44e6594eb2993c2e3920a
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 63606fd97e78490cbb01f7ae31fbc31f
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# b81d94f9531d499a9b1439d715dbd9d3
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 5a8bc9431dee486ab12a69b2b679c55c
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 2226134b91b84f8aa9e917b3706fb1d3
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 295d2299d2364702affd5ce0621b9f19
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 853f6d4a11324533866841c7b36ff416
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 45badf7bfeb34a43aca61b476006f57a
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# b816f78e63074ff3bdf6df98064f4850
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 28c58c0d16fe427794adbafc5d26dac2
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# c2dcae21e53a48639381b978a32ece40
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# cd92991bee2d477598c9d507fb3bc1cf
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 1fddafe43e9a411d9f7dad41e81b8a93
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# e3efd69c721c48d4bd2d21a85e952bdc
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 96bd78059e7a4ea7b7f832c24ecebad1
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# b4828dc1da264dc1afcedd408a5319ad
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# 2cbfffeda8fb46be85bbe59910384ec1
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 8dce6c733569489dacc07d91be04cf2b
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 3e6e5794ccb74fbf94dbed4ccf98b9b6
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 8a51f833bcb841caa026ca6d255d60ba
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# f6f6cf415ac64fb2966742c335585af4
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 0b7b0cf67be7430cbac5c3d6d3358309
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# ae6e008bf28b404f9602694693494f08
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# b363b91017d74d07bdb7004b9ee985c3
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# c7d94443cac14a879f2f2d5b64b6ff05
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# d0d175d970c548bbaab67e6baaa5539c
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 070c333cd92d4c0b98b1215830b17c40
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# e421d3fdfa6f4b2bac15961cfb598d1a
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# d5df5c1b90db4934a1ed5dd0bbfff8d7
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# a63a26a8ed3c42eba12dfcb8aebc1e92
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# d851682f817a48128e4fed11cd8d2775
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# fd266dabf56147419b1d5d1c3c053a88
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# ac382139713642a085f1da3b426cbea1
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# f119ce4fcc8141b8a787fcc505fd32bf
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# d0a17fb4d17f49eb93b2ededbaa5794a
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 07147e2436bd464e978ec7467ecc4bf8
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# aed1acfa52de429794210ccc0b60f815
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 65aa24b7e072468391166291f259c1e5
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 985d044280ad4d9785078339bdc06545
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 77a8b2bf0c224972b79ab53f2baff67b
# 879af9417d774e34b427b9a20fbc22fd
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# ae68ba3094484c269630d0ebac378bc1
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# f7fcc76f63b14a04bcde12ba5715de0a
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# f9a14e9a9e824a1386188b8663f57ca1
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# ca0ad21b8c7e4e97919993a11f47f01c
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 21f77b7672744e39ae8808a9060d1d4b
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# afc6c8873cd84602957e2f2e0ea04833
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 5098e8d150304197a1a242d73a100dc2
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# df9c454de82645d98bf523559d818b35
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 95d611db8a264c63b1c2c767700d50b9
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 9cfcb828e3d644478b3f0ce850ef8daf
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# e48ced2ee6e2478c98ce4a542d457f38
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 6a0a9327dd4047c8b0aeb2daf7461558
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# db1d87ba3a5a4660b62081cee1c747ac
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# c3cc0695078b49e0a0912aca4f0faef8
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 09a1d312a6c64bfc898a5fd144400717
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 8d7d8f8a1dcd4936b354e67dd5fae44c
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 9a7e58aa394342c8a6b135d231cf526b
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# c4b94a8ee6d94f9c8c2d0464f50e2858
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 591c5bda27f34db9b0d63f0b4c116f22
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# bec936c44a2747399edb585788095520
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 3333a54ccd5a46c8b9b7498d4e6aa0d3
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 903d2b9075fd4383b19f2d937360c715
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 0b41b60a5fff41438907af66384d9d79
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 8ca08f0a35ef43beb594f941551098ea
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 6abe10d9871d419b9d5d1f4b99d2a755
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 15de88e6443d40a7a6a6e3a6ec507ab2
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# cea8ddaa331c49ed9e99d8d1331b2820
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 27557d1d4dee4525a728642e095ea9f0
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# dcc2468021c949668dd2760090c240e5
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 817005e0b0c549b7bbc3f2058d546fb5
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 82a8f2f41dc742d691733cc7ef5ba1cc
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# a75c3fc609d14e8a99e978b72cdffdb3
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 1fa1940b18f74035b8a04453f7531e02
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 0e04069c1ddb4121921a41da77d6daaf
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# f071bccf3ab3423a9e087c34f0a387b6
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

