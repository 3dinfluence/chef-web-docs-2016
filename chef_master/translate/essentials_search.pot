# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-02 15:47-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# da62ad3ca92c4c58844d5f21bc65ebc2
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 7f891ff6b433447c953375da78649904
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 9ade4051367347dcb97d83e9873bb2c4
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 5cdb2eea9a8d4de9869be205eab517af
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 90705003a2664f28935697ca87597c3b
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 968d501b85cd49bf8a304c36c3285c21
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 053139aa125c49d4ad5bdf2c98971d80
# e5b14b8b616d4163a2a2a7898f445324
# bd98ca1d073a40909955792ff9b9655a
# 5fe8d6b067d44bc6a3f4f2df01897c9e
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 2f4c0f3f766347fca8bb8a4868d8a814
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# da31a72025574964b5b3c22c0cea5408
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 50c960068a8949e09e7065746b0d0b05
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# b782f5db602e4587992d7347785eb93d
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# b1cbd85f0c794de09006b8621df175d6
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 9284e58e3aaf4583ac4b2784ea4473e3
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 338da9c8cfad4b76ae27c232f8a5ad2e
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 38010e04e5224493ae1c0e3feb89e1d7
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# d345c647d67a4096be6ecbb216112feb
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 2f92818e71ce4ee68bf82ac0de083144
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# fe39007a32154e02ad84dfbf94bafc0b
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# f2057da07b134f2c815e01b1826432cf
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# a15a8175eef74e08b660c4d0001b4f3b
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 0083722b5cfb45a0ac52ac5f8bde3652
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# c37b1a9a31d24df98728957e613fe648
# db53f640fd8c438db0ce530158089db5
# 7510f6f5e01f4f0d9ebab499b420f8d9
# 4fd31b165f554e26958937b1c3901476
# 759aead404f94cb797ed71198da588a9
# 6747b44a552d4208ae8153be5c99f633
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 7b5b6030a54e4f5da0422c39981b2892
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 12d8f40ecbbb4923addf0b81a0b6dc53
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 5ffad8ab658249a5bd4fe549ff4b9221
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# 4d3839c4ba214ad3aa616d30d9b188c9
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names. Enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 4012da93a4d7412eac98de0519b195fb
# ec7b8b17cf054d99b69fcf09b17d1d66
# dfd849f38ad8465b9c74cd8ed73e27fc
# 7f7d3248ffb34a71a6de34171800e9af
msgid "or:"
msgstr ""

#: ../source/essentials_search.rst:34
# f397871f19e84e0a8fd91e6d2189f583
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 7a092271a5344b46a2938e3807c5e486
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 01949904f36644c6b4dda286b84bf6ec
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# eb16d8f8fb0847df87cb4bad810417bb
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:42
# 227a5759ae42451aa311cd991bd622d6
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# d69d2b10f0c34dfa9cef58a10121d860
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:46
# 9c39c86675624ce4b6267cc73f9c5c56
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 3a63999722544e84bb33c3a0c7fd22f3
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:50
# 5d975e573a0e474987bbb7b4b82cd2a3
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# b2d1e3068f4a4dfcb8741ae18d1a2357
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:54
# 38b70240eb944a86973c09e9b0971d79
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 117c80c6ca204dd2a1f87ba726a9ea8e
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 7512bd6b52904b4c8a485dafeafe205e
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:59
# 1c510f2e578541f4a9ef30b05a9f3a6a
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 345a6f82d9e847c8841ce0183a67cafa
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 9be964b4d65943c6bc653b9823238fec
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:63
# 0a38be939e4e4da0b92598408a73cbf0
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 42b767bbb3de4e08a61f933c286fc8e0
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 8fcb4923725b48a0a6d9c69374b4d4cf
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 2f63cf0162464b41975b1433d4c91b23
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# ede50087680847f6b6c9cfca0e1983d2
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:67
#: ../source/essentials_search.rst:79
# 6672dddbec404515ac387fab84b82527
# 5349693e8e694dbd96b32fda548d48a5
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# a61466df3a0b446783d297a9efd4ceb8
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 6e0e490ef3c1423e972e98b4edb753b2
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 45315599fb28483fbe33eb1967752efa
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# c3d59d5306c34be19d699d7258915d1a
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:71
# f54fd908deea4a3fbe6deec6ffd4bb3f
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# aa1b123c0c044d78be9dd915f307b6a0
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:75
# 18fd7839cdde40ac83063dd7441f6a72
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# c828ad83bb01418698cb52db3604661b
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# ede02616f70e492e9f550ede8e904244
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# dd960a14b01f457493e0d848a9e7d604
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 99d07d10600e4641a6e5d3b1c66f576f
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 996e7d135a37457ba83665d04771a1a1
# cb5fcefcfe3448ba9b1ca2927ecce754
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 70f6bbad4a294e379edf9df2586dd40f
# 0ca9f895b4a44daeb14ac3ea0ab01b5c
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 5a201402c39a42f88d04ece22552b5e3
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 6811363b58c841d59ead3f265080cf21
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 4f051e6764c4491da887e10fbc2deed5
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 441cf5f0a0e54621ae8539e7184d5b1b
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 5136774ac25b45ada2faf492ac424b4f
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# ae928d3aea6d4133833f57dfbbf2e42a
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 2cd761b1492246a0b85573f5c0f5a02c
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 08300217b4bf472faea940b7e9c538ad
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 5c66d59df84046eea26e725afebb8c05
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 6fffc63afbab43358221cdae97d4b6fe
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 5ba5a5a5c01148e0bd3ddc2e3d3a815a
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 6d148c8c65e14ea8b1ee9b24b72dc7d6
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:91
# 6df6185a64db4a00be4dfbba69f850fd
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 5e40bcb1e4f64dde9b33813ec0dff8ed
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:95
# bb0dd883bfeb4ec2bf8a9316d62d1a83
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 01c22f7301624d138d0bedcc1eba2954
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 6ce26a382adc4fe683328ba5989d4fdf
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# fa0f89dfdfc14f66afe3eae19b4313ed
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 37a8e29482b64bd6a124f2e730a51fb1
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# b5a808f519514b22bb4b2045baae39dd
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:103
# 805c3c94d05f47a989ab5a9c43aff466
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 8bf00be69bcc45b383caa142beb5c195
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# d8e44744ae8348f3b2be9cad3e5e4078
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# bc70c9ca17914f069e82913b9e2fba82
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# f40d06b780bd4538b92d5ab6d9d73f8e
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 7c2e96d13bd746efb82a71f2249c30bb
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# fe3ec29b4cb34f7e8039b51d28a77991
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# ab5201a9addf4c0e8cb06483e3ccc117
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:111
# 1a89f9daf5a645e48856b333392284f1
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# a8319f509c7d478e81dfe786a3e2847a
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 4fb78f9fafe24b9e8f25925b3c0a9554
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# e6afb529180846b18448c17c3235b77d
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# e986e3345c98423eabaf8adae1fd9304
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# ca9364fdd86b404bb4a988419f8a7b19
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 17897a0f02a44118abf821655def16a9
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# af8a9b2e19434d7d9f22dce908df2125
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 0a70b3339eb34d10ae600325f2771733
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:119
# 644b7dc62a4b458db1898f4fe7e197a6
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 9020504ea0fd48ec99c424973fb4b203
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# c364192b87ba4153b3646157d89decb1
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# ee16ad2336144feda8ec5986aa4aa006
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 3cf42839d17547a89edab0fc81b47124
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:125
# 667ad134ef8642a4906de73e903683bd
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 5f81572a3ed84bccb5e05d354e4e6940
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 5719a96ffdd04ea9a9daeb2509621a6d
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# c7f7c5428eb64909a55764a17623efbc
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# d241ff5091f7483a8ff4c413872b4b50
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# ca3655d2dc0f4be698fed9808e50a21a
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 553f7bf3327b47ed85831f0000c53069
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 02a77216fad44d8fb7d7a737149832f4
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 2e245f32a50f4b50957f516e1de16d48
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 93f377da41ed4ac28084cf275f84a64b
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:22
# 28e6f0d64859404cb715ec99b74ec90a
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:30
# 048e455eabfe45fea59d31352907b339
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/essentials_search.rst:129
# 0d8978bd53224e688d79d1b6559c4a37
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 2aebdd7611064b9e86c886f14b9e71ab
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 4b8df8abf7ed4354adc6eca88e42712b
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:137
# cd2ce0a2c041491d9d0a47445bec1372
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 211db8c30e934485933620bd5017c451
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:141
# ba1fe2d3ff474f62aa5bca4ed4d9f415
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 3625953f88824ce5803009c97f1a4d42
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:145
# 709285ffb80043d6abe3544abe621ee2
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 374ca0922cfe47bca72d2d49dba85566
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# e7069382b48d41849eb1ccacc06c55ba
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:149
# a0f45213cf794a18b42438896bcb2ea7
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 8acaacf39241459b8cb26d97fcc4fb0f
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/essentials_search.rst:153
# 5eeda5175c3a4eb2842584017f51c25c
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# f7ea4370d90b4557b05c57425d2fc2e1
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 29d23f1a15cc4661bff91bee50e2338f
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 9fe9d395ba734ad382ec9056cb4b1f1e
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 22f14dafaf044de4999a092c7ba80188
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# abf05002d2e24fd29ac24eba34d8237f
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 6540b42a65aa4d8e8793204da7a210c1
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# c7694bcfdb63463582cc80a3404566a3
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 354a66854ad94dccbe9f2076b743edcb
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# f1c38ab5f97242faaaf967910f42cb7d
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 04841da8be42426d8fad7faf49f0a415
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 94b8c9ce44954e1dae85cd0fbb535478
# e0ca727a34aa49d094c482ad22407638
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 6cfd7e1d3cf74636847b5ec7c20ab1c1
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:161
# 8d6ba311ff784bd5a596f6b3dbb1d6f3
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# fc08bd32164a461a80d7dc2e83f04006
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 8e6b38ed8aca4a7b8363f8a4c36cb483
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# d4bd83a4f45b44cb8817ab8686132379
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 503589ceb1de416bb1e4782dbd77d9e9
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# b2482020876143f2b5763a90cb7b426d
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 8338cd6d68fd4b31975f6403ef4038fb
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 2b72ccd5f06b4585b205e818949b2140
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 27ac499e3e62490c95da0c0503e5069a
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# bd9f40d3bb5943e1b4c2110b5f58e066
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 991cd73c31a84f228f70e18cdd1a795d
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 595859d6dba44a18b873d3b035bbf5ec
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# bf18bc6aa7d34025a0f1e1f78d166d73
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:165
# 0fecf54a859040fab246ec60629aa855
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# a234aea1f45148369e0c14f65b6092b5
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# b8228f11d042453988aed640e3b7df27
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 008b1edf025749e083b5f48d313f94bf
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 00dd0d0f7a8b444a8b2b970e8bd87b2a
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 910b99b2729045a48e7d13fc7a7439e3
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:171
# e1d37ee0890c493fac5b019bbdb2be2a
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# c60564ca4e0a45ef85c190531c7ac696
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 4c9c8e0f4efc498a8514e5b4d909082b
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 6f79cbadabe643afa7cc3f440067e31c
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:177
# 17e8eb83c20e4c2ea9381bda2330d174
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 902729abb6fe49748e994ff91edd0d4f
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 41b40e2a00dd454e96ea13bc022edc04
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 293b5b1c82264fadb239292f98f7d199
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# e0a46650a63c4358b9afc52a5734f35e
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 70b3901dd5054282964218b2d283c354
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 6bb58154c4d640bf9282be7b7659b145
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 10903232ee854d6f9453737102097ff2
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 05dec98a44a949e0bcde557c1bae00ba
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 4395bdf7a6d745188a9919523d40f83b
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 8330f8f640964682a89d1ba06bb8b7e5
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

