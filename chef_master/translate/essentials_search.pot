# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-02 11:38\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 127eddaa0ed0432e8d4babc6ffc91f19
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# a320d51b77e342d4a1a4e79a66b3ae78
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 47b2ffd6634341faba91e256da4bc239
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 841f4a5c6d0e453f87ffbfee5a7046c3
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# d63086ccadd447e5b3589a8db985c924
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# aa3659de57714c7baa8ea308a77901a1
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 8a63f950c75c438e9ba8b14bfd81f64d
# 4efe16f95c1f4782bb91dda05e9a4f07
# 2de0198812bb443c87f329c3ae1ffee7
# fead90b081324f4b89a504f579e41fad
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 91b16436fde347b0a8751eb093c96877
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# bb28a6eca97f448ab1bdcebd5527df90
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 2027264d3d034f75875f465173d86080
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 37f528ee4c5e432097c521e6dd368bb3
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 571b5a48d2b848c585410ff30363c199
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# e1f74c0ed9c04a63b003e0faf7666a55
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 695260dfd51648eeb9ee096850294d2c
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# e38faf7f39ee47cb8e6ffc6cb11610e6
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 3cc3e241cd3a416b9cb72d5dfb7335ce
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 61fcc985771f4130a293d19509edeead
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# e7a5826f26fc49f189057102db42e40a
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 2c709493e954412ea7f6166c3908d84e
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 62b6ddfb6d83444495268970d3685e09
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 25087c5aa2f74fc6a85f24520b89b9c6
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 1adffd215e5848e6850a26087d718910
# 713f3415469f42679f6ce327f248c1f9
# 3550c6b739264238b96213144700572f
# bb5661664cfb43d8a4ace925f80aa453
# 64de459dcabe4d42b8236f1cbf1f36d8
# ff4913d0084f4e79a87ae0b66139de1e
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 9c1c47f9860e4319a00e2d7cc65328a7
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 576aa5466d46416480be8151fb84a610
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 83a60a6f44204c649b63df444889686e
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 8ecd198c261f451a97f0806e9ed4eb31
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 94bbbd3232e14cf29a6d0835133dfb34
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 281da2b85ab34aa19efa729900a20163
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 48162bee9fe146ebbeb923fb51b9e169
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 31d528d8151e49a9b4b4f637d540f695
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 06ea64b21d9b41c19fcc0f8ef8cbbe94
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 89cb6ac7e000495bb83555632b8f5a46
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 3915b12afe6e4d92be7710c296421fea
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# cc788393929b4e3db6d69b453b9bb382
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 19443840128b4417a5be5b54fad16075
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# ed2ca96892ac4dc1a7b6f3d1b1622105
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# fd7e75cf6eea43aea6580f728d8308fc
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# e9cb9ae3c484492b9bcd1049d042388a
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# ebfbd7fdc8144b19bb7aba04b9302297
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# aea09bd4b2ff4131aa593a9bc3540b25
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 2c820446c6b546699844089d59ce04dd
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# ef784919f8804c6ba46277b267939497
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 5ba19e27da2343e791aa24dc71c317b2
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 4ed878dc78e24099b9e6a57c4fd7df75
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 5e1a090e863d442d958f650dd38a2fd2
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# e9dfc6530cf94d2a9e862fda56de83d7
# 65203eae2b804c0599929b011143c6a1
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# e169a377a3b243a382c769aa7ec3acc7
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# bf1d9c4691824bd4921ff9f100284333
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# c28b68e7567e4df8b880185c16ef0fe0
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 4c13b06cb27141f59d5bf8287d39e208
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# c1c9f7d3fe5743208d616e80cbb36f5f
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# b96af52b4e204d958f7c0105ea59ad93
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 02abe35f4fe04e0e828bd532ebace341
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 0850c96f49514fdfb25f7efbcb63c8a6
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# be60bb26bc774fd7b75f182ac34d29ad
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 1f3bfb9626bb4833bd2e7266bac8197e
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 05ce458293bb44bc8bfe47899f3b2fad
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 8a2c51688e1f43409f3c91f6d2352d3d
# 6046a35b3d734f0e912328068392a0f1
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# fb4d261a123246ff891f59b2405edad8
# 8e3d3c75223240e08b74cf17b2d38037
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# a1007aed058149929ab2dd65caf65932
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 417addeabb7c4495aecd7a496c11c5cb
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# b3808bb415c3405b93ecd7aff107d8dd
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# e1f332c8d06e43d8aa1b26f5f0b1128b
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# be4fd13ad32141ed96137ffffcc8b022
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 0f85cdd94abd4068b331f27d28c0968a
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 3f1006f40f284237a5c263e167cdc668
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 7474ee6c60cd495192598e6cb01d6f49
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 0d38ed53cd0b4bd3965177c97935579e
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 3b96977f444648a1bded4dbb3aae4815
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 1698d8c7e0f7402e9bc1b5a9e2be6abf
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# bcc7532b2c0340fd85e05e85fa199e02
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 2d38a087b3c04d669951c8242371d8a6
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# be1146c79e534f39ab6b3a01aa2e5227
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 9e09028c7114404d940c6a7dea320a24
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 80d72fea100943ca8bb07b8752d66de5
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# f65cb0b20ad94fac9ebe0cea186ef7ec
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# eb878c11e8b94179ace0a09f28f7c948
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 13460cb5af6449eca6a7b05124d15379
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 1678e22dfff84907b7d02aa2b8a8ac69
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 6c9e4f0ba17d4213bb74bc7c06037a89
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# adf21645a9ba43818fe8940dcb171b27
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 285466e0616f4d40a56a81d7bdfe6df9
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# a48a425ca0e04308bf19691bb56147a5
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 0b1b1ab7acfb4ab2ae59c7d460eb9784
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 9ce89bf1997f44c4808394264c09f29d
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 31c0e4678fff46b588725f5c47e1988f
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 9a0c67e6f39e4ca492ba1a390df8523c
# 75d3d5d5ecc4493fbd8bd510a6c0d2d4
# b6af35ac7c77493696aca1aaf091c22f
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 8752f2f6ae5740ce96c05ab8240909af
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# e17b98c3a1f94afca19ad2e6d1610373
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# a72142064bc14dc9b982ad39c7660d81
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# d18fc0421dbd4e73b6b6ca8e6d4cce2e
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 2291aec8f3984f39ac6cb0e531bfa18e
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# addd0402ef5b4b929c3431dbb7836d43
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 39d9d8b9e1084cff9237aaa7eb26e8c1
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# c2e33bb5be4a4947851230d3e2d098d4
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 0948944b244e4decbb376198d83cb3f6
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 64c12b1316bd46bdbe471f5d7a332b98
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 8d9e093d85a44d3ca5ac6cbb8a2d59ea
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 43df10ce7d4a4f29b121fe7f1500dad4
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# b07e99852c3f4c8b8534afa5f15c85ce
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 79b41ebab1154e6588be8e94939b5c47
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 7ec47d1839354563a9abbd6ee395ad46
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 63c16fc2182d436599d7135bd370b7f5
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# e8cfc9bdcb994dd996d4b42e0d2ea6cf
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# fb8db520fb254094b284d21307e8ecb5
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 57125189344a4e48ab122860bd8d15bb
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 99a08d9330194aac94a2a1b3362733d3
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 9def066a53c847b484a3dc96a571a461
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# b60dc6746bc24347a4ab1ec651819f33
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 2037cde615d4471683d8f149ed12a956
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# cc4bf480e0894ef1bbe3bcebe49c8135
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# d4ae2e50291c42edb50659e3be204ee3
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# 23b498ee267349f6989fbcb5f6adece5
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 9e9d271301c14973a4102971322daf8e
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 188e161b03344ed7abac2c9f7bb5c394
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 6e1780fd0f95490886bd0e6d9b3f14e0
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# b79908252ce04c21ba886b0fe919da93
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 30261df2d95a44669be2860b479e6345
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 9f1c64be5c254f88b538bec4a5cdb573
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 6622fd4620434203880eb637b3448d64
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 51c7140116954246a835003b4ec790d9
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 078a8c3ed316404aaca8bc6da8ddbf95
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# faebdeb822374e2982b66dfad3ddd15d
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 4f3b12d34f284d42b6de1d19b11b2356
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# 14a227f7fcb44b9e9b841a585c372a9f
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 8352ae8b74b746cda9f96f98f554f570
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 62f605c9e63a4b7a9b0be7f94afa3c2a
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 8851b55112394847a7d27e1c35196622
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 2caa5582fb3641c3a8f43cf7b13268e2
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 410ea644f9584413a514392502f3fdb4
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 847cce3b87754970946cf9b256368139
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# e89d59649e414106a7e61a77a0969f70
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# a711fa04e3cd477da4ddbd9f73894430
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 4c0664963f8a4583a60bb2e7de3a50ed
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 9bff3d1c12554803b83394e024cc8bc2
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# c9ba796e9a8c4aac9d5d0ed2a873d653
# 0dcff8afc1ba4f77b78171fff280f341
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# ed49c286839e478cb871d1f97c44add5
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# c0132b2280f14839afed1a0c681d1b78
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# a34c0107b18c4745bac1ace2ac65a842
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 4037a3b826cc4530ac63e9054c51840f
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# a6b2c177b7f543449f32420d52e638e2
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 409c1a805c79449cbcd1109c835c595d
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# af61d94d483e4266b487232ca1cb1e1f
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# ccb42927bec34ba49817af8dbe0afb40
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# fb11cb2b8cc44ee89c117fc76028ab6f
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 09ad56a4258f440fb1fd970a64f8af71
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 54d801cab14e4424a45339aaf6883684
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# ff9828ff54d740ad87946c06a23ca7e4
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 3a19725fcf274a8ca353f92837435bfb
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# a529b074a42f4036a72f4355654b62e6
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 2d6f79bbece94c9c9f3276164acc2118
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 5e5da4d9bb554c7a877994eb64d85998
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 22a121e0294d48359ea6d1dcbfc8ad8b
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# c7f254fe987b48ab8817e9f57754fe9c
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 1c31079181e349728a717629469c46aa
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# f61a4cf4c3cb448384b4f821c0751154
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 1fb77b7f516d4cb3b5140c4b2f690b26
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 25c023d7ff2944be862cfeb8195ebc7c
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 89d03624b2ea4a45948c256803eb4e77
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 2f9a3aa382c146e290c9ca67206b953c
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 5f5e97ffffe847edb333f2c38f6a0724
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 41a1596a89be4dfa9425c8db56c0bc1d
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# b5105734473f40b5acd2e07bd5000556
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 820ae70b5187422d8ed1cf695dff13fa
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 26b979a87f4843f18e80b7aed9b8e5ab
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# c3806f8318084afe8682c60bd1984633
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 460d56e05f984de28b73436c30ad1044
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 5e036e47b6c14cd58835510d1e197785
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 3a95fcfd213a43c692aaf83037ed9eb1
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# c60956962e944db094d5c271c54a5501
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# b3a13f48b1db483d98cf4cc87a272e07
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

