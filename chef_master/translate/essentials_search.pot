# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 18:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 7c18d7b7a7674bf28a68c8c74d1718ac
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 7fa53668fe924dbc92b5ce422d16eb4f
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# f9759695542f4e758beadc9b874601f1
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 5ba63481057a4212acdfa01fe49ce878
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# d8f4c0e5c4bf4837b786d75f76dcda6f
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 88f14eb4f1ed4f4babc8f1302f3509ee
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 6c9168a325894e91a153e62d34d7f2c3
# a606593f435845f29a11163935867bd4
# 4c5f272591584805be4ccaea5a48e794
# 4dd0ad9efc5f44ab9981d48a32ed8fc7
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 084d0d4175264d24bc01a8099c1677b3
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# fff2f339ac584df88166d2dd040909a6
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 21e0fe9c4099476a9ac755605f7dfcdc
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# fd1992880f8e4c5d80ce7a2defc25dc7
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 8b900a4f6efd4a25ae1d428687877626
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# d4174e0dbd4b41cd89d711fed40bc3ed
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 64cb4908ef4d4bbfa76697f93f75a528
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 689a8d87ee5d4c53a3df4290d30a8124
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# bb1a2dcea25542d8ba424202e3bb644c
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# e662398b19cc48199757361eb79a2108
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 0309b1b87f7242658380a0e0b6f559bd
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 7795697a5f8740aa90517c46881f1d2f
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 0ec66feefb9a4466a397972d19aab124
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# cbfdffe359ed45d7a5b8baf02b32ee2d
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 2dacf279b08f449d9533d83acc68666b
# 4b3f9a979e194c8fac0dd68ce3d192fa
# f6d1b61b9ec64f4aa370e106cb52464a
# 72da6b624f0e432aba27d89b09e3240a
# 6aeb83015dd54fb1abcc7e5d4c6a3fdb
# eaa42f1f14194b2f801d52ad7e555f2a
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# dcafa07b34684e22b5e0e920cf635e12
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 0a54441fae1b42088e7008aadfc2b949
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 20818c71d2104522b179abb4fd1fa5cc
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 51ed3e3634fa43399f9f0266f532d073
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# c8e98925db17442298437d2cbbee44b0
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 9f82973334c845699d8f0ee4062efbbe
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# ed3b573096f345fc89602746f22421ca
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 1ec37da0db8840a4ab20a9482e27dd15
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# d87a86e0f841402997147d7fc5d81e5c
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 88538a8ba9eb4082b5ff1f516bbe303c
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 2a1cc65e7f8748feba979a3130591e00
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 63df7cbd56f04f69879052e16c5a0f1c
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# b1a10eb0d40647a69fd5daf8b780dc50
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# d405a9463a434c50a6591d791bd0ce9e
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 5693304d431248e2b7b30d95a60abaa9
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# caeb9fcac64145aca9cbff8cd27349e5
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# ca555c45c1b54d38b3b79a1427f60891
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# ab99ea5ea40a40fe9f4a414d430a4283
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# a947b3fe64b441dcba2d668278b471de
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# c2ab5eff13e34875bb931651761a3c71
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 621af56ea970490197537ee2ee356458
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# e8f2bcefe7b547008683e968c3c591ac
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 999f65f372ec481c879b168327f96123
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 71fe552df15e4ee5b7c36efc7ed91000
# d1ed9543470347ff8b47bccbf5ded1e7
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 2be86f312ea24c94b2f8d1aa1490fbdd
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 2294a61a7b7b419cb8cbee473c4bd8ad
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 898a85295feb4a2ba0a4d6b7ea071aee
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 5189cc725c5944afb3694cd700c967f8
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 0e8b3959765e473a9df42527dce4b3b5
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 37ea199bf15b42e1b919fab230da679e
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# f5b9066a5f8b4351871b881e102d957b
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 9027c840b5e4452f944edf2c689a8d47
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# b8c46917c36342168ef849949362ff18
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 8e0fe67283844ea3b3887a50fb611b49
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# ac62efaf6d744e1c8a5b718e6c0d3398
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# cab94489f5ea4e5990890b5bedc732b6
# a3fe6313c362447abb18f28b0a617893
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 77cbbec339c24d739a247dcbb925b9e4
# a68a3b6226b3429b9d4ce969373ddd7f
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# cb3003dedb0d4c858fba66d3aacf682c
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 624ee39fa62842cc86668b1beb120a81
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 5b3a926cd4054b01a18ddbaff76e9247
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 44ee0b0b3f1a4c539aafaa9c4d8d7710
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# e3af5c1d28d142868b1ff87820367db4
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 33ababe837f24231a13016b0bf22883a
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# c7e56249d2e8426db99065858107e2a0
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# a890169ec56e4d48b196d61aa40fbeb2
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 33b09e14537046ae8f8cf9439726d154
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 10ea6278d5c54b4680f32437fadeec61
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# f3dd299d8abc43aba8533364e9f4766d
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 8e01661a6b134dbfb626d5e382e6a78d
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# d1263ee772604cb1a525ff9534781ec6
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 867a75fef4204e90b4b3dc398ec9ded0
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 896719f946fb4ea69c63d2cc0b69aa6f
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# fcc69410e49a43de9d7eac9f68a99d6d
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# b349c72dba6b4e7faede09f5e332aaeb
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 1e9e1949f39141c9b1295165fe1f562b
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 075779039f6b4aa49e0d295978ec4ecc
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# ab4e727481da4c5885bafbe276c48bd5
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 4823c619124244abbcec813deae60da9
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 64704b8e64af42e7994e5687e3565001
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# f6becc9267fe45d3980a382a1381a841
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 5a8753d9abc74665bf47665e2d408c82
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# bef2a3e1c5704e89ba2e9403943ccb0b
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 7446329ade164d249f8e11388d4db98a
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# e728e12d18b145a6b31db03c3f0650a2
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 15180bc41dcd427bb489335fb75fb513
# 573565dbe78044acae72aca26991f76a
# d89a917ea4b748b5937b91e854bad693
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 533400f76406458fb752732b1a48ddb8
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# c4d35162c6944ceb8894d6ef5d07ceb4
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# de803b93bf2c45a3aba2842f7d04216e
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# c79fddd429de469ca67b916413785097
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# dbe22ee6541245b99b6de1d6c94f8078
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# b7c64245c6094e0fb385da6dac6738f8
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 98c1393f07d044f7821b4a0e414f426b
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 211b719a063146059061eeff887d4d4d
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 5155c031fce3424d8336c097b8024f77
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# cbd16a625068440e8c995de2d7b4a87b
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 2f9864c9175c4dd7b3059e67ebda10fa
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# e5a37e793f9e4ec3be459a0f6a240f94
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 8d0bc72890b04249b0aafe373bc7aa9d
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 8e682152a568479fa9260b149034fee8
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# fb2b6ee3e3794f9cac3f7cf9d991b317
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 18007b6a64d342c6a348acc86589d426
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# e801597f51b64fad8bff5abca16164eb
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# ae98b6cb003b4182b57ac64608d96b90
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 310393712c054f008baaf03f48e840a2
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# e2b801e4e1654c62b5f49d2ac50b8d3b
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# b6c919db052b435296a9f8c10b56d116
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 98187cf6eb2743d8a3206444339bd2a1
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# b2efcdb3ffd1494f858c3b0276ae06c9
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 39d99f0d8e6444a6bf0623cfb17e75dd
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# d5d107bbb6544df6ad13aa05ce297519
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# e6597d6d575748669efc8c4e9cb65748
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 3777187130b54416b69aff527408fdbe
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 5b457c68d54b442db1f3e7566947fda5
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# e836458742e0414ea2cce66c6d522bd8
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 28aeab9a21404405aa29b4664ed2f0ce
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 1ace07a432414cfc9acc842537cb6ecf
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 865445dffada4d7ab09cf23454f7859a
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# fe62d04c56824ff9be116d7eeaeb4341
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 070b87345e294866a12778c54b9df93a
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# abc0db8a076b48639b9a92703a008cf9
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 45cae040018e43b5b38604b244971c33
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 8934b5306dff4f8aa1671a17e360d4b9
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# e432d5428599425bb1973871b309e515
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 5975f9692ce442a2ad7eb007e93516fe
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 1d3cb19304d04e4ba614094a1b3ae1d7
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# e83c644a454c49d7a80c812179498a12
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# dac610e1bd3c4b6ba9226c97512bb7f0
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 823b9abea8ea43c68cf4c565e7d5da73
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 591495b016b043d08ff706bfd336c7b5
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 9826c50a088f457d8f5b7c5f834c7ece
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# f82bef61ef02477d874964c670bc10be
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 40df5ecd886b455a9622fae4bff6eacc
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 1e3ad0ca293345109fb75e529aeb7371
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# edece4ad664c401c825a6aebc43f4f4b
# 4e00736784864aa1917cdf2bad9f95f3
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 6626aa19855d4a1baea57af1b3054b87
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 7c3458f41d3344dd9f6a76708248b53a
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 9468c0fe7e2b438f9d05249f6299a67e
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# fcbcd2aff3f8406fb90e124966ef46fb
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# bc171bc66a8043119278daf007cf7702
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# ae0dbe9f391a46588f768b9d9c88dc31
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 77692e90c28848498b8a5b2890e7d338
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 4217dc69dd3d49f793eec1d29b3a5475
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 7188f938dfbb431d8208bbd75d8d68dc
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 65e2e721baa044238080f5d2264fb490
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 3f1faef729844b7984546f3dd7bc7775
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# a4b7ce2bde2e4e9ebbc27db5dea8f810
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# ef4c5e0e7e034f5198553a1716211ae1
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 5cca51df19834f8399b0feacc304441e
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# d8b9fb3731174b5bbe593704dd64c7fd
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# ecbd8b551ea54be48ef017c82ccb4241
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 56ad90275dbe410cbfa80ab4a8d391cb
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 857ac471fdd441aebe9ade2c361f1d84
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 4752eb25816349b7a417a6225c113a5e
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 20bfd5e046464a639297bd0cc3a4efb3
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 7e5baebe4bca43e1b48cdf8d46c91807
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 1d7f8aa5fd5744838cc8e0c71a47b386
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# b168eb15a36d46b4a5d336ea770239d1
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 5554257991fe4efcba3a53f52f829fa9
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# cece20ddee8e499f85d7008480ebd170
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# e109e84af4fd4a19901d4740c773a63c
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 926317d5ced248f9ab8c8554b47e5757
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 0952a639a79543ff84e4f9d17030eb92
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 21fe6d5029e44a4ab36eec2c6d624990
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# cc61a2fd6b34491ab7df51fdca80a80e
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 4ac233812991470f9053c23e12e208b9
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 3eb4130d13104fc3822b26fa1361cfbf
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 575cd135b0da44ccb760f47d213db77b
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 2fda3b1d77984ae3961171acee48db69
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 3848119a43d74ee298955d905dca0e0e
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

