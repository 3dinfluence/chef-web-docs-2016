# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-02 12:37\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# c1b61bccd54448b2a8e61cc219ea1dc5
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 71214688c0ab4cdd814fb4600e12b10c
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# acda0c23dd664bca8e3e54aa4303150a
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 6bdc0dd3d99a472b82579d42ac597d01
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# ffb3a4b5281b4d10bc135378aba2ec3c
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 8a85a8e8b25c4a4ba60d8aa375888b12
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# f8665f37a3884366ba3d8cb00aa69db7
# 370ed0d5a62647d0a37da29e3b823549
# f4d2980ffdd4449dbfe56034689ab21d
# 25b5dee2e4eb4edf9f01e53d26193de4
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 1977b1e017344b9ea4d5542cc9319522
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# ef86d5c0681f4405b139f7f50595e7cb
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 666325d6910e4e16a0110fe1ddddf404
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 2fc8ca49865847d7bfa88f745293795c
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 3b9b937748c540ecac1162b7ba182e93
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 9c75f0d8cb9a4d2c92975dfd7c30a815
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 8592655ee95a4f64be2c103972705028
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 6a940f4809644aa892f4e99fe7d3f7cb
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# c368e60627ea4863a16647f3d404d148
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 79f3cbbc6c2c41ad9d779c013a02d042
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 231bc46c3fb7411e8f516fde9c392791
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 0ef34b079f244c34a2214b17606ac5ea
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 068784ac263d41b8a763bc07e1467e95
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# a4a1438f40314f2faeaa7b1e6ba9abe3
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# b3bd231989ef4762981fb75dd5408b8c
# 4034830b3b5d44b2b2a0c977c72fdf97
# 29d9017ed6074cef96a5846d42343705
# 5b987881741740d581b01288ce175471
# 9fe0816423494df1a7715000863d622b
# 98fd7e82cd0248c4ad5dbba4a940d78f
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 131c66d778954b4c9fb80349e0392680
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 6b5f1feffaef4341aa7319c0f28a1247
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 9d38afb8107a4e42a6a35add7bd3d0cc
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# fceedb156aeb49fa86b6afd8ce45679d
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 8168615512b5476bbdf95e745980fdfa
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# c913e52994d54be49b5321524a3d0ad4
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 74a9affe193a44149dfd0d2d63250af6
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# b3d4bd24b77941d1b21ee04fc4c02623
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 10278a6e3c3143dfa9c345ba1a51d721
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# b344b0efc34545a38f3440367d1b06ce
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 4efb6ea7514541aba0df1b057a5b3559
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 43c9e9eb248c42f8b76c533418f3531d
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 39f4e32dfcd94f6f9b2a9766cc46e9e1
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 267db7090dd04c47a3b3403f2162df97
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 8d47ec07801b49dc97d69dce9a792eed
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 5fb8dbce0a274c77ab88891e48d9d2ae
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 40531c65118a4bf68d5c24747227618b
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# bdc500d4b08242a2a739474441fede38
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 8954301a62394ec2a56de79191e7a1f3
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# aa1b2cedcca74f998fb401b6e3981b09
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 6c63f0b962bb44c7b388ca391f222803
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 64c7735cb09c4114b59d9ded23bda34b
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# c4e16b7b20d54ff68c0e362732f9848d
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 28be0062a08c44489710fc6ede2ae51f
# 18025471d9c14bdcbce772db414d9fdf
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 25ee748b73084d68a6d964cfa904cdb1
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# d7b3aeb8854d4f33ac0fab947e44bc03
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# d482f4497cde466491c7fdacccdcab91
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# e65967f7aafb4c2e8acbfab3d538cecb
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 1223ee90e1c24c6faface5fcb075bfe6
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# d5eb15d7071a4897b8487fa624c8fc0d
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# b84b96b6133b4fd4b2741354a2fdc0f2
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 3ad53c4a0c304c8784925bd1611af798
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 5ed4dba0b8c54606b963f3d4cf31491f
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# a28b3c62df7246a4ac8c39926be21881
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 2c8f16479982428baa609d42e08318ed
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 6d1f638d887349f38da1776592853f39
# 0f94b8be831a445581dbd722c5c9482c
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 07a636bee3ea4def8392394b97317113
# d55b4565691f4249b639db809fd9c6df
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 77b9c5f4958742298b916c5075721bc5
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 8f5e6ef1e4bc4bfb8bd4a819b8cd8410
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 6b5b83ae63f84c40b7d0afff67a23998
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 4b4a9530b0664b8daa7eac4adcb00d2a
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# f1931cc457d144189b52cbd15df44106
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# dacc94569f664ebfbc952366eaeb9445
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# df2df953b5344ddbb24ecd50bf7bd814
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# af3b80346dc8403d83c982860038dd14
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 2621bfac3a1e44c8b5cd098981a346a9
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 2d5a0fac5df542a18ed5f4f82428fda1
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 8c90561c9f3f4b89b8ad96377cc600b7
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# d50f770e9e0a4dfdb31bf7917df7a0ae
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 81aa6c65172a47a0b221fa3c18d90b1a
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 037bb27300c44c7db69c157e56598b35
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 12bb3f242f7542b59c4a08ac23fa10e3
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 92fa878d7fa249149b193876975b8c36
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# fc2d33c9cf0948738dcefcbbe2599da2
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# af8466074b29401b9cba568ac31bc0d3
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 9b9ac6ff16244646874bacbc5e0b704e
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# b073b96729ae470c8a4079e0a4baffe1
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# d797b61a47db47f8a890091b765ef33f
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 1ec69bfca9ec4252a9cbbfb6387729b2
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 252f80863f63403b80977a7141c9e0f3
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 70df1a2d73244d2d86b9b1f9854181d7
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 4d463535286b4c43ba5d96cfaacd6c9a
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 393fb7b1d1d340c9b51ba80adf0dc8e3
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 0468e1366f694b7fa391de3e033a4aba
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 322440fc35544715a5adbdc71334f9b1
# bbae701381b9487c8a05c2b889cca1e0
# 74320dee077a4e6183af827762dbd726
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 302e24683e334e4dba23d303d7385139
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# e9f908bcc3dc4776a4dbb31d7315eed1
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 53e3cd99e1c14ff3a313d1fb99195ec6
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 8b4f9a603995436482645b8e979335f8
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 80fc56112f394de5b00edb2a2f50238d
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 6d08899a9ed442c0b5ac301ba96e6e9f
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# f4080b948ff54a2c932a0d07fbe8cd09
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 3333e102cd9c4941b27a61ce186b8c2f
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 6a8faa150cef4fc59acdc148f469e9c1
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# a3c687f007854761a57c0cdbfd3ce3d1
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# b8b09261a787418685f0093db6ce05c6
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# a40a45e7a22b488091899ed05ffe4ef7
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 1b00742be0e34f81a92ccf52730c0c2f
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 2ce9124ed2124eda8f6006250c7d9394
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# ef3a90a6ad024bc7a39e43dc07f11c89
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# f9d0250dfed148828a0b5a2495a85ff5
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# d141eaa940484701b0393674c7221fe5
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 1d0a100e52e1405bbe54b1a7f4c481e8
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# eefafb3d8c36429abfd6e98ca69b8714
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 4fa46d3a33414c54a4ed4f9b435ca3b3
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 4b1deee601d44e89b9e42ea021072be6
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# ab78a38d159a4e3b86976ed7cc2d2fbb
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 9d24c33dd47a480db7aeb9171590c6ca
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 69f6cf0e44a2492da8d3c318fc75cd98
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# e3167fef6a5a41e7b59da36f933bc942
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# 4480d7355ee74fbeb6488b791566e17d
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# fa52d83b0f064c5faddc2efec341f409
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 6afb3f42f52d4ff79cfc5efeed34bc01
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# e031ece1f12f4b02b8bec2c804e3fa72
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 5b7660d9928940ada6a5777a88ad6772
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 971026e68af24fecb1762ec8e22e7bca
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# fde2a11172ae4f95acfba8884d65849d
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# b87491218dd24f3e9d23e6550ab333b2
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 3544c1fb011d42f9b342026434649b1d
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 63ff6cdf7d214c84acfc64c00c257f10
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# bfb5e7dbb3c34ad3b73fdb2ffd144553
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# e5bf16c446724281bb65af246495ab1f
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# 810ee1b549f04dafae14e9fb35355db7
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# b32b014472bc4b3faf7f2f26d9a24bc5
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 5a54c694760e4f14861d7f2b475677fd
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# c0b24560472f4f71afe0b658f2c68d1e
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# adede06946704ef1a631929e9848f078
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# f56a814319594dedb317e3b50f5872de
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# f01069ee088f4925af48c42086e395d4
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# de62b7aa915849eba41ad88565086130
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# c5103192855b4936a51bba44500643d2
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# c6903872f10049268ea764a214992b37
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 9eca90cc659f43bda35a33eb04bf133b
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 7626782f274b4c588f844202f5346594
# 8a649b6be47a4464b5a9b08b3ab4994a
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# c7ed01d9073e4684b85be2e0069b4325
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 02b9709253eb4d379b6ff11f8c5a1321
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 8e4898765ea7482eae8ea489768858a0
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 03653ea36cf042999a5d11a2ea0221d7
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 5fe93464180b4b3a93366bb6b138a1ea
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 0f132a36fba241a3863956a92fde475c
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 157c63531ba0478a99e84a54e0859f2a
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# d4a975a54816448097e3463df31bf642
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 0617ce63d1ca4c9b8b2818fb79e56f20
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 39f311f9e0054682a74401c957859bba
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 6f0f8b986957469bafecd8173c775be3
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# c77a58870ac34ac2853371e5cbdff042
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 2bcc7a365c0d439ba92caea533771523
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# bf82c355eb1e4515b3f548ccd2e9df79
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 507e7f8517d74b83bfae8da6b2d7dbbb
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 4f8e546a4a8d4018a285dd32d89b809e
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# b9ddc2007e624ba0ae9c66be869bc186
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 9eecd0c725bb45b09c321ac0d4373a12
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# f40f750fc2024260924bc81c0880b65a
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# e8d73781d0c64707a1fcbd20b649acf0
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 40f6f469391040ffa33d2a1a38c707da
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 590834ea01e4447f96382b5a6b8b1676
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# d0d7e25fbc974339928a91ae1b1562f1
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 263bf42231c14707b4026641bb036275
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# cb9c445aef36427eb4fd378eea9d23cc
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 6491030c09ef4e8fa06ce507a0b25988
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# bc88e64767e043a98651b1754d518af7
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 79d9ba4d15be4d25910d43f327647b03
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 0f4eaba85cfe4b60aa3b84e76855c46e
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 6f47b06831fa4958876fefbf373c73e6
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 832b8b64e84148db8d19bfc4487cfd57
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# faa6d41f9c884982924d1f62635d8501
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 2e729be8f75547d3bd9327c620eb8fb7
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 371a2893c3ef4eff88980a9ec5192f3d
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# bcb65dbeecdc4bc99d410019cbc4025f
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

