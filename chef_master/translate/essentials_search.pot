# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-08-23 14:07\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 6fccc09e3d8b4a9081bb16c02079678f
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# b6c72c9107fe41a3ad7b8084d6a5b83a
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 9eda200c4da546259cf96b7bacd10704
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 951fe4cfbb404a4896ebd2cbf2cbb02f
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# d841cd3b70ce48f8a53ae4a080413b50
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# b30f9be8e16344309d1d34564a1effe6
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 48d14fc662e04a5ca60616a929f1cc07
# 712cf53c42c84058aff0da38676b2db9
# 8a35aa49d193417aaf1e611af02128db
# f4593478a10a4553af1626e485d83915
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# f17300716e2d42bc86fee4fa33681805
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 932c229fdd2a49a084ecf21bef7c8095
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 184034c80bec4e778bf3200c8a13bb2a
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# f0b42461227d4e05830e41a2bd3a736a
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 797371d76ec44d88a9ee10bf26fcd36f
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# ddf47e2a90734d22ac6b15e205d43736
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 418375cf09f342208e12e47faff5fdfb
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 00c8ab227c6746f392a4b4db6312310a
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 2a77f71d08c8448f8d8590298fad1c90
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# b00021705e1747a4966311669cb8e4a7
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 41989345e35246b1b11db3831db8424d
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 6d89cb2828594535af0142fcd21af3a8
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# affab67c5dd74e4183adf4d34f1bbe34
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# f890965760c848b2b15c03a734f89bf2
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 985b3ccdb5d94c4db06a0f97b798c848
# fa63c52357a248a9b10d5090caba6adc
# f79f369c695746f6bf54374b99ad087d
# e4994eb84e7c4d02bf056d70ff9d3c9e
# d815471327624ad1ae08c12c2d40298e
# 5dcdd04a6e654c5e968a1711e1859f7a
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 6c1260853c8a46dbab5e9f0f49b47d58
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# ce9569fb6d7a49b3bb7e4ac65dde25dc
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# af79468e4e1f4862a5f9b2df33f3ae3b
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 334b364396974835845f354c26f8c49b
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 81acb38610eb4fe085cce6e87e38d93f
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 1d2a3f87298148b08f83521102ec9a2b
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# ba93e4af98c04a6e8352273d47223956
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# cff8940688f0425eb8f0def5fa8f7318
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# a0e21f9e72b5415ab3cf468ec27b592c
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 53babdb209d542979c5565bdd1803040
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 3da574841f6144c59dd4add5eb4e93dd
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 9e8e090b42484057ba68337d89377b18
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 8bf4b21dee0548ea9ee7eb5d226ff04a
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# e8a46491bfdd496e870b4134135020bd
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 0833dfbbb9d7469992747a8e00874f28
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# a3dfbab90f5142c1b7b0adaa0e4d596d
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 2cf9e85de4824adb8ba311f67c0f2687
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 68756bd0f0fd46be9a9ff035d091b54d
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 2ac6969460c14d2d9eb7a26c779f345d
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 641f9cf66c6549b99c9baafd605a36eb
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 5bac733729c94c7daf70f3d53a2757ac
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 2602102df71140f3b0f1fd26efbfcd61
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# e038ec03cc434c6eb4c79c8ef4256cfc
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# ca97e948a7c64a7daf3f8739566c2192
# 2d20fb4002ee4b54beac64780c6f2ee9
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# e65e8e1b8c704313a832d80eadad3272
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 2d9d5620b6fc419c85d7a777cd21c067
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# e235916f79b34b8ca3ba579661679405
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# e87c879ea4a845fda24c42e6b149890d
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# da0dd9214cd443d6aa678f6499fe762d
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 2fa4cb61da154c9faa80f463a3d3b169
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 0f7c2e1559f146d8b7eefd64e50cda2e
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 2c16ea0de56049e7afdf45aa0e97ad64
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 5f31a5370e444293ba19a332e53e0d47
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# c4fffb157e0d4722ab21566191d08495
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 3443860696ab470c8bf229d3c5ad85cf
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 2b0b75a9e19e48f1a8891e6312c5bb32
# a8bdaf32527646b683ecc53047ca84bd
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# ec65884facb84d22a2d35cda61fb5fe9
# ec26cf983efc46ce889eb7ce01546bb3
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 6cc70912290c4b68b49ee492f085b074
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 12a50d6d22a9459182b0595ccb3436a7
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 01989cf863f14431ba3396bda9a0f55a
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# c2766fda8de04693a02b8e9db16a377a
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 9914fa85c2aa4bde9201f26e74b6dd12
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# e0b64825e6bf414aa4a92be73cdbf724
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# ea76ce0b46ef49a2bf6d9adc5544b239
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# eee97aff4b8b4679a29bca29974ca2c2
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 6b1c7924d01b453580bb072ea7cb06ac
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# c2742cb0766e4843982558da5edf9bbb
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 593d0d883b164a5d817057a4409fb97a
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 40cc5bc3d2264f648f9715d9005e694b
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 019a49f77f8b4254bca3ae8da4ddf87b
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 076b7fa0b6614a75a7813e0f2204088c
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 5fa5b866ba1740c283fe244d745c006a
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 45489c93f31d41e985a3a28511c23ddc
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 04f35460ed1d4499b8bb694c8508a839
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# f04262462f8e4e9f93f896cc6b15d9b0
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 218eecc1afc74cbab5fc1695c234785f
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# c483c1ba20674f45827ea041ef6545d8
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 64a1172561b24a4a959a93e328c3d311
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# d0bfa7e4bfc4468c8caa76949ca39954
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 34601370946a4e9f8ad9118faccf0e83
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# f8b4da3fd184483996c28ac268548b68
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 41244e6f83f14c669a5c4ac1f73b14a7
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# f525054180c54d5a97c86db38f3bbb19
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# e9624de4ef144824bf036c181f4bc2b9
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 74d3782999164ae28612997664d58624
# b3d7e9b241ff49cf8cfa1d3d4ab292c0
# fd9f33e6853a4485a490301ab6d960f7
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# e4d32b31cf1249528bbbd6991a9df690
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# c2bd6c67ba3949829941809479595833
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 609ddc5123bd49beb7e0ea9f7dbbcdf0
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# e0e80c29bb34425e948301d83d491f1c
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# e1600582ebec46cf83a06ae893f17c7d
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 5be2367e6da94e5c9ab99c21c7a7d5ac
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 210bdc7b44084245b0a5e30c413f2c75
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# fa2069d047a94f1fada68e29400fcecd
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 36ef0321c46849748cf3539ecd6b038d
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 2ee7b972e89740168485c3ac14564154
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# e724aa0cdd1b49f090614572f052c55c
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# d908868e10fe420085642590e483eb42
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 328f76e09312485dadcbaa8cb17ba310
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 1d1de59676e54b9f9ff9575edd5d3b49
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 502033d3b3fb443691de8db3bbb59eda
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 558b4ebd96f9492d8ddd8e1ca99077bd
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 9c0f0b7273654573945ea0f44f1992ce
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# fedd0d051fc54672b6397ff008154e5a
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# f4600f6d3e5144ac843f8e50c00ccaf6
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 553f2b91dcbc40748dfc1812d8b0696f
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# e6d8a86d62334763b0f77dc1330c5628
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# d20e3d2bfd5b4fdba35fecf4aeda22f4
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 73dcf574dde146acbd3b6ea4ce9b5a16
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 1d0bfed2548747bba9f6f2e89010eeab
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 916d7ae861024c56b05c4f7b41808c2a
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# eaf9f2ad6c9d4e2e917318d3ea7d2ec2
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 907741a22b444589991250e04de23fa7
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# ac1f6b2d91bd41e98ef6e27a3b457490
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 00fbfa4c64a240668e4cda50c3aeda39
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 7c89ee7f3e1342928e3ef7d7c06e83d8
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# dbabf4efd29b49c8b50e6b56b195ab1f
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# c94cd57342914eab8f167f38c64cbe51
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 619e3f48ac40470fb04391e4cdb5c212
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 44da14967d244cb8b2a36739ef8e463a
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 3c9fbe95868041319ea8fdd19811d7d8
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# c475c237d58f472d814dcf9584df2a3f
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 7dfe165d7b1040e28524d53dc420d294
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# ca61a941dde04eea96af74cc996514f7
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 1586c732773d42779e352cf4b83ee510
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# edb54fb54f364da5b81bbaf0a2e3477e
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 6a7533ae77ef48cd9c29e0152db12ee0
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# c531a3185ae14dd8b2db2b2f36584b6d
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# a00e967e5e9c4550a2be2b6f27b15eab
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# efd8883f81bd4c4cabf3360daa0d0d29
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 45e0e4a1b9084050a09981aff06168f6
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# e90fde483c4441a5ba9c6eaaf5708250
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# c7e6cafe982247d9a1ecf9c812793d5f
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 9848abb090b2405699428b8ce99ffea7
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 1b3c1860f79c44699837b56fe795eab1
# 1373baca32444c1793e833a314c59bac
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 75dd2d05ad664ee5a9c5fb2369751fbe
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# e07034a6e9d24d59bb41ab3940312d78
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 758e08f7055f4e6e8948a151bc059464
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# b398f555a81e4e738461cc205be9d16e
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# a5b930deaa354d6f9d12c54c28cce08d
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 2c00b4aa1e3945e8b6e52ac40192926a
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# ece44d8337524680a91062424dec618e
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 6de125032a3444a88cb68d48ab5263f8
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 705856e9ca7042d9b4a9e72de0d106f4
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 9b54872eea3749739f90336b0c7d6488
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# c4c551125d2c485f8b0404bc8515ba9f
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 1f8e330437ec4b0192aaf97561c728f8
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 9b28ea9b6cca4d1b8b60f31ce1010d8d
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# ee3d45cb784b4b30a1cbf8592942dce7
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 6ca57aace3d04b3c913c3732df2b7c65
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 7b730a36f4d148ce9b914ca5fbab7c18
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# f828ad67d5f044eba1a662deda9b1d00
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 1bc883095c994de098acc9d3ae08d64d
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 78558191697c4b298ab2c5c5855e221b
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 77f42c2ec956411a9b52068f73173091
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 35c906675b9d4e6bbbea44877435bcd7
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# e7c84a6d2fa34cd2aadca20ed9a4e05d
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 59c2d6e149b644d897f5ce8b284ade76
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 5487fddd5c1341b5940aa092ec823a01
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 8c356b1d0c334b23a6723fce755ff12e
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# b7b1e8f8bb4e4045bd2ae49946a8056b
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 7bee2f75adb14619929dd2f35a3a3d57
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# f5fef0e41ea243f6ae3f98bc93c016eb
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# cb27ddfb6d9b49e89674b0eebe9710d7
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 39fdbb406582441a866af48becf01284
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 93f826643fb047a1887ddb2cd2342b8f
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 8576a124e50b4c4fb061c951cac5d0df
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# f9ed6adfcfac4186be7d24f5a3af2824
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 8e7954d9f7dc4ddcb3371cdbd6763444
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 2adbd0a8fc34480daeb0305360059baa
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

