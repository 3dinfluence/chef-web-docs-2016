# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-16 13:47\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 8052dda512ae4919a325b5bdd743a37d
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# ec5fd6b5af8e4d7bbe894b25bc5ef76b
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 2a5bc86b737d4d7db0e0a9445bd06eb8
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# c68b6a6837f24a789fb465b2dd735b5c
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 91f36f8c163f44af9b68ef9c6daec65d
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 7fd30fbd0bc04a39a50a4dfa156256f0
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 38e5c7cb0dcc4d7e85764a2dd7f79cc7
# 1c7fbb43a0e74202952a3ad26c0941d2
# de32523694dd444ab306e9641187fba7
# fa38295f944d40f99781d9df6665f473
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# a7ba9d5ed2c649c08c70f3e76aacf8ac
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# f15abe2bc42b423b8d61ac4183fd3236
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 47fd58ec42f34b29aa39fe44fe217148
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 3b0d9c0a82044321a8e6d6e5fd7f61d5
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 6f4b34292db740a4903cea8c1999858d
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# a28cc12c9f604dfbba2f05f7310c8e13
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# bc5dcaf4fa8641d49425cafc1487d14d
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# cc93fa50dfed443aa8aaca8d1801e8c8
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 944760da5822423fb8ef5e999c5fd353
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# b312eb91725b43ab8ea0333b862ac905
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 6210bdfe3b8d49d1b6abb8cc113e5ecf
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# ec4b1db4bd5c4c9684f0490f74e8ad14
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:22
# 42932ca2b74b4d41980dbc11aa71c877
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# ec77b1550ffc49568dfbf36b77afde88
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 970f9e2f7174405fb950ec75f9d0be55
# 5d8b41c183ca4fe8a2c1a33f4fa401c5
# 1b2a0ea0efde4afb89553a6e244c39bc
# beb37dca1e974e4289b647f33212e2b7
# 5ed396baf4234ce097fb5b667d7b3981
# 8983f08ace1e4aa79caa894a3ded57d3
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 371299c4089a4b0c88c2272b7555295e
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# e327c7574b0b43a488be397e08046503
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 2fe4ba99d9cf40b3a1b9dc55b79a8a35
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# e75b86d5fdb64709a367248a640764a6
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 86e31288e04e4bf38b6e12ded8421aa1
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# d20fed25e45e4cd3b2d46937643959ca
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 52a672a1d94d47b0b11afde812f0e6a1
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 211a8dd5fa0b4030836e96c86fa9b931
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# fdef2b28bf87415e9c7f777ca185ff09
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# ab4c9009523240a3b2a550f9ea14dd5a
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# 12bf6a76328241a1bd09775f4e393cc4
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# c434739c2b8f45ada12724538b7256a2
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# 24ed670a3fc6455b8169b84146035ef4
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 52df49865b7047a7a40823a01408a8b0
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 301b12f7a9464b1080d1aa873d390245
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# 992af269321049b4b0e34285c9a16569
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 16169342bc9e4f879e9ae55722582602
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 5f59cce2c17648f3bf8be83a334bbafe
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 6c99d0564c7843a4988fd21e98532488
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 9d4fbc00ae2d4ceb80f1b61197e4e0c2
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 019fa723dbb94eafacd4c27f02e00fc5
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 079ac335071b4f43964bdaaec0c134f5
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 76635ba83fa641799b520cd7f0b59d75
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# 8ddbbb18cdca4c61bdf2d0d8a0f2369e
# 8a8b1d0221784b4db605f70be62f36a4
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 8f546587a29b4b11a7c8fd6dbeb9152a
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 75f648d7a2c143599a0197ae49d7ba76
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# a4683197cbd34b9799dd0cef8e76d03c
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 1a408756deb041009b907902548dc2ae
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# f2adf38e5d294528bb63e61acfc86b2b
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 685bdefb061e4eb6a3d510548487b35e
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# cd4fb8df69b648e5a1cf169ea85f28fc
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 06e375ae6f2e44ca82c6e409ddd58502
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# b5d46c1ad6be4059815c3794a6db7337
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 074c73accb8e4c37bdf6b30e5545528e
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# bf7c0f36457643599b7af013a4edde0c
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# f8037d4669f54f27affdbbbbe8ce05ce
# cc3190a604914391abfe7540b55baf71
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# c5f215e2fc1e4c06800d04011fd10bff
# b3719dd2740a48aeaa8b7eb4cf27eb34
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# a6f99aa9a0b5484686402bf6af41728c
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 67b9895a561e4cc9b4322f8f3bfbc690
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 06f4f73c3dc54506bd84ab4c2b8443d0
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# f7edfd7fae9a44349e3238541b860df5
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 8375e0556b95458b8bc6bc20b4296685
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 73678e6d7b304acea2b240651fffa7e6
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# ca19ad71cb7e4144b8aa609a00fd83c6
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 07dedb3d5a9a4a7a9a9078e7fc206297
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 2363947ce7bf4001a218d53f0125243f
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# fa534167ec3c42329f1a310d2f15e09e
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 52cf1671e4bc4dbb992b4329b4014aba
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 7df9d52cab0e4f52975744fddc460dfd
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# f794e56371ea4609b9ffabc315f6e8eb
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# fffcf312adbf4b98a063ded9ea5a88c3
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# c06cc1deb84c4a23ae93c49627b83002
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# f1e7da28df854cb4911b986100994fb4
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# f0cb436620e541c8ad9e1b7c441bab2a
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# c01e8724886749b79eaf0172250d1147
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 4f19f21170254475ae9a010792b8c245
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 55a0b17b3da24b1a97272cf87c0c1359
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# 3919398e090f4829a19ca0bd8663481e
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# f842d5335c6d45f3b880fe61e95cfaeb
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 36ca805849a348ccb6f00b349c83fe3c
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 36991057fd8a4109a9d984ffe2b5b579
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 0c9d0ffca6984c0c81aed6e1ae8284c2
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 88f5847a77284f9684091819b3f347bb
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# b1e1b327475f47e384181e2561bef822
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# a820412724ff47deb3ada68b83fcada2
# 6f144423759441d18e8cfe19089aa9c6
# bb625e59df484f7484464ca14dabf012
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# eddae026e8d44cc18391e0d151b221f0
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 5a0d93976c844891a7a8a51fd0228937
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# dc0185d268034366a593a6cb617f387f
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# e9e54ffb43394633bd7c6739edabf5ff
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 0ae85154ffb841f8ba795101b6313ad2
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# efbcbf4b61e64faabcb8c235c2a048b2
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# ac82d482cb6c426d837192a80aff289d
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# f6f48e9dcd804fe0b93c7d59f3d61c01
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 2159e42c80a64c5fb625f2f8e962f3d4
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# a1e59820cc984cc4b13e978d0ff86016
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 49149ab7cb8145118b69114ee788f6cd
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 759a0296cb1e436db86291fba9988974
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 66323f8ce2174107844b026da53d0637
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 8efc05ebfd3d4e198df5547e56a52dc2
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 9c38ab629c77453f9a33f21ea0e073e6
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 3ed7c7702aa94fb982427c5bd247076a
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# c7877c1d3a624baf8f51caec805b6fb7
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# ccd90f15e6434b0fa7867725ab770c47
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 1d91927331af4ee98838fa1b145ea674
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# b73adf43609547e3964989badafbd30e
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 6b52df128c3143ccbd19e040d2c75c26
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 8431db8774f54d93a15ed73c81ab45a3
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 23409614a7a444458d5f7e9ee255a456
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 9cf71bcf0b8e4a188a99cb2996588314
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 535b63965cce4caaaa7833e6e9de0d4a
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# 1fcc48705f2640f4a7cc5ec84486fb5b
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 60bc010165934f688ecaa9a4a23d904e
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# f4035dbab5274d26bf424fdc095584b4
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 72e49eb3da734b008ba742714d566065
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 472f4e37fc2e41ea90ec3943fd31f9be
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# ece5b038c92d446ab7223d0103fce3d2
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# f5a4089ab29d40a989bcf7bf88204314
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# e8f2beef0be944f8aea106c0e8cc8581
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 4a7a374c14654560857e6452f34a84e6
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# f4be2ab9498442cfb03d423d12626c3b
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# b7039c29a1ce4d6fbefd306663353c09
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 05524afda7b149eba1c01aa3321a1089
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# 060a6a9c542c457b88d36b05fb739ade
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 39fdafccb94f4f00b42f1e4b0eeffe21
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# ed2f1b86a99e4784a8a43b22fb2f466a
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 322afc19c63c4257a079665199f52869
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 8f8d1013928f459ca94f10ad6243711e
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# d46d299f16ef48cda632c6790b60229a
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 8731f9d154c94d09b2da1d74f5a0eb5c
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 05139b32f4a444b89d2d04ed4db35efe
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 742c00d73aca4bf8b2ea82d69ed804ce
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 440b7636592342a8a9def76429ad92bc
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 716a27addc414549872587a1f193a2fe
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# ffa6b7463b6c4164872960f7ab001de2
# b0a9107f2f424042be413cf6a532867a
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 83b0a61fc9cd41a39d1cda9695154aa7
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# 3dbf0208d1774b20b34278e941c04ad9
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 31d5aa5b9b234575af809f6e8287b661
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# d8f7e70cca6d4c70a89a498026d6c080
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 897c0b676dca497684c94e9f7d4875d8
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# b54e6caca7d848eeb3dfc116f785f5b5
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 7dd701263ca84807b9996c01378e5734
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# f2cec69a9fe04e55bfad349e58e5adfb
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 4007328af356447ca969e6e4207fc99d
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 8161bf244aad4ad484a6523e2fdf69e4
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# faa35e2eaf254661ac67325201be2ac1
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# c6e90015b5164f40a595384ceb89e3e9
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# b35f9b3ecede48adbe4831b74e2969aa
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# d37b5cf673c54730b3752226f4d1e38b
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# 1faa4c568e2a4817b4e049032339c9cf
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# cb454c2461eb4ce993dff425a342b29f
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 171569617e5a4e3b9a523b7cf05575ad
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 0d659c78b288410d83ab20f64f04d8e6
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# ec3a1ee6ed78400d874dd5b79885043a
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# b9e5fa1b4bcc48e88b20ce7aa17530c1
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# 08bdd3a54e4344aea8db2c4a6dc40d42
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# aa57599d9f684f8e8e7ab66366c25d0b
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 1ecde17906f54b73bf7ff8728576bb56
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 81c138d1e99a4c929f529bc26728cd73
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# 3b98700852c74a0bb27a618673e60ae8
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 86281b937e20482a836c4dc432bb0f45
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 3d8d3d080cce4065bf03a4bea9162345
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# f4fa3f51e1424c818602f5c26ca10c00
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# cec124cf6bea472d8b87863d99640dbb
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# a99459d689fc4717903fb03e344e95e4
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 4cb03938c7b74bde8db0bfa68815ab42
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 207c4d3104554cb0b70919380e935cbe
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 95e65b85530a4373be1f25c453b35f30
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 8e0d10374aed426c85c72d2e211789ea
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# d6abde7242f443ffaf6e292fd9fda05c
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

