# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-17 09:47-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# ada9f8a9172145b1b67e824d3fdd9d50
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# cf52b8e1788548c6891f91527cbf3ef4
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 888c84bdd96542259e20ae0d233eb6dd
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 13aa3e90653c4e14aad1784e1912d479
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 248db4b00e804902a2622898b87a8652
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 1ecba6ba66e54134999d68d52b7a2d76
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:11
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:22
# 9c9f3322414d4621b5c35ca16284d9ea
# 0c4f9d2107f342bca41807ff1ce33e5e
# 79cb6fcd0c5049fc990d5420394ce000
# b862a1c893b1441d9eafa37c7295a05e
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 161cf8a583a4432e918950621797fa8c
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 3a8b1b31f6144240838a6453ef53b8c0
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 8c77c9a33ccb46d69b1bb2d5d21619f2
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 9c57772111cb4d53ae203425ab2229bd
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# f33a45c0754a437d8fb1e2a7cf0d9552
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 6f2b8c3f84914773a82d4f26ea2e153c
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 393fcdac676c486998d8a6d4e30497a0
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 254a9e7af9884dff8782ff3d681d7233
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 4adddb8687d3403d990dac73585bbc10
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 2cf9ad38bbb54618858966c49a9ac779
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 1d4b4b273a4a477ab41017f34760145c
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 2ba37982750a4e72a371d1a02f341ab0
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# da8c2b5091ce4fd2b67ae2e14dd5edcd
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 4b063fe8d60940de9d8b0fe80287c58f
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 935cabd8a5814120b7b6686e8ddecd54
# 1cfaf5f575944f209f5060248fc0ff27
# e682ffe7cd354919aba042bff1108d6b
# 67174a044af74d6caecb9b40e39c98fc
# af43882027a44a77a6fd4962b19e3ee8
# b26ba7ed719441f9b6bc7e1632ec5cc6
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 292f30bc7ccc49008c05434d354fd682
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 044c5101e1324d938de118eaf5296801
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# cfa3d0e37b5a45fbba0e7a31aeca1a11
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# f5e16d83a3474cd2829bae49b95d6c9f
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 84bb5b95b9ba4991a20cb563be0a16fd
# 6d9446a736114262b20e99b7fafe35e2
# 9f4bbb53baea42fa96320eefffa9ab02
# d7a518eefb1646f380c2b00ac415124b
# b6316c1e1186413dbdd77e424b3f9b27
# 626ebe1fef024884ad35eb8fada5f5af
msgid "or:"
msgstr ""

#: ../source/essentials_search.rst:34
# 05857120535049c6a00b3668f4fe06aa
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 7b1f4424da4845d5a445ec567d5e6aa7
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 08413ef7a5a840cfa877b556fd1a4b3f
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# 93e1209baa2140b08ada94af75de7926
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:42
# 1cff36e42fac44cba865d0d9866b2022
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 12bf106138fd4416acbe97f3aaac497e
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:46
# 58299a580c4846d6bd8f29034e712780
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 07d7947088ed484bbc9e9769fce55f56
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:50
# b353f714a47d4814a550d9ec3312b4b4
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# ed05336e7c4144c79e66cc605a6ed1a5
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:54
# dfd6ed3e287443aaab13252b1a2d9f36
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 69c81d67bd86403c80e3b20110495ad9
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 94e469c24c1c4fb98b7b67bbdee4b23a
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:59
# 84e92842bb8c43e6b83bf87a3f4b08f4
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# db1f971f20c94c80a7b429041b97b756
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 67be5f5169a54f1a8fd1503a73009d3d
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:62
# 381e71393dc74031be65c1f30a845f03
msgid "Search queries may not contain newlines."
msgstr ""

#: ../source/essentials_search.rst:65
# fd640b0eeab54f32a375bcbf63a846ef
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 2ab5611e5b4546c98c9dd595a9843635
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 02fc550297b6454497c15ee4c183eafe
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 1f0c79ee127845bfa22a139ac11a2e77
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# bcea5e84406d487bb512442092f5323c
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:69
#: ../source/essentials_search.rst:81
# 2c18476def244be198f6971f44a7528f
# 17bee6e0337b4265b93341f2ae343024
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 3e2c15f9663f4b9aba50d8fce7b0ba85
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# f569b39aff284ee3aae2c5c59da8923c
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# a87d85bf8c8b4dc1a0bd878ec595e283
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# d3aac5898e384fa1be0a94ced0236273
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:73
# 90dc3ca3312140b2ae9e76936f6d5288
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 564fc1131c334fe992ba04e3a05bdd01
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:77
# c1b8fe25808e4fea99f2bac6344275e7
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 394bd7779363400da6ea2dc5cccf709e
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 110d8510330c44abb22aa5acd5f13115
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# c9a76c06ddd640918e69bf735089ab75
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 6ae6b4a0cafb4c75aa8bff3e74d6827e
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 830d04bad045406cbf5c744226d0edc1
# 95330453eccf4fcdb0588e916bdeecba
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 6c22b46736c24a4e9ef9785959697beb
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 6f56315dfd4642a7bba4d9ece3aa40b2
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 0c2407e39a364ac686668ae145b51f0b
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# c5a3d3077d254d83a4e48633ed29b656
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 84ea312f98364d57986f1b9cd7dc04b5
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 671cfed1fff34e5baa1b66b3a68f7e9a
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# adae20a676644afd898f668f3eb32fa8
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# b23ee324113446fd969f09cdd3248760
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# bf62b715d45140868107ce53637a5e5a
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 9b351009fd7c477798398a0e1e2b6fe6
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# b844ed2e726e4bacbdc4773cfad65158
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 5dec12c18dd041299c24b3394ad71452
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:93
# 8c195d118c884e1396411190e251eac3
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 5941aece59444f9594a462660da93158
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:97
# f91e2f00bfa14f8985bb199b1e10ef6b
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 9773a30d821b4a9689774431aecc8836
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 2c234281c2d4421ea48431537353253c
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 5a094949de764cd28e8fd4e137f37f07
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 14f36fc3a4044b488f81f6a0de3e6a85
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# eb612269acc1445bb6affe917833d2bd
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:105
# 3759ca6d1cb347ab982ad2cda8489702
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# b563df47f0194932af589638c78d9b83
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# b46890dfa7d24c74b23a96cc902af103
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 2b6883ffa2cc4523ac639c764657230e
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# c0e56f262b5c42d2a8c4587cb5a4cd4a
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 2227a98b737941eca7b763ddd82eac8f
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 27c2d8e1648b47e0985a37103cc242a5
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 63288a548673470396aa2bd9f6b25a38
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:113
# d485e8d6f38c4e5cbe58252ea4a849c2
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 157ed55569834c1db68e484a96259c9f
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# a0a521a8536d494e89c932f4e80307bc
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 29d9888f306b4b2cbfaf7a2f2f13c057
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 3162381b8aec4b7c8cdcfd2aac5ea359
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 815ad492d24e458487a8804d818648e7
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 1a0f1d3bc7104df498c1da3beab64b97
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 523aa8dcc5c6479fa9b4bc62b212e92d
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# d8ce4df25287499aac57641c05fe820a
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:121
# 9f6fac90fd0d4792a8440b6a138f6df6
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 70023d17945d4ae2b271064178da07da
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# f2a76b45c7f14077b027f56984eb4b2f
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 60f175902f424ed49fbd7e3872db094b
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 26f8f6bf900d4024a6adfaa5dadada25
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:127
# 7dd7d6880f9243cd89fecd270afd1f1f
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# 877f66d6180b40819ede85cff7dd37db
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# 7f722281a72d42d191fc837231151037
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 9577ff84428342e28164df2be0522e8a
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# f880c56f434d444bbede1fe65bdb430a
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 1b3757bf358b472684ca39442f0507fb
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 779d7b1911404e768abadadf385f3750
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 523ea5cfaf7d4f65bd0e5f7688b7855a
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# ac75285b3d524d5bb24a3dc38e50c87c
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# 50881c031c1b41d1a609c3886c45de1a
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# fa073ebbd43d4dfd8a65ef1eb2753d29
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# 689ce636e6eb4a28855f682202f51955
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/essentials_search.rst:133
# 9718f86a2c3740bda040385483282203
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# b648a0bca4fe44a8a6a19e8cd3f00f7f
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 2ff5801beee8497097d90c02bc533b6d
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/essentials_search.rst:141
# 5c4369694b0f458b91dbcd2ac22d6e7b
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 099f480f19ae475a8b782f6b9518ff74
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:145
# a5e982c5a5a149cf9316e323f4022842
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# f401860e77394126aea1a0edbe558a4f
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:149
# 6280255dc1e349e498ee5ee1dfa1bad6
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# a64e86b9a09f4127af146c912eb1adba
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# eb0ba896ab604ddb86ecd75f9a13e22b
msgid "For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# 61d088d27c36448286dba9f38c2537ff
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# ce65a483cb67487b9458b71bb6a0853c
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/essentials_search.rst:157
# a5fb8e334ce948c08665d2d7af62c35e
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# caaee67940c14f4798a18cb049cb2120
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 02a3cb7b22ab40c28dd4cd0825f1aacf
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 33ea07394fbb42faa61d04b554beee13
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 5ee34e38f8b54a4c81348ce6db0803be
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# d7b945bfebd54b599112532960a23f5d
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 0c20eab09b1c445e8410b5b62dfd704b
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 187e166bdcdf4d0483dc945ceb7f2d17
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 4bd9ae6e54a44766a075f6d85ef4588e
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 12b437fff7514d5b98d468b1ed8f0c0b
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 39f6dffe0899492f813dc9c8392ae904
msgid "To search a top-level run list for a role named ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# b342d72740b74f49a951c0eaf9f623a9
# 7c9347b5b5ce4c76a985ee81756f48d2
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 3249b7fcda354a7b85d133ce62baf63c
msgid "To search an expanded run list for all nodes with the role ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:165
# 6872bd8798304f76a832b489a4235ce7
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# db8b2bfbddc74c55aaebcb13cb1de2e5
msgid "A node can be searched from a recipe by using the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 33ef803327ab4e13ad8a35c249e5866b
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# adae445e206a4588b213bbeaf2d24b28
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:15
# 4f3bef5ac9e84f1e90c53a7a1f505b02
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# c8bfbefb299a48e7a60c3c15cf8793b5
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# 0df9c9a5526942949580631b75a9ef30
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:24
# be29254bb4cd4e61afdc903a73b9fe09
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:28
# e20cb65e89134e32af7016b99819c30a
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:32
# a78116ac5bc9465bbca1e1cf84f5032d
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:33
# e824486d59334d4d9e0e57e187462630
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# b04530c93ffe44ae88b138c145b1fb38
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:39
# 530b56ae576f4295b4bdf75bfcf8c254
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:"
msgstr ""

#: ../source/essentials_search.rst:169
# 9bfeca97307642bd97bc27753c78347f
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 4b8e4bf380c649c99f441afb2bc456f8
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# bca064da14284e70b4c5ae8e022faeb7
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 8f315de8d926415eaf15c5701b6fce8b
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 32dacba4e5764e7da8c6b585db0d3cbd
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 9ecd1d34a48047ebb6f974a126af484f
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:175
# 6208596320664f8683b7bf5ff01f3edb
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# d191945f47494007b1353d72dd1dc301
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 410f0f5a26944b918722886c9057061d
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 7a3c618a6bdf46f1ac5625f84b25e8ed
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:181
# 75e01ab62b174dfe896f02de4ec3f78f
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 5a27566bbc0e454a96105ecd2a128de7
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 97844a3a91834230a22fd1e613d28f03
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 15740ebfa11644dabed7ab7f3bea29bf
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 3c68bff105fc432dabd0985ce0fc8e99
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# f241cb1ac2ce4faaa2b657802fb27c9a
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# a4200bebe0ad45f6977d1268b89a136d
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# a6d02933e44f4e87be96215680386449
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# e492540cd8774ecebae25db835ac62d8
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# e6e86eeabe8940409c0c7a0dff86eb01
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# f65fc7b2e2f247c48e6e64229aecba5e
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

