# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-03 23:17\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 87f6388548a3446c9860a608d165809f
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 7e00bf604f1d43fa8f1327c9dfa5bb1d
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# bc60f92d81cf487b9fdb241152effccf
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# bc2cd2d6299147c9b111368ae4869fbc
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 8e24ce24dc7e456b97430c46527d555d
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 9bb9274eb3fe42f9a12b6f50e1e93fc8
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# c5a64abee0064942a706f9f5bc078dad
# d7e24d4306ef4eb3b32c6eb93384e146
# edc4b38d10844fff96d85a836acfb96c
# dfe3db8ce43b4469ab3d555930fe46b0
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 43093ae97d25493c931bfb5f6e175a70
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 94a1123699624047bb567e754300ec49
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 1e5503a8ce004772b6191b3126475b7c
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# a24345b7a57243dfa53a5eb3373f98f2
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 61ac2cf980194875b1bfa03d6f974ea4
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 0377026336ef486580f255440fb6ba6d
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 6f8443fdbdb74a20a847da611f99c524
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# f62400a2f34844f5bec1be96cf60b7f5
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 73101087432e4a0f9b52d9d6f5d8b481
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 5bf5252b069649d2bdd6fd33c86b7aea
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# ed72a5f90b344316acad9e6fd9fadab1
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 7be58f5aa6854e3bb9f20ddca9f74da4
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:22
# 0d3901b23d2c42beaaf24ea1260bf73a
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# ec31739080154e16b89200b080c58250
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 787ee7f2715647c09c8234a7242d70bb
# c346341217264521adadc8617fc9d21a
# 5a74e8edd1584cacb8bffb380cb77622
# 132f6301753640398da96de7f40e27e2
# bb1bae8280854a8589a0cf2939db9482
# c31d43cb146f4af38b2b8bbf39c52103
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 8b819b43f95041b382d01090d004d810
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# fad073b168bc4d5cb5701fc27720cc78
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 52277bbd70504c8687d0ef45d908c2d8
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 470b63ebfbca4c44b77c2fd857584759
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 1e829e36b78145a980b6ed2d5e159c74
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 426d089ac9f343739a2e6bd5519ffa94
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# bf75d18564f94d07ac794b8d5aba6fdf
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 79189e8034bb41a4b2b256909a244ad5
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# 22ce48b365b34348ac88b07df789466e
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 26eebcdff4934d7c87a14268be988ed2
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# f816d2efee03415a8e50000fd05843f0
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# e0f5b5bf7cab492294adef8171d4eab9
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# 875127873cd6420cb188ca20909cd1aa
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 47a5cb90ed5346db879c142e73dccba1
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 4e06399c9ef44f69809fa1f69f4c026e
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# 7ca2fad5ec31428b9947a3f0fab1f029
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# d61733fc3e0d4aaa98c4a6ef3f5ffed5
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 16e7f9651bcd444889a2fe37c7383e34
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 3dc95b94f18e4e4fa0e85d97e03ce85c
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# a4db05431a6644baa0857f259c15f06d
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 5ec47a1198734213abfc30a575efc17a
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 16c62e31a99646ad9b1d8803e3140513
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 546b17699bf64023bf4d0704b31f87d7
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# 0b42fc1cb9cd41eca440d8a80eca23be
# cf764fa55cef4e48967c5ac7818b262b
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 25767d1c5eff47be99180dbf08debd53
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 6ffc5e3ff7ef4fe6af85a6fcdfa78d0a
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# fe3ba608437a48a885e30afb1441027f
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# b4fb7c4e5ca34563af5caf91c508f690
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# df254dbb5f2f4365af84c58bd8253dd2
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 10036281100940f9964665b3cd1b6ac9
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# ebce8606b9844f098c5b13110e2d83e3
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 73df1b3100a049dab3d12bad1fc512ba
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 4524c116a7d649348c7eb759c784de12
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 3e8b0a4c184e48c3a0ccee942b7952a0
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 3948825afd3648af97ad0a36ee7f3895
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# d15cb2114689414281e51ddcfde338a9
# 1897678b56904be997083bd3dc583bfd
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 31473deabe5746f1b61d60b4b9e2c1bb
# f391e475293749a6ad74702ee91ec0a1
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# f2e06e6b74c94fe9a78a157e3c564594
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 42e6567f73b245e7846f554671a314aa
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# ebe618fa39f24d5d88d52713670de6bf
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 8ef12e5f25bd41799f5b243e486ff1bb
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 8535c10d5d2148d6964d15a21940c671
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# e755f94398b847a383d6f2935d279954
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 51e0e99c52da4a7daf37df39184c1f0a
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 337d8bbb5c5b43a985fdba5f25631eba
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 25d1496485fc4b01ab7a84dd5a30dcac
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 61a50c3ce4b7494d91927fcf4111d0c4
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 058ac4e58b104df985fdee5ada60b57d
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 2f7d0f64842a4a1c9320fa40fecb1640
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# f0b9b7f96c604f67aa7b927f3e7308f3
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# ab88d724cd904ff79e4ab9fcdd6c0fdc
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# 74d94db80b6c4b64afb8494d91a3cf10
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 1781a28c0e4b42709e7a34317bef6f5b
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 2789fe99543e4890b07abbe0dac26321
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 817433df141d405baf7ebfc3dd3c8c95
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 5ec673e6c66b4cc6876c0f40017799c4
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 77c9961737ca4b5287c21e08fa524e34
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# 94ddad0c88624aaeb5a93a91d051366a
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 7d01b739cb78477692f94825dfef43af
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# d55cec23c75443ba8c8e0adb27b0fe04
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 4dd7f05185ba492997897b19aa192873
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 3a67d2c0b7db499a8b0a965867de0912
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 3d6e77dabfbb488db4e3480060a65a41
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 51e03cc807b2454db412ea7d4381274d
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 05172429f3524abcb006df7e9cfc265d
# 8b0a8e23d1d64e5580188cbb4dec0ee5
# e8fa40b3ea5a4c6abdc307edccd61927
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# cd6fef62a3274719bb0581a0fecdf351
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# a7d3ca5b35f145be8889690ff631b798
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 133dbb3ae7ce4cf9b9be7840ee981729
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# c84a7bff4f83414e91bb1e37c7c66e61
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 677fd87dd07845929d4d09e69af115b3
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 6d6d6bc037c847beaf54df83e70f5aaf
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# cd42a12b2ede49b3ba6110c913bee8de
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 9be94373551645e79b34300ed64855db
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# ca566d60328746baa4e36e148cac2095
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 5ae372fb97694659ada8d7845968a1c3
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 5b63b1db86044ee78417460b4beb503a
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 534a22b778a3421c8ee1305d488fdd5a
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 184e5f95b5e84382b7cb697b6ee17168
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# d913062008c34c6299b5214cb998a9c5
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 6e1dbfac48f24afaa95ff4a0f260d6b4
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 37c2f04888a04bafbc74c02d27147d1a
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 9532cd49b1ee4f79a867fa6988ee4b62
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 0776431f6d994b30ab680a4f33f525c2
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# ea72c919d4684e03bd080af3d2f72941
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 4866fa63cdfc4e32a32d37c018d8d7b4
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 6f777bcd9c2746a18e333f0dad97b3e7
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 3bbeaba54eb24be3845618bd506724ef
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 937ba6f46d1d468793d493c146ffa6ff
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# f91e10dfcdf0459ebf9e7b8ac048cb24
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 2a55bf8a3eac4629b666e310b8b457cd
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# c6efd355ace64de2b8e38f26044453e3
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# adac999937ab46199b0bed73114e1ff5
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# b42d8c78d8d3488c8808ebcb183daff1
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 9206e0f23d424ae9904e762ad75407a7
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# d875d0df87d74b3c8623013b870799e4
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# ff98717d250d44dcb3e2ac81effc3b88
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 7d9237252fc14fb5975682356537adfb
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# 524ed4df689c40ab895dec7c31188280
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# a658aab0a3944391b6561c54cc7e474a
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 3d19efad946f4dc0af8b0ca60fa858cb
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 279d710dbccd46c1aa35a05cd2ae69aa
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# f0a8c989e3654d5494f03a0d2076569f
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# 6f49cbcaf7f54890b99b0e845e5d0d0a
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 4e0fa63f0149433a91768ac4d4b9b43a
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# be3a6ff327db40d193489ab177377e98
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 3ed85e5f6392489eac7184a0e10121f2
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 452400b7fd5945f8a85034d539ad5611
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 4cbee6b7fd2c48f2bd893913e60e7803
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 4dd6428a5b524aa8a0f153ddd68c5d05
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 058f744b55df4beabac80670007222b0
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 0b292b0011cd40f09bdf28e24814adf0
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 19f607ff72fc4af792dfc108c90cc28c
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 34c5982e32b042d18d7c067d274f03ad
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 2150634f07a240309f3bd7921853ee7e
# d8ab8f2d688041d2a1cd6e8892f4fad0
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# b55b6f6673b54dc49c4635d5c7d292ce
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# 38091c9861464c348970c990076806ab
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 1040bd6d32f44054802ff8469f307737
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# d4345f8233e943ee9a965b13f8d7c461
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# be631dec36b743eca0bb81c7f80b354b
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 09be4a1b2d1546348b441aff0f452710
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 5b2329c943eb42149b71d8c14a336f24
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# f760913f1cfc421c81160e2f69c11fbf
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 18f70e307ced4b85b85d47eb07b4da26
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 03646a4e59d045c6ac15ae002b986761
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 4591cc270ba24d949a5c817e32a51c0f
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# e1ecab5f38fe4692b6ec2ddf00db5854
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 9bee622df15a496bb262acf9dde5e83b
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 6fe6a99f68014b06892750a236b0ca40
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# a8aaeba0f39a4dc292385df22abf6d51
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 8e08f77db77d44f482f2b715f5d9d6f2
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 142adf0cc12246f29e811021e32ff576
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 6a4e18a3abf94db5a2405e3327c6e587
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# bc913bfb74204b4281a54a05a8756c9a
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 733cb63809f44ea2a38c3d70b605e8cb
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# f182a8fe45be452ebb34c6052a672ba5
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# e835d99d0ef64349a856e82b16e5111b
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 423bf452ac984874a8c6fdfd2ab0adca
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 02e4377603fc4d5e8f48aa81d15ca854
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# 48f867363b8c43bfb249094f38a966e9
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# bde2f53e624d436e8e97c700c58ed58e
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 4e87192a37d04edc9fc5c472863000a9
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 392853dbbce746b0af18e3d367563c53
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 6715f5cf38754ddabddcc089892451e4
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# c0bfd42691a344f2b863868ad26e6b67
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# f70d8cee2d30450caa66ab7e380bbae3
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# ab8e4fac49944c0ea29d74115bc42c52
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 3f3fc42b1e0a4a6aa67b40bac304dc05
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 857813568fb44f879a6712af391ba540
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 64dfb9cddc5c41aab49c46edb8e38570
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

