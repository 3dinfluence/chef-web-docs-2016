# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-27 16:02-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# e6e556a9003f4ab7a965bb134710a6db
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# ed35ad98ecab45b6b2998cefa647b429
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# ba2289839a0746529a1fb0c439bc9f35
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 73a19fcf26364be38217a57cce8e9c73
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# a71d9f676ae94390b5d012f0d0b11410
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 564dff55646e4f33948489629c91f189
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:22
# 22b07c0d681944308558e6365114c6fa
# 84aacf2505b242bea4c49716f3bb43d7
# a663ff216bad4356a4a583d9a04d5202
# 863368c2e3144b4193ec32900b953d91
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 9d1d6c361afb4eb5bcb5a5df24f3c149
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 53f8177ccc5f41139874ec7d24db0afa
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# ac178b71997d46d58d80306a7222a7e2
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# fb058fffdb8a425bb4a2812580b413ab
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# d4f274e0ad194254b879b3d06519457f
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 5faf28ea3abb4659ba70c68d31071c73
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 027f2870429b4c8abda8e1383d93b864
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# db6a378fb3d74adea7e282b6989a55ed
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 414f6a2a19b645fa860861886dcb4022
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# abfaf0be8f76484280fb2ac32e8671db
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 0f85228fa8ac418e8e3a76895c5f1dd9
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 108a17065a054e619c7414720ebb8835
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# bd15982ee5f34bf0a491f2d5cb248bfb
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# ec11fdadddcc4cdab30643567f3a7499
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 2c864ed4fd7c4d389f8ed6d089b84d76
# f1b1be830cdd46ee86ec1e975b11dfde
# 8b5d2f49bbe44df6afd6b78edce039f2
# f09c1b48201a463daaab55003eea4f76
# ab8ae03426f14a199ed6c89a74572492
# a48513518d494212b75c5e9f6543a92c
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# c7476f7cd0ad4452b78aaed02f6b619f
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 73507f519c264e2a96d7e97b7f22671e
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 3315544b2b4c474db8835da1a7b3163a
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# 2a25761667fb4041a463a6c242a8be8a
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 482aef8ced784578b906340b5ad6fa4a
# bdd98f939205481e91d560e6f9bc63a3
# 0855973558b547ae980cfc73b9a80961
# e4ecc5f4522843549a607fce9703124c
# 370c7d6d7863495f8e719b1ed000e7d2
# 6626b44dc16e4bc4b19a46de7ca46544
msgid "or:"
msgstr ""

#: ../source/essentials_search.rst:34
# 73abdf91d840405784f39d6b70561c53
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 6030d2d1c40c40e790b5a832c01689b8
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 9f2a2e908ebf4c69be0a8e9352b3014c
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# cde3069cacfd49a2b53706a12ede1f74
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:42
# a9c55839ea15404791d67b474ff5d2a9
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 5c34e384139b4eac816f3db1bb096a5c
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:46
# bcd48978204a49bf9fbb356763a1ddd3
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# eeaf7ebc25e94cd39d91eef72af2fa34
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:50
# 8bf8a600493141b8a9d8bf0cf75ccf88
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# b1203ee53dd94db1b81ea68ba7dde6cc
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:54
# 6b0dfb6dc8b64c7ead0de84203857a1e
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 2a0d3efe807246dfa1c2cb8f557f68a4
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 8525128539a34492bc5fbb9e432470ca
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:59
# 0667555d97f143d680fa94595d2d6671
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# b40792c90c234663bdb2a9d666f78ada
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# deb6c5945fd9422f89b96244ddcc3610
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:62
# 6ecc2e79adbd4f15ad67f1f31b9a56c6
msgid "Search queries may not contain newlines."
msgstr ""

#: ../source/essentials_search.rst:65
# 3ca00b35fcbf4b219ab4fa31466d4889
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 939d326d7f75444a914114d32e36ba79
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# c21c56834958486b83b8c7d2b3db4a47
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 588bae5e55b74342ba8965f15d7d391a
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 52cb84e7c8bf40828d5aa6b185f76f9e
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:69
#: ../source/essentials_search.rst:81
# 0090808aa3bd412a978bd0be74a57edc
# 5b80964f842049699e5326d8cd568f2a
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 969b84d2d57c4a639b69d209a37c2bba
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 034685c0228c454985eb63609989235f
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# cb70674fc24b450680a896ebfe820956
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 7fc971c8d7fc4076853cab92a68bd6f9
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:73
# b8736028643c4bf4ae6f90ad9d3831bb
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# aa2f899d2ed44065a7205b02f51d5c2a
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:77
# 353647af39ed47f18ad89003a5690b5e
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 7230c07ec0824dbea395783aec4c0caf
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 53760283ff454c5397a32ca98372f879
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 8cdf99be1b3f4d8c80723bfb025de440
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 8be2e35a53f3465895d32ff37faeaab4
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# aa0f50b3f52d47db9545da87af29e8c1
# dfa53f23c245448d9b826cb45bb79c13
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# a28cfc8dd2404588a03cd298ee50fc1b
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 461ca2bb517f40118055b3d14afac4e6
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# ddabb553168a4b4dae20db48ac35a8ce
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# d5a70d829f9947ccb79db972f3aaa85b
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# a7bd1ed1bf6e4cabbf2393ab15db627b
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 99f5bfee86ce434e94a2ac74c27d0ae8
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 0c9381c0b89d4fc295d22a78d7fa48ee
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 86e19f249dd349cfa2d2ce6f95c302de
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 5093f7267c8447de87fef2768666c05c
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 3f75e12967bc4f60b43de67fa3832f86
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 5ca9cbd2291b4ae9b46cf5c808a14e7e
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# fe69fad091e14a5985b7a7007a4b6fa9
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:93
# e5f87f7ac7d14ef1a9564697cc516f51
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 4b45eea47d9a4a7c81a30a22cf70303d
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:97
# 344dda4f8c9a493f8c06bd33c0bd7fce
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# ff997a72e51d4384912030374bf27459
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 28d9244c74784a80bc36f241dd1e7b02
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 7031c038d23c45628163692b89ca90cb
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# fd46866ef30744cca320b137db26a58e
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 6fd80b96239846c5943a9f058b2ba7ae
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:105
# fd808dbce25b4b82a9f7926ddae08280
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# ea9a8d48a6fa433494b9a06dec3d2c0e
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 6b7e0ea644384efba14bcf06e82ea74f
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 9786049a79a24c88a4057f22e486928a
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 018d7524a42f4b498039c07806edf8ff
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# ef48d7d936124841b002b63fc45e1a5b
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 1d513b080b4e4a56b073008ab533a250
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 1b1b863f527c47c7a33b1f6701924e00
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:113
# 32b23a371947465c97bc0b24d178d9cd
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 82554f02af01462f83bf741ac4577a10
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# b3390ae7dfcb45a5be6d43a441b1e18a
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 4ecd38f0c9f341f287f833c78a22963f
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# ffdb53d0e71540b7b60e52f53f54e895
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 4dd1b63aa2c1474d8b1cfed4eea03532
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# cb7c4ddec80941d499523da86a793149
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 78788c6e4af9466f9c818bd685807e93
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 50f18acbaf5248fabe0843579a60761f
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:121
# 105cfd5d92c94326bd07ace2b783be00
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# a2751c5ba19347c3a74a8529f4e5a88e
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# 05cc45d3431849c7bc7c064c4fd4e5ae
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 2bebe8ecc7c94fbda559ffb46d0ba572
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 48fc6a29cdd0464abe2bebdb025fe847
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:127
# ee739acb0e3b4be98bfd88c8c4332588
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 0eef90231299487f88c51e8942471f50
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 942c170ba8b24e7cb441cfc0a5778081
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 9a17afff52474082a7c2b6869c02b3be
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# afe0022f05924395a210543fb69102a5
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 593b8fc10f6d47f6abfa26815f899576
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 876a03f5fe424859922a02110ee5139d
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# b7b68719161f490b982001ee97b968ab
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 0a95cb848bb5482698bf7e280726f480
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 7c42379a8e5547eebb154325939441cd
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:22
# afc1d98db72f4871804726b22c82c5e9
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:30
# 6d6db35db55442479d573a198bf3411f
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/essentials_search.rst:131
# b0cdb98851ba43ee8ca1707d5af7e724
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 7023d5de33094983b29e2e491c792aea
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# c0930987720e412b997556e778cefd20
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/essentials_search.rst:139
# b9eda46140824d1987d12a57081b4836
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# e80d71ec1bc349b58773a2ab3b2388fa
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:143
# 0d8f5c1b32f148cf9c8af26d7dc15046
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# cd88ffb4bc424bacb6f3179b20138f5e
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:147
# 4a6a47c9f01c4759b9345240b75636f2
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 83b91fd4dc1244debbc53c6c959fc5d4
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# 8663c7935d15427dbb692abc9f880297
msgid "For example:"
msgstr ""

#: ../source/essentials_search.rst:151
# cba0dbd9e1c4410fac38af2b7a1da605
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 19b6a80e7ea7439a8a56e1815f7946ee
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/essentials_search.rst:155
# 18a845ea1ddb4fe29b047900fa285479
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# d3f21d53d1054d04bfbf991356dcc443
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# adc82275161e410b9b9601a17a4b51e2
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 6b94504298304b1faf9d4a1640fcc139
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# abfe2fd021144045a113f25ba58158ee
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 0fe47957509c48159dbf9e1ad9193d33
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 14e4c82355d84845a13118a8215041b8
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 8437aadd9fe54e778c7af09a5f5e3145
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 7cc99ad886694c44a3fffe554a763a77
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# ff26470da4214617b9f169a4f0382764
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# fceaf33ed71f4e64a84cfbbf59781ce6
msgid "To search a top-level run list for a role named ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# a52de3dd0939490bba192a96278106f7
# af5e30f47f5e4c38b20c0c64fa056d2f
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 5aa0228a7e1b4b35826554cc1ddd8500
msgid "To search an expanded run list for all nodes with the role ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:163
# bc0877dcd1ec4ea08b6209075017a8ed
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# a876ec97afce40a89bf1fe67c0da4ce4
msgid "A node can be searched from a recipe by using the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# a2aa18d6320444f3a4c7cb65ee27d42b
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# c079f4c624b640b99a5a73cc1a41de31
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:15
# 81b643e112c141d5972711262988be6d
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 77018a44708b46a1be6fc419fd8f2ddc
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# c67be4b5316a49eba66bdcfb8dc75b3c
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:24
# 5ed7fd6d12204e64ba4936ad33cecb03
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:28
# 4f8b1fe2aa8d44589c94e18a2fbc054e
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:32
# fac33de749b94c1f951363b4d763789d
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:33
# dc53f963144144b7ad2cd77b309982b3
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# e935c36c68bd4bfe8feb4bf0f58b4a85
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:39
# 11184c3f262a44eba7bf00388feebb58
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:"
msgstr ""

#: ../source/essentials_search.rst:167
# 23deb7767d4d46d1a872d36e41c4727f
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 36fc712a7a9c401c82b05b0584f51e4b
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 74df0984c8a744f98237a644c370a093
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# a280d6502bdd41a696fd16b1b5217658
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 8e21afac783f4f2aab906d2818481ac3
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 96072c70bae34bb5a60046c92035b7bf
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:173
# 60802a1c2038401caa17fdbec258b517
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 37e177298fff4a91908691826619956e
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 9f208db2d72c4ce0b4d855483f0d1ca2
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 8463c002af9c48d8a49718d1f1b7a945
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:179
# e8f42048570e4c398a44a7d4425fed56
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 90660a8563654d8bafb8b55041b52df7
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 2b551ff9d6c04c19b4623a96e5f0c46a
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# aa701e7f7a9d4ed49a14385b81228113
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 31c523b81bea4bb98c3189030c60855d
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# f2403af1af6544aa95ca2cee963f2476
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 8c8b88a9de1748cdbf17c60fe85737ab
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# d6f73406366c46ee9803f22f4add7d39
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 8d81648582e7450ba51c4130d5f88c3f
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 4ac04e2c8f474eca974f3905d6ee2695
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# f91cc565c2f44c2c8a4bc747c3e0422a
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

