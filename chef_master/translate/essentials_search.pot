# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-05 23:33\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 06f93967b2bd45179bbe3d6f7a264005
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 7ef7323e4d9942e190787c97402fac47
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 756f4eea934a4d6a9268a68bded72a0f
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 89c3593d6ad64c628e57de647733147c
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# b912938a9a8440e0a00d4e38e29f4353
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# fe9bb8ae4f174224bd5799b9c6b4e931
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# a15ef9da1024486eabe5ac3459931671
# e472caedb5154457b69ac369c08892e3
# 7b6e9416e6b24334916392726658af95
# 370e6e7bdde94f0d8d00e989b75ffda5
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 5eda13d20ef5431aa72296e7ffa15079
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 322415a0650b43a48e195fa61f553fd2
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# ac5605cf258d4be9acd1b17ae58b491a
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 8f0e05a81f734d03a4ec35003ed7206d
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# f3da30923ae64d73be8c267d2a6644e4
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 8339aafbf61143daae2f81ad998b7946
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# c1751338a1424f699c15396763c5de11
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 8ec14deec61f4012a3eebd3086cb92f5
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# d884d4b5cd6345ad9a20e9f7ede3b004
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 761dca8d20d0487db4d6c1790f80c05e
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# f5727805f1524c82bdf7e2a6f831cc6f
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 183ff26ef6a94f878798b6da9446a667
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# f094c9bb99dd48abb1355d826dce2844
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 49a5a2ff15554a27931daf3d5c52b78e
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 7f3bc54c51304cc29521c7691b00ce79
# ffaa7bafcfd54077b6adcbfc0f054fc7
# 52297fa8a82345cf801499ebb78c4416
# 23780444475641129ab6db71c495cc3e
# ac50917a4cb64f78840d2dc888a75a83
# 1cb794426dc34274a92bbe572bc1627f
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 9e8711f7bfed466cb73a55282d1a4a58
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 7d41943d26cb4796bce68470634d4308
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 9649aa93db9b4506bb2c64df49065a65
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 7607c93380734e96946a27ca3759c24d
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# e50a0acdf61145469e76827994ef9f59
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 0f4a7d5ee6994b57a947343438e3f4b3
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 0ba9bd40796245edad75dbcddacbccc4
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 43ae438292a5415b97d70646d4c049d2
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 73a21cf441fd4ce3897635364a9ae045
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# c14bbe0d7cf848098f13fe37ae2aa684
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 5011a622547f426bbbccb3eff0900e09
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 256d7ac9b5ec4bea994e3f1bc4b2753d
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 09906179492c433c9e88bede67add1a1
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 7b00088fa5cf46f9ac332b747b09dd4b
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 5b81a73cfd1c4580af985e0ac125cd40
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# f5d42c0851e04ac288b623f24e4ef105
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# a0f71ff3463244adb7776cd23d147093
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 35011f0188a948af8f02d11ffcfe8e98
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 383c8cbe294a4ab3b08b7a3809b67588
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 692f526ea18f4828aeffd0641c6a01b3
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# a8e2c60c292c45afa4e4d09165ca5801
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# effd7d7db9294b248b9b40f0075f65d3
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 1f3d1a9dea1448c3b5d7af418957acd4
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 145605b0ffcc448bbe562d5c95bf50b8
# 0183808bca2a4c49961ecfea88c2c8f8
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# d4e30ce27d5a46d78e2c1a2481ec8fb1
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 4e5281e192054bc5b3648997123cd4e1
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# c47b944728314242a7e7d6ff8bc73113
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 036f5596eaa849aa8cf04ea2d63de83b
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# f8f822c92ae14284a3e5227c660ebef7
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 289c5577561a4d56930c8f4356edcb12
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# b2c562d57a23408783a0ad6501a0c8c0
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 5b79550fae2b4b5abc3c7bb7aca2c444
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# c1ab517e5ed74917a6d7db19bbfed61b
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# d794adeee8ad4ff3abf1634dbea6bd14
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# c4499efb9a934dfc83bf1f7fdb32de8a
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 5b0a7504d1d549fa879ab779c85b3b3f
# 95b1b9a279a340e49d99c3e75790959d
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 263e84ba555845d893aa42cc2be220f9
# 20786a38d1cc4547836c596d6583a621
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 497798fa773f4bbea1b4b5021f98ef64
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 03a5bad60e7f4150a50419b9e6677d8a
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# a9a352db15d74db18430fca3fa4cf844
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# ef132e8ce9fd45379ff82139f01c2bc7
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# b46f1dbe56944505ab5f58b381b689c3
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# d4e1c6a01ffa4d3c9c88149aab8e9ae2
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# f1c4a14d645f4d28a130efb517ce05bb
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 82e7d02e5fe74108bf9dd94559501634
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# d2ee24401c9849bf8a162f86562bb9dd
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# eaf6c73a947842d3b62759f1bda8b28f
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 7197d6bb740f41909432a2158806e140
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 5f74110aad1a4dc5900c63c7efd7e8c2
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 3b31677744e245819310cf92101e5b95
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# c814abf7458e439d9f8b8ea0a587e80a
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 5a2014d0cee84e69af9b12ae8dd27fa5
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 47b976de3bf14e7c918cbbd847c9aabb
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# de47ce5931e14aaa9085935929256a8f
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 6efe225942af4bbe9486a57a6a0fb183
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# f4b14957e4fe45fbacadf8053f5e5f0e
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 0a916ed8522f48e9947e154c10f9c518
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# cc693ec0abfc40a7bde4227079411aa7
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 953c9a682f5d4441b32dd14e8df0dc5d
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 9de9aba7e77a4c38a0337e4f99dbc659
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# b368558c41a74ec1b4c47233a184b141
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# df1ae39c7e5844019a8adc99fb16a62c
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# b299ad06039841098fa35f72c217cd36
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# b3f2071e75224b32bfc0e532adeeb5e0
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 7e2711e2432946158cd49b8568aed16f
# c0dd028985a741108793d02595873c08
# cbac992214154ff59b470a10b2e6a05f
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# c8b083c878894d2cb3c18e1b118fe918
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 5ab41c572c4b44ed9ac411dce5378ce1
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 52523ed7475c4bb5b289344326d1395d
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 2626d6220639462087b04e6220f2b0b1
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 6c2d0f01749d4c3b82a345c7accadb0c
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 17ba4813e75d4660a8e62a1b12bf2b0b
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# ea7c96c552a640b0933620dda11cfd75
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# b4607f6fc14246c6b7da7bc057865e55
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# e4055c7631374e30bd51d5bf656c07c5
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 1df5ef4d999f4c7a9ff301c1acb31202
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 41a3eaa30ebb43f790b0014fb69f0bef
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# dd88ec4a8bdd4d3d98cc5b34c2385f30
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 1a358f4815624a7eacc4f7e429748dbb
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 78cddd6d01d241c294af438305fdbdeb
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 87ed66dfd6364209a54b0ffd204955c2
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 4cbe2ab961234b50896fe5a767c54749
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# b36b79e1ae1c4e36bfbb17a1e4386ff9
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# fbab6720cac348d596ab3210b96e2631
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 8871d0fc2bd5471ab7a775ea64126389
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 59307a24335f44539022343571fadc3f
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 3b9d096d74c349bb98bb83d179fae308
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 556b83ea24924cee868d1453d72d00c6
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 209dcef68dd74a638b0e4e276d0a1e75
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 2760d19a0035413c86434d1eb6f3b4e0
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 1fa6c88302ae40c985d1731f23407385
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# 10f56b4fba18413d9362fe0003ad346d
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# f5a11bc04d6d42788c8e3e1f469a4e08
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 5f1046e99c4a4f9db60508ceecc3096f
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# d7fe4036ce934d39ae163aaa13608ee8
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 8bb6e617c9004dc5a01eb34af2c4e907
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 068899b489ab4d4d964b90e0e6274b29
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 4ef30517722e4b34bf5501ef8759628d
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# c0127e44cf6b4a59a138a0e46f5104d7
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# cd8ccb95fa41455e88a79f890cdedfb7
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 2483f57f910d48fca03e67b511341ae3
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 7d46c7d718bc4159a682afd94f544766
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# d3e00c8cb87240909be6271b079f5606
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# 5ae6134ce71a4f01abc67c81a3c73ca0
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 820bf5811e5f4440bb31c7a1dece1c68
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 502e7aad4c984a58bb32612b85fd0665
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# b371fdb9e4024bb9b0b39711e6f31a82
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 07b2f28dc4ec42bbb28c213eff19137d
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# fcc1f45be42949a7941b134f9575e069
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 6169762c0f844f6c99087218394c41d7
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 54afef86dc2f41d5b31dfb78a5f3f917
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 3b7ffc06a644430a9bfe9c4651859013
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 8717651a3ff84a21b982f88698e4a860
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# ebb411004dd84b0b8bbf87dedbb58dec
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 6951199f703043638201c95e978b95bc
# 0c00c7bbb92a427ba8c38ce58f8a3089
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# d2f865606d7b4ec6aa443649bc7b3af0
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 82bcfc6638e74d168e9e90fdbad08462
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# f0b9f3394ffd437aa325e3160e2fb45b
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# e7c80e7543394ca4a3ba38a891717c76
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 903395aabc484de7a676dad182a334e5
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 42c35bb490c641218a92b42ca133bd93
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 82fc62f43e684b199ddec359cd95328a
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# bb598d6303744e248ce2a61b3d82ddb4
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# e80be626225c42a48e92842e25d6c18e
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 618d8ce7049f4e88ab09748c67e057c9
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 88fa128584e24c58a55134bb0546460c
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 79ec1bc840fa40629bb4475a23a2e632
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 6ca18dbf09344a0bb0188fa7911fcc66
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 6720ea02ae50445bbb912112c1a72d8d
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 345fd96a64c647568caa68362b3ef5b5
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 87eb5ca603e74d0285d0f90f992a6a28
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 10e6564328a7427bbc1768280c3831b5
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# dbba6f646c41457aaec5d8cef9491bf9
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 497b40054248426999523addf31fe9e2
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# e6858d2bbee04ffabf77b6c8fc856a34
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# f4691aa011354a3ab3717866d07b8d5d
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# ff7fe725748d4c268b4b81cc446a783f
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# f05d774079f844cfbf3c9bf26f71b632
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# da31562001994d518eaac3e433a054ac
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 0cd7e49bbb744d40b8e8dcd69fef4125
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 94f1817fc2694cc1b611d1c21c641b27
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 49ce19f3e5654ef99f836866a9e67241
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 78bd914af84e472a926eada9dc07052a
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# cd6e5bc73af54789a62b334c763a899c
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# eb237d9ff40d489d85318bcb15f9ee73
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# b8848806fa5d49e3b458e92931e52c5d
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# c50cb84925e4413f92a50ae296a6048d
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# d5e279d700024dd9a75ca1ae43a5b9fa
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 40433eaf49d94799abb095b48b6e1b3b
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 06731c8c41864b2da842d1957f12bf31
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

