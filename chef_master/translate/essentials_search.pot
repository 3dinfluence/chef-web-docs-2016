# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-06 00:26\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 87bc482aea034d68bf7714b9ef0a705a
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 2824230f3f174ca4be26d92bbdd33a00
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# fb313b12d026476a91d93c2ed9a85ffd
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# ebe77f01b4ba4f58a2e9cbf6c21dc235
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 126318e5a2c44aff9693dee3dd98a2fa
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 0b3be06b532e4d6985a8e01e1aa0d6dc
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 29e4c5a92bd948cd9d38d5861e0b4622
# 3a96e06e947946b9b127f9c86f71ed39
# 7c018c65faa34d908db1ade963c5330d
# 3006cb71a1574f2ea2c76d5122a4245b
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 9fb5ea9f3222487f80fcb3716fb1c4df
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 2a49024397174ca180ca1eb35017c643
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 4a0a27046d4443d1940ec99f4e035282
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# ed6c1fbd3418486d81bdbd4d6fce97c6
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 0f985ea53ea84f86b377ee3d633c35e0
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 1a074afce20646e88b7949237cf3deb9
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# e938315d5b8a43a1aa31cf43d00f43d7
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 38424487bf0141b0ade2f12971e7808e
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 0503e3736f1c4110afbbedcb8d984027
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 815912bc77d647b99fdc0630197a62eb
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 2e7a2d07412241508790123e1bfad169
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 302ea4d163f843d09b48e6c9a18ed3f6
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:22
# 7920025ddc0a4680b33e298883333ab0
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 992ee3ce88b04313b3f5211a17203073
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 1bcb62bda407430db1240879df97367b
# 3459248dcc1c48ebb6390811fdc21c3e
# e030275dbfe04529a6c2f10e7cd41153
# 67e8cd7f4a9b4b7bbe9220aa30d5dff4
# d28fdf0520464ebfbe46c35f189d2357
# 5ec76649c96a44b7bc8765a47e02a7ce
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# 75e9362903064110b9d83ceaf358318c
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 1910a6e6201d417eaf931280766a24e4
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# d1bb56eb2a4647b38e8417e255c10046
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# b1e8fcbf27134414a68318617c74ea24
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# e0fe5615a2354926a65f59fd22287fb0
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 035595a7f83b4954bf73790225108f4e
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 71a82e22267545ee9621c03e248ba71f
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 75ced400daf742b7a664b2286cfe673f
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# 3c0f3bfcfce54b16b422d42c5b3b410b
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 58c3a7042b974a35944d5a33bfd0c848
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# 1d6cb779bed24901a1916f7eb49cf823
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# d1bfff843d1e439bac10a3d4609aed06
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# 01344c1eb521499dbc5dceffcd15804e
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# ac3b4c94e1c647ebab1a9b0e641b8cb3
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# cd99e44a453f438db566d609e95e1473
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# 0f3151a5202b45108d4c13c4ea104081
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 41f16f60aea0489f883eb7c89ba6ccd9
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# ee5712770e0b488490c3b45b5d0122c5
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# f1ca05ff6db24db7987b4177bc6c0832
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 6fbfe3a7aae047769bfe89d45c5aa534
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 8bb173e6f33f473b982b3d9c30296252
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 1a564d46d48d4554bde5720cba4a8610
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# f7741b972d7a4478a920526031e3e4d2
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# 70f764ea0aa14b56a38d72c5a54254e7
# 2f710d54deca46b7b70dc2f0c577846c
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# df8574e87478477ab6ba4958b7b78693
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# a1fbc57042614ee9907a12d03201d00d
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 57da5f0ff1984cd88ccbe01dfe29e0a1
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 112dbded644744f4ad42459f9b26fb39
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# a7bf1699e41b47c3af02c51444022382
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# f5537383f2254841b28d5b2e98add4a1
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# cce7c989437e4d80bdf66e732782fe07
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# e135c8d549e543f89c000ea86011eee6
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 7a614e71c2114fdeb8bbcec12444e451
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 30a45877a2cb43e683f0a33d2c57bac8
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 34c5b32651444c399aa4179401653b6b
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# bd1382c0b77548dab94bc9260c2fa7e2
# 90491f91e769464badbc7d493cc60a83
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 540925f6cbae4e5fb556fc169b19c32d
# 7875cde47482435095841556d5aadf4a
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 333a22fdb7124f469709b153647eb156
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# fef44365795d4c64a12204785ce4bce3
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# fbae3e39cd8d469ab6af09aeccfba48b
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 4347a650f7504dd488e5d9c14f0aaf92
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# eb0eadcdf6bf4d23a6d81b34c760a710
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# a478cdf7f498442185d7d3961a4f14b3
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 8a3e5257cf714f48a1d75945f66c024e
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 75f43be35bc5430e8fa50eea53d342bb
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# d05d512579d04ae495a2f8ca1a5c5931
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 700e0bba25d640b78ae07c78148775b9
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 8b4c0575e84e45058ce09cd82357d24b
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# c8d6dc54299f41e8aa3951c705195891
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# 9306cea20de44a3893d5c29f5c3e1787
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 606f26106c504a4c874432cccc64788e
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# b502c2c5208b43c0b1f6b8eb2b7f2ee5
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 01200e848878407fad592ac6815f34fb
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# b16befb801dd4aefbe8fc35d94b21cc9
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# bcf5b2a459b54099869a0b90a6196abc
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# cfc822101bdc44c59ba817e80a75e797
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# aac8df101a8c4c5d9f8a5a696e89db7b
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# 098f6ca8b0c340c0b63842c022abe881
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# c12d2193f74e46ebb1980f1ad3acc3cc
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 17110001125748749fe58e52ac65e4b2
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 8bd0d928de204df18da8d4409a6b5ce4
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 6dc536c49d27416da946e41c555c6ba4
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 51d1ba2b39224302acfc1edfd9594f37
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 454773e5241745b294d118e976cb8d02
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 0de06f3000914487a37f2f6a51ec275b
# 48816596d2f645f7ab362c327753b721
# f85e5db1d7764015a001041cbd4d75a6
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 7d2b18baee6847ca8148d05808070420
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 58fc7640715d4e7c821720e56399b2ec
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 9e8c28f43a1547b28bf652c966431055
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# dcab0b8943c54f649c7d173b1247b018
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 50433f98589041508e8b20855e1d0a2c
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# d2335e1c45314a5b89e42c42793401ec
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 8aef01e40aea4603822925077f485e64
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# aee9e284aadc4ac386bca2703f67450a
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# a620ed8d764941429cd4373540245407
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# adcb851c8a574566956cb1838e06528f
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# ce2524d60a9244da84c57502d5595d66
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 20756b2ba6594019ac98eeb02691f28b
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# ba488d4e6eef4412b032a6263436f194
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 4b7e8fa05e22403f88157cd611046bd5
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 6317f135163c4a25bdeb0fd7bbcab182
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 9be72d39ff5145dc9c9ae0525210106e
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 9131bd45ff1a4b29a0f88a94c6094400
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 8c63ad99c3a74c3fb559b25381f01efe
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 0e559f216831445eae5bdf264cd5c4d1
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 033cca3e2cc04e35a9bf62175ae6524e
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 34897240b3464e3190919ac8af657c7e
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 62bfe78561fb4b96b6ec3eaf67661bfa
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# ab28f467bd3847c584c19fc525f54973
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# a5f86d5f3f654b7ba106463fa7b18073
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 78072f47312c473fb1d5633fda5e93b0
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# 4e6432dfd0254638aca3cfcb45e8aba6
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# fd6fdae276da45b989be4c075c00c4b6
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 05e0d78913544943b0a34f47a4f596a5
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 56688b2dd3114897a236f7cd11bf6971
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 011bb8bb7dde496d8d4fec2002aa6bb3
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# 2238fa3115fb47bcb3076d485d4c3a09
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 23c937fdaad449168646b75eb8c489ec
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# 9e1da54854934625869667b3fae514ed
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 06cb117de6bb4572b195c28498c2e1de
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 71f7f75dbf184f888a4c516c85478cd2
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 8518970123eb4ce7bbe424d1f20d4b3b
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# d5cc9e66681640a889f208cc745403ce
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# ba283d8084e14e00a7706259343de126
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 977a4b2ee4e94ed9963ea356a8fb5a5f
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# f8deda97ad04452f90213b6760dfa7f1
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 91c9e2a5a99547fe8f167827ffd42f86
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 059e8301422b4dd78d645a46075aa7ab
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# f7303bea75a348289390be285d217b5d
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# c304843c25b646bca2a3fe8f586dc50f
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 757e4f15d514427183a11f853835de14
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 311c010305c54cebb22c901120410d7f
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# dbbd39c996774237b49d700c32fd6bc9
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 2016252cad684f98903412454d7894da
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# bade057c314b429db5e030b6040324fc
# ee6bcf11b40642dc9fa7c9d2b200ee28
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# e2968083eea34331ba7d3c2228cf52b1
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# cd3d0754ab9f486593cf9832e86d4794
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 97001a06301448e38d46d6e8a4fa28b9
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 89711f7a5dad486abdad75f131a9e9d0
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 1ded0b0cdb5245cc9ab225bf645698fe
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 9e077701296d4855a5d86fb76f7a0ef2
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 80aa48aa96994d2387848c5c059fd892
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 8db9c19dc3474028bbb09ec041cdf4a2
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# a58d6b2afc544edda042ea87861225f2
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 7c8b8b9d57d4429e95697be570ce4eff
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# dc42bb407d964c7eb0277ece2cd4b3ff
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# e8698e67f6bf4133b75a603403100ed5
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 1f77b682bcd1465c9bc8175770c90572
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 04cf55389e0745c583810f639afc523a
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# dfb065db84b645e19478962f3df6afbd
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 100304bb51bc4baf932dac374858c0b0
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# c37da24936d34e709b722abb8623fab7
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 7b74e9fd17ad4f249ef805b063b502ec
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 12bc2553b1db4571a7df52c5f6bf9368
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# acce8abc8e4f46ab9024e445c91c1083
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# 126523e03b06410bbd1a6f8e9e058837
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 52022a7556094ecaaca1bf869667eef2
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 288583798ede4549a873d2ae3659a794
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 6ae96208f2704328bb94b02a044dd22a
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# 2d67b1c073934325acf4710e1dadcf01
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 4c7a98a82a304a908ad6ed6f4c96ce06
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 3d4fd5e94df5460c8a8993fa018ae1b1
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 1fe670c2270747839cd01a59697b543d
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# a5806f7903514c1f9dfa565c575e0611
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 44fe0f37e42c4192b3237d262d3b3687
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 00092e709839494a9b3578ba1dfa789d
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 76cd1251218a4472a335a2399e4b6720
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# edd7c6c3d82c4dd8b0a424798877e940
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 5ecb667f2fde4d93b5056ac7ac77b611
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 46ddc457eb974d6080a1ea40e6187c12
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

