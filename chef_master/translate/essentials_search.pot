# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-25 10:04\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 7316deab63214c519f0d343dc789da13
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# d287931457494fbf956725af0368326d
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# a0ad59adf4ac4a39872059b54149cb94
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 6db954549e84446db365310c697db9ee
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 48a90c240ac04a92beade82009cdadca
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# b311205e66454e03b45fe5a56d3c0fff
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 661d85413db54d858e1d73f38ae42d90
# ec1ceeb3a979426cbced1ff7782cd5c5
# aa145d3108de408c9991acd5e2ba16f3
# 72eab1b5c9514c1d96c76925a405ef66
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 9c9cc6f7c2c04c029585eb3264b0305c
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 236546787aec4cae88e7acc607b142ae
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 6081751aae5f4e5f855f5953efdbdb82
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 246b7df5ce6747fcb7d1af39a173480d
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 3822b60c9eb443c9a81e4f05d6baaf34
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# a89e94de98084236b308ab1d84900447
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 5e2ae517166f450ea4b9806fd2e93f8c
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 707c65b40f224595a803aa075f57684e
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 6dadcc5e8d6445f7b9e77efaf07be1f8
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 27338902e9124928a513cec5540f7886
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 6576642c6030412490d1b9d8b3616e0c
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 7e8e1294e495488e8c5c0d05f4f26086
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 4934a319fb1a42d58707303fbbf96087
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# de089ebc18494c599e23c927459088a7
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 63679d89657d4b67bd55cb6f31b86b5e
# dab81fbc76114f32999dba8e6516236c
# 053b307a7e534e33b2729b932d776f56
# aa13a0728d694c7d8d0ca009a87fe05f
# 1469e5d083324c7191ed854e4cf441e6
# cec554bd3db4423a8b87fda7a4b05b98
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# 884489b8508448c881a84593b7bf98a6
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 3eaf00a5b93d4ce184cfb48a15d05133
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# c31cf2fccb67436bb15b6fe627e55dda
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# b5255fd1eae5430983264dcfb142087d
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 75b886dd56754011b36c0bff7c71bfcd
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 9f28ad2df3174e7aab0f93a7ec48335f
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 36eb8a28de874de2a6cd4f4a3b503a1b
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 55d6d5d3bda4465bb9a3309d8a0198eb
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# c5135800a74a42e3946cc41dfdad1349
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# da070832c435491e916f8d3afe21585d
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 9ef8c1859feb4686832917af391d92a1
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# cee75521b217452ebc626914dcb243f0
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# b6810706b61746b18738d25a86fb0994
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# e6194d63ec4e4070b5614467191f0faa
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 2d6fafe38d1e45fa92a568b72bfec04b
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# ce3cbca188d94022a2e33b521486144c
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# f36ce288b3aa4734854b871229f4f69b
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 3f3ea9970be649029a0be51f6863996a
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# f307b420c78147919d3bdda50c568aad
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 6588f4299ec84a7bb8d0cbc188a71b29
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 7cea49e4cb88446b8e9364d4b619c631
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 8adcf37e55734acf8e4f714e1c3bc07d
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 87988d747ce14d79a14dd4c7355e21f8
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 429b9416634c42a2b4d800db17e8cbda
# 5017ea468573490481121628097c4bba
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 17d20fac288d4f8b87ccc26c960e2f36
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 350494beab8c48f58285d30b86d1de6a
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 85a64b669a1841c288cc7623998e13ba
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 1b86ab9daa614fdaaf47518566803960
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# ac8ce21e0b64499dbb0731ebedc94c7b
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 4bd4eb218f2c4f948b91cc2cb9f005be
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# a275152ffb5b40db9931292452176a46
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 5f68294be51d4c6fa476a465305b9577
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# c5310c3596254ceeb3dc69ddd31d51de
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# d4516ca40863462e9920508d196dd45d
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# e2b06faa0f514704ac5f89a939c06071
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# dbe5475fd7ca4f39bacc96d19e8f9c1d
# 467695cd108e4dc186b46be8ef09b3a5
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 10feae2b29bd4679abd968000370704d
# e59bd01b8f054fc4ba40b784f38c84e3
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 6fa7f1bf6e1e4b0e99b703ef271908d2
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 6cc2bb60ee914d81ac710f5c6e5ed74d
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 79467cbbff564dd1a6300c48514af8b3
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 2a4b454c1a254a5eb7cb4ffb668bc9cf
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 4a5a95b42cf04055b7466e65cbab7d7a
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# fb468f08cc50498db1aef67f94bbf12a
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 4641a028334c4cd0b7572d0933b37a79
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 6607fc62b2d1470290bc12e6a6571b48
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# a1ae871ec4ca4f288aef4f1da5e69320
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 1abf937cb0b7436c83fc2e3d1ea40696
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# dbbe693ba73340dbbd2212f005efea0e
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 7e181c1ff6fe4a658aa5e4dcb8dc75e2
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# ee9333a0ee4a45cea471ad9a83571cf1
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# e35ce3ccb5c04186aaa76b0ce3eae080
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 6484018aed094e0f9add880314057465
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 7db82d1f50c64c86a9416e463740f1aa
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 226b6fb7de004fc6b32eb555a79ff850
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 8c7ec0b36c884105a5c1e0ce34a3135e
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# a4f0f6ef150c4663825363bb786ffee9
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 7fa1102721ce416f8c7eb6973677ea01
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# eb45d1df3bd84638b6f9594f0d12fe33
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 88a91425a0e94ec2b9486cfc545af18f
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# efbb8dd397db4f96be763db3f95ecf32
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 94b8039b8c904edd849615adf1965913
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 97f30cc2575241a294a762d7e117f9c0
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 427d216c13f04aaf97978eab58aa739a
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# cf629c1bb0a1483b9fc47f751b0fa062
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 5ec07241e8644c1b9de634a13a469e7c
# c184db009a6d4b888caa8e93cdac5487
# 55cb449860684aab87eaa3af10e9ef16
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# c09894ea3c4a458c8537affb9e2bd356
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 5e8f830c91404175942381033915be6c
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 96a4767331984cdb9fafd7dad02dd2b6
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 7465bb34b60d42ab862cde9402a1b991
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 72952a4d2b814804b5cde1e5e3224dc5
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# b5f8f46fdb754d85a0166fbd72068830
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 462cd7aa84304973acd9e3a2ad2357cb
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 2ae25387feaf481e9744900c95a71108
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 056bc26be4bc49cc95661612f0d873e3
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# c72c3ac73eea46b3ba36a462c4166028
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 9beead3c3008462cb4c918ed58e7b0ce
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# baf139967b994bcda72cd4beb83dcb90
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 208bba950d6d4de78aeb3254af9ddfca
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 0a52b469dbc249cd9d582603cd2768ef
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# e688f9d6218542558d2258e5e0c89d0d
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# d8cc91b42af24e3498e91f82fe6eed40
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 50d3ed50ddb44aa9891d1538e27ecfa4
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 3ab0db45a6b6433695315ed4f3eb3d8a
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# dba314e147f845d09daced48d9ac6878
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# e57f3af51bd14de58913b621dca521fb
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 7eaf97ea092b41a78fdf58fd66cdc0a0
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# af4fead05b1b4a9f9616a64c90887f7e
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 9721daaf1f64434dba652936812beff6
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 840b9e8178384421bdd8df445a42a7e4
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 0a436ae235364faba1b0a0e2a29bc7ca
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# 238d0d5f03764c2c98051fa79b334b8b
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# fa208c2b18fd440b970b2a37c0a38515
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# a37d40545e47421c8955d02e2be58fb0
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 68a767e41a3845e18286a8019963b423
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 080675012cf04646ac515bbe130e2ea8
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 44be9a4d0ea649bda6c7e1a6754ac9db
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 5214875e54194d8189aa76ac294252e1
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 38fe192e014340e793c99a7c6daf0af8
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# a3d21dd8ca1a4c029b2bf6a3c2f95368
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 518cb66c4f7140febed20538dfd8f93d
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 3ecac42132984abfae31bfb7c0895a2a
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# a6979147ff984f30a9e9f2fbed732d86
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# bbfb33ee611b46b48ee57dba9b39f53f
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 74bdb639f3a041059555d30b157ae8ac
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 571b200ad57444aaba6267c6841593ca
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 3f90d3d9195047f28b87b2dabccb9d4b
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# e3bcc0ac97f94a13a74c5a05a5993075
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# d6465389d9bb47789759bc27e46a432d
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# e1a0a2015c474422acc93bcd6db87f3b
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# b67814ad0cfa4d60b1804b1ed6c7a6d8
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 701444140a234e84802f7d24fb28f44c
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 62051d4f461b44ddb3e15a97f058dd0f
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# c50f7985e5a644c4812f5db3490da4ae
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 75992e84ee32470897a5e0f8b94b7eb2
# e8f3f0be2ff3411d94bfc97270a4b1a8
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# dd549ab0f0df4b07878ea5201b32d25d
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 2595b5b632e24ff599f0f0da31d3c80b
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# f2bd190c23174642bf51db62240c9c4b
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 783bea851c04467a96ebe3dee1877c40
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# bbf05eaff2c44b868970fd5a6e5c9b70
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# a74db789a2e14be4b169a9cc1d0edaab
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# be7b97a3b7ee4d278b3bd923e946bc99
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# b30ed9d2f7c14f298d5ac3c507d8decc
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# ffb460d2847544eda8586fa1669fc508
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 904ac00ae9d84a60832635fb0d67be55
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 98afeba4f9974ed58fc509754848b3c0
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 0948efd2301e479fb8df642be50a9016
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# d200dece511346ffa714d390af26f1c8
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 204d53607ed649e5a00ff77bc1d1ad0c
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# ebc2f9ab5dc84211a9ecd0ffc14da138
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 108e7b0248d945df91bad8b5ea0ff558
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# b990a49b6dd24dd09cd622f4490139b3
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 9faacebcadaa49cdac65fc760b130e6a
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 10d065935cae4b8a8756aa1c3d90fe9e
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 4ff1cfc467334734a39128fd1f0c5387
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 5381a71be2a44e8ab9d0d0ee1c49d649
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 48dbb78f234c4e319135298e32240c84
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 8e1e6935c9004bdf856756d3e19d3c99
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 94eda9386e624669a84c0503ce6b1259
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 53b298fb008047fea740eaef04731d0c
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# e5fe8301711045649e61474b2d9b0550
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 2b99c9c8e9e34e02a6f47ad970c38137
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 3e4a2978a68041e5b53db0fba4e2c271
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 9c0da4e7b5cf4f90b9425d3e0c8c8c4d
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# def245e0bc1b41cc83ffc0ef90d867e8
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 42735ebc1575484aa9958d0df85d47a1
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 6ffe6a9d97cc4d2e9d611ae0d9f93847
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 2f995ae7c6f7451ebca02f56b86a6e8e
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 5ef87ee4668c493ea2fc5921cc67d750
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 7d8f1191b79140ea94712e99d5a3bcb7
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

