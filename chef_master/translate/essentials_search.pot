# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-08-23 16:14\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 0ff567c1ccef4920a9c3efc4de818a12
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 3dc2c412b67b4c01847c5008257b2d8d
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 77183db4bc6e476d9734b627a7fd5dc7
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# ffff51a5eb674ebca30cac10606e6c54
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 3898d29c8cca434f8e84835dc73bf365
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 49bbf43d300d46d6a18917b73ce20514
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# aea82f2a2e274480ba5bd9b35f381d43
# 9343b48142ec47eba271aadd000dae63
# b5b7aae5c7cc4c6c967fd59009ab3559
# ce870a49a9a7447c8808599976430e22
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 8c7f9f7841b340f4af4e4ba51a019393
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 30938ac3ec9b4fc4be5f5f32b478b118
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# ccb18b2d94bb44269d0e04dc51147d86
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 5b0cd06a4ec34492bdcf3fc899f12752
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# ca4da71badab4d49af2f89c4040d2084
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 96d0e5c46c4e430985c7fb044bbf1772
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# f7baad2a985e4dfe88b0b9f0eb8973b1
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 8183b4af7d4d4b1ebabf8107b18039e7
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# c01b1456e51a4c769cd9bc93f6617831
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# c8bd320e9cd142a894b3e767370cb6b6
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# fa87486f653c42c19c82336e606aa229
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 273323e7d755489981aaff36732057b6
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 0607b0157de04d0abba215197920a588
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# b62bb5dfaf5b4bd3a0d9e234201b0420
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 5e09ee3ce7d040afb733aacb2b422a00
# 25aa65dee31c4eefb3fec19537c86e74
# bccb83bd1e52416cab9318f6405f2b5c
# 300cf88fef1546ccb1ef8f2a2f25e317
# 2e5226f228d346c8ba18c21f5b41012d
# c4137f55f15742f2b46e45e580a74e70
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# a7ade5a4fb364e9287f502ba713ccac9
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 15912d925db440c7ac7bf431a64f6d94
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# b4fff98c568643eb84822afbaff2972e
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# c36828b458494bbfa64a7b66def7a031
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# bc0552820a5d4b7fba453294ca4997cf
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 1f05910aa3714114a9d7a95e45f400c0
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# 8cb73b1aea4746a1ab23dd140ca3ad7e
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 9daf9761aec74788858550a5a71694ae
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# c9f4578588ef46609392295062606fb4
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 3c2f8c48700c4b499a7aa12e0d230b55
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# f1f785c2fc2f4fedbbfd61a70b984453
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# a702b67a959541d395d516ddbbb62fae
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# b437cdbf0be9472f847157ec7eb68033
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 6e8b26892e1943c8a85e808e5d4981aa
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 7548ff8950ba486b87ffc4d85932a292
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 4864ddb91c2149baa4acf1a8f9911290
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 35655c15eeb64e559b18f89af1f28cb0
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 0ce6f3fc592f4c0bbcf6de26c76a47e2
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 5625399642834a96945478f511e79a36
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 5b4f2af43a7e4b83b2d27b20479d2005
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# cb7f9d4cb5034758be2d7c09880aab6c
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 0ef082b53ba94050bbb4ef918a4cfc9d
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# a16567919f8249abbc16f01ea7767bdc
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 5373a74fe81b447b8b0e21e4f97c07e3
# c0151a4fcf19419a83976a0fffe74ea4
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 5795bb0f841d4f379788cc6a0547ff7d
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 339d8e9a531f41eda19c6213690a1dd3
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 14f3439d85da49378fc981fb5e7a11a8
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 245b19073ded4fd5ac80e4c6d84ec3de
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# b8919734a74c42e28d7205f59d33cbff
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# bdeb1a00764a475997266d7c0e6e62a8
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# dbffc5ff625d4ccd9c669963cdb86b1d
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# e383a8c7b4d74d4188f05d94e662fa43
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# d44090f52fe14d42958a42dbd53a87c0
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# ef686aa951a244358fb0badf4213f01c
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 5e01a49be05442f3ba10eb46360a40fb
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 123f784a6c814c978facdb190a52b0f9
# 4cb4a54f7313475a9d9216b3cb0c666b
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 1e8e0621c46a4260868a2bb0e5627fb8
# 31bfac1d96ba4591a5479ccdd508d988
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 65ed17cd6f714b8c993d21ef538aed14
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 817f11a531e249e4beee0006400719d5
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# ae3aa58938634490af45e100f182e6f1
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# c8bbedfa39b5481eb7aa1a41e99a87af
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# fbbf653c735e411084054136726bf102
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# ae4cfc7166b64a9abd49b5b7db5c7770
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 49f007e10b52437686ee33ac25534d63
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# b36e6a25137147eca810863521712938
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 12bc1652fb9140bb905a46fa487e0132
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# d106fd5cf8e34cdaa20dc65daf45ebeb
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 44b824a5a3fc4feda0ba284ca116fb14
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# bc3245a7a20e480eb06722276f277463
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# cc1812ec2b974556aa1096caf10b867a
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# e80dd2717f4b4dae87701423513e663e
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 209548bb404a4771925d55934be82de2
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 198336693dc74118a0add88557c55b84
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 542e18239edd4d93942dcab21d2ca5a6
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 7f3f53480a4444f891fa6bdbaaab6090
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 4dfdc17e16af49ac886edf1f79950a40
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 97481ce0cd22417380b15a3cbb211d45
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# e1f37f3987004043bc53384bafb31521
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 2be73fa0ab87474da620efa116cbdbf1
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 77a43d70b4f04a928f5d8171a5e424a7
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 40609af937524f6ab45c552f4d4dd97d
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# ab9b0521bc544514bbbde5a0b5fb3835
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 8742e016849c4d8ebbcbb3247122bfc6
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# aa8947534dd44b5cad82c1f31913256c
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 117368d1e9cb4e318dacd9cf51ee7f38
# 7c4c6171983a42f69894d511a20f806c
# 6de7ac8b85954fddbb0069dd63ecad29
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# a43905b973d94a129c0cc51b0f025684
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# f76bb0b7366b4e81b5b09342e69d3394
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 08bc96ef6f954ff3bfcaa3782d2a81ce
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# e658435c445547a3b90cc9f65e0db8de
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 441e893fbb874ccfa741ea56b661f494
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 8607434944514dd6bd2d3b368caa5bd6
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 4642c46cb18a482e9cd50ed7560e167b
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# fefe4dec69134b599d270e3b1b83934c
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 095c426ff5b74964a15d76eca98babb6
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 5d0391b7ee8c483fa4a08b388dd166f0
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# 99716e48caf448b19c0f01cf3b352893
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 115bdc9587f546dab9d712adbb74fbb7
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 19ee13742dce45999ec0418409017fe0
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 9f586925c46f40c48a58538b8962919f
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 1d87c6c0bd794b81acfd4af24ab629d3
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# f83e728b663e4677a052decc8e9c47e9
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 44a657f18f2445bbb4743ad8c5a87e95
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 77b71b6a446744e7bd09661575ce6b84
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# eac5e6d2809d4accb9aaf43273755849
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# fc6372b1f58944f6805dc02da73ceca7
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# d58527d3b36d4e8d95ca247c96041c2e
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# b39b3ab2157f4d66b92b9494a4e1376c
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 63c89dc8eb0d4154af3ab2a06bbeecac
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 9f45193ce3094e9189a4b04d570f4740
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# fa75c8c678c246ba896cace0f7044ddd
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# fa729258530a4fa99e16dd983dcf6774
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# d24b72ed51c7485e82bcdcefccb9f417
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 3010cb94333448209b3751ba93375ecb
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# bd49cf9795dd46d2857dcb3012b520b2
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 4be987e29fb4450986dc566aacfc79db
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 363ce3f0ec4740d99db92b6cf6b4fea3
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# a321c216946742ed9faa8073c9c151bd
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# ad318a696d6d4f00b208fcf018be694c
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 779feed303fd467490abce18ab77926a
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# c2b78ee59bc6450286f021ea6e110b84
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# a61a7e1b6ec4418aa3e33b1c6d76414f
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 2b75426769d4407fbdf66481d71831f9
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# a49350af6064453d952898cb1ec0e1bb
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# ce054ba5076643db9207a8aa4f72fdda
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 891f13d0752c4a388b55736006a578da
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 75d32cefc05346f4974c9d8d885c6ce7
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 87814ec6402d4f9ca296d73f820b3bb7
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 49bb5c4a182d479da715c61de9f46f8d
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 4e766086207b424b800463a198043087
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# cea1a737e3b34d7ba43d82321482b2d7
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 0d12a03d51354352a0d82610318e7c70
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# f6242757aeaf4a38897bf836246b321c
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 39983d43c20c4716b5ec6ecca15878ff
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 5558491ffce2470fa2798f96aa283564
# 9a7cc4561b844cde870b7f0b1fef65a8
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 2ed66b39c36446a98afbe5bd87e039fc
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 8b34afc8653e4e6d9503c93fc4d4a28a
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# a20e21cb467347fdb9452320814d2dbb
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 178accbc353a458faa554e8ac109de76
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# ad776f7e015249c1bdda8c6b8c087a26
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# ceee712a7bb34716bd1fa9e0c18c28d1
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# ed2e9e10443941f3b5120048b5c1c53a
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 3aca43fce50d4cc290402c9cacdd0d71
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 78f38e8bce5e4c74b6cdd947743f51de
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 1e8a35432ea6439d926fb1e6168b29ca
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 896523b03e424bf5b656f30344a7818f
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# e84a1add835f4e0abff3e821547181e0
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 261c7924ef5f45679b4c2730f82c6b1c
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# efd4a14265194ab494fd636a0fb1cdc3
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 3a3b9fdbec4f432d8230f09712b879b8
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 8f7e5926ac52492cb4c1ebf58a410f49
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# a27bbb73139a461385b8a856517838dc
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 1a83201d07994354886edfa02c0d8626
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# e2e4110eeb714bbe8964f99f4e79ae03
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 11cd8c9e2b4e498d970215259366b7db
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# aa02404390fa4d07a75e2d5297c3d22f
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# a8b55fb5e8744c0c80c4fcb5afa02cac
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# d37aaf1ce9a44dae85cc5d4cd2a244f7
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 927264bd9ea440a5b4212af79c754783
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# 8c257768dfa4406297687494874fe874
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# ceddbd1cf77f4b71b376db60d436da31
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# cf83cd5e9e1e484c8bdffb8283a38dee
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# d334265e695e432697b2d349ec39ffd8
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 28fb967f36e0458d8138513db32d1e44
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 4e06a3d5ecfc41148f6617fdaf035cf3
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 5a7389c621bd42f787da198979bacc7f
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 3c5744d19d3747fe8792cc3915fa134b
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# d8d5dc9a9e4746989dde4a1ea61102f2
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# ab7aac99bd2d4798b81cb3b7256c7490
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# a35e95fdd6784a66bc25b2872d241235
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

