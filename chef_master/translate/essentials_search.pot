# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-30 13:47\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 09a0d6f7d69d45ccbaf699a5aef16f8d
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 3a8116f7f79d494bab73a154c1962452
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# bfa26a8bf5bd420bbe68eaed2532f8c9
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# 643bf7b9f3404e61ae1b19b950142f61
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 47dde27c64ef47e8954d004f3385da44
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 8e7ccbe5bee64437ab37457aea31f901
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 001ac745a54c4d18842a102499948309
# 3c8c63e4becd43958b2f0c461cc6edea
# 681b19dd24fb494986ba616ca2cba875
# 5198d4b01fbb4c5db8c86242ca7fbcc3
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# d8534df4ef2746fbb162ef0cb65e7da4
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# c19a44b8ec6742139be26adf991ed7c7
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# ce5466562a7c45cc80d16bef9a4e7c62
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# 1900ca6878c74b06ae8312d46585d998
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# a8e7cf8371234870993a85420cb24f86
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# e71dd6559d584cf1b36970556f533064
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 02a9733b9ecd47c8a5781f8d604492db
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 3e4bcc65a0c64156ad9c2cbfc8f26316
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 8c1d942d9067461284b0054df9a63475
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 84c27748dcf74462852709b86258a69f
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# 15fd218e9a304ccdb62435de2f6b929e
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 78e36f64d33c44708b62e78cb364bdce
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 2e805c864344400fa7ca1fa35cb3b43e
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# b163bea55f984c3698f60b51e890a439
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# a8a2cbebf7db46a3acf1296966610c4d
# a97fbb55cf274295a4dcdeb6a14988bb
# 76e94f4eb5c1406dae25e08cb7fed02a
# bdda5c57085f4f4ca0a47579792bd35e
# 8dcbf0a11c474cfc96bad5802202d332
# 686d492b7ee4486183dba7098b9297ec
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# f01bcdfe15cf431bb1d625eef4132625
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# d283f531559e418ba99e80c364e069b3
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# 588b54a6baf04ba384b23fefde95380e
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 69fb3ded5571424993229f379a3d7be1
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# b6e2a3106ed14adb97c3f0aa350a7fb5
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 89d82735188c4510b08b3a5fda8ef90b
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# f4700d5cff2e45428a177e3826fbf7db
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# 9c1634ff86ec40a6b4ef6c9cbe3f1417
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 200ec3f1af184789ac435905224f7ad7
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 91d65c9ace22444da8e2074bb8cf4a41
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# c589bae01bc34c8793be5d383c2c15b6
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# d15673c636a14da4b24420a29c09e1e4
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# fdcbd60c908c4a58ad2da1361b8b7ced
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 22b0c47f5c2248159866eb2405bcad1a
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 7b225ec5e61c401595847fb0a041632d
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# 91a33e023ef44dd0ad316ca78d5ad54c
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 4cc603fd6cab4d18abd2160b07d2219c
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# d483a1cb99304e42bc65e23dfb912ce6
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# b7af5ea1ccbd4820beb5ab3909a7a40e
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 28a2d62ee0af49cbb173c29c99446393
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 64a66b2f8f8a4ec486d073aab5a34e89
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 18ff68e7c4ce4103b6781c32bb450f14
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 7c86cf5ddc4a4096a6368d4f107778dc
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# dec46851df704ecc97b2e57ac11b5a1a
# 62afb9b41531491ebdd7bae8be2da2bb
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 36b8e0934e444232909ce5d00b0672c7
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# f45bbd7098b2425db0bcecf3bea2a803
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 9e46ec9c92f841eb9250358924423a89
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 9c458866a508494ea95b0126d2b86b6e
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# 63f53a23723543cf8a844c1af8a718b6
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 6a2ca4bf71544af0aa30cd9ec17289ea
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# 0b77c22f9c674dfcbc4543439c934902
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# f379c5b5de224aacaae527277d9dc143
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# ddd93203b46e49e48971c527312e891c
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# b5536bdd26644fbeaf47f55f9e9cfdb4
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# e6224ecd422d4dfa9e506e151e9ba35d
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 692dbfaac5644ad7b36fe2fdd35c7260
# f4e4d4eff58e4eb7aed3e8ecac5ab8a9
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 86515207ff814cdd815fdc061b192120
# b386444797394acaaad5e2d1eb29226b
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 8d426120071e4b3a9512859ae14bd533
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 3e3e4fb8216e4a7788ee41573305bbd4
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 42efe64a231e48b6adccc635138c6b71
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# e998b3a8711c4b31a376ebe047b42be7
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# ffcd89a299b141098f2b28fa73563f93
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# ccf6800c3adc48e7ad15e9ed87349b6f
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 1c73bd1ee0e14143a7ca3d0511427bc7
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# c22431e97ed94432a3f71b71f1262cde
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 34b16f0f0ecf4dc091edfa7e196bee18
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 84785fe6e8dd4417867597f9c000bc2e
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# c99266402b9a4380a5095e62113ef453
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 7e2203d365f942758c154e1d86a5922e
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# 2b59f990861b408bbb4872c93d73e277
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 74518ccddfea444a89b9569dbf7d2441
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 56a1599f61b046dd976df9652689a3ff
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# c2bd4752d79346c0a21ab8bb2536bd30
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 0bf3c8afe0524e8ca0b2bbbc8e91aa1b
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# cbd99d5fbe774577a29805312a88e793
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 1ee33e2c302a48b8b6aa18a9c235880a
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# b458619e135643659e1f896592931197
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# e50e1e932b454909b0b644388a69642a
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 1c233bb1d3ed410d82870097469dcccb
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 9b32c9b2d242481ba328c7c54881d65d
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# c1249687b73547999dd8dee6fd74cee7
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 7af5b5f455984d598a0fd9ac3b0208ad
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 93a64a3a98a74ab08ada4507fb9cb7d9
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 16aa4e5eb12748309821e455628e37a2
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 959bb4f5b79d41b3b6d408d5782cf927
# d960c736df714753af81f353ae01cb9f
# 890ed2fa38f84df5aa6299efce2597df
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 0ce8510f21414b288f25dd234afc18e1
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# 7da5a4d1bba4481296aabe10e56593cc
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# deb81bc0236542c8880c4ba75652ad7b
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# fb83eb9843584ad6866286dce82738ea
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 527c659f871b4fa599b4fb32222b09af
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 69bdb00530f74df7bff7f76bf1013585
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 86999762b8aa42e28128afbb7f4fde68
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# c29ac3140e7d4cb7acc0141efeac5bef
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 00ba486d3ce640fb982520d6bcc1f00b
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 00c1548d27df4f339391ca0b62e25526
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# b160c70d54c84656aa549e260fc58a51
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# fce68002b14d47bcb4ab222a19bb30e3
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 0dc7b54ce32a4a70b291972285775127
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 96e34b342d234a2c98b0f1d238d8a88d
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 063ba96806e242a58f251637d0569c43
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# d3ca999913184e64afa9bcbf78f6e1a1
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# eb975142157945349b2e37a4b187daf0
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# f7cea6bb1ff54fba9d7d9a98acad7eb9
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 483ae3485a80422dabfc96245917b373
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 19efb585068b477fbeca635ee963ce13
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# b0adb2dcc00745449141e3021ff1b544
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 3ed2ae9484114448b6084ae149f0d63a
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# fdd34820aeb849c082e997730209c7f9
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 34d326444e4d4b41b8fe318583be8105
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 0ee8b5ccf69f45f2805740175de67728
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# 9ed7eb5614b147bfa62acccc0120d237
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 53454bc9ddf74c0b87081c852407d27c
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 22575346ec50494fa9088d7e83c5e4ab
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 705cb22d085648d8895de3a3d08802c6
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# ecf054f4b1d94013a789ab241516be6f
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 8002ea28706949388f060e5ba4bf5d1c
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# c1bbc1eb0fa44d2991b04e84b796d248
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 1a0540b2e87549aa99f899904e55b488
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# ee6d80031eaf4e1fbbb778f1a0ca9030
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# b6ad6b23bcc74c3ca9c15e45027689c5
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# 2c4f7db9f65f4001bace2400535202e0
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# c43c31377e8745d3bcdcc0e1ab324001
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# 5a4b207ba5a14c7c8851ad9a8b5e79cd
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 6f4365aaff454e6a824b0a98f1b0082e
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 5a1fe0ba5af54530ac9f869d590dd716
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# e953a5b91ddb42bfa623e62f4638233f
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# e9c77c3d1779497fa8371a59ca761825
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# ed5a4b75d8da41b9b939e3123a326cc3
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 2ffc83c9158d456fb91516517ddb5097
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 498cf56ce65343f4a29015a76b4e622d
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 044d98998e2b429185b08abee91f51e5
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 25382391f48442bc94ad0b0b71a95a17
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 96d93ff5efb047f7b3b270f2bf7bbfc2
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# a3c3431a5c514d1daaddcc6c0e24dd02
# 3e8575068db74b6e93aebd7c139b4329
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# cf60135407c44209b367bbf3ccf5c213
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# 1131cdaae61e4ab392f17e0ede1c8fc7
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 0a7511340d6649e5917c88b9a76bbcde
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 804e1c018cb347c78b04c71ff7e03fc8
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 699744e3f1004295aa108bc669949f45
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# ae994a550ccc449cbea196d1916ef30c
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# a15283a77814457cb260baa98033bc0f
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 900e678fe1fd4d03bab7c931300e5c22
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# fa37b104350c4e5f9c9262bc2b153c63
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 47d814f1e53f455497cfe7ea66de84c7
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 075f2d73e74d4dbbb186e7d20f5d03b2
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# d47b81ee3a2d4f5bada488f83407482d
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 45402f2b39274bc09c27872f05c53d04
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# f75107c8e7d047cb94ac3200f5c77408
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# 526e7c5ef391476c9da2f30191187565
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# c353ac5bce1548a394f273bbaec4dc4c
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# e4abdcc2c06e4c5382268c6b9fef8806
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# bf9c06f7999a403d9da44bcbd39e4dc2
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# cc1500e45d1042ea95f3ee25acaad927
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# e01037776ac746c79f92a7d86ecdedd2
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 6c286cde7d744145ad9e9c897aa97383
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 35a35bd5ef934dde9e441d9f7eb7ba36
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 7789482685134815b26e0a4247a85d3b
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# a3249a859cce464088c3f340aedc8ffa
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# f947a53a09e34e7683396f314d0fc228
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 259d74876bda4fd6a2dd88f1469f3ff6
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 0d718d2edb4d4724969db06394a35f9a
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 1c134a45abf24017afa6021dd1417f40
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 2119c09a3eaa47d4bf72801433d694a2
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 9407d1dc998241e183ddbd1d3d9ed167
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 293f59a159cc4ab1bf8da086c53992f5
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 7b6926b39e6a42bdb3d2db507a7247c5
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# c5320cfeef9d42e287719d9e530e20af
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 4a9b70e87df545bcb06415177a7ff2eb
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 4091323d863747a887172b2a04ae1dfa
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

