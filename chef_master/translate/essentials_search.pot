# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-09 15:33\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 8a78ff70b6cf423bb35e5ebb837eea0c
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# a891aca2ba4244b6830e688bb95d504d
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 73ae459da1c94646b976996affe07fd8
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 0e5f57a2c2e7484fbdb45cfc12562197
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# c26342cc97434a04a0eab725da9286d2
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 803a8135892b42f892f2d5ab090a3155
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 877d0311e85c41a89151db724b96f0b3
# 52421227756c49e583f0a5d440291dcc
# ac93ecb83e6845e5a2172ad89a3d2ba2
# 11fbd1afba2e45c49efdb1c5e4bc7693
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# f2dca11aa7a84261b1692dbda4358350
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# a16476137ad3496c921c7b45517f3d63
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 0228d3035eec422ea73e8bc9a1cd0ffc
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# ba9a22ed60024fdf8dc6b29d93553afe
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 79a1b394c8b945728e9e6e209c10fbb0
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# fab1c3893509468e994d5487ff54a84c
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 6fd5b6d8b48a44e6b633c18c19f4dd9d
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 70de3acb482a407d80b2378544506454
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 959e266c922d41e6963aecd5321ab6b4
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# e121cb5e7cc246f7815e96cf99c68a24
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 6917304a8bc04e0f8df89357f3fd17b6
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 51350f101ae342de97284996c83dde02
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:22
# 1207ab86571144b8bc3b17b31922be7b
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 8d0c5eb66ac84121bcb9c751512717b3
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 64d47a79d0b749ca8e8255b53ad41853
# 47b289545bbc4619a16a1f73fb4f84b2
# c57bc9a7e2744ef6838bd14aa62df874
# ea2e9e95046a45d7bfc2e3fca13ac23d
# dcfeb4c5d22b4a6f827b154d60cf0309
# 849dcdc8905a475eb843b3d461de91a3
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# b8c5a5491e9245bc8aa8fdcf527cad2a
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 3f83805a5b3641d5ac6aa73bf37ee889
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 0018b5daedbb467990b7027431b615ae
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 7581893fa4904871b040ff44a025bf76
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 946fa8e9e66c43c5a0cbde9e4e0d3038
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 4e340dc39cc248ffb5ea35ef704059a5
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# d3a05069d66145bead54b828778bf5e2
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# e3a7cfb27fb14edfa945036401c259b0
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# 0d3dcce449b34c31a549b1a5d9313feb
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 1887ba7d67484d8d85c57139fa127245
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# 6292586b85454dd085e0d5d27aadcc11
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# daf7bad4a1c64f3d9e58f153e843ecf7
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# b08d1404c6074dfeb0ae3a4eadd807e0
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 6eb13347b3394def82514f8d594f619c
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 33905c15f1e64368bddcde4474704c0b
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# ab2061f02dbe4f7d91345ece228701cc
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 9afeb647417d4547b1f9c70c09b33219
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 0074feb7084846ca9bb9b88f43272c59
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# a046ee427dc4490c982b4eefe337311e
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 8824754e9bdf4f4f9e1ce9443a8aba68
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 86f2402914d349ddaf3c0a71027166f6
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 35a37c05406941b0afff58368ba54061
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# cc2d74fe58374f4e997088b8481ea113
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# 09e634024d4049eca0da1f9c024363a6
# 8cd0000af2ab45a6be61849b44f16de0
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 61ba51263d114debbabed464a15a56c9
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 5aab23ce244a4c68a07f17fba089e666
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# a3edcc5d5c93455681288a2b0cc2f7f3
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 9692e87375cc48ff8276552c8ef4f2db
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# dfc1ee0ccff744c395eaa6d66365318f
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 1b930a73fbda4680af9beed6dff27f5c
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# 45dc19c2549f49c0936e25cbc26d0757
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 95d5a89b0b3e40ff8b89973140ac089b
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# ac50637d824a4c90afb0a4d64e226125
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 1116dbfe88dd45148a08c5e3cfe4002c
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# a618696670ac497e9c1c398587892acb
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 10e1a2b530e24a4ea2aa5ddb7c2ecb00
# 94423c92b2e04ad2be8ad826c771c47f
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 832cd074d4a742df9d74f77e204ea67e
# 322e66bea3bb40f48c5b432bfc558b3c
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 099b27411a514bf4b6bcaae8f1a37830
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 5215759eeaf7443d8f1eddc8b3b32631
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 1287b748c4e34d759c13974f037f07a6
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 4e187917ad014dfdb7db3c3540f7ef78
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 07fe5989239f4457b018c8b22ddd013f
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# c9841a2c5240410d992e26e6632c8e39
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# f8958369831a4cf593fbc1fea47125b9
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# bacae4fef679418fb57e2241b8852378
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 2040d8f332104c8c886cfde4a2c52bba
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 7bb6d359213b4faebe8067fdcb77be67
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# c3a3091cd30346028d91ad798aee37b1
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# f6d35f91032a4977a123a8ed88d3000e
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# e4cb0779c9ad460cbafba4f7d064451e
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 2bd69c53b0db451793d3256a88f419e4
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# af4319d8d5c240ab9433e01a75446b03
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 616ca7b3febc4e92a6bbf7d0db053d54
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 2d501c53f877460181824f1012ffdbff
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# e8a9de1658e04e49a896677e8cd03066
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# e9a2f71b768c4e79b708bcb00bdab1f4
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 0dd09e41dd5c429db0c1c1fc0acfa9b5
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# fc64bc930dee43dc9854c5f6db1f6ba7
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 9e7428f1bfa24d25b4418d324635fe99
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# cd9082308fa94bb0ba66a8ba76d63de7
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 99a58a9c9ef74c08b838c71c34a55913
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 872e215e38164a69ba50d606fd5258f8
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 678546e61dc349e3b4bb997bdb9bab40
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 676e8de84d554e1d96d8734b7b1d0465
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# ec95e2178a4c451eada9228c50f442af
# 2df0f8bca4804f18a340698bf08ca7aa
# 70856116608844b69a8cbf2eee5cfc13
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 7c681164d1c7427fb37e900a9a6b3dbd
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 5b193f4cf1c84b3bbd5170516ee46d8c
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 3229e86b5e8744e898086f67d09df990
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 604a7ca0c1d947e5bf9bfc8a86572657
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 99ac89cbc8584d8396c0a5b01326ca33
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 735ccb6e5be24dd5a9d4378db89c9f4f
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# b77b69f892b946c08450ea4c4b5dbd5d
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 8b67f0568714434bb9638d482a8863ee
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# da133337482343f5a812c72585c1ec9f
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# bf6b277aa43745b28eb3940d061a7f57
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# edb44fd758644423b06604b3cd61ba71
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 3e674823dedc4b808836046409dc15a3
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 83707d3169e34823936893d6720a1f60
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 9442eb3b0adc4d2e8d112bb1b3dfec9c
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 1308b9bee635439a9b3d126c585e9357
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 6e6c02f2e66445ab961ed3fe1e6d6218
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# d4db9f54af3649fabff9817912375c73
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# ee2fc35478be401cb3c659e279f70196
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# a5cce247cc69465f887cd62616466e07
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 90273d3688934bdea0c594538cee799b
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 94810a36d77245389ec82bd59c90171f
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# af3cdb26ca294e1ab24bc1eadc1f512d
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 807e264c98ae4508969162acca6ff0b8
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 4242ea0f56164e6c91f9755a0935ef00
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 7fda25b5fda04a01a3f16e49063955c8
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# b08cf1cc2a1f4e03877cd2874b04baa5
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 7fd15b8bdb664b15a7dad069b2e2e015
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 2aabc81a9839427fb62772bd398eb5c0
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# c60f4f83cbde4aee80a3de70b222edf5
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 29791fef8caf4b78aeff783fdd76f6c2
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# ae750ea7230245ada00332c992590b0d
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 8986b3d04aa9447887f9ed83c2fb0e13
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# ed797e91677a4a65a9d043e44e0377e8
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# f544647e96a74fba87f6e1d2c88fd3c5
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# d8a6d30313eb4e7b9c2d8e4ce50f3d29
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# eaffcc71016e4291a6e7749ce3d2fb9e
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# ce77023ee3f0496a9ba3d4ed2feb9b1a
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# 7f264c6f65c34562be6b96ffa5d113bc
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 91a28cc25d6e44249e2f6135f030fece
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# aaeb64caed214635a60405bb0a7e7335
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 8f08096837aa41708403724d6d5a3f48
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# e1beb2a33d1d4f96ba008080551281b5
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# dd03808b5c5947e384b0a22ce10b60fe
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 5e61cbcf281749339eb4b4d099b444ca
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 7ac102fb695c44b4bf47f18ff0badbe5
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 3028370a5f9749f8a5ae6e5de1c2a8f1
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# c843939bbe854aa48c33559d33d34b8a
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# d0a54f9a6ec146aab569184e7ebeea47
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 8b9d9f3e0226442bbe61e3a9e358e59c
# 0946ad88a5404aa5a2798b69d52f415a
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 5ff3d141cd184b5e812a4d665840ac99
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# b64c0ff7f64b4cf1b92f297ee15f7dc6
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# e184da1fe2324922a7b02266780b3a70
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# a9b3dc3026f84a7ea175d5db30732b9d
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# d5b5393cb7984229aab7dc2e7215055b
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 25a392afddaf44ef9d3d233e41ecc955
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 65125929ef22476c9d0abeacdc85ce59
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 5c9e6264f9fb498e9546510f65d6cc6e
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 7ab2469265f1460491b4a95dfaddbf13
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# a751773fa5a847f7ad33b1f701a76f49
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 7ef0feb99973424e88e040bc8eec2654
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 33f2eb8f27f54372be03e286c7f280e8
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 15d4c03bf4244d85a818036a81cb05ac
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 3c9909df775a479e9c9fff8c5cc8c19e
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# bd1e667df922467c8b1d690a55a1283b
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 0aad3569cbdd4c018571403f872c8b50
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 18238df362f942e9b63cb8be704fde67
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# da770507b02d4405965836329802b796
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# f95a75b00ad6488e874d40dd6356d201
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# a026a6c848a3440eb56a01bdb28622e3
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# 481a777b83cb4b859aa4049bed46b718
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 0986a5f737ce4de39106b63714f02d62
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# bb3fd61e581446c8b60908f6f4e72a7a
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 04aaa7162c1f40b79b013c1af916616c
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# 3f4c8f457c5840d3ba82111aef0265b5
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 957fa28b79094cf2b9db8b81fcffeb32
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# b8b9c1cda9454ed8a34a0c0ccf411593
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 2963c067cbed415e8c415a84eb5681bc
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# a6e20b77a4354e2faaad0b37e7daddc0
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 81c960ad26bb4cd289683f12c6b22058
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 17e248e7e56549988edb97b5f98e2a67
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 0a5449823555454c924edae4e326654f
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 2c88355b1ae640de9822c38ba24f66cc
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# c76a71dec7f44eed9fe48735adb80a59
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# ccba00a0513c488fa256455f7b9cc477
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

