# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-13 21:44-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 13a97f578ee04213bc671c71e3541024
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 727679556b2543168c505a02f2e1c60e
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# e0714d0a18714eeabab2ce280544b715
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 191e39d0604a48089ed940e02c75ebe8
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 0f55403ff7b9455f8d3de1b2ea090246
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 6fdcbd664d7240c09ff6c5fb8c799f78
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:11
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:22
# a36a9b23632640d29ec3fa2eb1557c4b
# 6be2c293379945bdbfe9a82b3061c48f
# 77afee0f84794a8189a2a145ef08baf6
# efa0067e825340ab8a1b8e7a110efba1
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 423e3d53c53147d0a815b9a86146ddbc
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 7c27e54a90f74d6fb59ab938a2e49618
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 6e4bbac3039741999767f988e3dd3ee0
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# b5563195ca8044b1b89a5494f6aacc5f
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 1e2e80270e9049aebd042af1e9253542
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# a7bc6afc5c9f4bc9b960f4725e211690
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 87adbc3d7536449a81008329cd673401
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# c5bfc849cc2d47bb975868fbf5c74473
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# eb006e0186a24d2e871005ee32cdeffc
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# c8b1e6e071844436a16522f94275b222
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# a5a741b6316844f89d8fb91c51172698
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 3455caf10b0246388481507acb4fa8b2
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# 4ce95204c5bb450b95b12ffa5442901c
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 3c993d827aa346ce9bdeb02232095e85
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 119f6e9447c1492286e48f4893271bb1
# 9070f72d686e4f28a920c67a7e01124d
# a105cf96e8744f688a36fd4ad1602aef
# 8815b5f2b4804faf96287493164430dd
# 7d8e663d36c34964afd12137c35785e8
# ebf5037012aa483ea7704d726665c0b4
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# f89ce7fb760b40d5ab450697d715c516
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 86024b41114d4f7f828c9e01f6f41ac4
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# cf60c43473ae475d9bd774db796ce049
msgid "**Search by recipe**"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:3
# ec3f8fc030894da0b12e3e07172f3d43
msgid "To search for recipes that are used by a node, use the ``recipes`` attribute to search for the recipe names, enter something like:"
msgstr ""

#: ../../step_knife/step_knife_search_by_recipe.rst:9
#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# dfdd266f685747319c8ffc184f398f48
# 383613979cbc470f8ef4a126671d654e
# 7ef6792fdfa44a0886920dce148bccac
# b0f6f05a4f0a4d6880565d108b21ccc3
# 15e6b7e2a44e44988e2d32243514014e
# b4d343cf08f74c78994a008d927d8268
msgid "or:"
msgstr ""

#: ../source/essentials_search.rst:34
# 485e857172024e768ba5fe875472f549
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 690187a9e6a940549c93470268431415
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# d8a6ed85dccf411bae0b552c7dee2a83
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# b6ef8934524940b78188f60811f72394
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:42
# a4a87dec61084fe0b5d47d3846c6a514
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# 7b37f7906b1a4f1e9e0b8397fd1d9451
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:46
# 1539f42399604340bae6c896f3c03d84
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 6a6d32c3bb8045848cad9896283c9f4a
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:50
# 09ac7ce95f934ef3837914fe068f7742
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# fc140bd0540744f592da0c9ca8c14356
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:54
# bda1ae62c81d4c808da22e05a1d2a584
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 768392e01f2545c7a6a9f748168f9d69
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 814126eef8fa476e8f7b4148def3942a
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:59
# 55f563666d2b479e8574b1c853d1c6a8
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# e4ad673715e54ed9a63fdd44a93b131b
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 962d56a3a18a4c259921f9beee90be95
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:62
# 6e5b55b44b6e4668a7ed4b8abeef2bc4
msgid "Search queries may not contain newlines."
msgstr ""

#: ../source/essentials_search.rst:65
# bc9aadc33e054a6cb46f03b49ab29825
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# c4471bee2b9e4eef83458fc629196b43
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# f91ea2f93a5548fd991f6841f5780d80
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# e5752c108fa64b1f86d78a2f9987810c
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# f9b1eeea8634432dbd4d07bdfd0920a3
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:69
#: ../source/essentials_search.rst:81
# 6515cb727bf04b04b3cb8a2e2cad59b9
# 33d63c0b10f6458aa15360f152460e3a
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# a0ee88f36852423b9019ab3c0205c69e
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# eedd1e6e9e284d6ea8763df1f06dca37
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 4bcdbdb3379048e5b7c7c713c7999853
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 43bda5e339a34bfda22a7c26ec87162a
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:73
# dcefeb52862f409ab3a58597a270d71d
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 43bc86323b8e4a23a0eee1b0c65783af
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:77
# 951647fb4713493db89ca043de522745
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# c9bb285644dc4b9990b465da3bf321b3
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 450a17ce2da44041a290f87a72efaf79
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 8e4869f35fa84623a2adcfa6fa1df30f
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 842205f68e804fc2bbe14fb4ae434838
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 740b8cbfb5284e17ba8f620dd2eadf8b
# fab22382608d4f259ef6f28215912522
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 674f49e5888e420b8769f88637f55ef7
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# ef5c0007182546e29310b5365ff439ef
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 26d1665917cf4814bfdb4caca6c9230f
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 18727050bd3d47c4a303a91862ef19d3
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# d5391ad282174801bf09ec43aa5a9309
msgid "To see the available keys for a node, enter the following (for a node named ``staging``):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 30d29ee520f84ce5bdcecda441958e66
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 9eda10fda9e84620911e4081ce15b950
msgid "To use a question mark (``?``) to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# ad219a38c55442f1a1c3498b34364b06
msgid "To use an asterisk (``*``) to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 6e75fbe8136b40e2becbbaff22471ef2
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 74f69810ea9e476e800ce8513480f885
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 2de48507f38d429b90ecaad85bec9d36
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 9d6bc5a647004758a37e5c309bfa5aec
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:93
# 586e96e9dad24c78a2d3d598910957e9
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 0f9f3322ac8240a8872f15a9fce26859
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:97
# c860ea1b08464b958da0e01a344e0b13
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# fe45e9b747d046b0b5c8a05a39b1fbbe
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 6eb40e0fc12b4429896dc101d71a087c
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 797f46b536f449eb974f58f49a0e83b2
msgid "where ``admins`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 9b0cf5574a6a4bd3a9e7a1feff906874
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# a96aec5e8eb1483a832a0000f641bb43
msgid "where ``admins`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:105
# e83f1dd0bcdb47378385a4ad20488f89
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# c3a33486f1d3460ba010b26dffe873f5
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 4118b159abff42cf90999dd4ab3e44a3
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# fc61068b9ff24f41b205ed8ad497c7e5
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# cb54293573e74ddf8e1567d0813f6608
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# d639b6f851d84203a7080701c128ab48
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 2059bf131d204353b9df83671d902bd2
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# 43e86513e6c54ee794afd8f12558f670
msgid "to return ``app1.example.com`` (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:113
# ca8d1624949744b59c4977377fc356b0
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 61e2414320a9440c80ab3cc1f1d8dda7
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# 67a2891ea4fa43cc9a493d14f6155cbd
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 3f1023371e894c09b6dc88c1a1975681
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items in-between ``bar`` and ``foo``, inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 5483ede4d82a49c797c8a95b478315b0
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# d3cf8e8cf64b48cea1e0d5d6458d132a
msgid "where square brackets (``[ ]``) are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 88eb63f0e9e242a2beb6cd12da42a3b7
msgid "A data bag named ``sample`` contains four data bag items: ``abc``, ``bar``, ``baz``, and ``quz``. All of the items that are exclusive to ``bar`` and ``foo`` can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 4b98deed8b4e4ea085cb59fff7832e9f
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 9e6e9323ff3a484398fe613bb647391a
msgid "where curly braces (``{ }``) are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:121
# 12b9f9f4a85e44c6be412dae6d01de84
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# bb1ade085e5a4a899bc0108028dc59e6
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# dbeabc1d48724871ae02d63014a02000
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 94a9e50fa6b148c0b25428277bd994ac
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 7a5fca90726f4b43a0368d1cc1da8b4f
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:127
# a741cf2138044ea588ae50efd7cc69f6
msgid "Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# 18fc28a280cb42038310ec8854979816
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# 4a24db07f3d247cfbd6705064c41d597
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 593e74be98ea45768f3660da7735eac7
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 4590e40c3bee446bb88d8f717a8681a1
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 75bcb8c8a0eb45919b4c21ecdba02ee5
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# b7abd65a87234291a71ea3357a6c33a5
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# 08a7d0b82f1b48cf819871f1326b45f6
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# cdf5827ecef44f1bb41da8afd9c8af6e
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# a333adeb69ea4d69a2abd49c901ba385
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# 53a250bb19b04b1b914a67270e972e15
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# d8b3d56a40ec420d9264b72893696bb7
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/essentials_search.rst:133
# 82b7c2b95c93442ab2e197f80349aba8
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 4129c1828d7d4442bfa989fe4b8fe634
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# fd5a9bc9ca244575b9061f5343e05c28
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named ``jenkins``, enter:"
msgstr ""

#: ../source/essentials_search.rst:141
# f7906ee8a1a349289cf1d0e25c7f86a3
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# d77371f6cac8440a9811ebc6a502e6c7
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:145
# 3243626d111f44f4a21804338d9b733c
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 7445fafbb2e64c0893d975cde3c8d9df
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:149
# de9e60fa0d5942f19311178b6401be58
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 0b8a001b9da74fdbaad411f563c2ff7b
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# c1fda689f088490a9bcab75c1fb57414
msgid "For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# e5ec1be559804d0ca49ffc05e2cdcd3a
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 14965d16166e45b89ac2e0223a4e79ab
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/essentials_search.rst:157
# f7d018fd2a2a46b3b4b98e134f518d49
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 2108d6a7f69f4da4bd74a7b0d192a052
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# e5d8e870332545b9ad447bc6637e7159
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 5a04fea1c95b41f9902a2562162ecfe4
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# b799a648c04944cfab2a3366851b35a6
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# f246765162584180ab9ef54c48a58e91
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# be495b0799514b60879a5f4295b28676
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# e63d2347e14b4544948a5c31c7046238
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# d34d83ab0aac443390d342d7fee55ad0
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 61a44ce575504e09bf72bf951ae1c39f
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 7733fc0ff5d94e30b9c5b4ff347768cf
msgid "To search a top-level run list for a role named ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# a386717783c44878a78c4bcfa504fbaa
# 044704fd217b45d196ae4affe8a5ff8a
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# e9a3c5a735aa4b129a59807283e03b96
msgid "To search an expanded run list for all nodes with the role ``load_balancer`` use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:165
# 813caa1c3f4a4d26941912723942f622
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 3088c9c1f9ae42fbb9e3814a5df09e64
msgid "A node can be searched from a recipe by using the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 1c6f9788fe1b4d72b42492c19566e773
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 1dd10bd4569d4df29e02de685c7b70d2
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:15
# 02ed9130450f4aa9b2ffe8d7626989a8
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 6e26884dc356438480a0435fea54615b
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:23
# 83043eaa2f8c47de8016703a240a6236
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:24
# 7c73c8cb17f54d5abf2089ff5f855e2f
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:28
# 2e359ef4ccd042328de9e8103965d5e0
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:32
# 4cf81e179cc549b6b106a3db00dd4843
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:33
# a1e07e336b9c41a5a9da2cc7c77aeec9
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:37
# 683fa42ea23246148754ae34b91c2e4a
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:39
# c37a3f9bb75f4d2196e2b9a1aa9dae71
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block:"
msgstr ""

#: ../source/essentials_search.rst:169
# a8c5f3db5aac45d3b98468833addc015
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 047bff4230174f078b776e3e0ef33ed0
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# f068930c235449399ac395db49bc9906
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# e77d3c9002114995839e5fecc1536e5a
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 22fc0325a4aa4a868297c2db19cdb8c8
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 1fd71a6e60494e7e89705b6ba6f76a35
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:175
# 052119dc2daf45a1ba40b1fa4cd4326a
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# 618cda73c1844adfacd3a2ef2130acd7
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 6a6919e61c6e4dc0b05ff45de95ab60e
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# 1d20c18af89b4267b43efcc81d6f571a
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:181
# 72ea70099e474ea1b08d8b1cbaf6414e
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 1959e09bfa85486f8bf39d7bad355721
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 7172201d2b6c4469aa0349c1c1f5bd43
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# 1dc5ea62107b4db18dbc492380a61bf4
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 78c4fa46e4c247baabf8642fc9d25ca4
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# ad4911a7f5f1479dbe462f921468c1c2
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 82a79917583c4fa99df3ec72a237df58
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 78e372dd97ea4481861ec84ae1180648
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# fe9ce94154b645a783f2c517b9136d67
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 6edb60eda64f40908dc32565d70621fa
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 93a52dd441124d89b0e2395980ea68f7
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

