# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-31 17:02\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:33
# 4366cd5639fa485db4742a76ee1a50a7
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 01fc1c85565b4c09b1a2ce1019d660fb
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:37
# 120e970e3d0d4712b59bb0417763a7c7
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:40
# a44e4c7c847649819c4780221e248d8c
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# 200117fd66224da7b9777bb1be1ab752
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 8c0a8fdd32344ea0829e15b8184296bf
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 43737015222147088a780185607263d1
# ec5a9c531726430e9644dca05b0b43b3
# 3008262406d5485582f9aa67a57c6488
# 64302b30f1b34f04b83db82782066360
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# fd868f5ca1804ef2a758b3ed138604c0
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# b5a0d6aebe1e499f92d6e5351b7bad11
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 870666fb0245488e9b7cc1cea8e802bd
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# c25a16fa68e94e2188e0002081d66327
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 363ca8e05be94cab8ab818d81c1397ef
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# cb1e59e3279a47e6ac36681870453ef9
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# 411db78f57bc49ad81130fb02e90ad6f
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# bc4f2e1d92514c649a14fe5c2d7d94d8
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 95771cba26854276b3f7a7a933054789
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# db3b723cdc0944cb86e354d92d65f84a
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:44
# f267f57f0f704014b9f98e43109b455b
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# c7ad7de428444837810255b3d6e90fd9
msgid "|knife search|"
msgstr ""

#: ../source/essentials_search.rst:47
# 94b26d475ce641d08df8ee7f6a17755b
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 492acaad553f4a28844d2270652d87b8
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# f88d07eaa7aa4f558a493c793c198d5e
# b545ee5147fb4a2c80ed9debb4cdb89e
# b006276701de4c5fbf1b5bdd481aecee
# d0c381d4fb2345bebdea3a0c35c644f5
# 5875afe0e357493793c553435657c469
# 6d425836b5134235987869d726de83dc
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:51
# d73131167b7f452ebdbd6467502023f1
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 1c45f91a28744e2683f4001402dc3ae5
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:55
# fb661c91fd3d4c5884326c643f31b2c7
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 5df769270110468892df16ae265e184c
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:59
# 92f7ddf4ae444c3d9c47d02dc6734877
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# 81595f554cff4ff5b8f86b3d7526ce6c
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:63
# da20e3dc01824f3ca278036fa67f5c4f
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# cdd81dd55c7e45508856a11e8d508aa7
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:67
# 5a4109402bb544dab4bb059efa4bb898
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# e9adacd2bf1346f09b1107d426e741a9
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:71
# 2ea6d896a10d4e76ac00822947613d79
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# 6699595c948e4326b671b409209861af
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:75
# 9dbb8ddc1ba543b8aeaaafc60c4f7999
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# c862d284c82340e0ad6ff676732d6392
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# baaed3ca90fc4c5c8829f5b91334fb37
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:80
# f032185ad5224216a5aaf2c252529328
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 592944e5d3fc46b29d977a65b83b4d47
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 9d3c783fc5684e0b8057aab6dfa5cf0b
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:84
# 799cc7d02b2a4f81986e67aa39ab43a4
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# b827fd7367914c54a8b37072f4b3ada0
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 1c22326aeb724870a8b7a22563488ac8
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 5b89f3f2fa984ae1a8214dced5a395ec
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# ff4528cce5254880b0ed213cb1742012
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:88
#: ../source/essentials_search.rst:100
# 07e9992a6f8e45748357163f9c185667
# 6b61826c046b4e16932705959a3182f3
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 2f4c9defb2d44963bca4b2946fbd2e1c
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# df81657a00794705a686d4dc37dbae88
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 649ddc7468bd4a769f4f25b8535f9e1e
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 412d7d98ea6e44479c5297be05d7a518
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:92
# cbb3d44f2e4c42789e18d8d96bf6d1f2
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# f9dfe70fad4e46f588cb030df5c3fb07
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:96
# f0761ea450ca49ad91e105f2c744a3b0
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 4e287022b10849fda894bf117a2e32eb
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 6b72cd3f7061453ba788f1705f682e8e
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 380e98db51c347b9aa78b94a62f2a1a7
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 5b5afded70ea4200a3feae3cc77c4719
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 1223e9e2ffa94a07a5cdb54975478ab5
# 66c8809ae596460496c98433b7ac155c
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 98f418745ba34b80a778fc3cce3f2cf1
# 26dcd614c5354ee1af3e6855bbb99f26
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 647fd7cb233c47a78206bbec760ee245
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# caf81e6c20cb490586026bea9877afa4
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 498374e36f1d40e785cdf3fc8115edb5
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# 3646b45422be4cc3a34f2672fa4fe7c5
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# e1ec530eed304949b31a2f31cd4ff99b
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# 1b1c989edbe84875b64dfcb7864668c9
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 163133d7286b442baaa93eeedfec4b37
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 7c9ab60f6b5b4f73a9ba95773aa13301
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 9890d2b99409440bbcd7ad0e0fbf1853
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# 2cc0ecdbb54947e5875d2547d5a809b4
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# e3af1573f3ec49b3afe328f0b8857430
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# d173165b820a448fb919f4ec1acadd71
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:112
# c3c22a02a4da4dd1ab5a3e0702f6e622
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 98aaeb6137394112b6fba7eaf4c3bf8f
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:116
# 9c7c896c0e604b81b9bd382026bbf05d
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 6c986325b7794e959143bed82cd75a1b
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 950068bba7c94fb39dfd3b95f11fcc08
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 88b04efcabad4eb8ab11f9fcb1776b4c
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# f1db29609728415298478c2f71f11b8b
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# c378df837f844389b3f88b36a2b93117
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:124
# 0bbac86ff7954926baab82a3201d8f94
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 3a2f1ddbe03d4cab9a8d78660738ebd8
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 34dc42fef9084ffe9e81f030f506e314
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 28c028aca14a4eb590f09c9c630b3c7f
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# d87daa33956a403fb87a4aa2375ade50
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 3903812bc28141e787a0c1427ca1bf1a
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# a5c5b87cd5f044e4b4cde311cd1e79cc
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 306b6ca9f9d446e0b2ce308be9800a51
# f634de390a1c46ef957523cdfeb493ec
# f891e92ea9784fe58931a2d32d8854a8
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# ee6cb95163f9454ab06d011ef4286132
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:132
# abe85d12efef4fad8bbddc28dfa7ee19
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# a25ad553aa44475ca09835fbd6e2445b
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# e546862163f849cbbb0cad40651746f1
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# e76b40355b174a5485aeccc07ad58843
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 503cf7f67e434f3f9149529fa0ae701f
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 0265411017994abfaaf5e61344b1fbd3
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 37c39d830c4e4ef2bb262dc554ba10ea
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# 477d2a3a29e7480c817a2fe0371ecc75
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# ebeeb6a0e0194cbd85b69ee6331a29c5
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:140
# c52f8ef13e4641e48bbd70a0abe5ec29
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# c507a0289b1b4a7286ce76dd21967258
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 92fed3a5332d437cb05e7d2b42c0eca1
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 37b750ddcd424d0e957c3cd4ee766faa
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 77c94d1d39f84baa9e27a2cb273471fc
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:146
# 3da070e065ec4419b575a9273f014e09
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# e932354b41b04b3c9495d3baf7d18f07
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# e0689b203d0248b69ca230f754ae8d99
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 559652f2beb64072b298474cf8f8e6a1
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# df68bb4b124747e9906abb1f13d6c7d2
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 8b21e9a3aeae4cbb968e9c5b7c229f20
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# cc7c0f5505ea4b62ad89881b824b2ad7
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 640d7f1f54bf46178f4e232f805adb5f
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 35fb3fbbf24141ef8ba98fbd52b9ce38
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# c232dc6d45934e87acd3ed55b5bf72a1
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:150
# fe0a870281fe4037bbb25e7aa9896297
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# a3cdd7907f4f4923b4ad8ddb51352d01
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# bc3ba544a11848518060f98c1d7729d0
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:154
# 566af4ed1daf473299045e32bcc11690
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 084e66485610455ca53ce8a8e4fd4d63
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:158
# 68a550fb9e0f43c98c69bb71b01bb5e8
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# d9ce9bc4d43d45709505ea1f4f5d212a
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:162
# 590430c6a377465a8ce7786ce9ec319f
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 3f0e9038e87743e9a7851e01ee1c0000
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# d9e172620a7a475bb517959e0d42240c
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:166
# a3d503d25ede431da94ffd444e92c3b9
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 3f0dbfed18a448fc92075cdbe9e4ab19
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:170
# 882a6d381d494663a58833c9d44d1d05
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 6e3584dc3f7b42419be490638a69747f
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# d93879ac6e8c48989bf743ca37d0a8a4
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 9b28e0b052ac4ab8ba0362a0769f65cc
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 3f35dc91d8484faeb3f5abda826b49c1
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 946732762ba04f7f923b9be6e9d974e6
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 7b1eb84d22b645489a3df93dd74d207d
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 174a59b203654167b1cab0b92bba9477
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 76a9e40bc7ba4ce7b56644450cdbf671
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 3fc4549ec0ac4c97bd51c97ec2057578
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 0ce5033423184bd1a08a8b434e5b4272
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# a1e2dfcd96f04d34b702c4fa5f3a4821
# 580f8acf00b548ed89eca744de305f53
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# e190dd44eb7f41e09997680bf53f60e8
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:178
# f662512f0e714d4d983c63e278ff59c6
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# 4e1d7888e5a54ba5a63e6c6e4f4b0247
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# ce3fe39a60f44dca938b4a8c872b8a00
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 4b9dcd17958e481183187715dbad9330
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 70f104a1d9f34cca9b0a1544dfab1e6b
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 7f09d55ba3ba42d285892d6999e786bf
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 02e0a406ceae4b7ea93d224a91be46eb
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 2abd9884354d4163ac4afd79bc6d3434
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 0e69887f71fe4b168fc0639d82d852bb
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# 53a056a4b9c64965acfee28c0ebcc49e
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# b2f9476ab6454c298c884d47b8d20647
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# e5ec8097fb594458a9db54bdf50ca4b4
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# e49776b3341f473aa52e0328b21423ce
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:182
# daff388445ff460887bfc5d2c39b636d
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# b62c69dfdccf412fb11c5aee9f875257
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 3b5bfd68cfc14f4da9947e22057b9ac5
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# 3459b1961b514a93bc490d1958a50436
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 9a1708a8848c49c095c7dc9782d4589b
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# ae5dacbbf86343518d057a564dcbc2f9
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:188
# 2536fe3843f949a79f42eaa39fa54985
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# fd0617387f494109a31c22a8cc5cf337
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# b9f93fd05d7241d89ef37f72de363732
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# d34a56d49ee04456a25618d664ea1520
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:194
# b0b7c82f57074788b1a9fe35f9bd5efa
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# d7ecbf14e5ac4d24895d825e0c75d361
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# a3b5557b6e31463eafe3c3708f98f423
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# a342a086b08e48f3a5813a41f8ecb800
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 1d7a1502e3a74cc199af15a0883003a9
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# cef0ed3b3902491385e30c8587c16f16
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# f08eba4f80184f1fbb2c0b8bf4a4a2ca
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 7692ed637fb94567b2f92ba47954eda4
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 41736293a0d641a0b04861dbb0982c12
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# c222bee6f02043409996b79f0b2b2308
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 12c18ef52cbd4fe7a8cd8bfe82df2ac4
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

