# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-05 22:37-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 145a2af52ab54b1ea211d921036a8447
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# de44f178330042e1bf628a5f940b121d
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 588a248159d24e828d2f94313630173f
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 288b43d15f214dbbbb3742fd87f80c57
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# c4768064f14e4e87b5794bb8881711c0
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 91187cf767cf4ac78479c2174d371cc4
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 6c45c8362a82413998830ab338a3cad2
# f74f0da604c14ab08bbd79b917f5cb3f
# ca480073a7544413b0466fa4d58e2bcb
# 2212474154d442dbab6a12bdb69c8ff2
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 891249214c234d14b1db6af6636320e0
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 484fa16180294abcbbf6093ccaafbc36
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# 73efa67e750144fdb4c2461c57d98627
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# bf5da37c0472415ca9fddfa3ee0446d4
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# c795398bda5b45ebab21e0550054efa1
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 8afad2d5008146d785c15d4e69fbe474
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# db05d33b47394ca4ae72c29c9f1b0578
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 49666fec0e8d41bfa4919117da2567c3
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 3de1f27e1b514d65889d6567d9324e42
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 2ccfba92853c4c2eb2f472f7b685a98f
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# d9bdf8bb12aa46a194967a863b8ecb94
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# edf30585d72346d6b125e7c845b70044
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# 66c0d2b10cae416a8657cf923c834ea4
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 19870ee5cadb4758bc7945d7bc624548
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 4bc7a67e36ec48beb4f9227cb2740cbd
# 59d7de4d72fd4220aa3c59b245518e27
# 814e9458eec345509b75caa153329fdd
# 7bd1b2cec0ed4c79bdc089d8584c4a63
# 6907b9039905436bbeb63f8f727ce257
# b3174e45ea1d4a21b8078dd978bb7d99
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# cd090795c13b43bf8dbcf29ce0d8e4de
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# 5d884288637844aaa59628dd7e9127d6
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# aaf298fbd84d418f9cfc01ffd7a24fd8
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 62d51f0abac54f49bad1c2eb77eb7dbe
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 89e89d4655874741b6868b737fc8eac4
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:4
# 8d290e7cc6794b2b8c81e0a26ef011d9
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 9b35525770834d6f95622b5a1986e858
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:4
# f02fe537336a4595b8af399382f47be6
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# 2296046a485042d59bac6a548317f326
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 0ccc6161325743ee9a15fd14aeb6705b
msgid "To build a search query to use more than one attribute, use an underscore (``_``) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# de8fb16107794c7da5be0a5bab2aa68a
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# ba5b79db649c473a8427fa95742298a5
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# d9bd3865e8094dc69563047001f6378b
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# 86ad8ea68a974a0aa323ae78827b34c5
msgid "To test a search query that will be used in a |subcommand knife ssh| command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# faea5a4cc63844df9add59b970176553
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# 25b8e4f048044180bbe7e0b2cdd5b218
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# e7371a1b081841f0b018c62374a9507a
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# c1cca49795db4d2f97e3d744e4f73172
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 076d4958ea784b3fb7494527c347a534
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# 0d2f08c96bee4fd6bb8a4f1a3ebfb7bc
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# 4e4e7520cc9e4309b902f694bc5187fc
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 64b0a1fc9b9847f291a878851df62b10
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# 34a8967ef02448c3a751459de2f0df0d
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# a5c8db6975ae4824a42ad1bd2b084f47
# 02502fe4a10b416aad3d7a264671f797
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 7c0d6b12ed68439987d8a2846280eafe
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 07a28e520cea4f49aba4f221dd6ca661
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# dc387ee8de634607ba2dd4b5cab15635
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# a54a45735e124bd38e38eb161467955f
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# 93a68301b254473e9bc243b2cb4094b5
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 851d50308812474485f5400ee1216b7d
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# 948207f3bf7c40579a304541d29e1afa
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# b6cbee3baa034eefb3bac6223ef9ecd6
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# be62fceec91a4da8acb4e380e2465116
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# dc97e8bdffc34bc9b1e96abe85638394
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 6d9cb68beed2419c96496c881a5f32f1
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 186006227c21425f860cbba957d41a44
# 06b91080f15f4e8184061c716f6060a1
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 56509c38a3bb4f00b0df48d10c8f345a
# 169c03b2ecea4734b02dc69c2b1a8263
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# b941bbdbc74b4e6d976fd53e2109be22
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 3d33ca34c7e8440c8f55fad3173bf9dd
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# ba3fa3efa26f444ba9cfa8b44fed09f2
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# c5697b13c80c41e297eac759d5dcb2a1
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 2f8d5562e18343a395658890713b507a
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# b88aea09bb7f401aa3b914af1a679e0f
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# 54abe8bf95374cb98cf26154aff5dbdf
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 3eb5c78e69854b6cb43c3a6b8ec70571
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# e1cd5eb702ea4bb9b57a4cebf8b5feb6
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# a2b1252e34444a319f722156ff6e4bfc
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 36166f487cf64078a1da49d289321759
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 91f897675ab54106b62315a5b03255bd
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# d41501a414274e17834aa00da8c7ae31
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 726476d4cfd64f74882f47935fad396d
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# cf407e064261459d8ee1eda62ca9de43
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# fef12fe653aa42a2857bfde0f5d0991c
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 0522ce8cbdcd475a8a5adb3b40eff1cf
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 74650226a7f84aaea79012f5fc69ef95
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 272818124bec43d3a98fe0ff256dfa70
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# 16a12229c410425eaf16bda5139ea8b3
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# da9f49b92ada439ba5f37c9562167e59
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# aeede0acff514018a213b3feffe70e6e
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 3fb215d51149476e84c2c5617f33e191
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# e69ca9b7566941839921c732c0cf301d
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# e6a36c89f87340c9a345a32c8514e9d8
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# d2b46bb8f69c489d93efb22efb269b62
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 2fcb2918231c4e6e9128cb490ca84f63
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# d6eb8a6817464ae3965610a657869bab
# 2d22ea2cf04e40e29c7ceb11161462f0
# a1df59af887c471cb8ddc7c93f0f1591
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# dc3b929bd0a84a2d8440354df141c212
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 3d12831639754937a6cb1ca658718f41
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 6c24392f08c9470abdc8655cdc275ca4
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# dd1e18e021904aa5a0e0832f8e4b3334
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 0582dfcc7821455a8f804e502e633db9
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# 41969dc545194579ae89634b64ce3232
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 6006714ebbfb439a8ef2a66455f29b66
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# 37ae754d068e48e58043d680c2317822
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# c148877d87fe4a5fb79398117237cbd9
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 677e332e1cda448c980c504c4d22855e
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 39602b83425b4924819c63f403085b4a
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# d9b2bd128c0e4b9597f90d53653f22b5
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# 5f865d4bc8fc413b89ecd718bfa5c72a
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# 3c38c52796d847a7af1eb941f8c828dc
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 26a77921733d44db861ceae1b9bbabd7
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 1d9aa270a6fe4aabbba2dfdee0f07d23
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# a9c7ab5f8f6243198a8d4b8dda62324a
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# d4deb0b26d414c6d812972853a317378
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# d82cf3b612424828a14da2f6d2639845
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# d3c345ded9394c37968aed5ece0df600
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 31995937350a43d7b1c1620500ea3bd6
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# f30cd0d8baeb40569df15a1702870e05
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# be1364ee5a884b18aafca8e128775477
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# 82ddf918d7394e848b776ca6d07c4001
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# 8a86ff37d14b4cc0a8486ad835e082c1
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:22
# d600651b39004b02bbc682d785b1a831
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../source/essentials_search.rst:125
# 071c9bfa812c4f88882a22c6652d47ba
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# 3d4c35ac7c4a43aebd58d866bf15bac7
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# 8f7475f8314645dda0a09e54d5c2620a
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 8f98f2b763cd4ec6ac25d3e69a2f3ce0
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# 6452e29f663f4f0ca419139572418c89
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# a888653a6f0d48ba9027ca776a45a245
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# 2506371be3ff4561adaf8276b13bc450
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# 15ccb013aa20447db3e39d2dfbf58ec5
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 8c12c7ab9b9949728a7bcf5e878fa4c9
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# 4d9e7ae244f84f0ea83879c9075663ee
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 787b165958264921bc2aa238750d408b
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# f03c50eb271540a684ea470338b02ed9
msgid "A search target is any object that has been indexed on the |chef server|, including roles (and run-lists), nodes, environments, data bags, and any |chef api client|."
msgstr ""

#: ../source/essentials_search.rst:145
# 94ec3278996646e8b1f46cb1fb883495
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# 0f31cadc346347eebdab2410c53fd17b
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 1c2efbeaaafa494db6ddcd80cd7f2a4a
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 749390d2d4ed459bbdaa4688b87d8e33
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 6d45a4cf23f4418b90eeca3d92c2feb5
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 62d05681f6d14ebf9ea54531ca1639a3
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 960a41449f494d0abeeb72df41a25fb7
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 988c6a76426242bca41c5fcc95907594
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# efc72361b72a49aa9137d6b71ca9400b
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 8f09fd7763244d208af98042cd9d41d2
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 8ddb23ba580c4279970fa86b46627ccd
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 42fa0000180644a98ae4e723b85802de
# 9616281e1fa24bd28b1e91654d4719ea
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# a671d95f2a55486b8a6f0a332eb511fa
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# de25a3ca046947039ed3aede4f0d187f
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# c00ba905e8d74b6f850f30a11a32ccb6
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# 5a9b17954b6b4640afcb78cd6af8b8b1
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# 94c6f24487b7488285e32f5ac9406435
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# 25a4437d6aab48668828db6c735f6883
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# ccb84f4a4938454c908da535da4b49bd
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 9360f4ae0eaa4106a148581c3770cf95
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# 6d2482c644c242acbf2c9b8636c20a04
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 4a59392947804ddaa762bf9a26018d03
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# f8e32cbe33174c80a7a56155b46e8da6
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# 91af8f90ed704c18b4e4287c4c44c677
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 41cb4f7d9d6543d5a544cf7e0278a881
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# a1d0d74cd1db41a1854e1d5e3ef14461
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# 9070c4c3bf304d69a43cf9549234fd40
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 43668181b2d648a698c1598f408b68fe
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 4fe45b076cf2402fbd9b0adadaaf597d
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# e2b4cc72a55940a5aa4826267c0d984e
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# 30be41e81b364dbbacaf84d02d7ec49c
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 8e7ba8a667b54b23b20ff5ad561d1b36
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# e1210c8b3ba349c28dd9ff6ddc7abc7a
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# f923a48376364f89ba771d38fb37bcff
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# a7738ff6698c49d2869921e69d98b53d
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# ce9bf8a84eee4b599835b7117504f4e8
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# b86ba12fa37547cfb525aac29446a046
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 309d11fb5ed042898a418a2efabfa15e
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 0de6dbbc62d24c0990544ec054de6b9e
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# e6b515c45aa6416e914615219e0a6c4a
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# ab44490793c848f285cf6a9fb90d8891
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 984e14003c254a66a2612430efd28728
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# 7d4f13ba49494830bb8fb91c8f09b818
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 4f374ddd1c8748bebef8be42b01db93f
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# 9ed1e3835fa54d86b2fa325017f5a7b3
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# d5d4b2c2f8a94342b8d813a7b986a5b7
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# d754b35f09a14e5ab26444d3f9cc5d02
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

