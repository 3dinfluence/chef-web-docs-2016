# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-20 14:08\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search.rst:8
# 2c8718cbc52a47e999ba1321a03339e3
msgid "About Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# 7641e57062414baeb12eca8fb2c1aef3
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, by using the search functionality in the |chef manager|, or by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/essentials_search.rst:12
# 793fce9fadda4e299696033160245fbd
msgid "Many of the examples in this section use |knife|, but the search indexes and search query syntax can be used in many locations, including from within recipes and when using the |api chef server|."
msgstr ""

#: ../source/essentials_search.rst:15
# 4c610dcdcb23455e834898e1437b1b46
msgid "Search Indexes"
msgstr ""

#: ../../includes_search/includes_search_index.rst:5
# b2873774eef947af803ff40f6be18785
msgid "|search index| The following search indexes are built:"
msgstr ""

#: ../../includes_search/includes_search_index.rst:11
# 868fcb39270a4fc888b44fce8da0cb22
msgid "Search Index Name"
msgstr ""

#: ../../includes_search/includes_search_index.rst:12
#: ../../includes_search/includes_search_boolean_operators.rst:12
#: ../../includes_search/includes_search_role.rst:14
#: ../../includes_search/includes_search_node.rst:20
# 7e5df9440e1b4d0da1f42ab2391061c2
# b741400c4a1b44dc94ab91f5b1be1b4e
# 003ecad759ac4ac9a6c1b6fde0e0755a
# 3531f326a2e245999572d48d043b1e2f
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_index.rst:13
# 7546b58b3a9544d999652c303c3c20fb
msgid "``client``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:14
# 1a37a2f767904784bc555661e13db5a0
msgid "|chef api client|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:15
# f11883631ee74b10a18c652b235c32a1
msgid "``DATA_BAG_NAME``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:16
# fd481ac351fc459c90ff33fcebb55eab
msgid "|search index_data_bag| The name of the search index is the name of the data bag. For example, if the name of the data bag was \"admins\" then a corresponding search query might look something like ``search(:admins, \"*:*\")``."
msgstr ""

#: ../../includes_search/includes_search_index.rst:17
# 36f445ce82ab44b6a7307f4b82656866
msgid "``environment``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:18
# 06e48202a361475b83f1a8246ed04819
msgid "|search index_environment|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:19
# b74fff4b8462441497f08b03841fb328
msgid "``node``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:20
# 95ff28fa9d0345469db4f2b170697763
msgid "|search index_node|"
msgstr ""

#: ../../includes_search/includes_search_index.rst:21
# 4c92a19dadb04063ab401c0f1c8e09d9
msgid "``role``"
msgstr ""

#: ../../includes_search/includes_search_index.rst:22
# 6f3bb287d69b4929aa4a335bad975fda
msgid "|search index_role|"
msgstr ""

#: ../source/essentials_search.rst:19
# 41badd85495b4523b659dff8441e54f7
msgid "Using Knife"
msgstr ""

#: ../../includes_knife/includes_knife_search.rst:6
# 62830205a90640e487c71cd2c60a2d8c
msgid "The |subcommand knife search| subcommand is used run a search query for information that is indexed on a |chef server|."
msgstr ""

#: ../source/essentials_search.rst:22
# e431718e04094b6f8c131f232d0f1a9a
msgid "**Search by platform ID**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:4
# 06b0d4db0dc149f9a88ce962855efd29
msgid "To search for the IDs of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_ids.rst:10
#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:10
#: ../../step_search/step_search_boolean_and.rst:9
#: ../../step_search/step_search_boolean_and.rst:31
#: ../../step_search/step_search_boolean_not.rst:9
#: ../../step_search/step_search_boolean_or.rst:9
# 7f9d4ac8f5df4ce7978cb9d97bdd11c9
# 9fd7fe086248451193b5440ea24d4740
# c720ad717dbf4c678a8f06857cb044c1
# cc5b9aba6d0a4ff69c3d67c35ea76967
# 7e7285bc9572447c85a155df8cbfedea
# 234838baca194f7d898ce8c8c4a225f2
msgid "to return something like:"
msgstr ""

#: ../source/essentials_search.rst:26
# d405534aba6d4cb7a986384d4ce50d9a
msgid "**Search by instance type**"
msgstr ""

#: ../../step_knife/step_knife_search_by_platform_instance_type.rst:4
# da1ffb40c03c4664bcdf535471c539b8
msgid "To search for the instance type (flavor) of all nodes running on the |amazon ec2| platform, enter:"
msgstr ""

#: ../source/essentials_search.rst:30
# 220aa33f764349b1936586b8365b0f5b
msgid "**Search by node**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node.rst:4
# 944ca222e7d445dcaea5d60e6dd11c0b
msgid "To search for all nodes running |ubuntu|, enter:"
msgstr ""

#: ../source/essentials_search.rst:34
# 0a89b8584b544c009d8c479d7b4ed9b5
msgid "**Search by node and environment**"
msgstr ""

#: ../../step_knife/step_knife_search_by_node_and_environment.rst:5
# d535678099e14deba6b3ef87149fbc3b
msgid "To search for all nodes running |centos| in the production environment, enter:"
msgstr ""

#: ../source/essentials_search.rst:38
# 9743ce72c9d4474b8b0a559a2864f438
msgid "**Search for nested attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_nested_attribute.rst:5
# c45bbc40a18948559395a503778114da
msgid "To find a nested attribute, use a pattern similar to the following:"
msgstr ""

#: ../source/essentials_search.rst:42
# 1ab098d1fe0d4d7ea8edf9560805b894
msgid "**Search for multiple attributes**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_many_attributes.rst:4
# 910aba22f1d548df9ad9cddde38f64c1
msgid "To build a search query to use more than one attribute, use an underscore ( _ ) to separate each attribute. For example, the following query will search for all nodes running a specific version of |ruby|:"
msgstr ""

#: ../source/essentials_search.rst:46
# 1731f994d61442fca06863a52b337481
msgid "**Search for nested attributes using a search query**"
msgstr ""

#: ../../step_knife/step_knife_search_by_query_for_nested_attribute.rst:4
# d5a5aa552ce743f9a3e9cf85b2825e31
msgid "To build a search query that can find a nested attribute:"
msgstr ""

#: ../source/essentials_search.rst:50
# f88850eb152d4638972ac3b958e2b053
msgid "**Use a test query**"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:4
# d44d1be0e8ae4e2cb93992a5bf35fe97
msgid "To test a search query that will be used in a ``knife ssh`` command:"
msgstr ""

#: ../../step_knife/step_knife_search_test_query_for_ssh.rst:10
# 8aaba074c4cb472487e56e08149a9cae
msgid "where the query in the previous example will search all servers that have the ``web`` role, but not on the server named ``web03``."
msgstr ""

#: ../source/essentials_search.rst:55
# f667575350bc430fb303a7d2791cb2f6
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# a578928ac39e475a9fa86e80396cd44c
msgid "|search query syntax| A search query has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:9
# 483eacef5ddf41b2a9696e0aa34aa87d
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (*) (and as long as it is not the first character)."
msgstr ""

#: ../source/essentials_search.rst:59
# 06278f7cc2e3407781dd47eec8e6e031
msgid "Partial Search"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:4
# e4f895a1ffd74c18a17f89a37f555042
msgid "A partial search query allows a search query to be made against specific attribute keys that are stored on the |chef server|. A partial search query can search the same set of objects on the |chef server| as a full search query, including specifying an object index and providing a query that can be matched to the relevant index. While a full search query will return an array of objects that match (each object containing a full set of attributes for the node), a partial search query will return only the values for the attributes that match. One primary benefit of using a partial search query is that it requires less memory and network bandwidth while the |chef client| processes the search results."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:6
# fa993bb73df64d28a3f4bc977f327585
msgid "To use the ``partial_search`` method in a recipe, that recipe must contain a dependency on the ``partial_search`` cookbook."
msgstr ""

#: ../../includes_search/includes_search_partial.rst:8
# 0042284d51ba4399a269e9944a3c8238
msgid "To create a partial search query, use the ``partial_search`` method, and then specify the key paths for the attributes to be returned. Each key path should be specified as an array of strings and is mapped to an arbitrary short name. For example:"
msgstr ""

#: ../../includes_search/includes_search_partial.rst:23
# de8c50f56f6f4e718fce0bb6ecc9be5b
msgid "In the previous example, two attributes will be extracted (on the |chef server|) from any node that matches the search query. The result will be a simple hash with keys ``name``, ``ip``, and ``kernel_version``."
msgstr ""

#: ../source/essentials_search.rst:63
#: ../source/essentials_search.rst:75
# f6ff94feb0e94c109f7d704acd764b5f
# b6d6655a4e9a4815976af7a091b377cf
msgid "Examples"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:5
# 46633092da5e467a8e9a5145c7d57776
msgid "The following examples show how partial search can be used in a recipe. First, a recipe without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:26
# 7c178be3978a4bec8b20915be41569f4
msgid "and then the same recipe that uses the ``partial_search`` method to provide better and more targeted search results:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:65
# 05ebc67ad533495ebb9892270ea48e5a
msgid "And a different example from a different recipe. First, without partial search:"
msgstr ""

#: ../../includes_search/includes_search_partial_example.rst:77
# 666b99c99cee4819b279ae19c99c0fd0
msgid "and then the same recipe using a partial search:"
msgstr ""

#: ../source/essentials_search.rst:67
# 8e931d4b6e3f457a96ce939d31c3e36a
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 8443b89eabd14defa5c604b813c17d86
msgid "|search key| Any key that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched. To search for the available keys for a particular object, use the ``show`` argument with any of the following |knife| sub-commands: |subcommand knife client|, |subcommand knife data bag|, |subcommand knife environment|, |subcommand knife node|, or |subcommand knife role|. For example: ``knife data bag show``."
msgstr ""

#: ../source/essentials_search.rst:71
# 455d59a6f8064c608359532882644245
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 17ae6b1471bd4af5b6fd585355b13a63
msgid "A nested key is a key that appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 1c7f447c66244861889c94928cf56c3d
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 5e995914a46047ce8d936f10b3cbd6c9
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 5edad64810b744a697340fb6ae0b30a6
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 620efe87fc434daa9d3c798705011543
# 94fdf92e4ae8446a9a02fce7f1b0b1bd
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 31bf5dd24c54477782da3fc159dd9484
# 61b15ad218a446118db99fc5dbe86fff
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# b9929b6d350f492baed47aab3139fbae
msgid "This data is also flattened into various compound keys, which follow the same pattern as the |json| hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 31407aa2364a425194b009949aa39183
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# dd2703f41981439b9a4292c57859798a
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# f239370938e14c98b1141a5c5e90c431
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../step_search/step_search_key_name.rst:3
# 41f1f131b42348fca8f1bd14c19c94ec
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../step_search/step_search_key_name.rst:9
# fea5cf0d40934e55a2fea742d2886893
msgid "to return a full |json| description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../step_search/step_search_key_wildcard_question_mark.rst:3
# df229053572245ccb3ba6de9992857e1
msgid "To use a question mark (\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_wildcard_asterisk.rst:3
# 488c22e6b2954cd8acca801d08cc8f90
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:3
# 3ca3506f716445c182761ef2623818ed
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_starting_with.rst:9
# fb1d8efb007249c2812c8ee22867686b
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:3
# 2b18a7db9e40477d9dfaf02a3e449920
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../step_search/step_search_key_nested_range.rst:9
# 24e2bfa2b393400b848300df200e0295
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

#: ../source/essentials_search.rst:87
# eb09fe3ac8434e1fa8576517f281e824
msgid "Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# 297895934f504812a8708b9b24beacbf
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/essentials_search.rst:91
# e4ea795443c94ee890b8105b92ff94b6
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 31c81c044cd243ce95162dec0145a548
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:3
# 5bc959c4e5e74614ada5ed2b41dc95c2
msgid "To search in a specific data bag for a specific data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item.rst:9
# 25fd0ef25b204556a0bb31467a774e8f
msgid "where ``id`` is the name of the data bag and ``charlie`` is the name of the data bag item. Something similar to the following will be returned:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:3
# 76e5d60f24274e66ba17c5f2477780db
msgid "To search in a specific data bag using a string to find any matching data bag item, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_exact_key_and_item_string.rst:9
# af67ec6197d64a9797e215b45f08e19a
msgid "where ``comment`` is the name of the data bag and ``Charlie the Unicorn`` is the string that will be used during the search. Something similar to the following will be returned:"
msgstr ""

#: ../source/essentials_search.rst:99
# eefdf9fcf6bd4ae5a890fab9039ea35c
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# c887e3af8b51450b84d97d8be23bef71
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# eff73ffc9a924af4bc95edf1cd6ed241
msgid "A question mark (\"?\") can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 2d364866a4ad4be5858b7e4999e3c051
msgid "An asterisk (\"*\") can be used to replace any number of characters (including zero)"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:3
# 5517f35ca6db453c98051a5e98d93b51
msgid "To search for any node that contains the specified key, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_any_node.rst:9
# 95f813c79a7c4c529e6d6b21531f0d1f
msgid "where ``foo`` is the name of the node."
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:3
# 715259f1db6146af82458fd6b8b9df8e
msgid "To search for a node using a partial name, enter one of the following:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:9
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:15
#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:21
# 369ac896088d49cc9e4984d617718dd3
# acc447026121451f8fcecdfaa0d11881
# 8c1d63cb07bf4e61b053e4c89fde6112
msgid "or:"
msgstr ""

#: ../../step_search/step_search_pattern_wildcard_node_contains.rst:27
# c339315e4cfc4ef28247fb7345009cde
msgid "to return \"app1.example.com\" (and any other node that matches any of the string searches above)."
msgstr ""

#: ../source/essentials_search.rst:107
# 9cc9acaabbe64b43aed895e9001829ad
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 8a78d587c5034ac09160bd886ab4c321
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:9
# 5e22d10bf4ca495d822a86d39e0555d8
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:3
# 1fdcdfc9d421495384c3df657b7e3929
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items in-between \"bar\" and \"foo\", inclusive, can be searched for using an inclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:5
# a994d09fde1f4a9cb2ebe010e8ba55bc
msgid "To search using an inclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_in_between.rst:11
# 4f4b3716aca142138ebf082d84a3a30c
msgid "where square brackets (\"[ ]\") are used to define the range."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:3
# f1d56eaec811443ab658a3411828193e
msgid "A data bag named \"sample\" contains four data bag items: \"abc\", \"bar\", \"baz\", and \"quz\". All of the items that are exclusive to \"bar\" and \"foo\" can be searched for using an exclusive search pattern."
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:5
# df81b6ee75924ac6bd4b41d9a09d7a1a
msgid "To search using an exclusive range, enter the following:"
msgstr ""

#: ../../step_search/step_search_pattern_range_exclusive.rst:11
# 5c17a1789b7a47c0bbcbbd680efb4f5d
msgid "where curly braces (\"{ }\") are used to define the range."
msgstr ""

#: ../source/essentials_search.rst:115
# 2f020e1cd17349cdb7c52b13b1b869f2
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 84e3c02705ae4169a9c54fef810f5bf2
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:9
# c25e4a71b3a34849b2ee72dcf0f29711
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:3
# e8ce86978b914b1bb7cec029bf4ead13
msgid "To use a fuzzy search pattern enter something similar to:"
msgstr ""

#: ../../step_search/step_search_pattern_fuzzy.rst:9
# 577c2299c7f241e986de38fb4c046cc0
msgid "where ``boo~`` defines the fuzzy search pattern. This will return something similar to:"
msgstr ""

#: ../source/essentials_search.rst:121
# 3208028bfcc44df0bc4bc8cf2df127de
msgid "Boolean Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:5
# 0266f03d9b924e1abada60f65472c44f
msgid "|search operator| Searches can use the following Boolean operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 54fd9f037f124c2c97a5f7c6e27cfab7
msgid "Boolean Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# 3c01536ccbb344adb0b543eb4afcca67
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# e160d1ab69be439b8bb000e203842449
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 380431d9b28342ad9c967db95f0f2460
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# cd91bff8b20e45aa99e6309ee473a80e
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 0f1f3568ce934297b26b0c5d9094e7e1
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:18
# b1193677b0f843129db236c092b52ffe
msgid "Use to exclude the term after NOT from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:20
# afec3e72bb344c628489ede5c9e6f8f1
msgid "Boolean operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../source/essentials_search.rst:125
# 0b23f78bc07a47edb4208843dd164457
msgid "AND"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:3
# cf3d58d44e6947609d9d46f16ad93a49
msgid "To join queries using the ``AND`` boolean operator, enter the following:"
msgstr ""

#: ../../step_search/step_search_boolean_and.rst:25
# dc353c4da9b047fe965ef4537de1e7cc
msgid "Or, to find all of the computers running on the |windows| platform that are associated with a role named \"jenkins\", enter:"
msgstr ""

#: ../source/essentials_search.rst:129
# 5bd9367c26aa4b228b8a92b074829e42
msgid "NOT"
msgstr ""

#: ../../step_search/step_search_boolean_not.rst:3
# b1464e5b01b444eba88f8bcb3f8bf6fa
msgid "To negate search results using the ``NOT`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:133
# b0a5e042f6bd4f918ba30fdbf30e2828
msgid "OR"
msgstr ""

#: ../../step_search/step_search_boolean_or.rst:3
# b64f9f09bc0b406f8a3f49511cf6e6c0
msgid "To join queries using the ``OR`` boolean operator, enter the following:"
msgstr ""

#: ../source/essentials_search.rst:137
# 845d2bbb1e644fe0aa18503ee25dcea6
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 2bbb12d602f14f2da98e7851d9b2c374
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (\\)::"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:9
# f40a6aa7fa1e499c84fc889017d768e2
msgid "For example::"
msgstr ""

#: ../source/essentials_search.rst:141
# 6fde5aa8ed914b9eb5a430371ac4f88b
msgid "Targets"
msgstr ""

#: ../../includes_search/includes_search_targets.rst:5
# 8b2331cf54a34800881a2b3861e245b8
msgid "|search target|"
msgstr ""

#: ../source/essentials_search.rst:145
# d185888a6c6b4d0da1398f0f38a6cff9
msgid "Roles in Run-lists"
msgstr ""

#: ../../includes_search/includes_search_role.rst:5
# d489c3f403e540808367017797580662
msgid "A search query can be made for roles that are at the top-level of a run-list and also for a role that is part of an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:7
# 7d2279ad8fab4836b96effd3554bd094
msgid "The ``roles`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``roles`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_role.rst:13
# 2c8bdec258b743ffb5e0c256b35a2b30
msgid "Role Location"
msgstr ""

#: ../../includes_search/includes_search_role.rst:15
# 0c4c0c93346141aa91028ce4c389ab1b
msgid "Top-level"
msgstr ""

#: ../../includes_search/includes_search_role.rst:16
# 28a03a4ae05f4126a47428f738f5b34e
msgid "To find a node with a role in the top-level of its run-list, search within the ``role`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:20
# 6f41f04c5b7849a6904a3161a2e4a3d6
msgid "where ``role`` (singlular!) indicates the top-level run-list."
msgstr ""

#: ../../includes_search/includes_search_role.rst:21
# 17a81660f55e4216b5869eeaf4e1373d
msgid "Expanded"
msgstr ""

#: ../../includes_search/includes_search_role.rst:22
# 3d62699cfe8b432b9826742c8d68b8a3
msgid "To find a node with a role in an expanded run-list, search within the ``roles`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_role.rst:26
# 821c9d8700f2434298b6fce2e68abcb2
msgid "where ``roles`` (plural!) indicates the expanded run-list."
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:3
# 68a019b2030c4e2a98cae39d3aaa0c14
msgid "To search a top-level run list for a role named \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../../step_search/step_search_target_role_top_level.rst:9
#: ../../step_search/step_search_target_role_expanded.rst:9
# 14afb8f1530d4cccb6d822c2df07ce91
# 9bded85584b8422b8991a0ba3df5ad85
msgid "and from within a recipe:"
msgstr ""

#: ../../step_search/step_search_target_role_expanded.rst:3
# 6d01799055c843de89a6e5e506ddd0a6
msgid "To search an expanded run list for all nodes with the role \"load_balancer\" use the |subcommand knife search| subcommand from the command line or the ``search`` method in a recipe. For example:"
msgstr ""

#: ../source/essentials_search.rst:153
# 176a1f059ca24800b7185e0aa381d228
msgid "Nodes"
msgstr ""

#: ../../includes_search/includes_search_node.rst:5
# cdd624df0933451f96773e7344ec79ab
msgid "A node can be searched from a recipe by using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:9
# e265277fb9af42d9b143a27fa62c0569
msgid "A wildcard can be used to replace characters within the search query."
msgstr ""

#: ../../includes_search/includes_search_node.rst:11
# e5e929ec9a344646afc0f4e983bec302
msgid "Expanded lists of roles (all of the roles that apply to a node, including nested roles) and recipes to the role and recipe attributes on a node are saved on the |chef server|. The expanded lists of roles allows for searching within nodes that run a given recipe, even if that recipe is included by a role."
msgstr ""

#: ../../includes_search/includes_search_node.rst:13
# a3b520dbe9fa49d7b1448bd063a8fef3
msgid "The ``recipes`` field is updated each time the |chef client| is run; changes to a run-list will not affect ``recipes`` until the next time the |chef client| is run on the node."
msgstr ""

#: ../../includes_search/includes_search_node.rst:19
# 980324e2b220459ebe183d1c2d02a692
msgid "Node Location"
msgstr ""

#: ../../includes_search/includes_search_node.rst:21
# 4a7b8d7120894ffa82f50e9e49b09c19
msgid "In a specified recipe"
msgstr ""

#: ../../includes_search/includes_search_node.rst:22
# b86ba108144d42bfa9787ecb5d18e4e0
msgid "To find a node with a specified recipe in the run-list, search within the ``run_list`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:26
# 78b6205e7e4440fd9275b1cea9250231
msgid "where ``recipe`` (singular!) indicates the top-level run-list. Variables can be interpolated into search strings using the |ruby| alternate quoting syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:29
# ab3e7f2c9b644473a7971244b424963e
msgid "In an expanded run-list"
msgstr ""

#: ../../includes_search/includes_search_node.rst:30
# f9db441568e347b482aa7e2e49835907
msgid "To find a node with a recipe in an expanded run-list, search within the ``recipes`` field (and escaping any special characters with the slash symbol) using the following syntax::"
msgstr ""

#: ../../includes_search/includes_search_node.rst:34
# 3d8afb0a8af947b9a78f58545926efa6
msgid "where ``recipes`` (plural!) indicates to search within an expanded run-list."
msgstr ""

#: ../../includes_search/includes_search_node.rst:36
# 8759d4cf429a4107b32d57a1280d674e
msgid "If you just want to use each result of the search and don't care about the aggregate result you can provide a code block to the search method. Each result is then passed to the block::"
msgstr ""

#: ../source/essentials_search.rst:157
# 2d39e11293a343cd94ce76e3e1de2c4f
msgid "API Clients"
msgstr ""

#: ../../includes_chef/includes_chef_api_client.rst:5
# 5cd4d859565a45b48d09c215eac11fb0
msgid "|api client description|"
msgstr ""

#: ../../includes_search/includes_search_client.rst:4
# 17c5caee4b1d4d11969938d839b76b4e
msgid "Sometimes when a role isn't fully defined (or implemented), it may be necessary for a machine to connect to a database, search engine, or some other service within an environment by using the settings located on another machine, such as a host name, IP address, or private IP address. The following example shows a simplified settings file:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:13
# f4b99b8d51b54e539d8741062969fc3c
msgid "where ``host`` is the private IP address of the database server. Use the following |knife| query to view information about the node:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:19
# ef6d6acd68a749768d6b0bf11a9a91c9
msgid "To access these settings as part of a recipe that is run on the web server, use code similar to:"
msgstr ""

#: ../../includes_search/includes_search_client.rst:27
# 2c6f55aafd5c4245b55a630a858d4810
msgid "where the \"[0]\" is the 0 (zero) index for the ``db_server`` identifier. A single document is returned because the node is being searched on its unique name. The identifier ``private_ip`` will now have the value of the private IP address of the database server (``10.40.64.202``) and can then be used in templates as a variable, among other possible uses."
msgstr ""

#: ../source/essentials_search.rst:163
# aebf0cb9c1e34e0ea584b914fb5f7509
msgid "Environments"
msgstr ""

#: ../../includes_environment/includes_environment.rst:4
# bfe47997b52d474180bbbabdeed673cb
msgid "An environment is a way to map an organization's real-life workflow to what can be configured and managed when using |chef server|. Every organization begins with a single environment called the ``_default`` environment, which cannot be modified (or deleted). Additional environments can be created to reflect each organization's patterns and workflow. For example, creating ``production``, ``staging``, ``testing``, and ``development`` environments. Generally, an environment is also associated with one (or more) cookbook versions."
msgstr ""

#: ../../includes_search/includes_search_environment.rst:4
# 138b2dfdc26143179e12fdfebd75804d
msgid "When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use |knife| to search for all of the servers running |centos| in an environment named \"QA\", enter the following:"
msgstr ""

#: ../../includes_search/includes_search_environment.rst:10
# e8097fbfe7d34c03889b9ba8a0b75e68
msgid "Or, to include the same search in a recipe, use a code block similar to:"
msgstr ""

#: ../source/essentials_search.rst:169
# 9b45966718b3419a8a958b9caf516c95
msgid "Data Bags"
msgstr ""

#: ../../includes_data_bag/includes_data_bag.rst:5
# 9bfd61f6662546f29144635ebab9e457
msgid "A data bag is a global variable that is stored as |json| data and is accessible from a |chef server|. A data bag is indexed for searching and can be loaded by a recipe or accessed during a search. The contents of a data bag can vary, but they often include sensitive information (such as database passwords)."
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:4
# 544632c2563d4fd3b41dae5bc2b21d9e
msgid "Any search for a data bag (or a data bag item) must specify the name of the data bag and then provide the search query string that will be used during the search. For example, to use |knife| to search within a data bag named \"admin_data\" across all items, except for the \"admin_users\" item, enter the following:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:10
# b520e0d2fe714b439be4d9859b787203
msgid "Or, to include the same search query in a recipe, use a code block similar to:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:16
# 36cbcc90416c48cb93a772c9a1a45a52
msgid "It may not be possible to know which data bag items will be needed. It may be necessary to load everything in a data bag (but not know what \"everything\" is). Using a search query is the ideal way to deal with that ambiguity, yet still ensure that all of the required data is returned. The following examples show how a recipe can use a series of search queries to search within a data bag named \"admins\". For example, to find every administrator:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:22
# 028eaac2abd34dec847d600c019c8f29
msgid "Or to search for an administrator named \"charlie\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:28
# dd42b28b364c48438d3d37cce0ff1266
msgid "Or to search for an administrator with a group identifier of \"ops\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:34
# 15eb9be475bf434bb7fa5ed57d2bf85f
msgid "Or to search for an administrator whose name begins with the letter \"c\":"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:40
# fed34209f32544b79fe3eb2518dc45dc
msgid "Data bag items that are returned by a search query can be used as if they were a hash. For example:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:51
# 5f9972b3f1d0417284780b06770be87e
msgid "The following recipe can be used to create a user for each administrator by loading all of the items from the \"admins\" data bag, looping through each admin in the data bag, and then creating a user resource so that each of those admins exist:"
msgstr ""

#: ../../includes_search/includes_search_data_bag.rst:72
# 3b1d8debfa03463dbc0e99f8c804ae6c
msgid "And then the same recipe, modified to load administrators using a search query (and using an array to store the results of the search query):"
msgstr ""

