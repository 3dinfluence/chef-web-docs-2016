# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-29 11:08-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/lwrp_custom_resource_library.rst:8
# aa9d9581f693466e83194f53bcf80df3
msgid "Library Resources"
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:5
# 78175d7271c644d794cedfe9ccc02dd2
msgid "A resource is a statement of configuration policy. It describes the desired state of an element of your infrastructure, along with the steps needed to bring that item to the desired state. Each resource statement in a |chef| recipe corresponds to a specific part of your infrastructure: a file, a template, a directory, a package, a service, a command to be executed, and so on. Each resource statement includes the resource type (such as ``template``, ``service`` or ``package``), its name, any attributes that specify additional details, and an action that tells the |chef client| how to implement the configuration policy."
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:7
# 849a8f0d606049cfa54ba53f1c370401
msgid "Together, resources describe all the components in your network. Recipes group resources together and describe working configurations. Add recipes to a run-list to describe the desired state for every node to which that run-list is assigned. Cookbooks are collections of recipes and are stored on the |chef server|."
msgstr ""

#: ../../includes_resources_common/includes_resources_common_provider.rst:4
# a949d861d8c94307b507d122e0d50639
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_library.rst:6
# 50b8bcac7ccf4df9b4547226b19017bb
msgid "A resource can also be defined in ``/libraries`` directory. Some advantages of this approach include more control over how resources behave in the provider, the ability to control the name of the resource directly, and more options available for writing tests. The resources and providers for a library resource, similar to lightweight resources (defined in the ``/resources`` and ``/providers`` folders) typically have a separate file for the resource and the provider, but this is not requirement. The main disadvantage of this approach is that resources defined in the ``/libraries`` directory are not able to leverage the |dsl recipe|. That said, a resource that is defined in the ``/libraries`` directory may leverage core |chef client| resources by using the following syntax:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_library.rst:12
# e21d0bc7d2284a979c17501a030b891a
msgid "or:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_library.rst:18
# be0dfc7c786f44db93fbcec69d211f3d
msgid "For example, the following definition leverages the |resource directory| resource to create a new directory, and then evaluate that within the context of the custom resource:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_library.rst:31
# f2d286bc5251408bbb1464a1c15257b0
msgid "The following definition uses the |resource template| resource for |debian|-specific cases, but then the |resource link| resource for everything else:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_library.rst:54
# 2f09cfbeb5f3495d88bf744ff0d0bbfb
msgid "Otherwise, a resource defined in the ``/libraries`` directory is done using |ruby|, is added to recipes as if it were any other resource, and is processed by the |chef client| in the same way as any other resource. See the ``/libraries`` directory in the `database <https://github.com/opscode-cookbooks/database>`_ and `runit <https://github.com/opscode-cookbooks/runit>`_ cookbooks for complete examples of how to use this approach when defining a resource."
msgstr ""

