# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-27 12:28\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/lwrp_custom_resource_library.rst:33
# ca08656f989644c8a7b9782d0b68afdc
msgid "Library Resources"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_resource.rst:4
# 2ce9569b5eef40f7b6ba278a0b22612d
msgid "A resource is a key part of a recipe. A resource defines the actions that can be taken, such as when a package should be installed, whether a service should be enabled or restarted, which groups, users, or groups of users should be created, where to put a collection of files, what the name of a new directory should be, and so on. During a |chef client| run, each resource is identified and then associated with a provider. The provider then does the work to complete the action defined by the resource. Each resource is processed in the same order as they appear in a recipe. The |chef client| ensures that the same actions are taken the same way everywhere and that actions produce the same result every time. A resource is implemented within a recipe using |ruby|."
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_provider.rst:4
# b81ce57d313a4cc7b9a1c0253fe13532
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state. These steps are de-coupled from the request itself. The request is made in a recipe and is defined by a lightweight resource. The steps are then defined by a lightweight provider."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_library.rst:6
# dce1dc4ee52c4305afaa09ded00d95ae
msgid "A resource can also be defined in ``/libraries`` directory. Some advantages of this approach include more control over how resources behave in the provider, the ability to control the name of the resource directly, and more options available for writing tests. The resources and providers for a library resource, similar to lightweight resources (defined in the ``/resources`` and ``/providers`` folders) typically have a separate file for the resource and the provider, but this is not requirement. The main disadvantage of this approach is that resources defined in the ``/libraries`` directory are not able to leverage the |dsl recipe|. That said, a resource that is defined in the ``/libraries`` directory may leverage core |chef client| resources by using the following syntax:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_library.rst:12
# e859567f21f44a698e1be22fffc085cd
msgid "or:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_library.rst:18
# 839acaaba6704610a61dd37c07cf978b
msgid "For example, the following definition leverages the |resource directory| resource to create a new directory, and then evaluate that within the context of the custom resource:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_library.rst:31
# 529a038e75b74cfd9894244fa960a9cb
msgid "The following definition uses the |resource template| resource for |debian|-specific cases, but then the |resource link| resource for everything else:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_library.rst:54
# 004c87fa77884d42abbc5bbc86b85728
msgid "The following definition leverages the |resource log| resource:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_library.rst:69
# fdad0b64d79b4392b54373c187d15fe7
msgid "Otherwise, a resource defined in the ``/libraries`` directory is done using |ruby|, is added to recipes as if it were any other resource, and is processed by the |chef client| in the same way as any other resource. See the ``/libraries`` directory in the `database <https://github.com/opscode-cookbooks/database>`_ and `runit <https://github.com/opscode-cookbooks/runit>`_ cookbooks for complete examples of how to use this approach when defining a resource."
msgstr ""

