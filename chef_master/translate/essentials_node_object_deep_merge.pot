# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-03-21 17:35\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_node_object_deep_merge.rst:34
# 714e611b800b4429a8e97396867a92c6
msgid "Deep Merge"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:4
# e97598ccc5ed4b75a01a1b948a29a29b
msgid "Attributes are typically stored in cookbooks and recipes, roles, and environments. These attributes are rolled-up to the node level during a |chef| run. For example, a recipe can store attributes using a multi-level hash or array; a group of attributes for web servers might be:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:19
# aba3513ed3b44b52ae7657ffee200517
msgid "But what if all of the web servers are not the same? What if some of the web servers required a single attribute to have a different value? You could store these settings in two locations, once just like the preceding example and once just like the following:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:34
# f149d89806934dfcb8edb12c235c3d85
msgid "But that is not very efficient, especially because most of them are identical. The deep merge capabilities of |chef| allows attributes to be layered across recipes and cookbooks, roles, and environments. This allows an attribute to be reused across nodes, making use of default attributes set at the cookbook level, but also providing a way for certain attributes (with a higher attribute precedence) to be applied only when they are supposed to be. For example, a role named ``baseline.rb``:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:53
# 8f8ac0c1ecbe491abd7764bbba0126d4
msgid "and then a role named ``web.rb``:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:69
# 4f8691cca4f04277898d2ab22325fbdc
msgid "Both of these files are similar. They share the same structure. When an attribute is of the same type of data, such as  a hash or an array, the contents are merged. This is true even with different levels of precedence, such as default and override attributes. If the attribute is of a different data type, it is overwritten at higher levels of precedence."
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:71
# 18086de6bcd74a86947e2249d937c489
msgid "For example, the ``web.rb`` references the ``baseline.rb`` role. The ``web.rb`` file only provides a value for one attribute: ``:startservers``. When |chef| compares these attributes, the deep merge feature will ensure that ``:startservers`` (and its value of ``30``) will be applied to any node for which the ``web.rb`` attribute structure should be applied."
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:73
# b6eafeed270b4c26b5a895ededfe5509
msgid "This approach will allow a recipe like this:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:80
# ce859c54b39b4a9e92ac710be3c1663b
msgid "and a ``run_list`` like this:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:89
# 3e227e8791ff4fb3aee12beaced125b4
msgid "to produce results like this:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:103
# 613d9f222891436d9fddb1fbd23a69a8
msgid "Even though the ``web.rb`` file does not contain attributes and values for ``minspareservers``, ``maxspareservers``, ``serverlimit``, ``maxclients``, and ``maxrequestsperchild``, the deep merge capabilities pulled them in."
msgstr ""

#: ../source/essentials_node_object_deep_merge.rst:38
# 721edb08c6bc49bbbae4387544f76377
msgid "The following sections show how the logic works for using deep merge to perform substitutions and additions of attributes."
msgstr ""

#: ../source/essentials_node_object_deep_merge.rst:41
# e68a55fb8a484b71b283ba0c43764a13
msgid "Substitution"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_substitute.rst:4
# 48145411407c400f921982f8d6442d85
msgid "The following examples show how the logic works for substituting an existing string using a hash::"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_substitute.rst:12
# 9e65a40e15af457da7de5cc3e496bd73
msgid "For substituting an existing boolean using a hash::"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_substitute.rst:20
# 7ce0979a0b374564a6acf3520723d221
msgid "For substituting an array with a hash::"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_substitute.rst:28
# 2f5f0a6640a347898a2631f5b4b06f48
msgid "When items cannot be merged through substitution, the original data is overwritten."
msgstr ""

#: ../source/essentials_node_object_deep_merge.rst:45
# 3a6d8590e9504807b59f225b7eb264ac
msgid "Addition"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_add.rst:4
# 04939cc399114ff294faa8a85fc3ef3e
msgid "The following examples show how the logic works for adding a string using a hash::"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_add.rst:12
# 2d40281530a443aba4c4937d17cb157c
msgid "For adding a string using an array::"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_add.rst:20
# 0a906fae04d741319cd11f47290669ae
msgid "For adding a string using a multi-level hash::"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_add.rst:28
# 9d02c19cdd6f4a0d883d4665e2d036f0
msgid "For adding a string using a multi-level array::"
msgstr ""

