# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-02 14:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_node_object_deep_merge.rst:34
# ab0b95e1bbd447898102ef5e7e575bf8
msgid "Deep Merge"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:4
# 155abb8deeef435f80e460c726d42dba
msgid "Attributes are typically stored in cookbooks and recipes, roles, and environments. These attributes are rolled-up to the node level during a |chef| run. For example, a recipe can store attributes using a multi-level hash or array; a group of attributes for web servers might be:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:19
# 3668aa9358264f4ea4a0feebe6fdcc54
msgid "But what if all of the web servers are not the same? What if some of the web servers required a single attribute to have a different value? You could store these settings in two locations, once just like the preceding example and once just like the following:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:34
# f9c1ced59f514f67a3d94583905e0f98
msgid "But that is not very efficient, especially because most of them are identical. The deep merge capabilities of |chef| allows attributes to be layered across recipes and cookbooks, roles, and environments. This allows an attribute to be reused across nodes, making use of default attributes set at the cookbook level, but also providing a way for certain attributes (with a higher attribute precedence) to be applied only when they are supposed to be. For example, a role named ``baseline.rb``:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:53
# 29da388f05e946bbb3f0318ee736954b
msgid "and then a role named ``web.rb``:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:69
# 00ea53f29610464e84b6c46615a73a39
msgid "Both of these files are similar. They share the same structure. When an attribute is of the same type of data, such as  a hash or an array, the contents are merged. This is true even with different levels of precedence, such as default and override attributes. If the attribute is of a different data type, it is overwritten at higher levels of precedence."
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:71
# b563152a6bd6421a814af6e6d97fa52f
msgid "For example, the ``web.rb`` references the ``baseline.rb`` role. The ``web.rb`` file only provides a value for one attribute: ``:startservers``. When |chef| compares these attributes, the deep merge feature will ensure that ``:startservers`` (and its value of ``30``) will be applied to any node for which the ``web.rb`` attribute structure should be applied."
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:73
# 88ebdbce0dd34b1bbdcffdb91d0a5749
msgid "This approach will allow a recipe like this:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:80
# d55a972fa31948cca83b3f655cc02488
msgid "and a ``run_list`` like this:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:89
# 73052acd6f504f2baa12debce6ce908a
msgid "to produce results like this:"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge.rst:103
# cddeb357cfae42eaba5098ee3cbeca2e
msgid "Even though the ``web.rb`` file does not contain attributes and values for ``minspareservers``, ``maxspareservers``, ``serverlimit``, ``maxclients``, and ``maxrequestsperchild``, the deep merge capabilities pulled them in."
msgstr ""

#: ../source/essentials_node_object_deep_merge.rst:38
# f6e290bfe94b412f8e0d6f5e94582776
msgid "The following sections show how the logic works for using deep merge to perform substitutions and additions of attributes."
msgstr ""

#: ../source/essentials_node_object_deep_merge.rst:41
# aa1027dfc72349d6b430facb91201426
msgid "Substitution"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_substitute.rst:4
# 3f8cdf7b55a541f3901adc270dbc532b
msgid "The following examples show how the logic works for substituting an existing string using a hash::"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_substitute.rst:12
# 60358acbb4e3476a8cc8756cdb09ac30
msgid "For substituting an existing boolean using a hash::"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_substitute.rst:20
# edd8492631e84758be775919f86af92a
msgid "For substituting an array with a hash::"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_substitute.rst:28
# 0b398a34bfdb4c659a6f80c46f377cd8
msgid "When items cannot be merged through substitution, the original data is overwritten."
msgstr ""

#: ../source/essentials_node_object_deep_merge.rst:45
# 978585c464a44fd98aac05720e0fc3f0
msgid "Addition"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_add.rst:4
# 35f9ebd618d74c72abfe72b0685b4af9
msgid "The following examples show how the logic works for adding a string using a hash::"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_add.rst:12
# b1433ea0ff90437e9d6adfb90e99c9ea
msgid "For adding a string using an array::"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_add.rst:20
# a7f4dee4fa6948c9b640bf91e725c83d
msgid "For adding a string using a multi-level hash::"
msgstr ""

#: ../../includes_node/includes_node_attribute_deep_merge_add.rst:28
# 2374f25dbe4a460fb8778ff8b25c413d
msgid "For adding a string using a multi-level array::"
msgstr ""

