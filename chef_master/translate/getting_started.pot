# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-01-28 12:43-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/getting_started.rst:8
# fe101a4191b347aba188f5ca5997a1ac
msgid "Getting Started"
msgstr ""

#: ../source/getting_started.rst:10
# d8688ce22e034475b027153a2afad4d7
msgid "Welcome to |chef|!"
msgstr ""

#: ../../includes_chef/includes_chef.rst:5
# 460c994fa3c34259b82d880476bba5cb
msgid "|chef| is a powerful automation platform that transforms complex infrastructure into code, bringing your servers and services to life. Whether youâ€™re operating in the cloud, on-premises, or a hybrid, |chef| automates how applications are configured, deployed, and managed across your network, no matter its size."
msgstr ""

#: ../../includes_chef/includes_chef.rst:7
# c53f334f38b44f0eafb49aa0267529a3
msgid "|chef| is built around simple concepts: achieving desired state, centralized modeling of IT infrastructure, and resource primitives that serve as building blocks. These concepts enable you to quickly manage any infrastructure with |chef|. These very same concepts allow |chef| to handle the most difficult infrastructure challenges on the planet."
msgstr ""

#: ../../includes_chef/includes_chef.rst:9
# f09f1b5a347d4b719cfdeba89d64c18d
msgid "Anything that can run the |chef client| can be managed by |chef|. For instance, you can manage physical machines, virtual machines, containers, or cloud-based instances. The |chef client| is an agent that runs on a node and performs the actual tasks that configure it. The |chef server| is the central repository for all configuration data. The |chef client| and |chef server| communicate with each other. For secure communications, they use a combination of public and private keys that ensures the |chef server| responds only to requests made by the |chef client|."
msgstr ""

#: ../source/getting_started.rst:14
# a989a0f2dddc495ba7787c78535df4ca
msgid "This topic is a work in progress. It needs some editing, but you should be able to install the Chef DK and then configure Kitchen to build CentOS and Ubuntu instances, and then converge a node using the NTP cookbook. More sections are planned for future updates that will include more scenarios for Kitchen, new scenarios for ChefSpec, Berkshelf, and Chef policy. Feedback on the getting started page may be sent to docs @ getchef dot com."
msgstr ""

#: ../source/getting_started.rst:17
# 4849e5b05f2c44f29821b9e6fc5da860
msgid "About Resources"
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:5
# 77d39af228cb40e59172ee0aac6b5783
msgid "A resource is a statement of configuration policy. It describes the desired state of an element of your infrastructure, along with the steps needed to bring that item to the desired state. Each resource statement in a |chef| recipe corresponds to a specific part of your infrastructure: a file, a template, a directory, a package, a service, a command to be executed, and so on. Each resource statement includes the resource type (such as ``template``, ``service`` or ``package``), its name, any attributes that specify additional details, and an action that tells the |chef client| how to implement the configuration policy."
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:7
# b96a80d2e094446c969521933b6f16ba
msgid "Together, resources describe all the components in your network. Recipes group resources together and describe working configurations. Add recipes to a run-list to describe the desired state for every node to which that run-list is assigned. Cookbooks are collections of recipes and are stored on the |chef server|."
msgstr ""

#: ../source/getting_started.rst:20
# e6ac2f9e196d41df82f160d1c718e3a1
msgid "The |chef client| includes many built-in resources that handle just about any situation. Three of these resources are an essential part of any |chef| workflow: |resource package|, |resource template|, and |resource service|. Use the |resource package| resource to install a package, the |resource template| resource to generate a file on the node that applies configuration settings for that package, and then use the |resource service| resource to start (or restart) the service associated with that package. This is a combination of resources that you will use often with |chef|."
msgstr ""

#: ../source/getting_started.rst:22
# c780399028b0474c8087d94ba718b8dc
msgid "The next step is to install |chef|, configure your workstation, and then configure |kitchen| to run virtual instances locally on that workstation. After that is finished, we'll revisit the |resource package|, |resource template|, and |resource service| resources and use them with |kitchen| to converge |ntp| into a virtual instance that is spun up and managed by |kitchen|."
msgstr ""

#: ../source/getting_started.rst:25
# 63f6a75421e54cea97e38e40d803a906
msgid "Workstation Setup"
msgstr ""

#: ../source/getting_started.rst:26
# 1b3c05f42171406fb0a1e2565ad999d7
msgid "The |chef dk| is a package that contains everything you need to start using |chef|, along with a collection of tools and libaries that can help improve the code you are using to run your business."
msgstr ""

#: ../source/getting_started.rst:29
# 360cb012783f44d4a646add02b051c00
msgid "Install the |chef dk_title|"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:4
# c3bc029b2af9446095147d65a29d8bfb
msgid "To install the |chef dk|:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:6
# 3f1631c945f84b4d9d8aeff50e94a4c3
msgid "Visit this page: http://www.chef.io/downloads/chef-dk/ and pick your platform. The |chef dk| supports |mac os x|, |redhat enterprise linux|, |ubuntu|, and |windows|."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:7
# 74fb5738a98a46708d051ff763dd88a8
msgid "Select a platform, and then a package. (|chef docs| uses the |mac os x| setup within the documentation.)"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:8
# b931bb4c1f994493b1cc047002585cea
msgid "Click the download button."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:9
# b7dabd2d46ed444599e6a43520a0a3f9
msgid "Follow the steps in the installer and install the |chef dk| to your machine. The |chef dk| is installed to ``/opt/chefdk/`` on |unix| and |linux| systems."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:10
# fadef48e25ea46458a7f66d4be7dd080
msgid "When finished, open a command window and enter the following:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:16
# c06e940c8f59435e853dec6846e4a8fc
msgid "This will verify the main components of the |chef dk|: the |chef client|, the |chef dk| library, and the tools that are built into the |chef dk|. The output should be similar to:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:25
# a658d030b6594619852c9669ea1227f0
msgid "Set the default shell. On |windows| it is strongly recommended to use |windows powershell| and cmd.exe."
msgstr ""

#: ../source/getting_started.rst:33
# 2b57948ab0b04a04889d4c45ea843258
msgid "What's in the |chef dk_title|?"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools.rst:4
# 7a31212bd1f048daaf41929a2315b216
msgid "The |chef dk| installs a collection of tools and libraries into a single directory structure, which makes it easier to manage any dependencies these tools may have on each other and the dependencies that |chef| has on |ruby|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:4
# 2a60ef1d01df40bf91bbcc96bbb28526
msgid "The most important tools included in the |chef dk| are:"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:10
# 46946cf160674a16824bad2e5dfa6bc8
msgid "Tool"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:11
# f2bea26b7f1f4aab8964b6e0016e17b8
msgid "Description"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:12
# 1f08cb5f192e4bd3bf378d92c4bc8c96
msgid "|berkshelf|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:13
# 590fd3e3464e42d59bf572fa3a004b0e
msgid "A dependency manager for cookbooks."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:14
# e0d452ce88b44e328455d1fed7bf79fe
msgid "|chef ctl|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:15
# 3aecfc683a304060869622148c8b137f
msgid "A workflow tool for |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:16
# 1943f509600e4ad8866e42cb33fc7eff
msgid "|chef client|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:17
# e87e5d09b74e4321a5030193ba257c93
msgid "The agent that runs |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:18
# 3f41aa80ceca4589ac77a13a7d05cc07
msgid "|chef dk|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:19
# f016cd75b3a046cfb1b3c4bd4f24e7f3
msgid "The |chef dk| omnibus package."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:20
# 0a44d58185bc43f9859658190e6e446f
msgid "|chef spec|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:21
# 940d5aa0dd1d40d890df649ec7001830
msgid "A unit testing framework that tests resources locally."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:22
# 7978e00fe37c4e1880fedac64e4843f6
msgid "|foodcritic|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:23
# 217a165df000445a936ba733223c9841
msgid "A lint tool for static analysis of recipe code."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:24
# c8221ac5c2d74ef7b525d89e42c1f3ff
msgid "|ruby|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:25
# 6c2161d81489434da5b8f4dad0426237
msgid "The reference language for |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:26
# 589485f3960149d3b0ec5ca858f1ed34
msgid "|kitchen|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:27
# 66a9a0de689d44658b159c872c0f2a67
msgid "An integration testing framework tool that tests cookbooks across platforms."
msgstr ""

#: ../source/getting_started.rst:39
# 078f488d89514cce821231d8d74c484a
msgid "Set the System |ruby|"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:3
# 7b41df94ff1143bf807b688db25f03f2
msgid "For many users of |chef|, the |chef dk| version of |ruby| that is included in the |chef dk| should be configured as the default version of |ruby|."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:5
# e27cac63a4e04c51afb0cca8591a0b51
msgid "Open a command window and enter the following:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:11
# 86a109fcd61b442f8aea1060ebb8bbad
msgid "which will return something like ``/usr/bin/ruby``."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:12
# 1ba3f2d1e4b945e1baee16cd2045066d
msgid "To use the |chef dk| version of |ruby| as the default |ruby|, edit the ``$PATH`` and ``GEM`` environment variables to include paths to the |chef dk|. For example, on a machine that runs |bash|, run:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:18
# 97fc28ed41684e6b88ef07b11e479e67
msgid "where ``bash`` and ``~/.bash_profile`` represents the name of the shell."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:20
# 6187d340421b4c998b719791dd53a3c1
msgid "If zsh is your preferred shell then run the following:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:26
# 805d4d3176b1427da85b5bc6fcec66e4
msgid "Run ``which ruby`` again. It should return ``/opt/chefdk/embedded/bin/ruby``."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:28
# 40065a5265984fa693f94bfc9dbead27
msgid "Using the |chef dk|-provided |ruby| as your system |ruby| is optional. This just depends on how you are using |ruby| on your system. For many users, |ruby| is primarily used for authoring |chef| cookbooks and recipes. If that's true for you, then using the |chef dk|-provided |ruby| as your system |ruby| is recommended. But for other users who are already using tools like |rbenv| to manage |ruby| versions, then that's OK too."
msgstr ""

#: ../source/getting_started.rst:43
# cee07378d47644fcb17a22754752be6c
msgid "Your First Cookbook"
msgstr ""

#: ../source/getting_started.rst:45
# 6920a26e567a4a738d34643b3f639b31
msgid "We have already used the |chef ctl| ``verify`` subcommand to verify the installation of the |chef dk|. Now let's use the |chef ctl| ``generate`` subcommand to create the |chef repo|, which is the main folder in which your |chef| code will be stored. Run the following command:"
msgstr ""

#: ../source/getting_started.rst:51
# 42c69d6e778544c5bc06046e56266b43
msgid "where ``name`` is a name that you have chosen for the both the |chef repo| and the default cookbook. We are calling ours ``chef-repo``; you can call yours whatever you want. (We also renamed the default cookbook to ``chefdocs``, which is totally optional.) You should have a directory structure at ``/Users/your_username/cookbook_name/`` similar to::"
msgstr ""

#: ../source/getting_started.rst:67
# f96f18673a65469f9decafc07fbbc938
msgid "Run the |chef client_title|"
msgstr ""

#: ../source/getting_started.rst:68
# df4ed3d8e93e454aa355583893e1c238
msgid "The |chef client| includes a mode called \"local mode\", which runs the |chef client| locally on your machine. Local mode allows you to run recipes and work locally with the code you are using to run your business. Local mode does not require a connection to a |chef server|, public or private keys, or configuring of nodes. (Though we'll do all of these things later!) Many people use local mode for simple, local testing of recipes and cookbooks, often as a pre-cursor to running unit and integration tests against the same recipes and cookbooks."
msgstr ""

#: ../source/getting_started.rst:70
# f4a16df16e39467b92be1178502ea52e
msgid "Open the ``default.rb`` recipe in the cookbook you just created. Add the following resource to that recipe:"
msgstr ""

#: ../source/getting_started.rst:78
# 560f73131ea948638a2f338f73f6f93e
msgid "This recipe creates a file called ``test.txt`` at the path defined by the ``HOME`` environment variable. (To view that path, run ``echo \"$HOME\"`` in the command shell.)"
msgstr ""

#: ../source/getting_started.rst:80
# 112d3c133bf54c19b228b1f1c307f02a
msgid "Next, we'll run the |chef client|. This is done via the command line and from within the |chef repo|. Use the ``--local-mode`` flag to run the |chef client| in local mode. Use the ``--override-runlist`` flag to run only the recipe we have just created. (More about the run-list later.) For a cookbook's default recipe, only the name of the cookbook needs to be specified, as that maps to the default recipe. The following command will create the file ``test.txt``:"
msgstr ""

#: ../source/getting_started.rst:86
# 90d59604176f4b4096b5cb3ff8e41075
msgid "where ``chefdocs`` is the name of your cookbook."
msgstr ""

#: ../source/getting_started.rst:88
# 3f58603ccff84119a67c7f8178a1ee2f
msgid "As the |chef client| adds the file to your system, output similar to the following is shown:"
msgstr ""

#: ../source/getting_started.rst:119
# 859706cb56b34e39b81eeb5016043564
msgid "That's it. The warnings, for the moment, can be ignored. Check the root of the path defined by the ``HOME`` environment variable and find the file named ``test.txt``. The file should contain ``This file created by Chef!``."
msgstr ""

#: ../source/getting_started.rst:121
# dbb69f71004243c2b6619d6e79a0eaba
msgid "# We'll come back to working with |chef| later on, but the next step is to familiarize yourself with resources and cookbooks."
msgstr ""

#: ../source/getting_started.rst:124
# 29c215a0097e4cba9651cba017b3a925
msgid "|kitchen_title| Setup"
msgstr ""

#: ../../includes_test_kitchen/includes_test_kitchen.rst:5
# b87afcbf6d80494abb59e88dadfc764d
msgid "|kitchen| is an integration framework that is used to automatically test cookbook data across any combination of platforms and test suites, as defined by a |kitchen yml| file. |kitchen| uses a driver plugin architecture that allows it to support cookbook testing across many cloud providers and virtualization technologies. |kitchen| supports all of the common testing frameworks used by the |ruby| community."
msgstr ""

#: ../source/getting_started.rst:127
# 7cd03005094846e2a19253b16dc9d399
msgid "You will need some type of virtualization software for |kitchen|. |vagrant| is the default driver for |kitchen|. Install |vagrant|. |vagrant| requires |virtualbox|, so install |virtualbox|. Once you're ready, we'll keep using the same cookbook created earlier."
msgstr ""

#: ../source/getting_started.rst:130
# 62dee3dac0c941e7b0a3c1614de9b9e7
msgid "Update Metadata"
msgstr ""

#: ../source/getting_started.rst:131
# 7b7e0bf24f2c49b980467022b914b3f6
msgid "In that cookbok, let's update the metadata. Open the ``metadata.rb`` file. It will look similar to:"
msgstr ""

#: ../source/getting_started.rst:143
# f7a6ce84733949e1b6c49ddcc7a27b4a
msgid "for now, let's just update the name and version settings, like this:"
msgstr ""

#: ../source/getting_started.rst:151
# f7c87a6141054eb49997b3947e1b2f05
msgid "Verify |kitchen yml|"
msgstr ""

#: ../source/getting_started.rst:152
# 22c0c68634164905a15e184007059d5a
msgid "Because |kitchen| is installed as part of the |chef dk|, the |kitchen yml| file is already created:"
msgstr ""

#: ../source/getting_started.rst:173
# a267f7e70b43480cb60ab769805095da
msgid "Let's change the default provisioner to |chef zero|:"
msgstr ""

#: ../source/getting_started.rst:186
# d6ead9c056a444dcaf2cd0b48bec68c3
msgid "and also make sure the |kitchen yml| knows about the default recipe in your cookbook. Under ``suites``, make sure the ``run_list`` contains the name of your cookbook. For example:"
msgstr ""

#: ../source/getting_started.rst:196
# f63bebf70fc2413f84a51f512118ad21
msgid "where ``chef-repo`` is the name of your cookbook. This will ensure that |kitchen| uses this recipe when converging."
msgstr ""

#: ../source/getting_started.rst:198
# 67cb92dc9f3f4564b383601f8a39256f
msgid "Also, |kitchen| has been added to gitignore, thor, etc. files. We just need to create the directory in which tests will be authored. This is typically a sub-directory of ``/cookbooks`` called ``/tests``. The structure underneath ``/tests`` may be customized, but is typically something like ``/test/integration/default``."
msgstr ""

#: ../source/getting_started.rst:200
# 4e9c8163b6554218bfd0e1a8a29e9cfd
msgid "For now, we don't need to do anything else to get started using |kitchen|."
msgstr ""

#: ../source/getting_started.rst:203
# ed424f6d97294d30821cffc51d6c4360
msgid "View Instance List"
msgstr ""

#: ../source/getting_started.rst:204
# b8fc73d4be324445a05ac17ec8326c5e
msgid "From your working directory, run the following command:"
msgstr ""

#: ../source/getting_started.rst:210
#: ../source/getting_started.rst:477
#: ../source/getting_started.rst:528
# 8998331a647649cba8be9eb3f1964e11
# 18042ddc4d8f4ba1a39d3d96fcb6587b
# a5ed90404bac4f9e868b29630499014a
msgid "which will return something similar to:"
msgstr ""

#: ../source/getting_started.rst:218
# 7aae0809731b4279ac4ed4005b6786e0
msgid "So there are two available platforms---|ubuntu| 12.04 and |centos| 6.4---configured to use the |vagrant| driver (which is enabled via the ``kitchen-vagrant`` driver that is built-in to the |chef dk|), and to run |chef zero| while running tests."
msgstr ""

#: ../source/getting_started.rst:221
# f96fde1262184f1594a528a1f8870d67
msgid "Create |centos| Instance"
msgstr ""

#: ../source/getting_started.rst:222
# f76583c8f7b44026a58367b070eab00b
msgid "Let's create an instance. Run the following command:"
msgstr ""

#: ../source/getting_started.rst:228
# f1816e09f4f642b6b3195fe4b0f1b788
msgid "This will start |vagrant|, which will then build a machine that rubs |centos| 6.4. (If this is the first time you're running |kitchen|, then |centos| needs to first be downloaded from the default instance location and may take a few minutes.)"
msgstr ""

#: ../source/getting_started.rst:263
#: ../source/getting_started.rst:320
# cb1cbc88b978455284cb37a1856b8384
# 7f7bd6664c3245a7924fb7e95f346642
msgid "Verify the instance list with the following command:"
msgstr ""

#: ../source/getting_started.rst:269
# e978ae5a1b9d4259b6d1b662af1d2790
msgid "and you will see the following:"
msgstr ""

#: ../source/getting_started.rst:278
# bbe355e2f48140f5a792ae80b11c4c37
msgid "Create |ubuntu| Instance"
msgstr ""

#: ../source/getting_started.rst:279
# 61a87e7159d64ed7b3b8c4b36807224f
msgid "Now let's create the |ubuntu| instance:"
msgstr ""

#: ../source/getting_started.rst:285
# ded27d059fc34994a1ff998b28843dea
msgid "this may also take a few minutes, but will (eventually) return something similar to:"
msgstr ""

#: ../source/getting_started.rst:332
# fabd50e7d1644e2a9a0a5613b9faa001
msgid "and now we're all set up! We're going to use the same recipe and cookbook that we already created."
msgstr ""

#: ../source/getting_started.rst:335
# ae6847fa3bfb4cd792d61d1f4c3a62a2
msgid "Converge |centos|"
msgstr ""

#: ../source/getting_started.rst:336
# 99447c68c35d4c919fcdf8113b5ffd9b
msgid "Now that we're all configured and ready to run |kitchen|, let's try it in |centos|:"
msgstr ""

#: ../source/getting_started.rst:342
# df9acf301a0d4d19b185411dc9483e0b
msgid "The first time you run this, it'll have to download the |chef client| and will show something similar to the following while it converges the node via |kitchen|:"
msgstr ""

#: ../source/getting_started.rst:393
# cb4b028f3bf4459cbf0ee4af2ab3d147
msgid "Converge |ubuntu|"
msgstr ""

#: ../source/getting_started.rst:394
# 2c9e536a1db3479c953014b2268c8148
msgid "Now let's try it in |ubuntu|:"
msgstr ""

#: ../source/getting_started.rst:400
# 288e50f0a4a14759928eca581ccf2b66
msgid "Like |centos|, the |chef client| will need to be downloaded:"
msgstr ""

#: ../source/getting_started.rst:450
#: ../source/getting_started.rst:729
# 3c9b366ab02748cabf6645148b92e5fe
# 61902a02275d4789a5d53fc9926e3f61
msgid "Verify Instance List"
msgstr ""

#: ../source/getting_started.rst:451
#: ../source/getting_started.rst:730
# 4509671eca944f1c917f74ab111d6a65
# 8187cb11edd4488fa1ab88d1da5efddc
msgid "To verify if both instances have been converged, run the following command:"
msgstr ""

#: ../source/getting_started.rst:463
# 9a6be489925b48878820a65e23692e0a
msgid "Now you can run your cookbooks in a virtual instance managed by |kitchen| on multiple platforms (|ubuntu| and |centos|)."
msgstr ""

#: ../source/getting_started.rst:466
# 2878d1b6355d4bd0a97cc0d00007a478
msgid "Configure NTP"
msgstr ""

#: ../source/getting_started.rst:467
# 47640ec0515d48d6b2b4cc2b27945b7b
msgid "Instead of putting a text file on these |kitchen| instances, let's try something useful and install |ntp|. Within the cookbook we're already using, let's update the default recipe to install and configure |ntp| using the |resource package|, |resource template|, and |resource service| resources, a template file, and an attributes file."
msgstr ""

#: ../source/getting_started.rst:470
# 51725d848fea4126ab6e7434e92d5b92
msgid "Add Template"
msgstr ""

#: ../source/getting_started.rst:471
# 8931d5a85f67474fb7e2dac6550c3944
msgid "The |resource template| resource looks for templates in a cookbook's ``/templates`` directory. Template files in this directory must be |erb| files. The |chef ctl| has an argument that will handle most of this process for you. Let's create that directory and the template file we'll use to configure |ntp| using this command. Let's use the same cookbook we've been using. From within that cookbook repo, run the following command:"
msgstr ""

#: ../source/getting_started.rst:489
#: ../source/getting_started.rst:540
# 414c051d9a6746968216d08df1e74eb3
# 3d3194868efb4ff29787cdef3f8c5e68
msgid "and a directory structure in that cookbook similar to::"
msgstr ""

#: ../source/getting_started.rst:507
# 4e1c56e143534f389851258dec2c992d
msgid "and an empty ``ntp.conf.erb`` file. Let's edit this file and define its contents. Open this file and add the following:"
msgstr ""

#: ../source/getting_started.rst:521
# 1dd5d74a9e924ff5aace024866228291
msgid "Add Attributes"
msgstr ""

#: ../source/getting_started.rst:522
# 428648763c3147549e0350e0f87c4a2c
msgid "The name of the init script that is used to run |ntp| is ``ntp`` on |debian|-based platforms (such as |ubuntu|) and is ``ntpd`` on |redhat enterprise linux|-based platforms. Let's use an attribute in our cookbook to tell the |chef client| what to do on both platforms using a single cookbook attribute. Like for templates, the |chef ctl| has an argument that will handle most of this process for you. Let's create that directory and the default attribute file we'll use to tell the |chef client| how to handle the attribute. Let's use the same cookbook we've been using. From within that cookbook repo, run the following command:"
msgstr ""

#: ../source/getting_started.rst:560
# 1c2ec88a78c4484cbe9f1948ebcadb5c
msgid "and an empty ``default.rb`` file. Let's edit this file and define its contents. Open this file and add the following:"
msgstr ""

#: ../source/getting_started.rst:574
# e8766dcccbb24aa6851878520ede9d5a
msgid "This attribute uses conditions to tell the |chef client| the correct name of the init script that will be used to start |ntp|, by platform. The attribute that is being set by this code block is ``node[:ntp][:service]`` and the |chef client| can use this attribute to identify the correct init script for |ntp| on any node and for any platform. If |debian|, use ``ntp`` and for everything else use ``ntpd``."
msgstr ""

#: ../source/getting_started.rst:577
# bdd7d142fa1042199e09ed16dfdfdab5
msgid "Edit Recipe"
msgstr ""

#: ../source/getting_started.rst:578
# d3d4a4555aca4395bcbf768bb8328c12
msgid "To install |ntp|, a recipe needs to do three things:"
msgstr ""

#: ../source/getting_started.rst:580
# b27905b9ba674fe782460343c7e4c6c2
msgid "# Install |ntp| # Create a configuration file; this will be done using the ``ntp.conf.erb`` template file # Start the ``ntp`` or ``ntpd`` service, depending on the platform; this will be done using the ``node[:ntp][:service]`` attribute"
msgstr ""

#: ../source/getting_started.rst:584
# 879257bd73424a13a73f1bc2020481cf
msgid "Open the ``default.rb`` recipe file and replace the contents of that file with the following:"
msgstr ""

#: ../source/getting_started.rst:603
# e468fff2b1734049ba1d1cde3918dbf9
msgid "The |resource package| resource installs the |ntp| package. The |resource template| resource gets the template file from the cookbook, and then uses it to create a ``ntp.conf`` file in the ``/etc/ntp.conf`` directory on the node, after which it notifies the |resource service| resource to restart the ``ntp`` or ``ntpd`` service. The |resource service| resource ensures that the ``ntp`` or ``ntpd`` service is started and enabled."
msgstr ""

#: ../source/getting_started.rst:606
# 3f6ef2cb99ea4a8f8f27add4d94c5669
msgid "Install |ntp| on |centos|"
msgstr ""

#: ../source/getting_started.rst:607
# 161efd70e622489695ce6401514aeded
msgid "Now let's install |ntp| in |centos|:"
msgstr ""

#: ../source/getting_started.rst:613
#: ../source/getting_started.rst:674
# 201b70d7e29a4899be3e707a980c9513
# 82c24f65a75041f2b1780991d948af2c
msgid "As it installs, the |chef client| will report back something similar to the following:"
msgstr ""

#: ../source/getting_started.rst:667
# ffd1a77ef2554bcb9a614dcc673a052e
msgid "Install |ntp| on |ubuntu|"
msgstr ""

#: ../source/getting_started.rst:668
# 4caf5763506a4e72ae9dac85a0188427
msgid "And finally, install |ntp| in |ubuntu|:"
msgstr ""

#: ../source/getting_started.rst:743
# b0f21c116c0145338371cb2c4fe6a709
msgid "More About Resources"
msgstr ""

#: ../source/getting_started.rst:744
# 99c9109b888f46b4b2491f6b2aeda7b3
msgid "The |chef client| includes many built-in resources: |resource execute|, |resource directory|, |resource package|, |resource service|, |resource file|, |resource template|, |resource user|, |resource script|, and |resource scm_git|."
msgstr ""

#: ../source/getting_started.rst:746
# 26d511209b05464daf6970e6aca9dcb8
msgid "The sections below quickly describe the most popular resources. For the full list of built-in |chef| resources, see `Resources <http://docs.chef.io/resource.html#resources>`_. You can also `create your own resources <http://docs.chef.io/lwrp_custom.html>`_ or `use the resources built into the community cookbooks <http://supermarket.chef.io>`_."
msgstr ""

#: ../source/getting_started.rst:749
# f9e99189212743e5b39ddf04e7e51956
msgid "Execute Commands"
msgstr ""

#: ../source/getting_started.rst:750
# 067b410de92d46f081d342723d9ed609
msgid "Commands are executed using the |resource execute| resource using an attribute to specify the actual command to run. See :doc:`execute </resource_execute>` for more information about executing commands."
msgstr ""

#: ../source/getting_started.rst:753
# 4c7ad78ec5f54a8888b9fee62aef6b21
msgid "Manage Directories"
msgstr ""

#: ../source/getting_started.rst:754
# e5cb4c50656543649d5fdf8d03a2818c
msgid "Directories are hierarchies of folders that comprise all the information stored on a computer. There are two ways to manage directories. The first is via the |resource directory| resource, which manages directories starting from the root directory. And the second is the |resource remote_directory|, which transfers directory structures defined in cookbooks to nodes. See :doc:`directory </resource_directory>` for more information about managing directories. If the directory is defined in a cookbook, use :doc:`remote_directory </resource_remote_directory>` instead."
msgstr ""

#: ../source/getting_started.rst:757
# 431bb6e715564fd88cd6b642d2e3cf34
msgid "Manage Packages"
msgstr ""

#: ../source/getting_started.rst:758
# f42db5fd865f4758ba6f040cb298c95e
msgid "Packages are collections of files that comprise software applications or some part of an operating system. Use the package resource to manage these packages, unless they are sourced via |rubygems| and installed directly from within recipes or are sourced from a cookbook. See :doc:`package </resource_package>` for more information about managing packages. There are quite a few platform-specific package resources as well, though most of the time simply using the |resource package| is all that's necessary. For packages that are located in cookobooks, use :doc:`chef_gem </resource_chef_gem>`. And for packages that are only included via recipes, use :doc:`gem_package </resource_gem_package>`."
msgstr ""

#: ../source/getting_started.rst:761
# c249c393a7bf4e4f98db48198026cf7a
msgid "Manage Services"
msgstr ""

#: ../source/getting_started.rst:762
# f31af665421348c08b20bb147ad9c77d
msgid "Services can be started, stopped, enabled, disabled, reloaded, and restarted. See :doc:`service </resource_service>` for more information about managing services."
msgstr ""

#: ../source/getting_started.rst:765
# fbd51086f5d6471fb8c97432e5998d3c
msgid "Manage Files"
msgstr ""

#: ../source/getting_started.rst:766
# 4f337a45d83349fa954fdb70d5e2614c
msgid "Files are managed in several ways. The |resource file| resource manages files that are already present on a node. Files are transferred to nodes from cookbooks using the |resource cookbook_file| resource and are transferred to nodes from remote locations using the |resource remote_file| resource. See :doc:`file </resource_file>` for more information about managing files, :doc:`remote_file </resource_remote_file>` for transferring files from remote locations, and :doc:`cookbook_file </resource_cookbook_file>` for transferring files that are located in cookbooks."
msgstr ""

#: ../source/getting_started.rst:769
# 95c35ef2c098466496210b7038bd14d6
msgid "Manage Templates"
msgstr ""

#: ../source/getting_started.rst:770
# f16e850ba5e6468781cfab910f0bd6a9
msgid "Templates are used to generate files based on variables and logic contained within the template file. |chef| uses |erb| templates and |ruby| expressions and statements to define the template file. Template source files must be located within cookbooks. See :doc:`template </resource_template>` for more information about managing files using |erb| templates."
msgstr ""

#: ../source/getting_started.rst:773
# 616c54bc044243e38d18707cd0f7bb16
msgid "Manage Users, Groups"
msgstr ""

#: ../source/getting_started.rst:774
# 77d5940cc4864e05b21d9e2844b6a463
msgid "Users and groups can be added, updated, removed. User passwords can be locked and unlocked. See :doc:`user </resource_user>` for more information about managing users and user passwords. The :doc:`group </resource_group>` resource manges groups."
msgstr ""

#: ../source/getting_started.rst:777
# c316eaee087045ce980959aee5d0e2cf
msgid "Use Script Interpreters"
msgstr ""

#: ../source/getting_started.rst:778
# 5d6df39b28b9492980bc40e8a5aa1cef
msgid "Script interpreters execute scripts on a node, similar to the |resource execute| resource, and with the ability to specify the interpreter that the |chef client| should use. See :doc:`script </resource_script>` for more (general) information about using scripts in recipes. Interpreter-specific resources are available, with :doc:`bash </resource_bash>` being the most popular. Also available: :doc:`csh </resource_csh>`, :doc:`perl </resource_perl>`, :doc:`powershell_script </resource_powershell_script>`, :doc:`python </resource_python>`, and :doc:`ruby </resource_ruby>`. Two |windows|-specific resources are also available: :doc:`batch </resource_batch>` and :doc:`powershell_script </resource_powershell_script>`."
msgstr ""

#: ../source/getting_started.rst:781
# d1fd884ff0af4b649c5f8ba357027a87
msgid "Use Source Control"
msgstr ""

#: ../source/getting_started.rst:782
# 23e2b9daa8344a24b91deb4f5e8e0cc4
msgid "Most users of |chef| keep their code in some type of version source control. |chef| can interact with this code from recipes. |git| is a very popular choice. The :doc:`git </resource_git>` resource is used to manage files that exist in a |git| repository. There is also a resource for :doc:`subversion </resource_subversion>`, another popular version source control tool."
msgstr ""

#: ../source/getting_started.rst:786
# ed486db4e03148089864a73a0435ac4e
msgid "About Cookbooks"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:4
# 4d37fa238f01460dbb7ca47f75f0245b
msgid "A cookbook is the fundamental unit of configuration and policy distribution. Each cookbook defines a scenario, such as everything needed to install and configure |mysql|, and then it contains all of the components that are required to support that scenario, including:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:6
# 813154d0ca1b482d99085b8e66158e01
msgid "Attribute values that are set on nodes"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:7
# 7b07ba97887b45a5b9b2c7106d72f635
msgid "Definitions that allow the creation of reusable collections of resources"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:8
# 33532993afc045188811a61dd2c07624
msgid "File distributions"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:9
# 9a9106ff9a2f47abb6b1c3d2e47b7259
msgid "Libraries that extend the |chef client| and/or provide helpers to |ruby| code"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:10
# d2993a9ae5bb415aa4b51312944c622d
msgid "Recipes that specify which resources to manage and the order in which those resources will be applied"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:11
# a173871c886847ec96969c76899d038f
msgid "Custom resources and providers"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:12
# 73a357695cfb4cecb342decc7bc99fd1
msgid "Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:13
# d1a1a87f05c841f281910f8e626bd544
msgid "Versions"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:14
# 7a1d5f4f0b9344079e9ba52ead9e638a
msgid "Metadata about recipes (including dependencies), version constraints, supported platforms, and so on"
msgstr ""

#: ../source/getting_started.rst:789
# 1e5e3e502d0b427392dc792662c3c2c1
msgid "Every cookbook follows a defined structure, but individiaul cookbooks can take on many different styles depending on how your organization wants to manage its code, who authored them, and how they are intended to be used. Some cookbooks contain only a single, default recipe. Others may contain only a library file. Some may contain only a few attributes. And other cookbooks may contain several custom resources along with many attributes and templates, and so on."
msgstr ""

#: ../source/getting_started.rst:791
# 47cb51d32d7041a4b7079415f9252ab5
msgid "Some cookbooks you will build yourself. Some cookbooks will be provided by the community. Most community cookbooks will be managed using |berkshelf|, which is a dependency manager included in the |chef dk|. Occasionally, a community cookbook will be forked, but more often a wrapper cookbook is created to handle your organization-specific requirements while still allowing use of the community cookbook."
msgstr ""

#: ../source/getting_started.rst:793
# e2171462fb384e8fa224922be418d434
msgid "The most important thing to know about cookbooks is that there are lots of ways to build good ones. There are patterns to follow, there are guidelines. There are recomended ways of dealing with attributes. There are recommended ways of creating custom resources. But ultimately, a good cookbook is the one that works for your organization. Ideally, this cookbook works across your infrastructure. Most organizations have a mix of private (internal) and public (community) cookbooks in use in their organization."
msgstr ""

#: ../source/getting_started.rst:796
# b4cae36fb5ba443bb1959c63ac5caa5b
msgid "Cookbook Patterns"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:6
# a25e4f60841c46cc90c1dbf5fc6eda2b
msgid "A primary goal of cookbook authoring is to create cookbooks that are reusable as building blocks, where each cookbook defines a specific configuration piece used by the organization. For example, say all servers across the organization will run |cron| and |ntp|, but only front-end servers in production will be load balanced. This building block approach relies on some basic guidelines:"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:8
# e71e783bc91c453995d7b79437e973e4
msgid "All cookbooks are kept in version source control"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:9
# 94cd57347e734ddcb605f7e13203735a
msgid "Cookbooks are never forked from their |github| repositories"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:10
# aee7f69357c64dadac183efb7c8ccbf3
msgid "Cookbooks may be kept in the |chef repo|, but are typically kept in their own dedicated repositories outside of the |chef repo|"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:11
# 9aa9d7f3ef9b47daa8316fc6ac9e4a3e
msgid "Cookbooks are kept as small as possible and are focused on specific configuration targets, with changes to cookbooks tracked as versions of that cookbook"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:12
# 3ef39844e6124cb0b74b1cb1f9ed8280
msgid "Cookbooks are better when unit and integration testing is done against them, automatically"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:13
# 9fc82b642067464a9be05c588be44187
msgid "When a cookbook is uploaded to the |chef server|, it is versioned and that version is frozen"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:14
# 5c1aaab1b81b465d9671b9d1c2fcb6c2
msgid "Community cookbooks are a great resource; often a community cookbook can be used wholesale (without changes), but sometimes a community cookbook needs a wrapper that is used to ensure specific organizational requirements are met"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:15
# e7c9ad0f9feb41aea2712338aafefd34
msgid "Recipes in cookbooks should be modular, minimally prescriptive, and use custom resources to expose repeatable patterns that are needed to solve implementation-specific requirements"
msgstr ""

#: ../source/getting_started.rst:800
# ecb081aa81cc4ddb89121fc0f0e58621
msgid "About |ruby|"
msgstr ""

#: ../../includes_ruby/includes_ruby.rst:5
# 6cec8be83aac4df2afecf906db5f7b56
msgid "|chef| uses |ruby| as its reference language. |ruby| is a simple programming language that |chef| uses to define the patterns that are found in resources, recipes, and cookbooks. In many cases, just using these patterns is enough to configure, deploy, and manage nodes across the network. |ruby| is also a powerful and complete programming language. You can use the full power of the |ruby| programming language to make decisions about what should happen to specific resources and recipes or to extend |chef| in any manner that your organization requires."
msgstr ""

#: ../source/getting_started.rst:804
# eac9ff5fa0894848853bb0e2a02aa01c
msgid "Conclusion"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# e418baa03e6e47ab88cc17946f36b376
msgid "The key underlying principle of |chef| is that you (the user) know best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 6717db9dad8a4f1f8b8a9110c815c334
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

