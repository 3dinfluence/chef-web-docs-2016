# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-09 21:45-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/getting_started.rst:8
# 1752d55c7bb1451d98fe5b563b7d4385
msgid "Getting Started"
msgstr ""

#: ../source/getting_started.rst:10
# fb567cfb199043c1b3bfbfdda8560f78
msgid "Welcome to |chef|!"
msgstr ""

#: ../../includes_chef/includes_chef.rst:5
# 4e79fbb6e2ce4a6188aae196cb0e31b2
msgid "|chef| is a powerful automation platform that transforms complex infrastructure into code, bringing your servers and services to life. Whether youâ€™re operating in the cloud, on-premises, or a hybrid, |chef| automates how applications are configured, deployed, and managed across your network, no matter its size."
msgstr ""

#: ../../includes_chef/includes_chef.rst:7
# 69bc5832ee494209a9c8176d4775b07e
msgid "|chef| is built around simple concepts: achieving desired state, centralized modeling of IT infrastructure, and resource primitives that serve as building blocks. These concepts enable you to quickly manage any infrastructure with |chef|. These very same concepts allow |chef| to handle the most difficult infrastructure challenges on the planet."
msgstr ""

#: ../../includes_chef/includes_chef.rst:9
# b2a9bca6c405461d80607e411260e65a
msgid "Anything that can run the |chef client| can be managed by |chef|. For instance, you can manage physical machines, virtual machines, containers, or cloud-based instances. The |chef client| is an agent that runs on a node and performs the actual tasks that configure it. The |chef server| is the central repository for all configuration data. The |chef client| and |chef server| communicate with each other. For secure communications, they use a combination of public and private keys that ensures the |chef server| responds only to requests made by the |chef client|."
msgstr ""

#: ../source/getting_started.rst:14
# ea63d6c40f2a4153819ef1f832e9a6e8
msgid "This topic is a work in progress. It needs some editing, but you should be able to install the Chef DK and then configure Kitchen to build CentOS and Ubuntu instances, and then converge a node using the NTP cookbook. More sections are planned for future updates that will include more scenarios for Kitchen, new scenarios for ChefSpec, Berkshelf, and Chef policy. Feedback on the getting started page may be sent to docs @ getchef dot com."
msgstr ""

#: ../source/getting_started.rst:17
# 3db2ccf1815d47839af3843d553ecfc0
msgid "About Resources"
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:5
# ef9411bd1211474a8a6bd374a004e2cb
msgid "A resource is a statement of configuration policy. It describes the desired state of an element of your infrastructure, along with the steps needed to bring that item to the desired state. Each resource statement in a |chef| recipe corresponds to a specific part of your infrastructure: a file, a template, a directory, a package, a service, a command to be executed, and so on. Each resource statement includes the resource type (such as ``template``, ``service`` or ``package``), its name, any attributes that specify additional details, and an action that tells the |chef client| how to implement the configuration policy."
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:7
# 5f6a5d5de22a40fa99a2916071bc6290
msgid "Together, resources describe all the components in your network. Recipes group resources together and describe working configurations. Add recipes to a run-list to describe the desired state for every node to which that run-list is assigned. Cookbooks are collections of recipes and are stored on the |chef server|."
msgstr ""

#: ../source/getting_started.rst:20
# 0933f598a62c4f25a0911d5c1e6f30df
msgid "The |chef client| includes many built-in resources that handle just about any situation. Three of these resources are an essential part of any |chef| workflow: |resource package|, |resource template|, and |resource service|. Use the |resource package| resource to install a package, the |resource template| resource to generate a file on the node that applies configuration settings for that package, and then use the |resource service| resource to start (or restart) the service associated with that package. This is a combination of resources that you will use often with |chef|."
msgstr ""

#: ../source/getting_started.rst:22
# 2c4cfa4463e24c71b7a34bab04d94596
msgid "The next step is to install |chef|, configure your workstation, and then configure |kitchen| to run virtual instances locally on that workstation. After that is finished, we'll revisit the |resource package|, |resource template|, and |resource service| resources and use them with |kitchen| to converge |ntp| into a virtual instance that is spun up and managed by |kitchen|."
msgstr ""

#: ../source/getting_started.rst:25
# 811b50b5e0d24e33954e462d25b2e16b
msgid "Workstation Setup"
msgstr ""

#: ../source/getting_started.rst:26
# 4f050206dcb248f6975dc81acae9c888
msgid "The |chef dk| is a package that contains everything you need to start using |chef|, along with a collection of tools and libaries that can help improve the code you are using to run your business."
msgstr ""

#: ../source/getting_started.rst:29
# e625e992216a4cc2a9f6d0e86711419e
msgid "Install the |chef dk_title|"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:4
# 8e2aff1a73f842c3a736854b4885bdb1
msgid "To install the |chef dk|:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:6
# 9d64416fb6224f91a6d143181f780a74
msgid "Visit this page: http://www.getchef.com/downloads/chef-dk/ and pick your platform. The |chef dk| supports |mac os x|, |redhat enterprise linux|, |ubuntu|, and |windows|."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:7
# c1846504475d4985954851fae77c4f1a
msgid "Select a platform, and then a package. (|chef docs| uses the |mac os x| setup within the documentation.)"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:8
# ec625cad129a44aaba1564293ea626f6
msgid "Click the download button."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:9
# 57c3f9bd88f54c75be8a112172f44fd2
msgid "Follow the steps in the installer and install the |chef dk| to your machine. The |chef dk| is installed to ``/opt/chefdk/`` on |unix| and |linux| systems."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:10
# 6a14ca45ddbd429da105f830db965914
msgid "When finished, open a command window and enter the following:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:16
# bd5fc8445cc7406d9ab9494180f6c754
msgid "This will verify the main components of the |chef dk|: the |chef client|, the |chef dk| library, and the tools that are built into the |chef dk|. The output should be similar to:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:25
# 30945cb31fee49c0b7ac319a52deef0a
msgid "Set the default shell. On |windows| it is strongly recommended to use |windows powershell| and cmd.exe."
msgstr ""

#: ../source/getting_started.rst:33
# fdb1be40d28b49928f20112ad3e590b3
msgid "What's in the |chef dk_title|?"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools.rst:4
# 84918613214a42c491e13ce4acaa7071
msgid "The |chef dk| installs a collection of tools and libraries into a single directory structure, which makes it easier to manage any dependencies these tools may have on each other and the dependencies that |chef| has on |ruby|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:4
# 843b68141d5a4e45a37fa6baf5b9f611
msgid "The most important tools included in the |chef dk| are:"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:10
# 077257c8a3824b29837e9a21f4e5e787
msgid "Tool"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:11
# 4778b878564445f4a7cea0d96e629fa5
msgid "Description"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:12
# 33be294f73cd4fbbb1ee38ee2dcde1d6
msgid "|berkshelf|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:13
# 5cd33475683a4c5890b1a5944b03b602
msgid "A dependency manager for cookbooks."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:14
# f88da7c03db5447fb5887b8a141aa42b
msgid "|chef ctl|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:15
# ca118319e8ac4783960a9fc175eccca0
msgid "A workflow tool for |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:16
# e38e6c28b8d34151b86697e091b145bd
msgid "|chef client|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:17
# 538dce2e68f04538b8ed71b2d3c8a31d
msgid "The agent that runs |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:18
# e128be5342e74c9ba5b2a7bb8bf389c8
msgid "|chef dk|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:19
# c2f34a380b5d4e26ba5e30e915782a0a
msgid "The |chef dk| omnibus package."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:20
# ac93f4e55505443399b5ebb2e0c99fcd
msgid "|chef spec|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:21
# 42d7c24be35b4920ac2c189cd153bfaa
msgid "A unit testing framework that tests resources locally."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:22
# 2fe09cee2c86446188e079fc3fcdf317
msgid "|foodcritic|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:23
# 6fd48f51276d4b868d43545a4af5425c
msgid "A lint tool for static analysis of recipe code."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:24
# b3250d8447a54be09e844fb4480007c3
msgid "|ruby|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:25
# 2ea8ba5a744346cd85c8a3f7081a0f2f
msgid "The reference language for |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:26
# 7275f4d684a746b48bb2bb13bea89b6f
msgid "|kitchen|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:27
# 83d9226f155946b2af77950e2b7fe8a7
msgid "An integration testing framework tool that tests cookbooks across platforms."
msgstr ""

#: ../source/getting_started.rst:39
# abc13dbd8980461fa91ee580d26a6a4d
msgid "Set the System |ruby|"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:3
# a3e94f9a8b25474e9b33d2ac85b1111d
msgid "For many users of |chef|, the |chef dk| version of |ruby| that is included in the |chef dk| should be configured as the default version of |ruby|."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:5
# fe68674df3d344859a126a1591dad8dc
msgid "Open a command window and enter the following:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:11
# 2c6a4c9e32c9456ab1d8fbe7eb132425
msgid "which will return something like ``/usr/bin/ruby``."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:12
# 95d6ff0622e241bcaee2d33ba127601e
msgid "To use the |chef dk| version of |ruby| as the default |ruby|, edit the ``$PATH`` and ``GEM`` environment variables to include paths to the |chef dk|. For example, on a machine that runs |bash|, run:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:18
# 3f762c15187a4a9f9822e5d455eb18aa
msgid "where ``bash`` and ``~/.bash_profile`` represents the name of the shell."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:20
# 2cbc55d050b54eb08bc99798d3e54e9b
msgid "If zsh is your preferred shell then run the following:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:26
# 9934c37aa2184057a50aafc37644ab8b
msgid "Run ``which ruby`` again. It should return ``/opt/chefdk/embedded/bin/ruby``."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:28
# e5cfd18a11ce4787bdade4490b42e40b
msgid "Using the |chef dk|-provided |ruby| as your system |ruby| is optional. This just depends on how you are using |ruby| on your system. For many users, |ruby| is primarily used for authoring |chef| cookbooks and recipes. If that's true for you, then using the |chef dk|-provided |ruby| as your system |ruby| is recommended. But for other users who are already using tools like |rbenv| to manage |ruby| versions, then that's OK too."
msgstr ""

#: ../source/getting_started.rst:43
# 57a7fc45ae904e3bb892f80e775538d8
msgid "Your First Cookbook"
msgstr ""

#: ../source/getting_started.rst:45
# 1e16991f0cae4141adb027f11ca88e73
msgid "We have already used the |chef ctl| ``verify`` subcommand to verify the installation of the |chef dk|. Now let's use the |chef ctl| ``generate`` subcommand to create the |chef repo|, which is the main folder in which your |chef| code will be stored. Run the following command:"
msgstr ""

#: ../source/getting_started.rst:51
# 4e79ab227f3c43d6a8fa1e39218d742e
msgid "where ``name`` is a name that you have chosen for the both the |chef repo| and the default cookbook. We are calling ours ``chef-repo``; you can call yours whatever you want. (We also renamed the default cookbook to ``chefdocs``, which is totally optional.) You should have a directory structure at ``/Users/your_username/cookbook_name/`` similar to::"
msgstr ""

#: ../source/getting_started.rst:67
# d0201757192f40da95fc6cc2c6f05072
msgid "Run the |chef client_title|"
msgstr ""

#: ../source/getting_started.rst:68
# d472e6d0402a4600a89acb6d26d78a80
msgid "The |chef client| includes a mode called \"local mode\", which runs the |chef client| locally on your machine. Local mode allows you to run recipes and work locally with the code you are using to run your business. Local mode does not require a connection to a |chef server|, public or private keys, or configuring of nodes. (Though we'll do all of these things later!) Many people use local mode for simple, local testing of recipes and cookbooks, often as a pre-cursor to running unit and integration tests against the same recipes and cookbooks."
msgstr ""

#: ../source/getting_started.rst:70
# 39203d2bff174866ac5165ce56a0e403
msgid "Open the ``default.rb`` recipe in the cookbook you just created. Add the following resource to that recipe:"
msgstr ""

#: ../source/getting_started.rst:78
# 00e83765fc8d43fbbfe801d75ddf20a4
msgid "This recipe creates a file called ``test.txt`` at the path defined by the ``HOME`` environment variable. (To view that path, run ``echo \"$HOME\"`` in the command shell.)"
msgstr ""

#: ../source/getting_started.rst:80
# c9ac809523d247a59ab5d266283ca951
msgid "Next, we'll run the |chef client|. This is done via the command line and from within the |chef repo|. Use the ``--local-mode`` flag to run the |chef client| in local mode. Use the ``--override-runlist`` flag to run only the recipe we have just created. (More about the run-list later.) For a cookbook's default recipe, only the name of the cookbook needs to be specified, as that maps to the default recipe. The following command will create the file ``test.txt``:"
msgstr ""

#: ../source/getting_started.rst:86
# 63e8325d7e774c7ebe7e3cdd3bc8f477
msgid "where ``chefdocs`` is the name of your cookbook."
msgstr ""

#: ../source/getting_started.rst:88
# 663df66558cb48a4ab95fbc4e1e0e051
msgid "As the |chef client| adds the file to your system, output similar to the following is shown:"
msgstr ""

#: ../source/getting_started.rst:119
# ee601bf95038451d88540c86ed9af095
msgid "That's it. The warnings, for the moment, can be ignored. Check the root of the path defined by the ``HOME`` environment variable and find the file named ``test.txt``. The file should contain ``This file created by Chef!``."
msgstr ""

#: ../source/getting_started.rst:121
# b2b1679d59d642bca8113ee96e0c3e01
msgid "# We'll come back to working with |chef| later on, but the next step is to familiarize yourself with resources and cookbooks."
msgstr ""

#: ../source/getting_started.rst:124
# bd9697d4c366469c9c787a5482c02bab
msgid "|kitchen_title| Setup"
msgstr ""

#: ../../includes_test_kitchen/includes_test_kitchen.rst:5
# d2f357588aac4698a52c0b24aae48be9
msgid "|kitchen| is an integration framework that is used to automatically test cookbook data across any combination of platforms and test suites, as defined by a |kitchen yml| file. |kitchen| uses a driver plugin architecture that allows it to support cookbook testing across many cloud providers and virtualization technologies. |kitchen| supports all of the common testing frameworks used by the |ruby| community."
msgstr ""

#: ../source/getting_started.rst:127
# 1d6c75c9404b4411ad0c344a13081db9
msgid "You will need some type of virtualization software for |kitchen|. |vagrant| is the default driver for |kitchen|. Install |vagrant|. |vagrant| requires |virtualbox|, so install |virtualbox|. Once you're ready, we'll keep using the same cookbook created earlier."
msgstr ""

#: ../source/getting_started.rst:130
# 2de8eed1cd914e3d9a97a75dbdc28622
msgid "Update Metadata"
msgstr ""

#: ../source/getting_started.rst:131
# ac2bb352bac5491db446dcfbe5e76d34
msgid "In that cookbok, let's update the metadata. Open the ``metadata.rb`` file. It will look similar to:"
msgstr ""

#: ../source/getting_started.rst:143
# 18227bceba9b4ba1b3b53ef67a9daa47
msgid "for now, let's just update the name and version settings, like this:"
msgstr ""

#: ../source/getting_started.rst:151
# 1547cb71a9d44cfaaf11e0badb71a8e7
msgid "Verify |kitchen yml|"
msgstr ""

#: ../source/getting_started.rst:152
# 3664d45e4e9c436c9277af8234d7014f
msgid "Because |kitchen| is installed as part of the |chef dk|, the |kitchen yml| file is already created:"
msgstr ""

#: ../source/getting_started.rst:173
# 33bc5e490ce34cccb4831f90793140a8
msgid "Let's change the default provisioner to |chef zero|:"
msgstr ""

#: ../source/getting_started.rst:186
# 6e3c8317b0c7453dbada6f9f4e54ef5a
msgid "and also make sure the |kitchen yml| knows about the default recipe in your cookbook. Under ``suites``, make sure the ``run_list`` contains the name of your cookbook. For example:"
msgstr ""

#: ../source/getting_started.rst:196
# 403824983d6641ec90d14e92f662b00c
msgid "where ``chef-repo`` is the name of your cookbook. This will ensure that |kitchen| uses this recipe when converging."
msgstr ""

#: ../source/getting_started.rst:198
# de0c96fe3700448eaa403983afe1db45
msgid "Also, |kitchen| has been added to gitignore, thor, etc. files. We just need to create the directory in which tests will be authored. This is typically a sub-directory of ``/cookbooks`` called ``/tests``. The structure underneath ``/tests`` may be customized, but is typically something like ``/test/integration/default``."
msgstr ""

#: ../source/getting_started.rst:200
# 57eda875d70a44eaa96293bcb03933b5
msgid "For now, we don't need to do anything else to get started using |kitchen|."
msgstr ""

#: ../source/getting_started.rst:203
# 4e08996a40e64822917215452e27f9d6
msgid "View Instance List"
msgstr ""

#: ../source/getting_started.rst:204
# 6e2267f94ed046e594bacab0803c4126
msgid "From your working directory, run the following command:"
msgstr ""

#: ../source/getting_started.rst:210
#: ../source/getting_started.rst:477
#: ../source/getting_started.rst:528
# 6460d4ef38f14c14a772c47f1056b765
# 12300f7996464396a82be2a1c03f55f9
# 0c37375c412048bfb563a5ab414870d0
msgid "which will return something similar to:"
msgstr ""

#: ../source/getting_started.rst:218
# d0a536725b0b4d90aa50ce95f46e8c6b
msgid "So there are two available platforms---|ubuntu| 12.04 and |centos| 6.4---configured to use the |vagrant| driver (which is enabled via the ``kitchen-vagrant`` driver that is built-in to the |chef dk|), and to run |chef zero| while running tests."
msgstr ""

#: ../source/getting_started.rst:221
# 09cbd192d1cc46c9a6c004f443e0c334
msgid "Create |centos| Instance"
msgstr ""

#: ../source/getting_started.rst:222
# 3ee2a4dfb7494f4d92ed7ffd026ea677
msgid "Let's create an instance. Run the following command:"
msgstr ""

#: ../source/getting_started.rst:228
# 3f4cfb47a8234a08bcaa07904cf0d894
msgid "This will start |vagrant|, which will then build a machine that rubs |centos| 6.4. (If this is the first time you're running |kitchen|, then |centos| needs to first be downloaded from the default instance location and may take a few minutes.)"
msgstr ""

#: ../source/getting_started.rst:263
#: ../source/getting_started.rst:320
# bc1d59f9318643f88ffd03271320c63d
# ff2ef0fd2b8e488295bb234e5c104b2e
msgid "Verify the instance list with the following command:"
msgstr ""

#: ../source/getting_started.rst:269
# 6b7fd49d3ade4991aab015b776ce7610
msgid "and you will see the following:"
msgstr ""

#: ../source/getting_started.rst:278
# 730a27c06a9e48c4811228d6b0ec48d0
msgid "Create |ubuntu| Instance"
msgstr ""

#: ../source/getting_started.rst:279
# e4627b6bbe864d679091ebaa2db1f200
msgid "Now let's create the |ubuntu| instance:"
msgstr ""

#: ../source/getting_started.rst:285
# d937a745d2224e31b5bd876ba33683f5
msgid "this may also take a few minutes, but will (eventually) return something similar to:"
msgstr ""

#: ../source/getting_started.rst:332
# 8766e3ccff774c7ebf4c41635b1a9144
msgid "and now we're all set up! We're going to use the same recipe and cookbook that we already created."
msgstr ""

#: ../source/getting_started.rst:335
# a8ec5ce72d4d489595f57dcabbe75189
msgid "Converge |centos|"
msgstr ""

#: ../source/getting_started.rst:336
# c7f664aae6ea49acbc576decc9a8c637
msgid "Now that we're all configured and ready to run |kitchen|, let's try it in |centos|:"
msgstr ""

#: ../source/getting_started.rst:342
# 06c28573dafe4060a3f73a7a855dea73
msgid "The first time you run this, it'll have to download the |chef client| and will show something similar to the following while it converges the node via |kitchen|:"
msgstr ""

#: ../source/getting_started.rst:393
# 4125d9e7b53a4931ac789066778d5d97
msgid "Converge |ubuntu|"
msgstr ""

#: ../source/getting_started.rst:394
# c961f68fe5b24a9b94d6595c245a9704
msgid "Now let's try it in |ubuntu|:"
msgstr ""

#: ../source/getting_started.rst:400
# b0c6a0fa4291406ab0d27c323ca1f285
msgid "Like |centos|, the |chef client| will need to be downloaded:"
msgstr ""

#: ../source/getting_started.rst:450
#: ../source/getting_started.rst:729
# 733bbc40b56b495b9bb710d6669d9fb1
# d926f67a04564eddafe8cb451498c6f4
msgid "Verify Instance List"
msgstr ""

#: ../source/getting_started.rst:451
#: ../source/getting_started.rst:730
# 3b4b52fa1b8046168061107f76bc31b0
# c08c7f9aea124e30a9e793c543ff2412
msgid "To verify if both instances have been converged, run the following command:"
msgstr ""

#: ../source/getting_started.rst:463
# 7c88c786cded464f800f0f6010b85455
msgid "Now you can run your cookbooks in a virtual instance managed by |kitchen| on multiple platforms (|ubuntu| and |centos|)."
msgstr ""

#: ../source/getting_started.rst:466
# a21c09c80ed8451caa0eac20bbc74b9f
msgid "Configure NTP"
msgstr ""

#: ../source/getting_started.rst:467
# 0f836fc6b3ac451797d024ca5f5450b0
msgid "Instead of putting a text file on these |kitchen| instances, let's try something useful and install |ntp|. Within the cookbook we're already using, let's update the default recipe to install and configure |ntp| using the |resource package|, |resource template|, and |resource service| resources, a template file, and an attributes file."
msgstr ""

#: ../source/getting_started.rst:470
# daa78213a10f48c7829a575bae04b57b
msgid "Add Template"
msgstr ""

#: ../source/getting_started.rst:471
# eb6c7b980bf746aaaa56f515ffbf4f17
msgid "The |resource template| resource looks for templates in a cookbook's ``/templates`` directory. Template files in this directory must be |erb| files. The |chef ctl| has an argument that will handle most of this process for you. Let's create that directory and the template file we'll use to configure |ntp| using this command. Let's use the same cookbook we've been using. From within that cookbook repo, run the following command:"
msgstr ""

#: ../source/getting_started.rst:489
#: ../source/getting_started.rst:540
# 01956d80fac0401c984f05c75ce8b676
# a25da7536bcb460eb526aafeedbf3d32
msgid "and a directory structure in that cookbook similar to::"
msgstr ""

#: ../source/getting_started.rst:507
# 701c25f522f243fea63d23f52458e698
msgid "and an empty ``ntp.conf.erb`` file. Let's edit this file and define its contents. Open this file and add the following:"
msgstr ""

#: ../source/getting_started.rst:521
# 93ccc3af5d2445cbabbf92a38d1e158e
msgid "Add Attributes"
msgstr ""

#: ../source/getting_started.rst:522
# f76d3e13e67d4ab098a0234fe18d92e1
msgid "The name of the init script that is used to run |ntp| is ``ntp`` on |debian|-based platforms (such as |ubuntu|) and is ``ntpd`` on |redhat enterprise linux|-based platforms. Let's use an attribute in our cookbook to tell the |chef client| what to do on both platforms using a single cookbook attribute. Like for templates, the |chef ctl| has an argument that will handle most of this process for you. Let's create that directory and the default attribute file we'll use to tell the |chef client| how to handle the attribute. Let's use the same cookbook we've been using. From within that cookbook repo, run the following command:"
msgstr ""

#: ../source/getting_started.rst:560
# c077ea71f0c34b6aa68f386655f1d327
msgid "and an empty ``default.rb`` file. Let's edit this file and define its contents. Open this file and add the following:"
msgstr ""

#: ../source/getting_started.rst:574
# 74456e9353e64b8b91be1ce754afa690
msgid "This attribute uses conditions to tell the |chef client| the correct name of the init script that will be used to start |ntp|, by platform. The attribute that is being set by this code block is ``node[:ntp][:service]`` and the |chef client| can use this attribute to identify the correct init script for |ntp| on any node and for any platform. If |debian|, use ``ntp`` and for everything else use ``ntpd``."
msgstr ""

#: ../source/getting_started.rst:577
# 39f0c70be5cc4b6db9d607b51d7e0937
msgid "Edit Recipe"
msgstr ""

#: ../source/getting_started.rst:578
# 2e800e8f217a43dd9a1e6e731d67e361
msgid "To install |ntp|, a recipe needs to do three things:"
msgstr ""

#: ../source/getting_started.rst:580
# 9886791c6b3e4f4c822543ea1aff5030
msgid "# Install |ntp| # Create a configuration file; this will be done using the ``ntp.conf.erb`` template file # Start the ``ntp`` or ``ntpd`` service, depending on the platform; this will be done using the ``node[:ntp][:service]`` attribute"
msgstr ""

#: ../source/getting_started.rst:584
# 07cb3142daeb47899343b8e217971e82
msgid "Open the ``default.rb`` recipe file and replace the contents of that file with the following:"
msgstr ""

#: ../source/getting_started.rst:603
# ea31191e1397496ab70815c0b8a6cdca
msgid "The |resource package| resource installs the |ntp| package. The |resource template| resource gets the template file from the cookbook, and then uses it to create a ``ntp.conf`` file in the ``/etc/ntp.conf`` directory on the node, after which it notifies the |resource service| resource to restart the ``ntp`` or ``ntpd`` service. The |resource service| resource ensures that the ``ntp`` or ``ntpd`` service is started and enabled."
msgstr ""

#: ../source/getting_started.rst:606
# f904061117654516b4940b7c6cf51bc8
msgid "Install |ntp| on |centos|"
msgstr ""

#: ../source/getting_started.rst:607
# ab8c365f882d484995d784e51df14a02
msgid "Now let's install |ntp| in |centos|:"
msgstr ""

#: ../source/getting_started.rst:613
#: ../source/getting_started.rst:674
# cc0d53e44f5f494cba04eb677dc35db8
# cf9e0bc0e87042768e89418a927b6461
msgid "As it installs, the |chef client| will report back something similar to the following:"
msgstr ""

#: ../source/getting_started.rst:667
# dc57cd565318482bbbef292666a2be26
msgid "Install |ntp| on |ubuntu|"
msgstr ""

#: ../source/getting_started.rst:668
# 333636b3dbbd4ac9bb58aad806e66759
msgid "And finally, install |ntp| in |ubuntu|:"
msgstr ""

#: ../source/getting_started.rst:743
# b404e73b591b45a0a63711f0e1b36e86
msgid "More About Resources"
msgstr ""

#: ../source/getting_started.rst:744
# 63a3295505ba467db8c6128a44eb9b25
msgid "The |chef client| includes many built-in resources: |resource execute|, |resource directory|, |resource package|, |resource service|, |resource file|, |resource template|, |resource user|, |resource script|, and |resource scm_git|."
msgstr ""

#: ../source/getting_started.rst:746
# 668ad622a89142b8870bdedcc83b2114
msgid "The sections below quickly describe the most popular resources. For the full list of built-in |chef| resources, see `Resources <http://docs.opscode.com/resource.html#resources>`_. You can also `create your own resources <http://docs.opscode.com/lwrp_custom.html>`_ or `use the resources built into the community cookbooks <http://supermarket.getchef.com>`_."
msgstr ""

#: ../source/getting_started.rst:749
# cfeef102a77343f2b1cac108ce543f5a
msgid "Execute Commands"
msgstr ""

#: ../source/getting_started.rst:750
# 4093779697014867900c52074237f9aa
msgid "Commands are executed using the |resource execute| resource using an attribute to specify the actual command to run. See :doc:`execute </resource_execute>` for more information about executing commands."
msgstr ""

#: ../source/getting_started.rst:753
# 9bf0b73cf6e64d7da19fa4f6ac919947
msgid "Manage Directories"
msgstr ""

#: ../source/getting_started.rst:754
# 92c83f8a5e984fe8ada801255ace0821
msgid "Directories are hierarchies of folders that comprise all the information stored on a computer. There are two ways to manage directories. The first is via the |resource directory| resource, which manages directories starting from the root directory. And the second is the |resource remote_directory|, which transfers directory structures defined in cookbooks to nodes. See :doc:`directory </resource_directory>` for more information about managing directories. If the directory is defined in a cookbook, use :doc:`remote_directory </resource_remote_directory>` instead."
msgstr ""

#: ../source/getting_started.rst:757
# 0ea136a30fda490c86327484818dd246
msgid "Manage Packages"
msgstr ""

#: ../source/getting_started.rst:758
# 233e8cf1b34c4269b8233c49fbed3b3f
msgid "Packages are collections of files that comprise software applications or some part of an operating system. Use the package resource to manage these packages, unless they are sourced via |rubygems| and installed directly from within recipes or are sourced from a cookbook. See :doc:`package </resource_package>` for more information about managing packages. There are quite a few platform-specific package resources as well, though most of the time simply using the |resource package| is all that's necessary. For packages that are located in cookobooks, use :doc:`chef_gem </resource_chef_gem>`. And for packages that are only included via recipes, use :doc:`gem_package </resource_gem_package>`."
msgstr ""

#: ../source/getting_started.rst:761
# 78517c4d1c2b4cedaf7e1a8fd71a1acb
msgid "Manage Services"
msgstr ""

#: ../source/getting_started.rst:762
# de8860dd9879420e81d4a834d3f91696
msgid "Services can be started, stopped, enabled, disabled, reloaded, and restarted. See :doc:`service </resource_service>` for more information about managing services."
msgstr ""

#: ../source/getting_started.rst:765
# eeb9bff5d5364c43b1e3d5dd32be1df9
msgid "Manage Files"
msgstr ""

#: ../source/getting_started.rst:766
# d1b2f4c338dc4aff9ad320ae285c4e8a
msgid "Files are managed in several ways. The |resource file| resource manages files that are already present on a node. Files are transferred to nodes from cookbooks using the |resource cookbook_file| resource and are transferred to nodes from remote locations using the |resource remote_file| resource. See :doc:`file </resource_file>` for more information about managing files, :doc:`remote_file </resource_remote_file>` for transferring files from remote locations, and :doc:`cookbook_file </resource_cookbook_file>` for transferring files that are located in cookbooks."
msgstr ""

#: ../source/getting_started.rst:769
# b34dd786bba64e208885f501d62ba044
msgid "Manage Templates"
msgstr ""

#: ../source/getting_started.rst:770
# 78e890a86ab746a0907d778d8c874b7b
msgid "Templates are used to generate files based on variables and logic contained within the template file. |chef| uses |erb| templates and |ruby| expressions and statements to define the template file. Template source files must be located within cookbooks. See :doc:`template </resource_template>` for more information about managing files using |erb| templates."
msgstr ""

#: ../source/getting_started.rst:773
# 4291035af03a4c70995a4d3743d72c8f
msgid "Manage Users, Groups"
msgstr ""

#: ../source/getting_started.rst:774
# fb2e1f4db39a4b26acb738c16db1dd60
msgid "Users and groups can be added, updated, removed. User passwords can be locked and unlocked. See :doc:`user </resource_user>` for more information about managing users and user passwords. The :doc:`group </resource_group>` resource manges groups."
msgstr ""

#: ../source/getting_started.rst:777
# c3ea15baa7e94c7fa24303180d085b2e
msgid "Use Script Interpreters"
msgstr ""

#: ../source/getting_started.rst:778
# fd57878feaff40a78d35940ec106a92e
msgid "Script interpreters execute scripts on a node, similar to the |resource execute| resource, and with the ability to specify the interpreter that the |chef client| should use. See :doc:`script </resource_script>` for more (general) information about using scripts in recipes. Interpreter-specific resources are available, with :doc:`bash </resource_bash>` being the most popular. Also available: :doc:`csh </resource_csh>`, :doc:`perl </resource_perl>`, :doc:`powershell_script </resource_powershell_script>`, :doc:`python </resource_python>`, and :doc:`ruby </resource_ruby>`. Two |windows|-specific resources are also available: :doc:`batch </resource_batch>` and :doc:`powershell_script </resource_powershell_script>`."
msgstr ""

#: ../source/getting_started.rst:781
# eaa634a9dfd145a4979b86f16cdd6167
msgid "Use Source Control"
msgstr ""

#: ../source/getting_started.rst:782
# 1002fc30f8b243d58c1235aac6340bef
msgid "Most users of |chef| keep their code in some type of version source control. |chef| can interact with this code from recipes. |git| is a very popular choice. The :doc:`git </resource_git>` resource is used to manage files that exist in a |git| repository. There is also a resource for :doc:`subversion </resource_subversion>`, another popular version source control tool."
msgstr ""

#: ../source/getting_started.rst:786
# bfef5e5c398b474a9acc569a496fdf32
msgid "About Cookbooks"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:4
# ec7a24bd0a694e8ebf3ad9554935ccfd
msgid "A cookbook is the fundamental unit of configuration and policy distribution. Each cookbook defines a scenario, such as everything needed to install and configure |mysql|, and then it contains all of the components that are required to support that scenario, including:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:6
# 2f743cbad1aa4b03b3644646b7d8f4e3
msgid "Attribute values that are set on nodes"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:7
# 288aaec5418d416fa2c4a086184b7d4c
msgid "Definitions that allow the creation of reusable collections of resources"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:8
# 973a66ee48d64e3c95a55d8adba309a9
msgid "File distributions"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:9
# 7b57a519949245aba4e86ead10abebc2
msgid "Libraries that extend the |chef client| and/or provide helpers to |ruby| code"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:10
# 44de8a549ae44f84a264a2f56c6cff36
msgid "Recipes that specify which resources to manage and the order in which those resources will be applied"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:11
# 48f54cd6acc74960b6909c2b4cc36860
msgid "Custom resources and providers"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:12
# 68f951ea631d4592ab159656bab8a8e8
msgid "Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:13
# 8a857fd5ed4843f1a664455f3bc3916d
msgid "Versions"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:14
# 34dc0b5563d44e8aaf383b6163a2dcd2
msgid "Metadata about recipes (including dependencies), version constraints, supported platforms, and so on"
msgstr ""

#: ../source/getting_started.rst:789
# fc5e434eaeda46b0904669253dad7cd1
msgid "Every cookbook follows a defined structure, but individiaul cookbooks can take on many different styles depending on how your organization wants to manage its code, who authored them, and how they are intended to be used. Some cookbooks contain only a single, default recipe. Others may contain only a library file. Some may contain only a few attributes. And other cookbooks may contain several custom resources along with many attributes and templates, and so on."
msgstr ""

#: ../source/getting_started.rst:791
# ba3e7981959f4e36a5b3832ae56ca9b9
msgid "Some cookbooks you will build yourself. Some cookbooks will be provided by the community. Most community cookbooks will be managed using |berkshelf|, which is a dependency manager included in the |chef dk|. Occasionally, a community cookbook will be forked, but more often a wrapper cookbook is created to handle your organization-specific requirements while still allowing use of the community cookbook."
msgstr ""

#: ../source/getting_started.rst:793
# 2cbbf639268947409e0f666ece16d1ca
msgid "The most important thing to know about cookbooks is that there are lots of ways to build good ones. There are patterns to follow, there are guidelines. There are recomended ways of dealing with attributes. There are recommended ways of creating custom resources. But ultimately, a good cookbook is the one that works for your organization. Ideally, this cookbook works across your infrastructure. Most organizations have a mix of private (internal) and public (community) cookbooks in use in their organization."
msgstr ""

#: ../source/getting_started.rst:796
# f9ae97704971426096cf912bed9f8db9
msgid "Cookbook Patterns"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:6
# cd61f8bf822045c496c6784e4ce6d804
msgid "A primary goal of cookbook authoring is to create cookbooks that are reusable as building blocks, where each cookbook defines a specific configuration piece used by the organization. For example, say all servers across the organization will run |cron| and |ntp|, but only front-end servers in production will be load balanced. This building block approach relies on some basic guidelines:"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:8
# 6797eca5694a4b04bdf3711d8ce9b889
msgid "All cookbooks are kept in version source control"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:9
# 3ff1eacb3cf04388b1b867b09add4187
msgid "Cookbooks are never forked from their |github| repositories"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:10
# 9b96cee42db3483d892e5815193e5baf
msgid "Cookbooks may be kept in the |chef repo|, but are typically kept in their own dedicated repositories outside of the |chef repo|"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:11
# 4eadc84cffca495f91573d354019a12b
msgid "Cookbooks are kept as small as possible and are focused on specific configuration targets, with changes to cookbooks tracked as versions of that cookbook"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:12
# 9c0a028ced3647988bdba7566a1685d9
msgid "Cookbooks are better when unit and integration testing is done against them, automatically"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:13
# bef8302be4824f70929cf494c515b7e3
msgid "When a cookbook is uploaded to the |chef server|, it is versioned and that version is frozen"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:14
# 1eaf71488b96437e8845ef5ebd5e4f94
msgid "Community cookbooks are a great resource; often a community cookbook can be used wholesale (without changes), but sometimes a community cookbook needs a wrapper that is used to ensure specific organizational requirements are met"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:15
# 35d3ab0d2b594a12b23016b7e31c2be8
msgid "Recipes in cookbooks should be modular, minimally prescriptive, and use custom resources to expose repeatable patterns that are needed to solve implementation-specific requirements"
msgstr ""

#: ../source/getting_started.rst:800
# a375da6fa8004798a81ea53d89f206f5
msgid "About |ruby|"
msgstr ""

#: ../../includes_ruby/includes_ruby.rst:5
# e5f8ed9fc070427b8ee1c05a596a4e44
msgid "|chef| uses |ruby| as its reference language. |ruby| is a simple programming language that |chef| uses to define the patterns that are found in resources, recipes, and cookbooks. In many cases, just using these patterns is enough to configure, deploy, and manage nodes across the network. |ruby| is also a powerful and complete programming language. You can use the full power of the |ruby| programming language to make decisions about what should happen to specific resources and recipes or to extend |chef| in any manner that your organization requires."
msgstr ""

#: ../source/getting_started.rst:804
# 168e5c0dd8b441d0b1f4915f72d5673d
msgid "Conclusion"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 53f45c8a163d4e7f8bc3ec4dd02a4cc5
msgid "The key underlying principle of |chef| is that you (the user) know best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# cabe2faf90bb4da58d1794c15aa88607
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

