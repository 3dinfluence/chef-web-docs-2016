# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-08 14:52-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/getting_started.rst:8
# fa9ca72339404c578a902b8e4f781e1c
msgid "Getting Started"
msgstr ""

#: ../source/getting_started.rst:10
# 697af0ca4cc44216ae098b8547d37155
msgid "Welcome to |chef|!"
msgstr ""

#: ../../includes_chef/includes_chef.rst:5
# bf1d30adb47f42e4a5eb9c1549855bc3
msgid "|chef| is a powerful automation platform that transforms complex infrastructure into code, bringing your servers and services to life. Whether youâ€™re operating in the cloud, on-premises, or a hybrid, |chef| automates how applications are configured, deployed, and managed across your network, no matter its size."
msgstr ""

#: ../../includes_chef/includes_chef.rst:7
# 7a83883f56ab4bfa935e8c2229ea3dd9
msgid "|chef| is built around simple concepts: achieving desired state, centralized modeling of IT infrastructure, and resource primitives that serve as building blocks. These concepts enable you to quickly manage any infrastructure with |chef|. These very same concepts allow |chef| to handle the most difficult infrastructure challenges on the planet."
msgstr ""

#: ../../includes_chef/includes_chef.rst:9
# 120b3101b6064d7c860cadc7fc253f25
msgid "Anything that can run the |chef client| can be managed by |chef|. For instance, you can manage physical machines, virtual machines, containers, or cloud-based instances. The |chef client| is an agent that runs on a node and performs the actual tasks that configure it. The |chef server| is the central repository for all configuration data. The |chef client| and |chef server| communicate with each other. For secure communications, they use a combination of public and private keys that ensures the |chef server| responds only to requests made by the |chef client|."
msgstr ""

#: ../source/getting_started.rst:15
# d3b9461d6f69412386a958b7d6a01e02
msgid "About Resources"
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:5
# 4cac8c6ba07b4cf4bc4fdf65bf1bb574
msgid "A resource is a statement of configuration policy. It describes the desired state of an element of your infrastructure, along with the steps needed to bring that item to the desired state. Each resource statement in a |chef| recipe corresponds to a specific part of your infrastructure: a file, a template, a directory, a package, a service, a command to be executed, and so on. Each resource statement includes the resource type (such as ``template``, ``service`` or ``package``), its name, any attributes that specify additional details, and an action that tells the |chef client| how to implement the configuration policy."
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:7
# a60b2af773754231955ea2e5180b018e
msgid "Together, resources describe all the components in your network. Recipes group resources together and describe working configurations. Add recipes to a run-list to describe the desired state for every node to which that run-list is assigned. Cookbooks are collections of recipes and are stored on the |chef server|."
msgstr ""

#: ../source/getting_started.rst:18
# d9b9d5b5e73b49bca642b5cf5fff20c4
msgid "The |chef client| includes many built-in resources that handle just about any situation. Three of these resources are an essential part of any |chef| workflow: |resource package|, |resource template|, and |resource service|. Use the |resource package| resource to install a package, the |resource template| resource to generate a file on the node that applies configuration settings for that package, and then use the |resource service| resource to start (or restart) the service associated with that package. This is a combination of resources that you will use often with |chef|."
msgstr ""

#: ../source/getting_started.rst:20
# 096c5d63785d49f5a7f3090b2521159a
msgid "The next step is to install |chef|, configure your workstation, and then configure |kitchen| to run virtual instances locally on that workstation. After that is finished, we'll revisit the |resource package|, |resource template|, and |resource service| resources and use them with |kitchen| to converge |ntp| into a virtual instance that is spun up and managed by |kitchen|."
msgstr ""

#: ../source/getting_started.rst:23
# ca7e0226358645959c750497ae58b2b8
msgid "Workstation Setup"
msgstr ""

#: ../source/getting_started.rst:24
# 1ef3992c8a164f388e176a6d217e534d
msgid "The |chef dk| is a package that contains everything you need to start using |chef|, along with a collection of tools and libaries that can help improve the code you are using to run your business."
msgstr ""

#: ../source/getting_started.rst:27
# a119fbd1e815448195911c93c25296e0
msgid "Install the |chef dk|"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:4
# ca414b463b5c48778400657ed7ac46ad
msgid "To install the |chef dk|:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:6
# e7c191cfc02b400c84e12746c6e23138
msgid "Visit this page: http://www.getchef.com/downloads/chef-dk/ and pick your platform. The |chef dk| supports |mac os x|, |redhat enterprise linux|, |ubuntu|, and |windows|."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:7
# 1e5d29a0696c4c75afbc76d269c969c9
msgid "Select a platform, and then a package. (|chef docs| uses the |mac os x| setup within the documentation.)"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:8
# a64212310f274f0694b498195e8970d8
msgid "Click the download button."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:9
# 632fa9d5d6454ff5b97538bce42b770d
msgid "Follow the steps in the installer and install the |chef dk| to your machine. The |chef dk| is installed to ``/opt/chefdk/`` on |unix| and |linux| systems."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:10
# 481aade27b5a4c04af2f02a8099666f1
msgid "When finished, open a command window and enter the following:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:16
# 1a8cf9f9a9a64db9b1f57047147837da
msgid "This will verify the main components of the |chef dk|: the |chef client|, the |chef dk| library, and the tools that are built into the |chef dk|. The output should be similar to:"
msgstr ""

#: ../source/getting_started.rst:31
# 5a0e25c39f694f14ac16b11c14498b0a
msgid "What's in the |chef dk|?"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools.rst:4
# d783fcfdf8594a488523ad7b97d34815
msgid "The |chef dk| installs a collection of tools and libraries into a single directory structure, which makes it easier to manage any dependencies these tools may have on each other and the dependencies that |chef| has on |ruby|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:4
# c59428838f0343de99171747ee1db839
msgid "The most important tools included in the |chef dk| are:"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:10
# 7c373be2f916496bbd07cbca010aa04e
msgid "Tool"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:11
# 8969e17b45d643e4bc20566f981dc023
msgid "Description"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:12
# 8d9352dd8c704f90bf2fc44d533e7c34
msgid "|berkshelf|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:13
# 34cdf4639fa74007a1ba71c53c1a521d
msgid "A dependency manager for cookbooks."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:14
# 992dc40214a842b9ab1505a198598444
msgid "|chef ctl|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:15
# cd148036d5b64af0bd33cc760ac83f8f
msgid "A workflow tool for |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:16
# bfa0633a8a4248d4bde17e60840e8d0c
msgid "|chef client|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:17
# 1b6e2446c4064afb84ebf6aae6e03efa
msgid "The agent that runs |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:18
# f676cc56745c4f7780db3eb6ce1c6de7
msgid "|chef dk|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:19
# f95b0e1d410a4843abc796c855c90b73
msgid "The |chef dk| omnibus package."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:20
# 103cbeafc79a4cafaa43ba82b00ccf5a
msgid "|chef spec|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:21
# 17c3bff280ac45feba35e1973c266690
msgid "A unit testing framework that tests resources locally."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:22
# b09da9b353e34bb29c85aadf9a5875c6
msgid "|ruby|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:23
# 1298085a31f749baa1059fa0079f5e24
msgid "The reference language for |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:24
# 7e2a2ecdef28406e9cc29a921fd0e4c1
msgid "|kitchen|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:25
# dad68397af584dbc80ae57984d0ae947
msgid "An integration testing framework tool that tests cookbooks across platforms."
msgstr ""

#: ../source/getting_started.rst:37
# 9dd827e1fa314828a9ed88dbfd2245ee
msgid "Set the System |ruby|"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:3
# 33fd6fb1538a49c5a9fa79352afe1bdb
msgid "For many users of |chef|, the |chef dk| version of |ruby| that is included in the |chef dk| should be configured as the default version of |ruby|."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:5
# 6467ccaa6323411487777ae863a45a77
msgid "Open a command window and enter the following:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:11
# 9fc5346ce7d043f292206db691e29bd2
msgid "which will return something like ``/usr/bin/ruby``."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:12
# d2bfeab9dfeb493bb3d30cea5148cb5e
msgid "To use the |chef dk| version of |ruby| as the default |ruby|, edit the ``$PATH`` and ``GEM`` environment variables to include paths to the |chef dk|. For example, on a machine that runs |bash|, run:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:18
# d5a7d619781943dc9added7c6800b718
msgid "where ``bash`` and ``~/.bash_profile`` represents the name of the shell."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:20
# 77339dd18443455c9ef1cc956af9ab8d
msgid "If zsh is your preferred shell then run the following:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:26
# 524c4238eeff4429a41017197b00084e
msgid "Run ``which ruby`` again. It should return ``/opt/chefdk/embedded/bin/ruby``."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:28
# 4e99eb39fcf7407b8782d9ba0608815f
msgid "Using the |chef dk|-provided |ruby| as your system |ruby| is optional. This just depends on how you are using |ruby| on your system. For many users, |ruby| is primarily used for authoring |chef| cookbooks and recipes. If that's true for you, then using the |chef dk|-provided |ruby| as your system |ruby| is recommended. But for other users who are already using tools like |rbenv| to manage |ruby| versions, then that's OK too."
msgstr ""

#: ../source/getting_started.rst:41
# 840de99d7b2443218279cbb3de115fa1
msgid "Your First Cookbook"
msgstr ""

#: ../source/getting_started.rst:43
# 85b3a2b6edcb401b9c2dac86c8baa144
msgid "We have already used the |chef ctl| ``verify`` subcommand to verify the installation of the |chef dk|. Now let's use the |chef ctl| ``generate`` subcommand to create the |chef repo|, which is the main folder in which your |chef| code will be stored. Run the following command:"
msgstr ""

#: ../source/getting_started.rst:49
# df3e53acb0c34973b0c8fcd606d327d2
msgid "where ``name`` is a name that you have chosen for the both the |chef repo| and the default cookbook. We are calling ours ``chef-repo``; you can call yours whatever you want. (We also renamed the default cookbook to ``chefdocs``, which is totally optional.) You should have a directory structure at ``/Users/your_username/cookbook_name/`` similar to::"
msgstr ""

#: ../source/getting_started.rst:65
# 9f65ebc38eba42408e213dfd649ca80b
msgid "Run the |chef client|"
msgstr ""

#: ../source/getting_started.rst:66
# b30cf01ccf304614a90cd7fc4ec21c95
msgid "The |chef client| includes a mode called \"local mode\", which runs the |chef client| locally on your machine. Local mode allows you to run recipes and work locally with the code you are using to run your business. Local mode does not require a connection to a |chef server|, public or private keys, or configuring of nodes. (Though we'll do all of these things later!) Many people use local mode for simple, local testing of recipes and cookbooks, often as a pre-cursor to running unit and integration tests against the same recipes and cookbooks."
msgstr ""

#: ../source/getting_started.rst:68
# 1f178e2a50854e278d45ea73b02c7851
msgid "Open the ``default.rb`` recipe in the cookbook you just created. Add the following resource to that recipe:"
msgstr ""

#: ../source/getting_started.rst:76
# 8e50b8a526374fd49cc0cb2653e44d7f
msgid "This recipe creates a file called ``test.txt`` at the path defined by the ``HOME`` environment variable. (To view that path, run ``echo \"$HOME\"`` in the command shell.)"
msgstr ""

#: ../source/getting_started.rst:78
# 1f559577136449dfb21f63567f872b6e
msgid "Next, we'll run the |chef client|. This is done via the command line and from within the |chef repo|. Use the ``--local-mode`` flag to run the |chef client| in local mode. Use the ``--override-runlist`` flag to run only the recipe we have just created. (More about the run-list later.) For a cookbook's default recipe, only the name of the cookbook needs to be specified, as that maps to the default recipe. The following command will create the file ``test.txt``:"
msgstr ""

#: ../source/getting_started.rst:84
# b16262400457449b803a893a78fb7fb7
msgid "where ``chefdocs`` is the name of your cookbook."
msgstr ""

#: ../source/getting_started.rst:86
# 27157be5fb9b43569742154a8a847a96
msgid "As the |chef client| adds the file to your system, output similar to the following is shown:"
msgstr ""

#: ../source/getting_started.rst:117
# afd4df3bdf76425d8585df7962bf672e
msgid "That's it. The warnings, for the moment, can be ignored. Check the root of the path defined by the ``HOME`` environment variable and find the file named ``test.txt``. The file should contain ``This file created by Chef!``."
msgstr ""

#: ../source/getting_started.rst:119
# 8a4e82ad248c402d8535a38d61f20150
msgid "# We'll come back to working with |chef| later on, but the next step is to familiarize yourself with resources and cookbooks."
msgstr ""

#: ../source/getting_started.rst:122
# 6b6a44d4f1cf41b18594c4eacb5bbdcf
msgid "|kitchen| Setup"
msgstr ""

#: ../../includes_test_kitchen/includes_test_kitchen.rst:5
# 3a43a27cf9c64593b7b0b3cfc06336d2
msgid "|kitchen| is an integration framework that is used to automatically test cookbook data across across any combination of platforms and test suites, as defined by a |kitchen yml| file. |kitchen| uses a driver plugin architecture that allows it to support cookbook testing across many cloud providers and virtualization technologies. |kitchen| supports all of the common testing frameworks used by the |ruby| community."
msgstr ""

#: ../source/getting_started.rst:125
# 19559c7bebb24fbbbf4b436ccad64d97
msgid "You will need some type of virtualization software for |kitchen|. |vagrant| is the default driver for |kitchen|. Install |vagrant|. |vagrant| requires |virtualbox|, so install |virtualbox|. Once you're ready, we'll keep using the same cookbook created earlier."
msgstr ""

#: ../source/getting_started.rst:128
# 69fd1feb49cd4a4697a20b5968c4a757
msgid "Update Metadata"
msgstr ""

#: ../source/getting_started.rst:129
# 0c2a3cbea7994e34bede3a5e949ecd0d
msgid "In that cookbok, let's update the metadata. Open the ``metadata.rb`` file. It will look similar to:"
msgstr ""

#: ../source/getting_started.rst:141
# 63ba3c05f36c4757ac704a7cd666ab44
msgid "for now, let's just update the name and version settings, like this:"
msgstr ""

#: ../source/getting_started.rst:149
# 6f340282854046108689cb6a4fbd888f
msgid "Verify |kitchen yml|"
msgstr ""

#: ../source/getting_started.rst:150
# 03c77580a12142aebefe5ec6f5421760
msgid "Because |kitchen| is installed as part of the |chef dk|, the |kitchen yml| file is already created:"
msgstr ""

#: ../source/getting_started.rst:171
# b49530bd04b2456bbe6a3557d3590c66
msgid "Let's change the default provisioner to |chef zero|:"
msgstr ""

#: ../source/getting_started.rst:184
# 25dc870f2b934ff891be94e4727cf5ba
msgid "and also make sure the |kitchen yml| knows about the default recipe in your cookbook. Under ``suites``, make sure the ``run_list`` contains the name of your cookbook. For example:"
msgstr ""

#: ../source/getting_started.rst:194
# 7b4c2d24478840f98ad2f3c527f01d5b
msgid "where ``chef-repo`` is the name of your cookbook. This will ensure that |kitchen| uses this recipe when converging."
msgstr ""

#: ../source/getting_started.rst:196
# 01e0881fe04e47a186204fbaf0c64569
msgid "Also, |kitchen| has been added to gitignore, thor, etc. files. We just need to create the directory in which tests will be authored. This is typically a sub-directory of ``/cookbooks`` called ``/tests``. The structure underneath ``/tests`` may be customized, but is typically something like ``/test/integration/default``."
msgstr ""

#: ../source/getting_started.rst:198
# c9ea02ae45fe47d28fbdc759e8a001af
msgid "For now, we don't need to do anything else to get started using |kitchen|."
msgstr ""

#: ../source/getting_started.rst:201
# 21ed8c953d6a41e8a2a74fad9e3a702f
msgid "View Instance List"
msgstr ""

#: ../source/getting_started.rst:202
# 0932540775be4d448578874d93db6b44
msgid "From your working directory, run the following command:"
msgstr ""

#: ../source/getting_started.rst:208
#: ../source/getting_started.rst:475
#: ../source/getting_started.rst:526
# 1583132e5738497286dde11d74b4274b
# 300c1db5ead448acb726991ee9b3c984
# 81e29e8819c241859bf0988c691bdc0d
msgid "which will return something similar to:"
msgstr ""

#: ../source/getting_started.rst:216
# 26381415e0954ea9a8f9605b0a3aa72b
msgid "So there are two available platforms---|ubuntu| 12.04 and |centos| 6.4---configured to use the |vagrant| driver (which is enabled via the ``kitchen-vagrant`` driver that is built-in to the |chef dk|), and to run |chef zero| while running tests."
msgstr ""

#: ../source/getting_started.rst:219
# 2ea9a06da60d4f059c3ece5eeb3ac35e
msgid "Create |centos| Instance"
msgstr ""

#: ../source/getting_started.rst:220
# c2e3b365b5ed406aa5878877371593f7
msgid "Let's create an instance. Run the following command:"
msgstr ""

#: ../source/getting_started.rst:226
# c13abf7830f64ec08dd815fb7deb5246
msgid "This will start |vagrant|, which will then build a machine that rubs |centos| 6.4. (If this is the first time you're running |kitchen|, then |centos| needs to first be downloaded from the default instance location and may take a few minutes.)"
msgstr ""

#: ../source/getting_started.rst:261
#: ../source/getting_started.rst:318
# 59a4cd8829be45bdb1534815935f0781
# 4f60d9aa1c3841f5be3cca50c7a4b949
msgid "Verify the instance list with the following command:"
msgstr ""

#: ../source/getting_started.rst:267
# 8014561f05dd4c49b6285d860024ad64
msgid "and you will see the following:"
msgstr ""

#: ../source/getting_started.rst:276
# 8c2ea07752fa44658719e2af5fc2bce6
msgid "Create |ubuntu| Instance"
msgstr ""

#: ../source/getting_started.rst:277
# 4424d49a7f9e47bf91a82a98033679f4
msgid "Now let's create the |ubuntu| instance:"
msgstr ""

#: ../source/getting_started.rst:283
# 14f9f0d565c64385bf0464ab78586a86
msgid "this may also take a few minutes, but will (eventually) return something similar to:"
msgstr ""

#: ../source/getting_started.rst:330
# c4db23a54dba4d2199cf5b16d811d0bd
msgid "and now we're all set up! We're going to use the same recipe and cookbook that we already created."
msgstr ""

#: ../source/getting_started.rst:333
# 0c3a6fc2c23542df81db81d1c74e57e6
msgid "Converge |centos|"
msgstr ""

#: ../source/getting_started.rst:334
# a30c2089eef74238b46459645882fe59
msgid "Now that we're all configured and ready to run |kitchen|, let's try it in |centos|:"
msgstr ""

#: ../source/getting_started.rst:340
# 7f11ed0aa68544cbbab1a65dbaa7b149
msgid "The first time you run this, it'll have to download the |chef client| and will show something similar to the following while it converges the node via |kitchen|:"
msgstr ""

#: ../source/getting_started.rst:391
# 5f469156b01e4317bf17c7e24c662e1a
msgid "Converge |ubuntu|"
msgstr ""

#: ../source/getting_started.rst:392
# 0b49c0a2a6f34e2c89c19572a754c9d1
msgid "Now let's try it in |ubuntu|:"
msgstr ""

#: ../source/getting_started.rst:398
# d30a3fdb148a4e52ba80a1eb86a52c6d
msgid "Like |centos|, the |chef client| will need to be downloaded:"
msgstr ""

#: ../source/getting_started.rst:448
#: ../source/getting_started.rst:727
# eaabf189d02f4703b74aeb189b23f573
# 9ac1d91ec0c9473cb897b56dea5cb25e
msgid "Verify Instance List"
msgstr ""

#: ../source/getting_started.rst:449
#: ../source/getting_started.rst:728
# 9e55272465a7404b9646baa81e281455
# 0e608d356735475fbfa8477fa7241e0b
msgid "To verify if both instances have been converged, run the following command:"
msgstr ""

#: ../source/getting_started.rst:461
# 47961bb9bed74c52b855a84ff683e14e
msgid "Now you can run your cookbooks in a virtual instance managed by |kitchen| on multiple platforms (|ubuntu| and |centos|)."
msgstr ""

#: ../source/getting_started.rst:464
# 7af0dbd3dc9c466dacc311e6873201cc
msgid "Configure NTP"
msgstr ""

#: ../source/getting_started.rst:465
# 44568804dfdc4a938d94bdf4ad4459c1
msgid "Instead of putting a text file on these |kitchen| instances, let's try something useful and install |ntp|. Within the cookbook we're already using, let's update the default recipe to install and configure |ntp| using the |resource package|, |resource template|, and |resource service| resources, a template file, and an attributes file."
msgstr ""

#: ../source/getting_started.rst:468
# c363cecf6cde409c97bfd9d294e4eccd
msgid "Add Template"
msgstr ""

#: ../source/getting_started.rst:469
# 90ce6cec2c0f43f6bc0e1b17e0189525
msgid "The |resource template| resource looks for templates in a cookbook's ``/templates`` directory. Template files in this directory must be |erb| files. The |chef ctl| has an argument that will handle most of this process for you. Let's create that directory and the template file we'll use to configure |ntp| using this command. Let's use the same cookbook we've been using. From within that cookbook repo, run the following command:"
msgstr ""

#: ../source/getting_started.rst:487
#: ../source/getting_started.rst:538
# ee9c037daab949ce98572588dd3029a7
# 6ddeed66e0e24dd599ba4beb4ed3ee95
msgid "and a directory structure in that cookbook similar to::"
msgstr ""

#: ../source/getting_started.rst:505
# b273e427488d4db98d3737fc3177d287
msgid "and an empty ``ntp.conf.erb`` file. Let's edit this file and define its contents. Open this file and add the following:"
msgstr ""

#: ../source/getting_started.rst:519
# 2793432053cc49d8bca9b13dd9816599
msgid "Add Attributes"
msgstr ""

#: ../source/getting_started.rst:520
# 21eb189842d14ea2a900dcca41e32690
msgid "The name of the init script that is used to run |ntp| is ``ntp`` on |debian|-based platforms (such as |ubuntu|) and is ``ntpd`` on |redhat enterprise linux|-based platforms. Let's use an attribute in our cookbook to tell the |chef client| what to do on both platforms using a single cookbook attribute. Like for templates, the |chef ctl| has an argument that will handle most of this process for you. Let's create that directory and the default attribute file we'll use to tell the |chef client| how to handle the attribute. Let's use the same cookbook we've been using. From within that cookbook repo, run the following command:"
msgstr ""

#: ../source/getting_started.rst:558
# aaae88f9bdde4b78bc218c917c53f956
msgid "and an empty ``default.rb`` file. Let's edit this file and define its contents. Open this file and add the following:"
msgstr ""

#: ../source/getting_started.rst:572
# cbe1575c0a01405ab18e6bc4d358ddff
msgid "This attribute uses conditions to tell the |chef client| the correct name of the init script that will be used to start |ntp|, by platform. The attribute that is being set by this code block is ``node[:ntp][:service]`` and the |chef client| can use this attribute to identify the correct init script for |ntp| on any node and for any platform. If |debian|, use ``ntp`` and for everything else use ``ntpd``."
msgstr ""

#: ../source/getting_started.rst:575
# 901eda08d65f45cd8bffac1fa78e14ed
msgid "Edit Recipe"
msgstr ""

#: ../source/getting_started.rst:576
# a242535fa6d84c5981ff676376ce3661
msgid "To install |ntp|, a recipe needs to do three things:"
msgstr ""

#: ../source/getting_started.rst:578
# af3bef7762c0407b986234ac5cc3f71e
msgid "# Install |ntp| # Create a configuration file; this will be done using the ``ntp.conf.erb`` template file # Start the ``ntp`` or ``ntpd`` service, depending on the platform; this will be done using the ``node[:ntp][:service]`` attribute"
msgstr ""

#: ../source/getting_started.rst:582
# 58ae470e390940ee8695febcfffb5f3a
msgid "Open the ``default.rb`` recipe file and replace the contents of that file with the following:"
msgstr ""

#: ../source/getting_started.rst:601
# b5266eadeae44bf39b0585f65ea39044
msgid "The |resource package| resource installs the |ntp| package. The |resource template| resource gets the template file from the cookbook, and then uses it to create a ``ntp.conf`` file in the ``/etc/ntp.conf`` directory on the node, after which it notifies the |resource service| resource to restart the ``ntp`` or ``ntpd`` service. The |resource service| resource ensures that the ``ntp`` or ``ntpd`` service is started and enabled."
msgstr ""

#: ../source/getting_started.rst:604
# fb2a15668c5049ebb2e229ffb834b9c0
msgid "Install |ntp| on |centos|"
msgstr ""

#: ../source/getting_started.rst:605
# e3f7b353962c4a20afeafb6338579a2e
msgid "Now let's install |ntp| in |centos|:"
msgstr ""

#: ../source/getting_started.rst:611
#: ../source/getting_started.rst:672
# 5d01826dd2cc4ba6b5aac251bdb321ce
# 6894d669f4154bf0be43174ca5d16f1e
msgid "As it installs, the |chef client| will report back something similar to the following:"
msgstr ""

#: ../source/getting_started.rst:665
# 45fad3cd05a74c56b52a1f69a253a6e7
msgid "Install |ntp| on |ubuntu|"
msgstr ""

#: ../source/getting_started.rst:666
# 1d1e6f32da674274802ce7fbd1315219
msgid "And finally, install |ntp| in |ubuntu|:"
msgstr ""

#: ../source/getting_started.rst:741
# 89a9763d08f84c63943af4ca89ef7ab3
msgid "More About Resources"
msgstr ""

#: ../source/getting_started.rst:742
# 52e311350a844bf08aac64a1aff4fc35
msgid "The |chef client| includes many built-in resources: |resource execute|, |resource directory|, |resource package|, |resource service|, |resource file|, |resource template|, |resource user|, |resource script|, and |resource scm_git|."
msgstr ""

#: ../source/getting_started.rst:744
# 4b269653d12249baabeb92be0e52b04a
msgid "The sections below quickly describe the most popular resources. For the full list of built-in |chef| resources, see `Resources <http://docs.opscode.com/resource.html#resources>`_. You can also `create your own resources <http://docs.opscode.com/lwrp_custom.html>`_ or `use the resources built into the community cookbooks <http://supermarket.getchef.com>`_."
msgstr ""

#: ../source/getting_started.rst:747
# 94c2abee66b14f808a07b495a6b0284c
msgid "Execute Commands"
msgstr ""

#: ../source/getting_started.rst:748
# c8cd288a9b924ff1b8b3c19033cb754d
msgid "Commands are executed using the |resource execute| resource using an attribute to specify the actual command to run. See :doc:`execute </resource_execute>` for more information about executing commands."
msgstr ""

#: ../source/getting_started.rst:751
# 15845c3782dd46d195b9a78f164c7745
msgid "Manage Directories"
msgstr ""

#: ../source/getting_started.rst:752
# c8667aa4d0ca4142b2f83b18f23cc1fc
msgid "Directories are hierarchies of folders that comprise all the information stored on a computer. There are two ways to manage directories. The first is via the |resource directory| resource, which manages directories starting from the root directory. And the second is the |resource remote_directory|, which transfers directory structures defined in cookbooks to nodes. See :doc:`directory </resource_directory>` for more information about managing directories. If the directory is defined in a cookbook, use :doc:`remote_directory </resource_remote_directory>` instead."
msgstr ""

#: ../source/getting_started.rst:755
# 243aefa783744d369ac83671bdf9498f
msgid "Manage Packages"
msgstr ""

#: ../source/getting_started.rst:756
# 86a6648156ca4ed4bffc693b88c2752e
msgid "Packages are collections of files that comprise software applications or some part of an operating system. Use the package resource to manage these packages, unless they are sourced via |rubygems| and installed directly from within recipes or are sourced from a cookbook. See :doc:`package </resource_package>` for more information about managing packages. There are quite a few platform-specific package resources as well, though most of the time simply using the |resource package| is all that's necessary. For packages that are located in cookobooks, use :doc:`chef_gem </resource_chef_gem>`. And for packages that are only included via recipes, use :doc:`gem_package </resource_gem_package>`."
msgstr ""

#: ../source/getting_started.rst:759
# 1eb497ab0b144bf6aeddc589be719003
msgid "Manage Services"
msgstr ""

#: ../source/getting_started.rst:760
# d942a4965ae84cdfaf025603938bc0cb
msgid "Services can be started, stopped, enabled, disabled, reloaded, and restarted. See :doc:`service </resource_service>` for more information about managing services."
msgstr ""

#: ../source/getting_started.rst:763
# 90a373adbdd24ae58a3fcbab6273dc91
msgid "Manage Files"
msgstr ""

#: ../source/getting_started.rst:764
# b42eeedb8cd3455dbd21c4e6d8c3ac86
msgid "Files are managed in several ways. The |resource file| resource manages files that are already present on a node. Files are transferred to nodes from cookbooks using the |resource cookbook_file| resource and are transferred to nodes from remote locations using the |resource remote_file| resource. See :doc:`file </resource_file>` for more information about managing files, :doc:`remote_file </resource_remote_file>` for transferring files from remote locations, and :doc:`cookbook_file </resource_cookbook_file>` for transferring files that are located in cookbooks."
msgstr ""

#: ../source/getting_started.rst:767
# 1ee3408dd2ca4765a234a2bcdbf015c8
msgid "Manage Templates"
msgstr ""

#: ../source/getting_started.rst:768
# ca0b79d8d0b94bb493187dc03fbe9c31
msgid "Templates are used to generate files based on variables and logic contained within the template file. |chef| uses |erb| templates and |ruby| expressions and statements to define the template file. Template source files must be located within cookbooks. See :doc:`template </resource_template>` for more information about managing files using |erb| templates."
msgstr ""

#: ../source/getting_started.rst:771
# 1297e5c5a7cc44bf96b6fa4d2ff38490
msgid "Manage Users, Groups"
msgstr ""

#: ../source/getting_started.rst:772
# 83d07762b21c4add89eaef8b6fb8b9e5
msgid "Users and groups can be added, updated, removed. User passwords can be locked and unlocked. See :doc:`user </resource_user>` for more information about managing users and user passwords. The :doc:`group </resource_group>` resource manges groups."
msgstr ""

#: ../source/getting_started.rst:775
# f1e46c1a50a44136a91d8fd3b78a8e42
msgid "Use Script Interpreters"
msgstr ""

#: ../source/getting_started.rst:776
# 130caa3947554d18bab7ad45841e5ea1
msgid "Script interpreters execute scripts on a node, similar to the |resource execute| resource, and with the ability to specify the interpreter that the |chef client| should use. See :doc:`script </resource_script>` for more (general) information about using scripts in recipes. Interpreter-specific resources are available, with :doc:`bash </resource_bash>` being the most popular. Also available: :doc:`csh </resource_csh>`, :doc:`perl </resource_perl>`, :doc:`powershell_script </resource_powershell_script>`, :doc:`python </resource_python>`, and :doc:`ruby </resource_ruby>`. Two |windows|-specific resources are also available: :doc:`batch </resource_batch>` and :doc:`powershell_script </resource_powershell_script>`."
msgstr ""

#: ../source/getting_started.rst:779
# d61b619be8cf4bc586aa691fcc59cdf4
msgid "Use Source Control"
msgstr ""

#: ../source/getting_started.rst:780
# 8fa151c5f8a04118b411bad8b6412aa2
msgid "Most users of |chef| keep their code in some type of version source control. |chef| can interact with this code from recipes. |git| is a very popular choice. The :doc:`git </resource_git>` resource is used to manage files that exist in a |git| repository. There is also a resource for :doc:`subversion </resource_subversion>`, another popular version source control tool."
msgstr ""

#: ../source/getting_started.rst:784
# c3638a7421e64751ae7950802426b6f7
msgid "About Cookbooks"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:4
# 206058c38977409b8bcdeb35bf7a9dd6
msgid "A cookbook is the fundamental unit of configuration and policy distribution. Each cookbook defines a scenario, such as everything needed to install and configure |mysql|, and then it contains all of the components that are required to support that scenario, including:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:6
# ac81e300c6994abd932267434b4aee27
msgid "Attribute values that are set on nodes"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:7
# 07b42672891a4bb6918a2d7ad810ea8a
msgid "Definitions that allow the creation of reusable collections of resources"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:8
# 7247079f047149cbb50fc3c5994d9e49
msgid "File distributions"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:9
# 18d04d02380e4a3abc4fa1f8373f9c2f
msgid "Libraries that extend the |chef client| and/or provide helpers to |ruby| code"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:10
# 3c24af907d6343ebb177439df33c9065
msgid "Recipes that specify which resources to manage and the order in which those resources will be applied"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:11
# e1e4f82e83c640e5ad8e44ee7bdeba80
msgid "Custom resources and providers"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:12
# 11fea8a8e9f149ff8a794d78efa389c3
msgid "Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:13
# 301ef21fdbac47929e1c9c1098c66df8
msgid "Versions"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:14
# 4f05979bb3764d18bf8d6b0c83b8f7cf
msgid "Metadata about recipes (including dependencies), version constraints, supported platforms, and so on"
msgstr ""

#: ../source/getting_started.rst:787
# 3b86bb43f74643daab3dba66d0de2d7a
msgid "Every cookbook follows a defined structure, but individiaul cookbooks can take on many different styles depending on how your organization wants to manage its code, who authored them, and how they are intended to be used. Some cookbooks contain only a single, default recipe. Others may contain only a library file. Some may contain only a few attributes. And other cookbooks may contain several custom resources along with many attributes and templates, and so on."
msgstr ""

#: ../source/getting_started.rst:789
# ac42b98734d8469995171a0df1eb6138
msgid "Some cookbooks you will build yourself. Some cookbooks will be provided by the community. Most community cookbooks will be managed using |berkshelf|, which is a dependency manager included in the |chef dk|. Occasionally, a community cookbook will be forked, but more often a wrapper cookbook is created to handle your organization-specific requirements while still allowing use of the community cookbook."
msgstr ""

#: ../source/getting_started.rst:791
# 1842f3e8b5234963bfd44628a88ce04e
msgid "The most important thing to know about cookbooks is that there are lots of ways to build good ones. There are patterns to follow, there are guidelines. There are recomended ways of dealing with attributes. There are recommended ways of creating custom resources. But ultimately, a good cookbook is the one that works for your organization. Ideally, this cookbook works across your infrastructure. Most organizations have a mix of private (internal) and public (community) cookbooks in use in their organization."
msgstr ""

#: ../source/getting_started.rst:794
# b99d32d1be21402e850f00984dcac3b9
msgid "Cookbook Patterns"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:6
# 02d6dd6fd56e4691b11f74d1941bdbb3
msgid "A primary goal of cookbook authoring is to create cookbooks that are reusable as building blocks, where each cookbook defines a specific configuration piece used by the organization. For example, say all servers across the organization will run |cron| and |ntp|, but only front-end servers in production will be load balanced. This building block approach relies on some basic guidelines:"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:8
# 029d4a2e9bf64b14865fc17a820a7764
msgid "All cookbooks are kept in version source control"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:9
# bd35010b13b946ef98292b790870d084
msgid "Cookbooks are never forked from their |github| repositories"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:10
# 818ebf90d4c14883896fbb49c3a999ba
msgid "Cookbooks may be kept in the |chef repo|, but are typically kept in their own dedicated repositories outside of the |chef repo|"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:11
# 4dbdfb57469d465d887c723b92834efa
msgid "Cookbooks are kept as small as possible and are focused on specific configuration targets, with changes to cookbooks tracked as versions of that cookbook"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:12
# 811c640e82ed41d087b7c8daaf3de011
msgid "Cookbooks are better when unit and integration testing is done against them, automatically"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:13
# fc13d0aa6c234052aa30c04644194d2f
msgid "When a cookbook is uploaded to the |chef server|, it is versioned and that version is frozen"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:14
# 68584b34025a4398981307f4e006a9e2
msgid "Community cookbooks are a great resource; often a community cookbook can be used wholesale (without changes), but sometimes a community cookbook needs a wrapper that is used to ensure specific organizational requirements are met"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:15
# ded76f1d86b347618908bc9394f5c4ce
msgid "Recipes in cookbooks should be modular, minimally prescriptive, and use custom resources to expose repeatable patterns that are needed to solve implementation-specific requirements"
msgstr ""

#: ../source/getting_started.rst:798
# b551afb91aa34df895111921616d34a9
msgid "About |ruby|"
msgstr ""

#: ../../includes_ruby/includes_ruby.rst:5
# a590848fd01840e7a46fc0690abd05cd
msgid "|chef| uses |ruby| as its reference language. |ruby| is a simple programming language that |chef| uses to define the patterns that are found in resources, recipes, and cookbooks. In many cases, just using these patterns is enough to configure, deploy, and manage nodes across the network. |ruby| is also a powerful and complete programming language. You can use the full power of the |ruby| programming language to make decisions about what should happen to specific resources and recipes or to extend |chef| in any manner that your organization requires."
msgstr ""

#: ../source/getting_started.rst:802
# f03638c9907c42679c5d78800ac12c8a
msgid "Conclusion"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 7b62ae5bffb046c5b6e376086c277bba
msgid "The key underlying principle of |chef| is that you (the user) know best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 16bcf08559cc42b88140280af620f5c3
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

