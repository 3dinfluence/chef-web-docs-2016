# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-29 11:08-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/getting_started.rst:8
# da00bd0287884fb781de518a3e4d2805
msgid "Getting Started"
msgstr ""

#: ../source/getting_started.rst:10
# 657ceb63dd0444c08be71d94288f68fb
msgid "Welcome to |chef|!"
msgstr ""

#: ../../includes_chef/includes_chef.rst:5
# fe6cca836b004414a53032699e1b3af0
msgid "|chef| is a powerful automation platform that transforms complex infrastructure into code, bringing your servers and services to life. Whether youâ€™re operating in the cloud, on-premises, or a hybrid, |chef| automates how applications are configured, deployed, and managed across your network, no matter its size."
msgstr ""

#: ../../includes_chef/includes_chef.rst:7
# ea439612b3e14083956a89c36c070333
msgid "|chef| is built around simple concepts: achieving desired state, centralized modeling of IT infrastructure, and resource primitives that serve as building blocks. These concepts enable you to quickly manage any infrastructure with |chef|. These very same concepts allow |chef| to handle the most difficult infrastructure challenges on the planet."
msgstr ""

#: ../../includes_chef/includes_chef.rst:9
# 77ea6f86691647fbaab5c1746458de71
msgid "Anything that can run the |chef client| can be managed by |chef|. For instance, you can manage physical machines, virtual machines, containers, or cloud-based instances. The |chef client| is an agent that runs on a node and performs the actual tasks that configure it. The |chef server| is the central repository for all configuration data. The |chef client| and |chef server| communicate with each other. For secure communications, they use a combination of public and private keys that ensures the |chef server| responds only to requests made by the |chef client|."
msgstr ""

#: ../source/getting_started.rst:14
# 4dfeba2f75a94527ada1c0e377596a15
msgid "This topic is a work in progress. It needs some editing, but you should be able to install the Chef DK and then configure Kitchen to build CentOS and Ubuntu instances, and then converge a node using the NTP cookbook. More sections are planned for future updates that will include more scenarios for Kitchen, new scenarios for ChefSpec, Berkshelf, and Chef policy. Feedback on the getting started page may be sent to docs @ getchef dot com."
msgstr ""

#: ../source/getting_started.rst:17
# f1ee4bf6e31a447389eb5669d4ba8a4b
msgid "About Resources"
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:5
# 5f6b54093b714379bf94cf4b05d7c9b3
msgid "A resource is a statement of configuration policy. It describes the desired state of an element of your infrastructure, along with the steps needed to bring that item to the desired state. Each resource statement in a |chef| recipe corresponds to a specific part of your infrastructure: a file, a template, a directory, a package, a service, a command to be executed, and so on. Each resource statement includes the resource type (such as ``template``, ``service`` or ``package``), its name, any attributes that specify additional details, and an action that tells the |chef client| how to implement the configuration policy."
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:7
# e7d5ddd8041d49c4baa96498e5ae54e7
msgid "Together, resources describe all the components in your network. Recipes group resources together and describe working configurations. Add recipes to a run-list to describe the desired state for every node to which that run-list is assigned. Cookbooks are collections of recipes and are stored on the |chef server|."
msgstr ""

#: ../source/getting_started.rst:20
# 21f2bcced5a641ae8672e31a7a32be7c
msgid "The |chef client| includes many built-in resources that handle just about any situation. Three of these resources are an essential part of any |chef| workflow: |resource package|, |resource template|, and |resource service|. Use the |resource package| resource to install a package, the |resource template| resource to generate a file on the node that applies configuration settings for that package, and then use the |resource service| resource to start (or restart) the service associated with that package. This is a combination of resources that you will use often with |chef|."
msgstr ""

#: ../source/getting_started.rst:22
# 26f2fd79ca814dc2ad63e2d25b6af3f5
msgid "The next step is to install |chef|, configure your workstation, and then configure |kitchen| to run virtual instances locally on that workstation. After that is finished, we'll revisit the |resource package|, |resource template|, and |resource service| resources and use them with |kitchen| to converge |ntp| into a virtual instance that is spun up and managed by |kitchen|."
msgstr ""

#: ../source/getting_started.rst:25
# 3408ce586b1547d0bd8dc8fa59f29036
msgid "Workstation Setup"
msgstr ""

#: ../source/getting_started.rst:26
# 71e429896cb040cdb052eda05a69a8cb
msgid "The |chef dk| is a package that contains everything you need to start using |chef|, along with a collection of tools and libaries that can help improve the code you are using to run your business."
msgstr ""

#: ../source/getting_started.rst:29
# 669b877fa388401ca3125d054f0aac28
msgid "Install the |chef dk_title|"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:4
# 008add21d08a4156b296add068f2704f
msgid "To install the |chef dk|:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:6
# 2308962569784ffcbf24823c6501cc8d
msgid "Visit this page: http://www.getchef.com/downloads/chef-dk/ and pick your platform. The |chef dk| supports |mac os x|, |redhat enterprise linux|, |ubuntu|, and |windows|."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:7
# 5e8299930d6e4600b9ea4e21cea68fcf
msgid "Select a platform, and then a package. (|chef docs| uses the |mac os x| setup within the documentation.)"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:8
# 17b1551b498840a08906f135136b3962
msgid "Click the download button."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:9
# 13c8dcb12809439eada1e74644b68bf5
msgid "Follow the steps in the installer and install the |chef dk| to your machine. The |chef dk| is installed to ``/opt/chefdk/`` on |unix| and |linux| systems."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:10
# ba3117445dbe4f1cadab696316dac227
msgid "When finished, open a command window and enter the following:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:16
# ba8a37cc15904ac1be8e9d2b184d7ba5
msgid "This will verify the main components of the |chef dk|: the |chef client|, the |chef dk| library, and the tools that are built into the |chef dk|. The output should be similar to:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:25
# aa089cfa721643b89a35cacc622d9e9c
msgid "Set the default shell. On |windows| it is strongly recommended to use |windows powershell| and cmd.exe."
msgstr ""

#: ../source/getting_started.rst:33
# f30021bef6434d6cac779699fadf5bc7
msgid "What's in the |chef dk_title|?"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools.rst:4
# 88f887e2f9b043a19311aee316fc3624
msgid "The |chef dk| installs a collection of tools and libraries into a single directory structure, which makes it easier to manage any dependencies these tools may have on each other and the dependencies that |chef| has on |ruby|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:4
# 2843ad953a3943d791195a646fe5b103
msgid "The most important tools included in the |chef dk| are:"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:10
# cac01e344f60439cb389487876af4fa2
msgid "Tool"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:11
# 711c826d735a474d851bf2c06d0fbfbf
msgid "Description"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:12
# 208ac3518ac344cd8fad7c79184fb1ed
msgid "|berkshelf|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:13
# d55b64b4227a4081a57bc9bf25b9829c
msgid "A dependency manager for cookbooks."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:14
# 1378e425d51945328e9b10099f8a6ade
msgid "|chef ctl|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:15
# 61fb2084a7874a5eb1c2ec2e2111649b
msgid "A workflow tool for |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:16
# 23e29561237649e880b7ca447bf356bd
msgid "|chef client|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:17
# edcf7e855dd94672baa0ee31d776cd01
msgid "The agent that runs |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:18
# 5771ccd8a02b4477a033b67458704b55
msgid "|chef dk|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:19
# 65af082724dc4cbbb4d957bd81707df0
msgid "The |chef dk| omnibus package."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:20
# 313bfcd44d8846ce997eb562273b1c9f
msgid "|chef spec|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:21
# 138e361790d649afb9e361aeace6361a
msgid "A unit testing framework that tests resources locally."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:22
# 75b5cf86f9df488bb58178df7ae3761a
msgid "|foodcritic|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:23
# c14060edbd45475d81da0e628deb5a57
msgid "A lint tool for static analysis of recipe code."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:24
# 528a79d8b3f94d9b8e11a781ba7ee668
msgid "|ruby|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:25
# eb009a3e722e4bb28b99b317f5ff9e68
msgid "The reference language for |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:26
# ca606675113d4b8aa66782201efd2aa3
msgid "|kitchen|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:27
# 8b5d6c5a693d40f1a799f5a8476243cf
msgid "An integration testing framework tool that tests cookbooks across platforms."
msgstr ""

#: ../source/getting_started.rst:39
# 84884cbaf5044ac99db760f24e94fe77
msgid "Set the System |ruby|"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:3
# 2fbc865fc2904a5594aa57aff3814cf7
msgid "For many users of |chef|, the |chef dk| version of |ruby| that is included in the |chef dk| should be configured as the default version of |ruby|."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:5
# 38887711b66a47b597e47516852b0f83
msgid "Open a command window and enter the following:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:11
# 95c4b70a2895467384bd450f7886a79c
msgid "which will return something like ``/usr/bin/ruby``."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:12
# 3430cfe52a564e90a3fa467a49dc821c
msgid "To use the |chef dk| version of |ruby| as the default |ruby|, edit the ``$PATH`` and ``GEM`` environment variables to include paths to the |chef dk|. For example, on a machine that runs |bash|, run:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:18
# 157e758fa838427a9c85e69e003feca3
msgid "where ``bash`` and ``~/.bash_profile`` represents the name of the shell."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:20
# 577957417a1a44058ffaaf5d3bf686aa
msgid "If zsh is your preferred shell then run the following:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:26
# 3ba2637f8b314232b473bb7c1a0a68fc
msgid "Run ``which ruby`` again. It should return ``/opt/chefdk/embedded/bin/ruby``."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:28
# 68c5fa00fcba458b8366db4c8c3f27b6
msgid "Using the |chef dk|-provided |ruby| as your system |ruby| is optional. This just depends on how you are using |ruby| on your system. For many users, |ruby| is primarily used for authoring |chef| cookbooks and recipes. If that's true for you, then using the |chef dk|-provided |ruby| as your system |ruby| is recommended. But for other users who are already using tools like |rbenv| to manage |ruby| versions, then that's OK too."
msgstr ""

#: ../source/getting_started.rst:43
# 8d8fc57c516949109c5d274d0e2338b2
msgid "Your First Cookbook"
msgstr ""

#: ../source/getting_started.rst:45
# 8e25a46cc7d041e7b32c9b7a6db06f95
msgid "We have already used the |chef ctl| ``verify`` subcommand to verify the installation of the |chef dk|. Now let's use the |chef ctl| ``generate`` subcommand to create the |chef repo|, which is the main folder in which your |chef| code will be stored. Run the following command:"
msgstr ""

#: ../source/getting_started.rst:51
# 378066b2be57426691cc8055caf06d6c
msgid "where ``name`` is a name that you have chosen for the both the |chef repo| and the default cookbook. We are calling ours ``chef-repo``; you can call yours whatever you want. (We also renamed the default cookbook to ``chefdocs``, which is totally optional.) You should have a directory structure at ``/Users/your_username/cookbook_name/`` similar to::"
msgstr ""

#: ../source/getting_started.rst:67
# 50e6c618a63f40cc9f5ab7d3edd5d565
msgid "Run the |chef client_title|"
msgstr ""

#: ../source/getting_started.rst:68
# 46cdd5c763994d29a101a0c0b8aacc5d
msgid "The |chef client| includes a mode called \"local mode\", which runs the |chef client| locally on your machine. Local mode allows you to run recipes and work locally with the code you are using to run your business. Local mode does not require a connection to a |chef server|, public or private keys, or configuring of nodes. (Though we'll do all of these things later!) Many people use local mode for simple, local testing of recipes and cookbooks, often as a pre-cursor to running unit and integration tests against the same recipes and cookbooks."
msgstr ""

#: ../source/getting_started.rst:70
# c5f9801ad7734ddabac5ab3800644bff
msgid "Open the ``default.rb`` recipe in the cookbook you just created. Add the following resource to that recipe:"
msgstr ""

#: ../source/getting_started.rst:78
# 90d750234022428da273f384ab0daaad
msgid "This recipe creates a file called ``test.txt`` at the path defined by the ``HOME`` environment variable. (To view that path, run ``echo \"$HOME\"`` in the command shell.)"
msgstr ""

#: ../source/getting_started.rst:80
# 6f1448c74c6c485b907b41470fb1bd04
msgid "Next, we'll run the |chef client|. This is done via the command line and from within the |chef repo|. Use the ``--local-mode`` flag to run the |chef client| in local mode. Use the ``--override-runlist`` flag to run only the recipe we have just created. (More about the run-list later.) For a cookbook's default recipe, only the name of the cookbook needs to be specified, as that maps to the default recipe. The following command will create the file ``test.txt``:"
msgstr ""

#: ../source/getting_started.rst:86
# 78196c594f4a47b2854f8b99f49ddff4
msgid "where ``chefdocs`` is the name of your cookbook."
msgstr ""

#: ../source/getting_started.rst:88
# 1395a022e7274576aa3ec9a85556e61e
msgid "As the |chef client| adds the file to your system, output similar to the following is shown:"
msgstr ""

#: ../source/getting_started.rst:119
# b1a2a66ca0a5413a99d417c07a4aba84
msgid "That's it. The warnings, for the moment, can be ignored. Check the root of the path defined by the ``HOME`` environment variable and find the file named ``test.txt``. The file should contain ``This file created by Chef!``."
msgstr ""

#: ../source/getting_started.rst:121
# ec3b70abc4654b61ac7031ec4976933d
msgid "# We'll come back to working with |chef| later on, but the next step is to familiarize yourself with resources and cookbooks."
msgstr ""

#: ../source/getting_started.rst:124
# 27de64f31b0f47aea12db50688e14899
msgid "|kitchen_title| Setup"
msgstr ""

#: ../../includes_test_kitchen/includes_test_kitchen.rst:5
# 693acca6781444d1b67a35eda53848b0
msgid "|kitchen| is an integration framework that is used to automatically test cookbook data across any combination of platforms and test suites, as defined by a |kitchen yml| file. |kitchen| uses a driver plugin architecture that allows it to support cookbook testing across many cloud providers and virtualization technologies. |kitchen| supports all of the common testing frameworks used by the |ruby| community."
msgstr ""

#: ../source/getting_started.rst:127
# 77134dfa418e4fef9901f1f8968f5091
msgid "You will need some type of virtualization software for |kitchen|. |vagrant| is the default driver for |kitchen|. Install |vagrant|. |vagrant| requires |virtualbox|, so install |virtualbox|. Once you're ready, we'll keep using the same cookbook created earlier."
msgstr ""

#: ../source/getting_started.rst:130
# a8f9fba23d2742839001a29d838427b8
msgid "Update Metadata"
msgstr ""

#: ../source/getting_started.rst:131
# 2f08455c35294c14b0866b808714521d
msgid "In that cookbok, let's update the metadata. Open the ``metadata.rb`` file. It will look similar to:"
msgstr ""

#: ../source/getting_started.rst:143
# 6d098db569df491e8be9235ae1b8dd99
msgid "for now, let's just update the name and version settings, like this:"
msgstr ""

#: ../source/getting_started.rst:151
# f5bfc98eab184e22807c74272650431c
msgid "Verify |kitchen yml|"
msgstr ""

#: ../source/getting_started.rst:152
# 613a52b1be754accbb5653714463d6a4
msgid "Because |kitchen| is installed as part of the |chef dk|, the |kitchen yml| file is already created:"
msgstr ""

#: ../source/getting_started.rst:173
# f7e1249b970e45659b7ca90e1873e894
msgid "Let's change the default provisioner to |chef zero|:"
msgstr ""

#: ../source/getting_started.rst:186
# 2c803efde2994492ae88b5fdb4b3286a
msgid "and also make sure the |kitchen yml| knows about the default recipe in your cookbook. Under ``suites``, make sure the ``run_list`` contains the name of your cookbook. For example:"
msgstr ""

#: ../source/getting_started.rst:196
# 8adf557f00094f77b2d6e2449704863d
msgid "where ``chef-repo`` is the name of your cookbook. This will ensure that |kitchen| uses this recipe when converging."
msgstr ""

#: ../source/getting_started.rst:198
# 5e421617428044af822167a1557066d3
msgid "Also, |kitchen| has been added to gitignore, thor, etc. files. We just need to create the directory in which tests will be authored. This is typically a sub-directory of ``/cookbooks`` called ``/tests``. The structure underneath ``/tests`` may be customized, but is typically something like ``/test/integration/default``."
msgstr ""

#: ../source/getting_started.rst:200
# 1183e03c4bd54f9eb8385dac53ba3bbb
msgid "For now, we don't need to do anything else to get started using |kitchen|."
msgstr ""

#: ../source/getting_started.rst:203
# afc8f5b88cd944ad8ebda61f50480d48
msgid "View Instance List"
msgstr ""

#: ../source/getting_started.rst:204
# 24521f4292054a95bbb76b6300d5d149
msgid "From your working directory, run the following command:"
msgstr ""

#: ../source/getting_started.rst:210
#: ../source/getting_started.rst:477
#: ../source/getting_started.rst:528
# 8a780f053d3d4bd984f741cdc4620e70
# 6719a0486d6d4063ac702fa8dddeac9e
# 98dafabb4e414247adfd1becc79afe3e
msgid "which will return something similar to:"
msgstr ""

#: ../source/getting_started.rst:218
# c8463feec11e46feb560cd61d17b1fa1
msgid "So there are two available platforms---|ubuntu| 12.04 and |centos| 6.4---configured to use the |vagrant| driver (which is enabled via the ``kitchen-vagrant`` driver that is built-in to the |chef dk|), and to run |chef zero| while running tests."
msgstr ""

#: ../source/getting_started.rst:221
# 8b827caa0efe45ee9e72e724b69665f8
msgid "Create |centos| Instance"
msgstr ""

#: ../source/getting_started.rst:222
# 551f6bc2ba02442ea4040e250c76c04b
msgid "Let's create an instance. Run the following command:"
msgstr ""

#: ../source/getting_started.rst:228
# 9fcb331c4ce5492887115f31562ae379
msgid "This will start |vagrant|, which will then build a machine that rubs |centos| 6.4. (If this is the first time you're running |kitchen|, then |centos| needs to first be downloaded from the default instance location and may take a few minutes.)"
msgstr ""

#: ../source/getting_started.rst:263
#: ../source/getting_started.rst:320
# 1486a0d374a94835802903552e4030b3
# 5fabeaa331b1405e8f2d0960cc0b68c2
msgid "Verify the instance list with the following command:"
msgstr ""

#: ../source/getting_started.rst:269
# 4781644d555243c5b60fdca5a2fe04a0
msgid "and you will see the following:"
msgstr ""

#: ../source/getting_started.rst:278
# 0cbc4b7bec5e4affba64180eb207173a
msgid "Create |ubuntu| Instance"
msgstr ""

#: ../source/getting_started.rst:279
# ebae27f53f2f43cda1610b0765c0f9d6
msgid "Now let's create the |ubuntu| instance:"
msgstr ""

#: ../source/getting_started.rst:285
# 6ec1e75559be48c7b1bfc137b66a7e1e
msgid "this may also take a few minutes, but will (eventually) return something similar to:"
msgstr ""

#: ../source/getting_started.rst:332
# c0981b07c48842c28bcf390b6cb21c3b
msgid "and now we're all set up! We're going to use the same recipe and cookbook that we already created."
msgstr ""

#: ../source/getting_started.rst:335
# 7e5ee9e89e3747b79c74b550a32c2a3b
msgid "Converge |centos|"
msgstr ""

#: ../source/getting_started.rst:336
# aefcb1be45a94de3bc5e5239a3777e37
msgid "Now that we're all configured and ready to run |kitchen|, let's try it in |centos|:"
msgstr ""

#: ../source/getting_started.rst:342
# 1660ae08d2c345e591c920b8bb8cbd1d
msgid "The first time you run this, it'll have to download the |chef client| and will show something similar to the following while it converges the node via |kitchen|:"
msgstr ""

#: ../source/getting_started.rst:393
# 4ad85566bb1043e5a909033647a5d7b5
msgid "Converge |ubuntu|"
msgstr ""

#: ../source/getting_started.rst:394
# 5920caa14f84402b926e887efcb7acc9
msgid "Now let's try it in |ubuntu|:"
msgstr ""

#: ../source/getting_started.rst:400
# 1481dae3d37946e1b1cb871b61d56ca1
msgid "Like |centos|, the |chef client| will need to be downloaded:"
msgstr ""

#: ../source/getting_started.rst:450
#: ../source/getting_started.rst:729
# 39f32de313eb461f859558b2da92a485
# 9553cc2aa695409fa34aa121ee4e7ee6
msgid "Verify Instance List"
msgstr ""

#: ../source/getting_started.rst:451
#: ../source/getting_started.rst:730
# 48d0ff03018242f8bf39f05824347fc3
# 8303e35836654a87b75a89026d730df2
msgid "To verify if both instances have been converged, run the following command:"
msgstr ""

#: ../source/getting_started.rst:463
# 212d0ab65ac2453bba368ef6709a30aa
msgid "Now you can run your cookbooks in a virtual instance managed by |kitchen| on multiple platforms (|ubuntu| and |centos|)."
msgstr ""

#: ../source/getting_started.rst:466
# 0f36da0d8f8f49b6aa72759041e31964
msgid "Configure NTP"
msgstr ""

#: ../source/getting_started.rst:467
# 5350e3dd32494cdf8c11cc9571a30d96
msgid "Instead of putting a text file on these |kitchen| instances, let's try something useful and install |ntp|. Within the cookbook we're already using, let's update the default recipe to install and configure |ntp| using the |resource package|, |resource template|, and |resource service| resources, a template file, and an attributes file."
msgstr ""

#: ../source/getting_started.rst:470
# 44907c5e659c46f985a9bf8ab2d1d335
msgid "Add Template"
msgstr ""

#: ../source/getting_started.rst:471
# b49e628ba5cc456c962822c7e4ae02aa
msgid "The |resource template| resource looks for templates in a cookbook's ``/templates`` directory. Template files in this directory must be |erb| files. The |chef ctl| has an argument that will handle most of this process for you. Let's create that directory and the template file we'll use to configure |ntp| using this command. Let's use the same cookbook we've been using. From within that cookbook repo, run the following command:"
msgstr ""

#: ../source/getting_started.rst:489
#: ../source/getting_started.rst:540
# 13d71d6d91774e6bae6d67927a542453
# 9c53adb699e841f1902799dd42c8255e
msgid "and a directory structure in that cookbook similar to::"
msgstr ""

#: ../source/getting_started.rst:507
# 5715a4bfda734d12abbb8a4bc2b391e6
msgid "and an empty ``ntp.conf.erb`` file. Let's edit this file and define its contents. Open this file and add the following:"
msgstr ""

#: ../source/getting_started.rst:521
# da0ea7768cf04df8a775188007c8051f
msgid "Add Attributes"
msgstr ""

#: ../source/getting_started.rst:522
# 33e2c66584984367ad5438b1f646b734
msgid "The name of the init script that is used to run |ntp| is ``ntp`` on |debian|-based platforms (such as |ubuntu|) and is ``ntpd`` on |redhat enterprise linux|-based platforms. Let's use an attribute in our cookbook to tell the |chef client| what to do on both platforms using a single cookbook attribute. Like for templates, the |chef ctl| has an argument that will handle most of this process for you. Let's create that directory and the default attribute file we'll use to tell the |chef client| how to handle the attribute. Let's use the same cookbook we've been using. From within that cookbook repo, run the following command:"
msgstr ""

#: ../source/getting_started.rst:560
# b184eabd6a6b4d4f91c999ef77918fef
msgid "and an empty ``default.rb`` file. Let's edit this file and define its contents. Open this file and add the following:"
msgstr ""

#: ../source/getting_started.rst:574
# ba057f1f82934b3ea9ba06be4f475e4e
msgid "This attribute uses conditions to tell the |chef client| the correct name of the init script that will be used to start |ntp|, by platform. The attribute that is being set by this code block is ``node[:ntp][:service]`` and the |chef client| can use this attribute to identify the correct init script for |ntp| on any node and for any platform. If |debian|, use ``ntp`` and for everything else use ``ntpd``."
msgstr ""

#: ../source/getting_started.rst:577
# 0f2f1b98198e4e82b61a49d21aee7b22
msgid "Edit Recipe"
msgstr ""

#: ../source/getting_started.rst:578
# 7afd761a672a41f183d035610da9fb63
msgid "To install |ntp|, a recipe needs to do three things:"
msgstr ""

#: ../source/getting_started.rst:580
# 66fe72997d21490da4adadb4c2b4e58b
msgid "# Install |ntp| # Create a configuration file; this will be done using the ``ntp.conf.erb`` template file # Start the ``ntp`` or ``ntpd`` service, depending on the platform; this will be done using the ``node[:ntp][:service]`` attribute"
msgstr ""

#: ../source/getting_started.rst:584
# d3b9eac31c0044558791edb57fd0a079
msgid "Open the ``default.rb`` recipe file and replace the contents of that file with the following:"
msgstr ""

#: ../source/getting_started.rst:603
# 784922f0647c4c208b8cfae4fdb3d94e
msgid "The |resource package| resource installs the |ntp| package. The |resource template| resource gets the template file from the cookbook, and then uses it to create a ``ntp.conf`` file in the ``/etc/ntp.conf`` directory on the node, after which it notifies the |resource service| resource to restart the ``ntp`` or ``ntpd`` service. The |resource service| resource ensures that the ``ntp`` or ``ntpd`` service is started and enabled."
msgstr ""

#: ../source/getting_started.rst:606
# e57bc5698e1d4278bbedf865a620bfdb
msgid "Install |ntp| on |centos|"
msgstr ""

#: ../source/getting_started.rst:607
# 7394c6b26d8f46be930fb032597467b5
msgid "Now let's install |ntp| in |centos|:"
msgstr ""

#: ../source/getting_started.rst:613
#: ../source/getting_started.rst:674
# 36e9268269e444fe9ea3ded5e26bed35
# 8aeebd807d72412095959d694711a06d
msgid "As it installs, the |chef client| will report back something similar to the following:"
msgstr ""

#: ../source/getting_started.rst:667
# ffa52d2d0bbb4d4bb1ad2e348b6fe26f
msgid "Install |ntp| on |ubuntu|"
msgstr ""

#: ../source/getting_started.rst:668
# 13bf08d11365419eb4c67a557a5e87e8
msgid "And finally, install |ntp| in |ubuntu|:"
msgstr ""

#: ../source/getting_started.rst:743
# e71ad8f7c0d147f6b0e418dbb9b09e6f
msgid "More About Resources"
msgstr ""

#: ../source/getting_started.rst:744
# 992e5f89f1a245938f15e1212b3435a7
msgid "The |chef client| includes many built-in resources: |resource execute|, |resource directory|, |resource package|, |resource service|, |resource file|, |resource template|, |resource user|, |resource script|, and |resource scm_git|."
msgstr ""

#: ../source/getting_started.rst:746
# d0b3a356871a4c05a656778ca434770e
msgid "The sections below quickly describe the most popular resources. For the full list of built-in |chef| resources, see `Resources <http://docs.opscode.com/resource.html#resources>`_. You can also `create your own resources <http://docs.opscode.com/lwrp_custom.html>`_ or `use the resources built into the community cookbooks <http://supermarket.getchef.com>`_."
msgstr ""

#: ../source/getting_started.rst:749
# a2427fa2f93947f7b6ba1d55832cf479
msgid "Execute Commands"
msgstr ""

#: ../source/getting_started.rst:750
# cef2c68da38449ed9bd5e8bb954a0503
msgid "Commands are executed using the |resource execute| resource using an attribute to specify the actual command to run. See :doc:`execute </resource_execute>` for more information about executing commands."
msgstr ""

#: ../source/getting_started.rst:753
# b66cc77eef064f2fad6bced4985d3cd7
msgid "Manage Directories"
msgstr ""

#: ../source/getting_started.rst:754
# 20a2f807e74e46c1a058d1350f37b2a9
msgid "Directories are hierarchies of folders that comprise all the information stored on a computer. There are two ways to manage directories. The first is via the |resource directory| resource, which manages directories starting from the root directory. And the second is the |resource remote_directory|, which transfers directory structures defined in cookbooks to nodes. See :doc:`directory </resource_directory>` for more information about managing directories. If the directory is defined in a cookbook, use :doc:`remote_directory </resource_remote_directory>` instead."
msgstr ""

#: ../source/getting_started.rst:757
# 6d61fa33c38a4823b3cdbadda2b5259c
msgid "Manage Packages"
msgstr ""

#: ../source/getting_started.rst:758
# 35029a77bbf947e79a3883df009869cc
msgid "Packages are collections of files that comprise software applications or some part of an operating system. Use the package resource to manage these packages, unless they are sourced via |rubygems| and installed directly from within recipes or are sourced from a cookbook. See :doc:`package </resource_package>` for more information about managing packages. There are quite a few platform-specific package resources as well, though most of the time simply using the |resource package| is all that's necessary. For packages that are located in cookobooks, use :doc:`chef_gem </resource_chef_gem>`. And for packages that are only included via recipes, use :doc:`gem_package </resource_gem_package>`."
msgstr ""

#: ../source/getting_started.rst:761
# 4bdf6c9914414334aa4099fb4b445fbc
msgid "Manage Services"
msgstr ""

#: ../source/getting_started.rst:762
# 52d5b6f6c23f44a59c8b92f44be1cf5d
msgid "Services can be started, stopped, enabled, disabled, reloaded, and restarted. See :doc:`service </resource_service>` for more information about managing services."
msgstr ""

#: ../source/getting_started.rst:765
# 8a78aefc98574c2f92700cba530fe173
msgid "Manage Files"
msgstr ""

#: ../source/getting_started.rst:766
# 0659cd11769146689ccf41a69520d2e0
msgid "Files are managed in several ways. The |resource file| resource manages files that are already present on a node. Files are transferred to nodes from cookbooks using the |resource cookbook_file| resource and are transferred to nodes from remote locations using the |resource remote_file| resource. See :doc:`file </resource_file>` for more information about managing files, :doc:`remote_file </resource_remote_file>` for transferring files from remote locations, and :doc:`cookbook_file </resource_cookbook_file>` for transferring files that are located in cookbooks."
msgstr ""

#: ../source/getting_started.rst:769
# e2e9566cfd7d46bfb9148912c5a31a5a
msgid "Manage Templates"
msgstr ""

#: ../source/getting_started.rst:770
# cc8a1fd0a03a455fbedf1a1f53811654
msgid "Templates are used to generate files based on variables and logic contained within the template file. |chef| uses |erb| templates and |ruby| expressions and statements to define the template file. Template source files must be located within cookbooks. See :doc:`template </resource_template>` for more information about managing files using |erb| templates."
msgstr ""

#: ../source/getting_started.rst:773
# 10782df1cc3f4501ba328b2219aece14
msgid "Manage Users, Groups"
msgstr ""

#: ../source/getting_started.rst:774
# c194da0c8a60470fa2446af2d940db21
msgid "Users and groups can be added, updated, removed. User passwords can be locked and unlocked. See :doc:`user </resource_user>` for more information about managing users and user passwords. The :doc:`group </resource_group>` resource manges groups."
msgstr ""

#: ../source/getting_started.rst:777
# a45f9266c5fc4cefb337d5f8f555987a
msgid "Use Script Interpreters"
msgstr ""

#: ../source/getting_started.rst:778
# b40c94fe71a6479dbd2e9bf5359c9789
msgid "Script interpreters execute scripts on a node, similar to the |resource execute| resource, and with the ability to specify the interpreter that the |chef client| should use. See :doc:`script </resource_script>` for more (general) information about using scripts in recipes. Interpreter-specific resources are available, with :doc:`bash </resource_bash>` being the most popular. Also available: :doc:`csh </resource_csh>`, :doc:`perl </resource_perl>`, :doc:`powershell_script </resource_powershell_script>`, :doc:`python </resource_python>`, and :doc:`ruby </resource_ruby>`. Two |windows|-specific resources are also available: :doc:`batch </resource_batch>` and :doc:`powershell_script </resource_powershell_script>`."
msgstr ""

#: ../source/getting_started.rst:781
# d20c750f724d4d48a6b354727b6be25f
msgid "Use Source Control"
msgstr ""

#: ../source/getting_started.rst:782
# 294fe9cf2b664aefbd4fea32a8d577a7
msgid "Most users of |chef| keep their code in some type of version source control. |chef| can interact with this code from recipes. |git| is a very popular choice. The :doc:`git </resource_git>` resource is used to manage files that exist in a |git| repository. There is also a resource for :doc:`subversion </resource_subversion>`, another popular version source control tool."
msgstr ""

#: ../source/getting_started.rst:786
# 420e23dbffb94e6da3e32ed14bb3357b
msgid "About Cookbooks"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:4
# f9bec31ee54543db8f87f4f82d6bbd9b
msgid "A cookbook is the fundamental unit of configuration and policy distribution. Each cookbook defines a scenario, such as everything needed to install and configure |mysql|, and then it contains all of the components that are required to support that scenario, including:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:6
# 25603651d1a5410c828545aa2eda05d9
msgid "Attribute values that are set on nodes"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:7
# 1a46fc7d8c2a449ebd244aff3d5297b6
msgid "Definitions that allow the creation of reusable collections of resources"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:8
# 561fb7f41cf747fbb8592918d9497c8b
msgid "File distributions"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:9
# c9a3b456ba294c8c9494b76eb7d084d7
msgid "Libraries that extend the |chef client| and/or provide helpers to |ruby| code"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:10
# 9711af31a83641c29fa86280a49d8652
msgid "Recipes that specify which resources to manage and the order in which those resources will be applied"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:11
# f014fa1000844c659f7fb5d1f5756fbe
msgid "Custom resources and providers"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:12
# ab9069d2a6374fd18e1246c55822205c
msgid "Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:13
# 489a7fc628614ab7abfecb37377aaedd
msgid "Versions"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:14
# a40fb63c873142a589a2ef72aae927f7
msgid "Metadata about recipes (including dependencies), version constraints, supported platforms, and so on"
msgstr ""

#: ../source/getting_started.rst:789
# 3bdd20c61c1c4af5b09ac27f25a56f6c
msgid "Every cookbook follows a defined structure, but individiaul cookbooks can take on many different styles depending on how your organization wants to manage its code, who authored them, and how they are intended to be used. Some cookbooks contain only a single, default recipe. Others may contain only a library file. Some may contain only a few attributes. And other cookbooks may contain several custom resources along with many attributes and templates, and so on."
msgstr ""

#: ../source/getting_started.rst:791
# 3b49106570b94261915dbf33543f8ff4
msgid "Some cookbooks you will build yourself. Some cookbooks will be provided by the community. Most community cookbooks will be managed using |berkshelf|, which is a dependency manager included in the |chef dk|. Occasionally, a community cookbook will be forked, but more often a wrapper cookbook is created to handle your organization-specific requirements while still allowing use of the community cookbook."
msgstr ""

#: ../source/getting_started.rst:793
# d6846c88c71a4884bffdf8701b3c64ad
msgid "The most important thing to know about cookbooks is that there are lots of ways to build good ones. There are patterns to follow, there are guidelines. There are recomended ways of dealing with attributes. There are recommended ways of creating custom resources. But ultimately, a good cookbook is the one that works for your organization. Ideally, this cookbook works across your infrastructure. Most organizations have a mix of private (internal) and public (community) cookbooks in use in their organization."
msgstr ""

#: ../source/getting_started.rst:796
# 1223c09b55e94150b33676b74d69c6be
msgid "Cookbook Patterns"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:6
# cb01311e09cd45a4acbcb48d1307f5a1
msgid "A primary goal of cookbook authoring is to create cookbooks that are reusable as building blocks, where each cookbook defines a specific configuration piece used by the organization. For example, say all servers across the organization will run |cron| and |ntp|, but only front-end servers in production will be load balanced. This building block approach relies on some basic guidelines:"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:8
# 870c4a02dcf44cacb0610bd03deef882
msgid "All cookbooks are kept in version source control"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:9
# 8c92752e4d364889938c6f9cca49e52f
msgid "Cookbooks are never forked from their |github| repositories"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:10
# b9193633f8d14226a96d78017c402b65
msgid "Cookbooks may be kept in the |chef repo|, but are typically kept in their own dedicated repositories outside of the |chef repo|"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:11
# 2a4cb65e6c0e465e8845a2c80e1ed678
msgid "Cookbooks are kept as small as possible and are focused on specific configuration targets, with changes to cookbooks tracked as versions of that cookbook"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:12
# 39bbb00b89164e26a3c8d93fa9d45efd
msgid "Cookbooks are better when unit and integration testing is done against them, automatically"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:13
# dd8bf52e0f7c436abad1cc8abfd85f50
msgid "When a cookbook is uploaded to the |chef server|, it is versioned and that version is frozen"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:14
# 0e09b2a2022743c18d0d153473904aee
msgid "Community cookbooks are a great resource; often a community cookbook can be used wholesale (without changes), but sometimes a community cookbook needs a wrapper that is used to ensure specific organizational requirements are met"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:15
# e174de0ad4b644009c1784ba472e319e
msgid "Recipes in cookbooks should be modular, minimally prescriptive, and use custom resources to expose repeatable patterns that are needed to solve implementation-specific requirements"
msgstr ""

#: ../source/getting_started.rst:800
# 2ff004adb4a04b21b82267d7b4f95966
msgid "About |ruby|"
msgstr ""

#: ../../includes_ruby/includes_ruby.rst:5
# ba4ca57a0fbd405e931b3bcf60617772
msgid "|chef| uses |ruby| as its reference language. |ruby| is a simple programming language that |chef| uses to define the patterns that are found in resources, recipes, and cookbooks. In many cases, just using these patterns is enough to configure, deploy, and manage nodes across the network. |ruby| is also a powerful and complete programming language. You can use the full power of the |ruby| programming language to make decisions about what should happen to specific resources and recipes or to extend |chef| in any manner that your organization requires."
msgstr ""

#: ../source/getting_started.rst:804
# ff79c6d5f7584173bde2ad62027ae192
msgid "Conclusion"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 09f3ef36371e4bdd8ae0c93f523210c6
msgid "The key underlying principle of |chef| is that you (the user) know best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# eb0f98cc651143c8a429c67fe11db6c7
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

