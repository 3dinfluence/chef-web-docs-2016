# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-04 13:15-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/getting_started.rst:8
# d0d812a71f4044839b7768079def47ba
msgid "Getting Started"
msgstr ""

#: ../source/getting_started.rst:10
# 04ffc1fe85f14636af5657f3435cf01f
msgid "Welcome to |chef|!"
msgstr ""

#: ../../includes_chef/includes_chef.rst:5
# 16a569cd1bb64904945fc6f051467430
msgid "|chef| is a powerful automation platform that transforms complex infrastructure into code, bringing your servers and services to life. Whether youâ€™re operating in the cloud, on-premises, or a hybrid, |chef| automates how applications are configured, deployed, and managed across your network, no matter its size."
msgstr ""

#: ../../includes_chef/includes_chef.rst:7
# 006d9c7b8183451db2f1058fb601c78f
msgid "|chef| is built around simple concepts: achieving desired state, centralized modeling of IT infrastructure, and resource primitives that serve as building blocks. These concepts enable you to quickly manage any infrastructure with |chef|. These very same concepts allow |chef| to handle the most difficult infrastructure challenges on the planet."
msgstr ""

#: ../../includes_chef/includes_chef.rst:9
# 31a18530c90c4786b8c1f3a064a099a5
msgid "Anything that can run the |chef client| can be managed by |chef|. For instance, you can manage physical machines, virtual machines, containers, or cloud-based instances. The |chef client| is an agent that runs on a node and performs the actual tasks that configure it. The |chef server| is the central repository for all configuration data. The |chef client| and |chef server| communicate with each other. For secure communications, they use a combination of public and private keys that ensures the |chef server| responds only to requests made by the |chef client|."
msgstr ""

#: ../source/getting_started.rst:14
# a20dee418e034f5a9410bed1b8baf4d2
msgid "This topic is a work in progress. It needs some editing, but you should be able to install the Chef DK and then configure Kitchen to build CentOS and Ubuntu instances, and then converge a node using the NTP cookbook. More sections are planned for future updates that will include more scenarios for Kitchen, new scenarios for ChefSpec, Berkshelf, and Chef policy. Feedback on the getting started page may be sent to docs @ getchef dot com."
msgstr ""

#: ../source/getting_started.rst:17
# bfdcc8b03b1e4a58a198c03fa206148e
msgid "About Resources"
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:5
# ba3ad3befa124ffe833ccd5b148e737b
msgid "A resource is a statement of configuration policy. It describes the desired state of an element of your infrastructure, along with the steps needed to bring that item to the desired state. Each resource statement in a |chef| recipe corresponds to a specific part of your infrastructure: a file, a template, a directory, a package, a service, a command to be executed, and so on. Each resource statement includes the resource type (such as ``template``, ``service`` or ``package``), its name, any attributes that specify additional details, and an action that tells the |chef client| how to implement the configuration policy."
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:7
# b160d93eafd6429183fd702f7774709f
msgid "Together, resources describe all the components in your network. Recipes group resources together and describe working configurations. Add recipes to a run-list to describe the desired state for every node to which that run-list is assigned. Cookbooks are collections of recipes and are stored on the |chef server|."
msgstr ""

#: ../source/getting_started.rst:20
# 76556965f68147b3b116167cb2a90358
msgid "The |chef client| includes many built-in resources that handle just about any situation. Three of these resources are an essential part of any |chef| workflow: |resource package|, |resource template|, and |resource service|. Use the |resource package| resource to install a package, the |resource template| resource to generate a file on the node that applies configuration settings for that package, and then use the |resource service| resource to start (or restart) the service associated with that package. This is a combination of resources that you will use often with |chef|."
msgstr ""

#: ../source/getting_started.rst:22
# 83aa2839fa134d85837814d9be97a84b
msgid "The next step is to install |chef|, configure your workstation, and then configure |kitchen| to run virtual instances locally on that workstation. After that is finished, we'll revisit the |resource package|, |resource template|, and |resource service| resources and use them with |kitchen| to converge |ntp| into a virtual instance that is spun up and managed by |kitchen|."
msgstr ""

#: ../source/getting_started.rst:25
# b7c7e74aa144466784b614ef047bb778
msgid "Workstation Setup"
msgstr ""

#: ../source/getting_started.rst:26
# 4390ee7b13f445d3accd603128f07acf
msgid "The |chef dk| is a package that contains everything you need to start using |chef|, along with a collection of tools and libaries that can help improve the code you are using to run your business."
msgstr ""

#: ../source/getting_started.rst:29
# 35acb182467449f0a7a20f95f29b124c
msgid "Install the |chef dk_title|"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:4
# 35eedabee7dc4597a8dd24ee74dff1f5
msgid "To install the |chef dk|:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:6
# 1371adf261de43fb936346fc4ca23159
msgid "Visit this page: http://www.getchef.com/downloads/chef-dk/ and pick your platform. The |chef dk| supports |mac os x|, |redhat enterprise linux|, |ubuntu|, and |windows|."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:7
# a709deb97fc94736b4e7d827d594ac9e
msgid "Select a platform, and then a package. (|chef docs| uses the |mac os x| setup within the documentation.)"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:8
# 60b0f172812044aba36319ce9e02315e
msgid "Click the download button."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:9
# 8f223d9510054e81a9cb1737023e5785
msgid "Follow the steps in the installer and install the |chef dk| to your machine. The |chef dk| is installed to ``/opt/chefdk/`` on |unix| and |linux| systems."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:10
# 23d2907217c444da8de1a4bb0dafc599
msgid "When finished, open a command window and enter the following:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:16
# 1a83db0028e645e8bd2ee7047bd10d3c
msgid "This will verify the main components of the |chef dk|: the |chef client|, the |chef dk| library, and the tools that are built into the |chef dk|. The output should be similar to:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:25
# f7c2048fae184ab2b2e7a2cf91a45dab
msgid "Set the default shell. On |windows| it is strongly recommended to use |windows powershell| and cmd.exe."
msgstr ""

#: ../source/getting_started.rst:33
# ec1bb25a26ac48beb868dab6c6291be7
msgid "What's in the |chef dk_title|?"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools.rst:4
# 55d684b58d1941f98294256ea47f2fb4
msgid "The |chef dk| installs a collection of tools and libraries into a single directory structure, which makes it easier to manage any dependencies these tools may have on each other and the dependencies that |chef| has on |ruby|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:4
# 9d4b4ba9f4974f76bf231833404ca13c
msgid "The most important tools included in the |chef dk| are:"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:10
# 24c27b958cb044aab7d2f232e57bcfc0
msgid "Tool"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:11
# 674d2f309f114659b32cc7d564851871
msgid "Description"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:12
# 8ad28d39f59645d88e56646677a88d4e
msgid "|berkshelf|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:13
# 8a5d926ef97c4884887350dcf2a34d0a
msgid "A dependency manager for cookbooks."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:14
# 9f3075f8459f4c8c9838cd5a69bd0117
msgid "|chef ctl|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:15
# 8c6585d452a54c05b44023b100aff5e1
msgid "A workflow tool for |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:16
# e970efdaa261436db0ff2355f73e8946
msgid "|chef client|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:17
# 21b156fbaae444eeb5c5c746662d3614
msgid "The agent that runs |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:18
# 7a4a033045e348fa82b2ff792ce925ce
msgid "|chef dk|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:19
# 1c4ab73f473d4355b8b5f189c5f4c860
msgid "The |chef dk| omnibus package."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:20
# 17f1b98549bd4616bd99aa8bf2fa00c9
msgid "|chef spec|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:21
# cb112c34778d472b8806aa7ab04632be
msgid "A unit testing framework that tests resources locally."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:22
# 02bd54b781a14e0d8371a66957397687
msgid "|foodcritic|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:23
# 47cd044c9d854053a27f89215a256285
msgid "A lint tool for static analysis of recipe code."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:24
# f5fad87a78144aeb9a799953c5f1c25a
msgid "|ruby|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:25
# 0e594124c15647658b5c8c753190c877
msgid "The reference language for |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:26
# 521d11a4d5a14d97872b4aa025f1b487
msgid "|kitchen|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:27
# 81f6d9e8d41942da82212fef4c20e118
msgid "An integration testing framework tool that tests cookbooks across platforms."
msgstr ""

#: ../source/getting_started.rst:39
# 6a2fe801c2e24974a62f359591ef86ba
msgid "Set the System |ruby|"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:3
# bbfd3fee41d34236aac342821ab89435
msgid "For many users of |chef|, the |chef dk| version of |ruby| that is included in the |chef dk| should be configured as the default version of |ruby|."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:5
# 0617993e229f48bf850b3361a63ddfda
msgid "Open a command window and enter the following:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:11
# 5a0a7e18baa8429d9361c1373cb98918
msgid "which will return something like ``/usr/bin/ruby``."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:12
# a4f2599a984146e89f6042e235a149ea
msgid "To use the |chef dk| version of |ruby| as the default |ruby|, edit the ``$PATH`` and ``GEM`` environment variables to include paths to the |chef dk|. For example, on a machine that runs |bash|, run:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:18
# a5b84e2d1663467baa230c7b055bd6e7
msgid "where ``bash`` and ``~/.bash_profile`` represents the name of the shell."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:20
# 305e318fd4a944fdb5796029d7a8661c
msgid "If zsh is your preferred shell then run the following:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:26
# 5d6d4112440e47cdbe25a8ad7a5d8484
msgid "Run ``which ruby`` again. It should return ``/opt/chefdk/embedded/bin/ruby``."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:28
# fc346f558b504aaabe81a39e2a2299f1
msgid "Using the |chef dk|-provided |ruby| as your system |ruby| is optional. This just depends on how you are using |ruby| on your system. For many users, |ruby| is primarily used for authoring |chef| cookbooks and recipes. If that's true for you, then using the |chef dk|-provided |ruby| as your system |ruby| is recommended. But for other users who are already using tools like |rbenv| to manage |ruby| versions, then that's OK too."
msgstr ""

#: ../source/getting_started.rst:43
# 2aece77c3a824fddb02a51387f6fc973
msgid "Your First Cookbook"
msgstr ""

#: ../source/getting_started.rst:45
# 08c482b7960d4d19b3a7bfcad96ff5ff
msgid "We have already used the |chef ctl| ``verify`` subcommand to verify the installation of the |chef dk|. Now let's use the |chef ctl| ``generate`` subcommand to create the |chef repo|, which is the main folder in which your |chef| code will be stored. Run the following command:"
msgstr ""

#: ../source/getting_started.rst:51
# 494ad64cfae1461ebf7683fb42737852
msgid "where ``name`` is a name that you have chosen for the both the |chef repo| and the default cookbook. We are calling ours ``chef-repo``; you can call yours whatever you want. (We also renamed the default cookbook to ``chefdocs``, which is totally optional.) You should have a directory structure at ``/Users/your_username/cookbook_name/`` similar to::"
msgstr ""

#: ../source/getting_started.rst:67
# 3e83563c4b344269a2021000218027b0
msgid "Run the |chef client_title|"
msgstr ""

#: ../source/getting_started.rst:68
# bb01970e8a434b35a3010bdce06cfd8a
msgid "The |chef client| includes a mode called \"local mode\", which runs the |chef client| locally on your machine. Local mode allows you to run recipes and work locally with the code you are using to run your business. Local mode does not require a connection to a |chef server|, public or private keys, or configuring of nodes. (Though we'll do all of these things later!) Many people use local mode for simple, local testing of recipes and cookbooks, often as a pre-cursor to running unit and integration tests against the same recipes and cookbooks."
msgstr ""

#: ../source/getting_started.rst:70
# 440078422a2947c292c42efdb5d53482
msgid "Open the ``default.rb`` recipe in the cookbook you just created. Add the following resource to that recipe:"
msgstr ""

#: ../source/getting_started.rst:78
# 23d15309d70949aaa4595287526169de
msgid "This recipe creates a file called ``test.txt`` at the path defined by the ``HOME`` environment variable. (To view that path, run ``echo \"$HOME\"`` in the command shell.)"
msgstr ""

#: ../source/getting_started.rst:80
# 684a64ca881b46fc85d156e09312a5d9
msgid "Next, we'll run the |chef client|. This is done via the command line and from within the |chef repo|. Use the ``--local-mode`` flag to run the |chef client| in local mode. Use the ``--override-runlist`` flag to run only the recipe we have just created. (More about the run-list later.) For a cookbook's default recipe, only the name of the cookbook needs to be specified, as that maps to the default recipe. The following command will create the file ``test.txt``:"
msgstr ""

#: ../source/getting_started.rst:86
# 7a7408f51b264b6e90503ef7554c2ff9
msgid "where ``chefdocs`` is the name of your cookbook."
msgstr ""

#: ../source/getting_started.rst:88
# 1150732016214c308868e04b97d191a5
msgid "As the |chef client| adds the file to your system, output similar to the following is shown:"
msgstr ""

#: ../source/getting_started.rst:119
# d14d427de279452db3e58f2da8aa57e6
msgid "That's it. The warnings, for the moment, can be ignored. Check the root of the path defined by the ``HOME`` environment variable and find the file named ``test.txt``. The file should contain ``This file created by Chef!``."
msgstr ""

#: ../source/getting_started.rst:121
# a2e3029b762a4b568a3aacac0f1e8c0e
msgid "# We'll come back to working with |chef| later on, but the next step is to familiarize yourself with resources and cookbooks."
msgstr ""

#: ../source/getting_started.rst:124
# 18ff54816cc74fa594e11fb2fbb09601
msgid "|kitchen_title| Setup"
msgstr ""

#: ../../includes_test_kitchen/includes_test_kitchen.rst:5
# 1aa6cb41a3984233a2248587eb40cdb0
msgid "|kitchen| is an integration framework that is used to automatically test cookbook data across any combination of platforms and test suites, as defined by a |kitchen yml| file. |kitchen| uses a driver plugin architecture that allows it to support cookbook testing across many cloud providers and virtualization technologies. |kitchen| supports all of the common testing frameworks used by the |ruby| community."
msgstr ""

#: ../source/getting_started.rst:127
# 1ee02340751840ae831705bd95c908a2
msgid "You will need some type of virtualization software for |kitchen|. |vagrant| is the default driver for |kitchen|. Install |vagrant|. |vagrant| requires |virtualbox|, so install |virtualbox|. Once you're ready, we'll keep using the same cookbook created earlier."
msgstr ""

#: ../source/getting_started.rst:130
# c3f629b828224707808a2c5cd633fdcf
msgid "Update Metadata"
msgstr ""

#: ../source/getting_started.rst:131
# 55b6e08f86d646d3a790d75618e5b7bd
msgid "In that cookbok, let's update the metadata. Open the ``metadata.rb`` file. It will look similar to:"
msgstr ""

#: ../source/getting_started.rst:143
# 626c38ab1c04454287bc4f24b2e706d9
msgid "for now, let's just update the name and version settings, like this:"
msgstr ""

#: ../source/getting_started.rst:151
# d336c0a39b2f4529b0a3850d43ebbc4a
msgid "Verify |kitchen yml|"
msgstr ""

#: ../source/getting_started.rst:152
# 32b5b6c0ee624cb9ac9887a0f7e63375
msgid "Because |kitchen| is installed as part of the |chef dk|, the |kitchen yml| file is already created:"
msgstr ""

#: ../source/getting_started.rst:173
# bd8754e2ebc64b6987bd72301f3522df
msgid "Let's change the default provisioner to |chef zero|:"
msgstr ""

#: ../source/getting_started.rst:186
# 6228a2be85d94f73948b7892cf1d2935
msgid "and also make sure the |kitchen yml| knows about the default recipe in your cookbook. Under ``suites``, make sure the ``run_list`` contains the name of your cookbook. For example:"
msgstr ""

#: ../source/getting_started.rst:196
# a72282b146e046c1aff7f8bdeaf41744
msgid "where ``chef-repo`` is the name of your cookbook. This will ensure that |kitchen| uses this recipe when converging."
msgstr ""

#: ../source/getting_started.rst:198
# 855bea81f8544b4a9cf55cc840dd419a
msgid "Also, |kitchen| has been added to gitignore, thor, etc. files. We just need to create the directory in which tests will be authored. This is typically a sub-directory of ``/cookbooks`` called ``/tests``. The structure underneath ``/tests`` may be customized, but is typically something like ``/test/integration/default``."
msgstr ""

#: ../source/getting_started.rst:200
# c184636978e2482fbbad607bd13a1c9b
msgid "For now, we don't need to do anything else to get started using |kitchen|."
msgstr ""

#: ../source/getting_started.rst:203
# 24531536a0ad4e608a44ee8a2c7ac469
msgid "View Instance List"
msgstr ""

#: ../source/getting_started.rst:204
# 92d6d35d30d5489eb51a3630b76673b5
msgid "From your working directory, run the following command:"
msgstr ""

#: ../source/getting_started.rst:210
#: ../source/getting_started.rst:477
#: ../source/getting_started.rst:528
# b0292394713f4e298eec95e19f16d2dc
# fa9271bc954d441580a9f33d5744a5ba
# b4d6786e95c14236808b7c19133980cb
msgid "which will return something similar to:"
msgstr ""

#: ../source/getting_started.rst:218
# 4f57db3a050a4b6d8c323ca7e4f27e98
msgid "So there are two available platforms---|ubuntu| 12.04 and |centos| 6.4---configured to use the |vagrant| driver (which is enabled via the ``kitchen-vagrant`` driver that is built-in to the |chef dk|), and to run |chef zero| while running tests."
msgstr ""

#: ../source/getting_started.rst:221
# 353d7d4c2bd84ecb98e73e511ffc4d08
msgid "Create |centos| Instance"
msgstr ""

#: ../source/getting_started.rst:222
# b989cb591d694372b026f04b1fcf797d
msgid "Let's create an instance. Run the following command:"
msgstr ""

#: ../source/getting_started.rst:228
# 8d7e1f7b09bc4630971381d8d9bee102
msgid "This will start |vagrant|, which will then build a machine that rubs |centos| 6.4. (If this is the first time you're running |kitchen|, then |centos| needs to first be downloaded from the default instance location and may take a few minutes.)"
msgstr ""

#: ../source/getting_started.rst:263
#: ../source/getting_started.rst:320
# fcf0007c98024ee9ad72c5e0f7d706de
# fd8fde4e1b104158b4d7c58c95b352dc
msgid "Verify the instance list with the following command:"
msgstr ""

#: ../source/getting_started.rst:269
# 6d6578e3e8234fbf9c5f1d2f7d69959d
msgid "and you will see the following:"
msgstr ""

#: ../source/getting_started.rst:278
# 819fb22a142943558bcd65a3dadf2ac8
msgid "Create |ubuntu| Instance"
msgstr ""

#: ../source/getting_started.rst:279
# f4c0fc8166204de3b3fab21912e73813
msgid "Now let's create the |ubuntu| instance:"
msgstr ""

#: ../source/getting_started.rst:285
# d1819608430d489297da0da6c42e59ac
msgid "this may also take a few minutes, but will (eventually) return something similar to:"
msgstr ""

#: ../source/getting_started.rst:332
# 1575b08c1fd24158a030d8ee271b4738
msgid "and now we're all set up! We're going to use the same recipe and cookbook that we already created."
msgstr ""

#: ../source/getting_started.rst:335
# 7fb6880539e24533b3aac28b6120cf6d
msgid "Converge |centos|"
msgstr ""

#: ../source/getting_started.rst:336
# 97241f42257b42e596c39f0f4cf4c4be
msgid "Now that we're all configured and ready to run |kitchen|, let's try it in |centos|:"
msgstr ""

#: ../source/getting_started.rst:342
# ea47c408f2704b71aa607aaf44db978e
msgid "The first time you run this, it'll have to download the |chef client| and will show something similar to the following while it converges the node via |kitchen|:"
msgstr ""

#: ../source/getting_started.rst:393
# accbadd0d8224305b46cf44a3fddf268
msgid "Converge |ubuntu|"
msgstr ""

#: ../source/getting_started.rst:394
# f7693ca11ec7431cb3174bb9d1f531f8
msgid "Now let's try it in |ubuntu|:"
msgstr ""

#: ../source/getting_started.rst:400
# 7defb47b7dd5450ab607fac595a517df
msgid "Like |centos|, the |chef client| will need to be downloaded:"
msgstr ""

#: ../source/getting_started.rst:450
#: ../source/getting_started.rst:729
# 0e063b58df5c4ad791a48a036895badb
# 3d51e819d2ac4adda76145062229105e
msgid "Verify Instance List"
msgstr ""

#: ../source/getting_started.rst:451
#: ../source/getting_started.rst:730
# 52367cb42aa94dc0b122f5bf8e3bfbbd
# cb91134e73574883bc20a1389f6eb85c
msgid "To verify if both instances have been converged, run the following command:"
msgstr ""

#: ../source/getting_started.rst:463
# 090c8d198c204bbbafdaffeedc0d580c
msgid "Now you can run your cookbooks in a virtual instance managed by |kitchen| on multiple platforms (|ubuntu| and |centos|)."
msgstr ""

#: ../source/getting_started.rst:466
# 8847229bf69f484d9d8564cf6f3f3c9f
msgid "Configure NTP"
msgstr ""

#: ../source/getting_started.rst:467
# 3c5648a86e2040e7b366778834babebb
msgid "Instead of putting a text file on these |kitchen| instances, let's try something useful and install |ntp|. Within the cookbook we're already using, let's update the default recipe to install and configure |ntp| using the |resource package|, |resource template|, and |resource service| resources, a template file, and an attributes file."
msgstr ""

#: ../source/getting_started.rst:470
# 629ac5c72f114e2093b22b3ca2030e4f
msgid "Add Template"
msgstr ""

#: ../source/getting_started.rst:471
# 4fe2f7ab75b945b091f9bea65ec93401
msgid "The |resource template| resource looks for templates in a cookbook's ``/templates`` directory. Template files in this directory must be |erb| files. The |chef ctl| has an argument that will handle most of this process for you. Let's create that directory and the template file we'll use to configure |ntp| using this command. Let's use the same cookbook we've been using. From within that cookbook repo, run the following command:"
msgstr ""

#: ../source/getting_started.rst:489
#: ../source/getting_started.rst:540
# 781d5388ee3745bdb33d9ffbb48fc62f
# 55155367b10949d9b8dc984510856d25
msgid "and a directory structure in that cookbook similar to::"
msgstr ""

#: ../source/getting_started.rst:507
# 0c9d7560f5824488baed0797ac90f34f
msgid "and an empty ``ntp.conf.erb`` file. Let's edit this file and define its contents. Open this file and add the following:"
msgstr ""

#: ../source/getting_started.rst:521
# 939cec33def6452a97a6bfd4705bd291
msgid "Add Attributes"
msgstr ""

#: ../source/getting_started.rst:522
# a45748062932411a8d1271bebb3d3edd
msgid "The name of the init script that is used to run |ntp| is ``ntp`` on |debian|-based platforms (such as |ubuntu|) and is ``ntpd`` on |redhat enterprise linux|-based platforms. Let's use an attribute in our cookbook to tell the |chef client| what to do on both platforms using a single cookbook attribute. Like for templates, the |chef ctl| has an argument that will handle most of this process for you. Let's create that directory and the default attribute file we'll use to tell the |chef client| how to handle the attribute. Let's use the same cookbook we've been using. From within that cookbook repo, run the following command:"
msgstr ""

#: ../source/getting_started.rst:560
# bf77d98f033a47a193dafc0423c39264
msgid "and an empty ``default.rb`` file. Let's edit this file and define its contents. Open this file and add the following:"
msgstr ""

#: ../source/getting_started.rst:574
# 0bf8c1e471504309939ff80b9ab616f7
msgid "This attribute uses conditions to tell the |chef client| the correct name of the init script that will be used to start |ntp|, by platform. The attribute that is being set by this code block is ``node[:ntp][:service]`` and the |chef client| can use this attribute to identify the correct init script for |ntp| on any node and for any platform. If |debian|, use ``ntp`` and for everything else use ``ntpd``."
msgstr ""

#: ../source/getting_started.rst:577
# 213d3819624043bba3636d757b7819a3
msgid "Edit Recipe"
msgstr ""

#: ../source/getting_started.rst:578
# d9b9ed11c97e474dba8ad39a23bffdcd
msgid "To install |ntp|, a recipe needs to do three things:"
msgstr ""

#: ../source/getting_started.rst:580
# ce56595d63b840419a39bd66de3429c3
msgid "# Install |ntp| # Create a configuration file; this will be done using the ``ntp.conf.erb`` template file # Start the ``ntp`` or ``ntpd`` service, depending on the platform; this will be done using the ``node[:ntp][:service]`` attribute"
msgstr ""

#: ../source/getting_started.rst:584
# 7de85c5bcd3e4de393c56d65f4bd1006
msgid "Open the ``default.rb`` recipe file and replace the contents of that file with the following:"
msgstr ""

#: ../source/getting_started.rst:603
# 2d99724f0eaa43509b05f5d4306e3d89
msgid "The |resource package| resource installs the |ntp| package. The |resource template| resource gets the template file from the cookbook, and then uses it to create a ``ntp.conf`` file in the ``/etc/ntp.conf`` directory on the node, after which it notifies the |resource service| resource to restart the ``ntp`` or ``ntpd`` service. The |resource service| resource ensures that the ``ntp`` or ``ntpd`` service is started and enabled."
msgstr ""

#: ../source/getting_started.rst:606
# 9a3e5410c24f419d97a8d9afb900340b
msgid "Install |ntp| on |centos|"
msgstr ""

#: ../source/getting_started.rst:607
# 9fafc6dc752148f3a126418d8bf22ebc
msgid "Now let's install |ntp| in |centos|:"
msgstr ""

#: ../source/getting_started.rst:613
#: ../source/getting_started.rst:674
# ff5b1ef676224c6a8f7af1e289ba17b5
# 336c1a30e85a4b9490f8c8e4731cd77b
msgid "As it installs, the |chef client| will report back something similar to the following:"
msgstr ""

#: ../source/getting_started.rst:667
# 5ffb333a69c64b28a217cb13036c15c6
msgid "Install |ntp| on |ubuntu|"
msgstr ""

#: ../source/getting_started.rst:668
# 5a0c3c50b9194ab5abbe6ac83bbe179d
msgid "And finally, install |ntp| in |ubuntu|:"
msgstr ""

#: ../source/getting_started.rst:743
# 1342157756ac4c31aa9fd94e05c0ad09
msgid "More About Resources"
msgstr ""

#: ../source/getting_started.rst:744
# f03a999b8432467ba30fc257e817667b
msgid "The |chef client| includes many built-in resources: |resource execute|, |resource directory|, |resource package|, |resource service|, |resource file|, |resource template|, |resource user|, |resource script|, and |resource scm_git|."
msgstr ""

#: ../source/getting_started.rst:746
# 8a9a579be2e34d89b8ee41992708268c
msgid "The sections below quickly describe the most popular resources. For the full list of built-in |chef| resources, see `Resources <http://docs.opscode.com/resource.html#resources>`_. You can also `create your own resources <http://docs.opscode.com/lwrp_custom.html>`_ or `use the resources built into the community cookbooks <http://supermarket.getchef.com>`_."
msgstr ""

#: ../source/getting_started.rst:749
# 12a8610789c5401fb09ddf609bbe58ae
msgid "Execute Commands"
msgstr ""

#: ../source/getting_started.rst:750
# 7faa15da856b47a281491d822deed6cd
msgid "Commands are executed using the |resource execute| resource using an attribute to specify the actual command to run. See :doc:`execute </resource_execute>` for more information about executing commands."
msgstr ""

#: ../source/getting_started.rst:753
# 8c76089db6564c34aee5d7c437b4e875
msgid "Manage Directories"
msgstr ""

#: ../source/getting_started.rst:754
# 9252eea3649d4391ad639a68f3b41992
msgid "Directories are hierarchies of folders that comprise all the information stored on a computer. There are two ways to manage directories. The first is via the |resource directory| resource, which manages directories starting from the root directory. And the second is the |resource remote_directory|, which transfers directory structures defined in cookbooks to nodes. See :doc:`directory </resource_directory>` for more information about managing directories. If the directory is defined in a cookbook, use :doc:`remote_directory </resource_remote_directory>` instead."
msgstr ""

#: ../source/getting_started.rst:757
# 0c6835de51a445658b1fda74b749da93
msgid "Manage Packages"
msgstr ""

#: ../source/getting_started.rst:758
# fd1432b0b6c74bc9a7645422e90462f2
msgid "Packages are collections of files that comprise software applications or some part of an operating system. Use the package resource to manage these packages, unless they are sourced via |rubygems| and installed directly from within recipes or are sourced from a cookbook. See :doc:`package </resource_package>` for more information about managing packages. There are quite a few platform-specific package resources as well, though most of the time simply using the |resource package| is all that's necessary. For packages that are located in cookobooks, use :doc:`chef_gem </resource_chef_gem>`. And for packages that are only included via recipes, use :doc:`gem_package </resource_gem_package>`."
msgstr ""

#: ../source/getting_started.rst:761
# 89ca10a6def64e02b852a788501ed71e
msgid "Manage Services"
msgstr ""

#: ../source/getting_started.rst:762
# 1ceacca20909457aa4692d86ee822e27
msgid "Services can be started, stopped, enabled, disabled, reloaded, and restarted. See :doc:`service </resource_service>` for more information about managing services."
msgstr ""

#: ../source/getting_started.rst:765
# 4e3a3220911d4366b644cfa7c40c4b92
msgid "Manage Files"
msgstr ""

#: ../source/getting_started.rst:766
# 7b47d111ccaa46599962af637ccadb87
msgid "Files are managed in several ways. The |resource file| resource manages files that are already present on a node. Files are transferred to nodes from cookbooks using the |resource cookbook_file| resource and are transferred to nodes from remote locations using the |resource remote_file| resource. See :doc:`file </resource_file>` for more information about managing files, :doc:`remote_file </resource_remote_file>` for transferring files from remote locations, and :doc:`cookbook_file </resource_cookbook_file>` for transferring files that are located in cookbooks."
msgstr ""

#: ../source/getting_started.rst:769
# f143bbee8f094a96858ca42a3d4546f4
msgid "Manage Templates"
msgstr ""

#: ../source/getting_started.rst:770
# 71c52474226f4208b8ff806ef566213e
msgid "Templates are used to generate files based on variables and logic contained within the template file. |chef| uses |erb| templates and |ruby| expressions and statements to define the template file. Template source files must be located within cookbooks. See :doc:`template </resource_template>` for more information about managing files using |erb| templates."
msgstr ""

#: ../source/getting_started.rst:773
# 9bf3f4b2847e4e0bab9bada2a80bcc14
msgid "Manage Users, Groups"
msgstr ""

#: ../source/getting_started.rst:774
# 08a29b05829f465c915af3b3fbb16aa3
msgid "Users and groups can be added, updated, removed. User passwords can be locked and unlocked. See :doc:`user </resource_user>` for more information about managing users and user passwords. The :doc:`group </resource_group>` resource manges groups."
msgstr ""

#: ../source/getting_started.rst:777
# f236a9b506f44f9394aeb6313a1b0acf
msgid "Use Script Interpreters"
msgstr ""

#: ../source/getting_started.rst:778
# e384e4a9b6f340bb894aabd1464d7599
msgid "Script interpreters execute scripts on a node, similar to the |resource execute| resource, and with the ability to specify the interpreter that the |chef client| should use. See :doc:`script </resource_script>` for more (general) information about using scripts in recipes. Interpreter-specific resources are available, with :doc:`bash </resource_bash>` being the most popular. Also available: :doc:`csh </resource_csh>`, :doc:`perl </resource_perl>`, :doc:`powershell_script </resource_powershell_script>`, :doc:`python </resource_python>`, and :doc:`ruby </resource_ruby>`. Two |windows|-specific resources are also available: :doc:`batch </resource_batch>` and :doc:`powershell_script </resource_powershell_script>`."
msgstr ""

#: ../source/getting_started.rst:781
# a2dba388c53b4a4db4838b8ac7070792
msgid "Use Source Control"
msgstr ""

#: ../source/getting_started.rst:782
# 8f892a6c39b34be69cafae328d2a927e
msgid "Most users of |chef| keep their code in some type of version source control. |chef| can interact with this code from recipes. |git| is a very popular choice. The :doc:`git </resource_git>` resource is used to manage files that exist in a |git| repository. There is also a resource for :doc:`subversion </resource_subversion>`, another popular version source control tool."
msgstr ""

#: ../source/getting_started.rst:786
# dd25b19d102c4cf1ae19b3470aa79333
msgid "About Cookbooks"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:4
# 7c520c3aec6c42829b2c630fd8e8dc09
msgid "A cookbook is the fundamental unit of configuration and policy distribution. Each cookbook defines a scenario, such as everything needed to install and configure |mysql|, and then it contains all of the components that are required to support that scenario, including:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:6
# cc6038256b08482cad54811d192ea94d
msgid "Attribute values that are set on nodes"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:7
# 1fee63826e4945cbbabc9fa09ade8b86
msgid "Definitions that allow the creation of reusable collections of resources"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:8
# 0af94a5a8034428c8d21fd2fadfa1efb
msgid "File distributions"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:9
# 65f3c3ef01554169b0bc7a276d872000
msgid "Libraries that extend the |chef client| and/or provide helpers to |ruby| code"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:10
# 75af5d3a54634d20b8ea5a78c2e492fc
msgid "Recipes that specify which resources to manage and the order in which those resources will be applied"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:11
# 27bf6b532d0c491ab7f1d8edac3c65d8
msgid "Custom resources and providers"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:12
# 953339cd38e24f25a9a5866c8994829b
msgid "Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:13
# be639a0232f84847b7b31294f79b1981
msgid "Versions"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:14
# 8584ad6ef7984af4825a3ee3fb1be389
msgid "Metadata about recipes (including dependencies), version constraints, supported platforms, and so on"
msgstr ""

#: ../source/getting_started.rst:789
# fa830c69d7274e8bb63f4a71c3abc41a
msgid "Every cookbook follows a defined structure, but individiaul cookbooks can take on many different styles depending on how your organization wants to manage its code, who authored them, and how they are intended to be used. Some cookbooks contain only a single, default recipe. Others may contain only a library file. Some may contain only a few attributes. And other cookbooks may contain several custom resources along with many attributes and templates, and so on."
msgstr ""

#: ../source/getting_started.rst:791
# d3ebe138f61f4d52bd8ceb10b5f0033c
msgid "Some cookbooks you will build yourself. Some cookbooks will be provided by the community. Most community cookbooks will be managed using |berkshelf|, which is a dependency manager included in the |chef dk|. Occasionally, a community cookbook will be forked, but more often a wrapper cookbook is created to handle your organization-specific requirements while still allowing use of the community cookbook."
msgstr ""

#: ../source/getting_started.rst:793
# de95d6e621564f7ba02d450bb4f4124f
msgid "The most important thing to know about cookbooks is that there are lots of ways to build good ones. There are patterns to follow, there are guidelines. There are recomended ways of dealing with attributes. There are recommended ways of creating custom resources. But ultimately, a good cookbook is the one that works for your organization. Ideally, this cookbook works across your infrastructure. Most organizations have a mix of private (internal) and public (community) cookbooks in use in their organization."
msgstr ""

#: ../source/getting_started.rst:796
# a23043ae45884ddeaa0e0c2e6d87fb15
msgid "Cookbook Patterns"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:6
# c54634e0b5c34f22bb1e8a765daab3c7
msgid "A primary goal of cookbook authoring is to create cookbooks that are reusable as building blocks, where each cookbook defines a specific configuration piece used by the organization. For example, say all servers across the organization will run |cron| and |ntp|, but only front-end servers in production will be load balanced. This building block approach relies on some basic guidelines:"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:8
# 263700023d3a481481dde152eb188172
msgid "All cookbooks are kept in version source control"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:9
# d6e1e74f44364863ab902b315f15bf03
msgid "Cookbooks are never forked from their |github| repositories"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:10
# 4c454bfc417e4c1296cb16ae994c5f02
msgid "Cookbooks may be kept in the |chef repo|, but are typically kept in their own dedicated repositories outside of the |chef repo|"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:11
# 7a753d7554ce4735b4d27a6e24c7653e
msgid "Cookbooks are kept as small as possible and are focused on specific configuration targets, with changes to cookbooks tracked as versions of that cookbook"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:12
# 09211656cc4045dcb95b04a40e8ff58e
msgid "Cookbooks are better when unit and integration testing is done against them, automatically"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:13
# 35cc435c55e34e6fb50f28546ba6d12d
msgid "When a cookbook is uploaded to the |chef server|, it is versioned and that version is frozen"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:14
# fdb1b1c5d59941eba4c2d1eac98c8774
msgid "Community cookbooks are a great resource; often a community cookbook can be used wholesale (without changes), but sometimes a community cookbook needs a wrapper that is used to ensure specific organizational requirements are met"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:15
# ccd9f2b2cff54728a9da62fd352e44e7
msgid "Recipes in cookbooks should be modular, minimally prescriptive, and use custom resources to expose repeatable patterns that are needed to solve implementation-specific requirements"
msgstr ""

#: ../source/getting_started.rst:800
# 43cc8f167b8a4f7bb5ca01bd36507946
msgid "About |ruby|"
msgstr ""

#: ../../includes_ruby/includes_ruby.rst:5
# cd95bc5fa19e4931ac40da3e4432b243
msgid "|chef| uses |ruby| as its reference language. |ruby| is a simple programming language that |chef| uses to define the patterns that are found in resources, recipes, and cookbooks. In many cases, just using these patterns is enough to configure, deploy, and manage nodes across the network. |ruby| is also a powerful and complete programming language. You can use the full power of the |ruby| programming language to make decisions about what should happen to specific resources and recipes or to extend |chef| in any manner that your organization requires."
msgstr ""

#: ../source/getting_started.rst:804
# c2012cee597f4c08bc3e17acb8d1e98b
msgid "Conclusion"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 60da3a1bec7447fb96ffc7d23b9ca85b
msgid "The key underlying principle of |chef| is that you (the user) know best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# e2d77a0955384923b85f89e2ebcb2be5
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

