# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-27 16:02-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/getting_started.rst:8
# cef578a3181a4495b0f659f4ab0aee99
msgid "Getting Started"
msgstr ""

#: ../source/getting_started.rst:10
# 3a723115410c4c19b17b85a4efee6d20
msgid "Welcome to |chef|!"
msgstr ""

#: ../../includes_chef/includes_chef.rst:5
# 2a9565fb42b6425583952972786e1b63
msgid "|chef| is a powerful automation platform that transforms complex infrastructure into code, bringing your servers and services to life. Whether youâ€™re operating in the cloud, on-premises, or a hybrid, |chef| automates how applications are configured, deployed, and managed across your network, no matter its size."
msgstr ""

#: ../../includes_chef/includes_chef.rst:7
# 8435799df48d4c39a310ade15c941231
msgid "|chef| is built around simple concepts: achieving desired state, centralized modeling of IT infrastructure, and resource primitives that serve as building blocks. These concepts enable you to quickly manage any infrastructure with |chef|. These very same concepts allow |chef| to handle the most difficult infrastructure challenges on the planet."
msgstr ""

#: ../../includes_chef/includes_chef.rst:9
# 476dd3dafd3b4b7180833cb1414a1299
msgid "Anything that can run the |chef client| can be managed by |chef|. For instance, you can manage physical machines, virtual machines, containers, or cloud-based instances. The |chef client| is an agent that runs on a node and performs the actual tasks that configure it. The |chef server| is the central repository for all configuration data. The |chef client| and |chef server| communicate with each other. For secure communications, they use a combination of public and private keys that ensures the |chef server| responds only to requests made by the |chef client|."
msgstr ""

#: ../source/getting_started.rst:15
# 059e3fed84c74db89c531262450a7543
msgid "About Resources"
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:5
# 99911ce5cd684adf8e0b238193da8402
msgid "A resource is a statement of configuration policy. It describes the desired state of an element of your infrastructure, along with the steps needed to bring that item to the desired state. Each resource statement in a |chef| recipe corresponds to a specific part of your infrastructure: a file, a template, a directory, a package, a service, a command to be executed, and so on. Each resource statement includes the resource type (such as ``template``, ``service`` or ``package``), its name, any attributes that specify additional details, and an action that tells the |chef client| how to implement the configuration policy."
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:7
# 7eefa39935dd4e999e23fdafbff15181
msgid "Together, resources describe all the components in your network. Recipes group resources together and describe working configurations. Add recipes to a run-list to describe the desired state for every node to which that run-list is assigned. Cookbooks are collections of recipes and are stored on the |chef server|."
msgstr ""

#: ../source/getting_started.rst:18
# 5a8cfbc0378242858daf2a39d6f078cd
msgid "The |chef client| includes many built-in resources that handle just about any situation. Three of these resources are an essential part of any |chef| workflow: |resource package|, |resource template|, and |resource service|. Use the |resource package| resource to install a package, the |resource template| resource to generate a file on the node that applies configuration settings for that package, and then use the |resource service| resource to start (or restart) the service associated with that package. This is a combination of resources that you will use often with |chef|."
msgstr ""

#: ../source/getting_started.rst:20
# 8bb1479273594e47863f488ff782d6c2
msgid "The next step is to install |chef|, configure your workstation, and then configure |kitchen| to run virtual instances locally on that workstation. After that is finished, we'll revisit the |resource package|, |resource template|, and |resource service| resources and use them with |kitchen| to converge |ntp| into a virtual instance that is spun up and managed by |kitchen|."
msgstr ""

#: ../source/getting_started.rst:23
# b874c74649f54a3ab5bbf37ef82b5107
msgid "Workstation Setup"
msgstr ""

#: ../source/getting_started.rst:24
# 279f504053e84ded8a9817c6c9ab8c1b
msgid "The |chef dk| is a package that contains everything you need to start using |chef|, along with a collection of tools and libaries that can help improve the code you are using to run your business."
msgstr ""

#: ../source/getting_started.rst:27
# 01b99738addb43a7a7f1a80431ff3700
msgid "Install the |chef dk|"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:4
# 17f5b7d12de94522acc5df1002706973
msgid "To install the |chef dk|:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:6
# b8a6d88839324f6fb32884abb4b8f405
msgid "Visit this page: http://www.getchef.com/downloads/chef-dk/ and pick your platform. The |chef dk| supports |mac os x|, |redhat enterprise linux|, |ubuntu|, and |windows|."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:7
# 713538c487e9415e91fd1748dbaf7d9b
msgid "Select a platform, and then a package. (|chef docs| uses the |mac os x| setup within the documentation.)"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:8
# 0fa6380a88824713ad7cb3780a447826
msgid "Click the download button."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:9
# 18dc3bdfa4174259ab6283104313c619
msgid "Follow the steps in the installer and install the |chef dk| to your machine. The |chef dk| is installed to ``/opt/chefdk/`` on |unix| and |linux| systems."
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:10
# 06a1164a8dea41a2875b0c40fe13e8f6
msgid "When finished, open a command window and enter the following:"
msgstr ""

#: ../../includes_install/includes_install_chef_dk.rst:16
# 3f56919b5f2f418981b59f1a66bd7526
msgid "This will verify the main components of the |chef dk|: the |chef client|, the |chef dk| library, and the tools that are built into the |chef dk|. The output should be similar to:"
msgstr ""

#: ../source/getting_started.rst:31
# e3a84b6bb4d748efb84dfbe03fe46f89
msgid "What's in the |chef dk|?"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools.rst:4
# 82ca5ee0ab5a4628b6ad476b0651a38c
msgid "The |chef dk| installs a collection of tools and libraries into a single directory structure, which makes it easier to manage any dependencies these tools may have on each other and the dependencies that |chef| has on |ruby|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:4
# b31754563e1e45f5901aea72933e0ac5
msgid "The most important tools included in the |chef dk| are:"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:10
# f9e35abcb53a4714b0cafefa9cc9e923
msgid "Tool"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:11
# 6f6f90539f2f4959a5ba6a8de1365db2
msgid "Description"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:12
# 5f18daa8d97d498f80182af7ad29282b
msgid "|berkshelf|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:13
# 831f8ed726d04c57b41cda60fcb9faef
msgid "A dependency manager for cookbooks."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:14
# 7005bb66c06f44e98cf4e445cc658c0a
msgid "|chef ctl|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:15
# d38a964da4064c2dab437f973607db2c
msgid "A workflow tool for |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:16
# a799997565ee4e6dafd4a708c9f3fee8
msgid "|chef client|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:17
# 6fbf6cf48465423d873a75c1d212dd4e
msgid "The agent that runs |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:18
# 9b50ac37763f4c038e5195cb2bfe14ab
msgid "|chef dk|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:19
# fd8c325a84af4f78bf82a69d1730ebf9
msgid "The |chef dk| omnibus package."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:20
# e24648901f044b4ea0270f39c13012cd
msgid "|chef spec|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:21
# 412973a3430b40cfb7259078a91308cf
msgid "A unit testing framework that tests resources locally."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:22
# 45b28d0c6dfd4e589534292a3a5a31fc
msgid "|ruby|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:23
# 7fa8345e07a84aefaa631ce27c9f7853
msgid "The reference language for |chef|."
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:24
# 93f10dc1393d405cb5f6b41ec3c3d98b
msgid "|kitchen|"
msgstr ""

#: ../../includes_chef_dk/includes_chef_dk_tools_main.rst:25
# c08f7623145741a892cf989d978e9377
msgid "An integration testing framework tool that tests cookbooks across platforms."
msgstr ""

#: ../source/getting_started.rst:37
# 72cb15a059ad4444b1e5dabf923cbafd
msgid "Set the System |ruby|"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:3
# c81d6256c137445492a68bfd966cf809
msgid "For many users of |chef|, the |chef dk| version of |ruby| that is included in the |chef dk| should be configured as the default version of |ruby|."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:5
# 4ae5f78e533f46a18ecb8d76e22b189b
msgid "Open a command window and enter the following:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:11
# 77924ece771d444f9ab9cafa9e60b3fb
msgid "which will return something like ``/usr/bin/ruby``."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:12
# a620d4a2282944548be8074d6a339770
msgid "To use the |chef dk| version of |ruby| as the default |ruby|, edit the ``$PATH`` and ``GEM`` environment variables to include paths to the |chef dk|. For example, on a machine that runs |bash|, run:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:18
# 95f7a1d02cc64ad1960e7c3259cdcd8c
msgid "where ``bash`` and ``~/.bash_profile`` represents the name of the shell."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:20
# 499754cf9ada490797bc284ed472eba1
msgid "If zsh is your preferred shell then run the following:"
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:26
# ceed3d0db54b40eaae790386e6e638c9
msgid "Run ``which ruby`` again. It should return ``/opt/chefdk/embedded/bin/ruby``."
msgstr ""

#: ../../step_ruby/step_ruby_set_system_ruby_as_chefdk_ruby.rst:28
# a6c1127eb292481190575bcfabba5d3d
msgid "Using the |chef dk|-provided |ruby| as your system |ruby| is optional. This just depends on how you are using |ruby| on your system. For many users, |ruby| is primarily used for authoring |chef| cookbooks and recipes. If that's true for you, then using the |chef dk|-provided |ruby| as your system |ruby| is recommended. But for other users who are already using tools like |rbenv| to manage |ruby| versions, then that's OK too."
msgstr ""

#: ../source/getting_started.rst:41
# bd63443c737e444cbbb95df64b9175ab
msgid "Your First Cookbook"
msgstr ""

#: ../source/getting_started.rst:43
# b29b8f67594d4ea6929a6ef0908221dd
msgid "We have already used the |chef ctl| ``verify`` subcommand to verify the installation of the |chef dk|. Now let's use the |chef ctl| ``generate`` subcommand to create the |chef repo|, which is the main folder in which your |chef| code will be stored. Run the following command:"
msgstr ""

#: ../source/getting_started.rst:49
# 6c762bf701f0413a8605cc33846f114c
msgid "where ``name`` is a name that you have chosen for the both the |chef repo| and the default cookbook. We are calling ours ``chef-repo``; you can call yours whatever you want. (We also renamed the default cookbook to ``chefdocs``, which is totally optional.) You should have a directory structure at ``/Users/your_username/cookbook_name/`` similar to::"
msgstr ""

#: ../source/getting_started.rst:65
# b631fed23f084ede84dfa7980a215e35
msgid "Run the |chef client|"
msgstr ""

#: ../source/getting_started.rst:66
# c064636e414846ccb1fe658fbb7253ec
msgid "The |chef client| includes a mode called \"local mode\", which runs the |chef client| locally on your machine. Local mode allows you to run recipes and work locally with the code you are using to run your business. Local mode does not require a connection to a |chef server|, public or private keys, or configuring of nodes. (Though we'll do all of these things later!) Many people use local mode for simple, local testing of recipes and cookbooks, often as a pre-cursor to running unit and integration tests against the same recipes and cookbooks."
msgstr ""

#: ../source/getting_started.rst:68
# fd33740fe77d497d86edbbf61f854341
msgid "Open the ``default.rb`` recipe in the cookbook you just created. Add the following resource to that recipe:"
msgstr ""

#: ../source/getting_started.rst:76
# b9cc500f609e433d8821a10697d39e44
msgid "This recipe creates a file called ``test.txt`` at the path defined by the ``HOME`` environment variable. (To view that path, run ``echo \"$HOME\"`` in the command shell.)"
msgstr ""

#: ../source/getting_started.rst:78
# 2f264adf00694c109cc3aa3d7999c514
msgid "Next, we'll run the |chef client|. This is done via the command line and from within the |chef repo|. Use the ``--local-mode`` flag to run the |chef client| in local mode. Use the ``--override-runlist`` flag to run only the recipe we have just created. (More about the run-list later.) For a cookbook's default recipe, only the name of the cookbook needs to be specified, as that maps to the default recipe. The following command will create the file ``test.txt``:"
msgstr ""

#: ../source/getting_started.rst:84
# f0e2da2f9211421f908efb6f497dde16
msgid "where ``chefdocs`` is the name of your cookbook."
msgstr ""

#: ../source/getting_started.rst:86
# 94eec43f61b3440491b40b59c82aae64
msgid "As the |chef client| adds the file to your system, output similar to the following is shown:"
msgstr ""

#: ../source/getting_started.rst:117
# d16052cc5ba04675931403bf45547759
msgid "That's it. The warnings, for the moment, can be ignored. Check the root of the path defined by the ``HOME`` environment variable and find the file named ``test.txt``. The file should contain ``This file created by Chef!``."
msgstr ""

#: ../source/getting_started.rst:119
# 8f080ddf7b474782be7357e7bff1933b
msgid "# We'll come back to working with |chef| later on, but the next step is to familiarize yourself with resources and cookbooks."
msgstr ""

#: ../source/getting_started.rst:122
# 9b44ce97aa2f4ae3a0dea4f1a1afbb15
msgid "|kitchen| Setup"
msgstr ""

#: ../../includes_test_kitchen/includes_test_kitchen.rst:5
# 8a76d658b52049b2896398a55f176dd8
msgid "|kitchen| is an integration framework that is used to automatically test cookbook data across across any combination of platforms and test suites, as defined by a |kitchen yml| file. |kitchen| uses a driver plugin architecture that allows it to support cookbook testing across many cloud providers and virtualization technologies. |kitchen| supports all of the common testing frameworks used by the |ruby| community."
msgstr ""

#: ../source/getting_started.rst:125
# 65fd9daa6e914449b1d11212eabb34c6
msgid "You will need some type of virtualization software for |kitchen|. |vagrant| is the default driver for |kitchen|. Install |vagrant|. |vagrant| requires |virtualbox|, so install |virtualbox|. Once you're ready, we'll keep using the same cookbook created earlier."
msgstr ""

#: ../source/getting_started.rst:128
# 605409ebe5e44b2cb01310e1514ccf82
msgid "Update Metadata"
msgstr ""

#: ../source/getting_started.rst:129
# da86620ae8d2465bbad9e1a44d40da9a
msgid "In that cookbok, let's update the metadata. Open the ``metadata.rb`` file. It will look similar to:"
msgstr ""

#: ../source/getting_started.rst:141
# 9d9c1c6e891d4bc0b563e284e92e8725
msgid "for now, let's just update the name and version settings, like this:"
msgstr ""

#: ../source/getting_started.rst:149
# 0921b7eca9d642ac9ddff20e33bce1e0
msgid "Verify |kitchen yml|"
msgstr ""

#: ../source/getting_started.rst:150
# c868b453513b4da491d2dae75eaec63e
msgid "Because |kitchen| is installed as part of the |chef dk|, the |kitchen yml| file is already created:"
msgstr ""

#: ../source/getting_started.rst:171
# 341094b2511d477f9737e48375f487ac
msgid "Let's change the default provisioner to |chef zero|:"
msgstr ""

#: ../source/getting_started.rst:184
# 2002aae4fd81452ca59ece221de70dc6
msgid "and also make sure the |kitchen yml| knows about the default recipe in your cookbook. Under ``suites``, make sure the ``run_list`` contains the name of your cookbook. For example:"
msgstr ""

#: ../source/getting_started.rst:194
# 7b3d6d6b03fe4b0792036ce1591cd9a4
msgid "where ``chef-repo`` is the name of your cookbook. This will ensure that |kitchen| uses this recipe when converging."
msgstr ""

#: ../source/getting_started.rst:196
# 027a0fdd034a4be6868dd8f50f96f8db
msgid "Also, |kitchen| has been added to gitignore, thor, etc. files. We just need to create the directory in which tests will be authored. This is typically a sub-directory of ``/cookbooks`` called ``/tests``. The structure underneath ``/tests`` may be customized, but is typically something like ``/test/integration/default``."
msgstr ""

#: ../source/getting_started.rst:198
# de725090ecb947a1a150d0b69efe4ce2
msgid "For now, we don't need to do anything else to get started using |kitchen|."
msgstr ""

#: ../source/getting_started.rst:201
# 10ff9bc490c346cca43e553a8b070362
msgid "View Instance List"
msgstr ""

#: ../source/getting_started.rst:202
# d9f6da0c7f6c408086f6348959b8cb11
msgid "From your working directory, run the following command:"
msgstr ""

#: ../source/getting_started.rst:208
#: ../source/getting_started.rst:475
#: ../source/getting_started.rst:526
# 8b13ad12c77e4e80acb6d7c42a917235
# 32e60f67bb65492e8ecab80dc767c0ef
# a650052e245e4802aef34a38b513fa49
msgid "which will return something similar to:"
msgstr ""

#: ../source/getting_started.rst:216
# 66fd92d5b00b42dcb91118f9b84fc9e5
msgid "So there are two available platforms---|ubuntu| 12.04 and |centos| 6.4---configured to use the |vagrant| driver (which is enabled via the ``kitchen-vagrant`` driver that is built-in to the |chef dk|), and to run |chef zero| while running tests."
msgstr ""

#: ../source/getting_started.rst:219
# b5d590507cd84767bfd7e6b163868154
msgid "Create |centos| Instance"
msgstr ""

#: ../source/getting_started.rst:220
# 464b81e181f54ae5a7657dd6e812a94b
msgid "Let's create an instance. Run the following command:"
msgstr ""

#: ../source/getting_started.rst:226
# 77d29f16d07c4af1ab02bddda45e1856
msgid "This will start |vagrant|, which will then build a machine that rubs |centos| 6.4. (If this is the first time you're running |kitchen|, then |centos| needs to first be downloaded from the default instance location and may take a few minutes.)"
msgstr ""

#: ../source/getting_started.rst:261
#: ../source/getting_started.rst:318
# 8cff1622142841edb059fb16e20ec002
# 364977a732094a36b7c5e76bf5ebe67b
msgid "Verify the instance list with the following command:"
msgstr ""

#: ../source/getting_started.rst:267
# 84ec6d59466a4ed6b3ae092e12311720
msgid "and you will see the following:"
msgstr ""

#: ../source/getting_started.rst:276
# 7d363c0485b74f929c261bd1dfffa32f
msgid "Create |ubuntu| Instance"
msgstr ""

#: ../source/getting_started.rst:277
# 05a79f66f884415aa4c670ce574974c8
msgid "Now let's create the |ubuntu| instance:"
msgstr ""

#: ../source/getting_started.rst:283
# 3f06ca00e03e451194d44aa80fcc93de
msgid "this may also take a few minutes, but will (eventually) return something similar to:"
msgstr ""

#: ../source/getting_started.rst:330
# 2cc7c9ee9a314825b3028a0d14362027
msgid "and now we're all set up! We're going to use the same recipe and cookbook that we already created."
msgstr ""

#: ../source/getting_started.rst:333
# 162946a3f1e046ad9c82cb9bd909907f
msgid "Converge |centos|"
msgstr ""

#: ../source/getting_started.rst:334
# 507c4524239d48df98b3f39e8d9f1d4d
msgid "Now that we're all configured and ready to run |kitchen|, let's try it in |centos|:"
msgstr ""

#: ../source/getting_started.rst:340
# 3b1f4f7c80c341c0959422df887ea5e9
msgid "The first time you run this, it'll have to download the |chef client| and will show something similar to the following while it converges the node via |kitchen|:"
msgstr ""

#: ../source/getting_started.rst:391
# f9c50fc2d7df4e05a6d83d59a357ee83
msgid "Converge |ubuntu|"
msgstr ""

#: ../source/getting_started.rst:392
# f488d8099ce34aa39c64991446e5b3ea
msgid "Now let's try it in |ubuntu|:"
msgstr ""

#: ../source/getting_started.rst:398
# b93c76a9a61d4942b4125d699680c764
msgid "Like |centos|, the |chef client| will need to be downloaded:"
msgstr ""

#: ../source/getting_started.rst:448
#: ../source/getting_started.rst:727
# d98fc981bb884f23a41803ce192de0da
# f5ed9b9203734b6aa68366f7b058dfcb
msgid "Verify Instance List"
msgstr ""

#: ../source/getting_started.rst:449
#: ../source/getting_started.rst:728
# 6b554a751b01435aa0d27d23ec2e158a
# 6774bed24fbb421f9ee9c5c58712fcd2
msgid "To verify if both instances have been converged, run the following command:"
msgstr ""

#: ../source/getting_started.rst:461
# 9ff93898629641b88b39393d34e5e451
msgid "Now you can run your cookbooks in a virtual instance managed by |kitchen| on multiple platforms (|ubuntu| and |centos|)."
msgstr ""

#: ../source/getting_started.rst:464
# de8da939adae4fc293f2b4b7231750fb
msgid "Configure NTP"
msgstr ""

#: ../source/getting_started.rst:465
# fa710d21743a4e0cb8fe06f0bf41d2eb
msgid "Instead of putting a text file on these |kitchen| instances, let's try something useful and install |ntp|. Within the cookbook we're already using, let's update the default recipe to install and configure |ntp| using the |resource package|, |resource template|, and |resource service| resources, a template file, and an attributes file."
msgstr ""

#: ../source/getting_started.rst:468
# 619d113431e74f14bb255c47f9a8dbe2
msgid "Add Template"
msgstr ""

#: ../source/getting_started.rst:469
# 9b6e3b2755824490982af3a447a1dcb8
msgid "The |resource template| resource looks for templates in a cookbook's ``/templates`` directory. Template files in this directory must be |erb| files. The |chef ctl| has an argument that will handle most of this process for you. Let's create that directory and the template file we'll use to configure |ntp| using this command. Let's use the same cookbook we've been using. From within that cookbook repo, run the following command:"
msgstr ""

#: ../source/getting_started.rst:487
#: ../source/getting_started.rst:538
# bc4b506282f34b7388897cf02ffa600e
# c258da2c32ea4092ad59a0c4332c4fba
msgid "and a directory structure in that cookbook similar to::"
msgstr ""

#: ../source/getting_started.rst:505
# f1c6e969821c4739af7c72f65be37b03
msgid "and an empty ``ntp.conf.erb`` file. Let's edit this file and define its contents. Open this file and add the following:"
msgstr ""

#: ../source/getting_started.rst:519
# 8a7fd88c0f9348c5b9a64ed9a2f79076
msgid "Add Attributes"
msgstr ""

#: ../source/getting_started.rst:520
# 72c3d2ac348844d3acd0696521f5a1d4
msgid "The name of the init script that is used to run |ntp| is ``ntp`` on |debian|-based platforms (such as |ubuntu|) and is ``ntpd`` on |redhat enterprise linux|-based platforms. Let's use an attribute in our cookbook to tell the |chef client| what to do on both platforms using a single cookbook attribute. Like for templates, the |chef ctl| has an argument that will handle most of this process for you. Let's create that directory and the default attribute file we'll use to tell the |chef client| how to handle the attribute. Let's use the same cookbook we've been using. From within that cookbook repo, run the following command:"
msgstr ""

#: ../source/getting_started.rst:558
# cb8faa30f2bc4d129f968dcec414530c
msgid "and an empty ``default.rb`` file. Let's edit this file and define its contents. Open this file and add the following:"
msgstr ""

#: ../source/getting_started.rst:572
# 2b3e01d9d1204740aeed98aede125f55
msgid "This attribute uses conditions to tell the |chef client| the correct name of the init script that will be used to start |ntp|, by platform. The attribute that is being set by this code block is ``node[:ntp][:service]`` and the |chef client| can use this attribute to identify the correct init script for |ntp| on any node and for any platform. If |debian|, use ``ntp`` and for everything else use ``ntpd``."
msgstr ""

#: ../source/getting_started.rst:575
# a7662e462c5b400a81e767fbf9ee0f16
msgid "Edit Recipe"
msgstr ""

#: ../source/getting_started.rst:576
# be32ee08247e479abf5e2d667f18ea53
msgid "To install |ntp|, a recipe needs to do three things:"
msgstr ""

#: ../source/getting_started.rst:578
# 9ae6e612bcd44793b8802aaecbdb4f4c
msgid "# Install |ntp| # Create a configuration file; this will be done using the ``ntp.conf.erb`` template file # Start the ``ntp`` or ``ntpd`` service, depending on the platform; this will be done using the ``node[:ntp][:service]`` attribute"
msgstr ""

#: ../source/getting_started.rst:582
# 10e280e5259242959577118c772fef38
msgid "Open the ``default.rb`` recipe file and replace the contents of that file with the following:"
msgstr ""

#: ../source/getting_started.rst:601
# aff18b8dcf8f4ee0a743711981d30b20
msgid "The |resource package| resource installs the |ntp| package. The |resource template| resource gets the template file from the cookbook, and then uses it to create a ``ntp.conf`` file in the ``/etc/ntp.conf`` directory on the node, after which it notifies the |resource service| resource to restart the ``ntp`` or ``ntpd`` service. The |resource service| resource ensures that the ``ntp`` or ``ntpd`` service is started and enabled."
msgstr ""

#: ../source/getting_started.rst:604
# 4190b45bcec74d6483d1ba2be122283b
msgid "Install |ntp| on |centos|"
msgstr ""

#: ../source/getting_started.rst:605
# b677aab4c66b4ef2be93c1f19fa0b30a
msgid "Now let's install |ntp| in |centos|:"
msgstr ""

#: ../source/getting_started.rst:611
#: ../source/getting_started.rst:672
# 0d4722deb46242129143e3adfc5437b3
# a4afa815fdcb4bf6b145703723f2d175
msgid "As it installs, the |chef client| will report back something similar to the following:"
msgstr ""

#: ../source/getting_started.rst:665
# 820ea79e030e4eebaaeaa19ada944915
msgid "Install |ntp| on |ubuntu|"
msgstr ""

#: ../source/getting_started.rst:666
# 48a310fca1f64451926f13024ae4a030
msgid "And finally, install |ntp| in |ubuntu|:"
msgstr ""

#: ../source/getting_started.rst:741
# 3f83d69f1746464d8b0641a109ce7aa6
msgid "More About Resources"
msgstr ""

#: ../source/getting_started.rst:742
# dbb1133bd4c74911a5caf3a47136c717
msgid "The |chef client| includes many built-in resources: |resource execute|, |resource directory|, |resource package|, |resource service|, |resource file|, |resource template|, |resource user|, |resource script|, and |resource scm_git|."
msgstr ""

#: ../source/getting_started.rst:744
# 6ed5f5f55f5547ed9668c002d3c8ae65
msgid "The sections below quickly describe the most popular resources. For the full list of built-in |chef| resources, see `Resources <http://docs.opscode.com/resource.html#resources>`_. You can also `create your own resources <http://docs.opscode.com/lwrp_custom.html>`_ or `use the resources built into the community cookbooks <http://supermarket.getchef.com>`_."
msgstr ""

#: ../source/getting_started.rst:747
# d64afde3037544be8e78e2687ab4adb4
msgid "Execute Commands"
msgstr ""

#: ../source/getting_started.rst:748
# 4bbbbf73cd90420d934b1fe9453433b1
msgid "Commands are executed using the |resource execute| resource using an attribute to specify the actual command to run. See :doc:`execute </resource_execute>` for more information about executing commands."
msgstr ""

#: ../source/getting_started.rst:751
# b9f0bb0cddb24f209c2b34b2cd47743a
msgid "Manage Directories"
msgstr ""

#: ../source/getting_started.rst:752
# e3284a36def048498b059574a814ac76
msgid "Directories are hierarchies of folders that comprise all the information stored on a computer. There are two ways to manage directories. The first is via the |resource directory| resource, which manages directories starting from the root directory. And the second is the |resource remote_directory|, which transfers directory structures defined in cookbooks to nodes. See :doc:`directory </resource_directory>` for more information about managing directories. If the directory is defined in a cookbook, use :doc:`remote_directory </resource_remote_directory>` instead."
msgstr ""

#: ../source/getting_started.rst:755
# e153d8a5574a4084868b15c06fbe8112
msgid "Manage Packages"
msgstr ""

#: ../source/getting_started.rst:756
# 1b8bb70d9bfa49978798bc137e96a33c
msgid "Packages are collections of files that comprise software applications or some part of an operating system. Use the package resource to manage these packages, unless they are sourced via |rubygems| and installed directly from within recipes or are sourced from a cookbook. See :doc:`package </resource_package>` for more information about managing packages. There are quite a few platform-specific package resources as well, though most of the time simply using the |resource package| is all that's necessary. For packages that are located in cookobooks, use :doc:`chef_gem </resource_chef_gem>`. And for packages that are only included via recipes, use :doc:`gem_package </resource_gem_package>`."
msgstr ""

#: ../source/getting_started.rst:759
# b3b9bbec666a4aa9acc9837f87b2f2fb
msgid "Manage Services"
msgstr ""

#: ../source/getting_started.rst:760
# d832646742e64fbe8172c1fe2dbfd7d7
msgid "Services can be started, stopped, enabled, disabled, reloaded, and restarted. See :doc:`service </resource_service>` for more information about managing services."
msgstr ""

#: ../source/getting_started.rst:763
# 9a2d221c3b864837a77e60ed3f42293f
msgid "Manage Files"
msgstr ""

#: ../source/getting_started.rst:764
# 8f1731ae502a4ababd245a91cfeb54f2
msgid "Files are managed in several ways. The |resource file| resource manages files that are already present on a node. Files are transferred to nodes from cookbooks using the |resource cookbook_file| resource and are transferred to nodes from remote locations using the |resource remote_file| resource. See :doc:`file </resource_file>` for more information about managing files, :doc:`remote_file </resource_remote_file>` for transferring files from remote locations, and :doc:`cookbook_file </resource_cookbook_file>` for transferring files that are located in cookbooks."
msgstr ""

#: ../source/getting_started.rst:767
# d270321244854544a50d45a1d2160fa3
msgid "Manage Templates"
msgstr ""

#: ../source/getting_started.rst:768
# c07b222787e04339ae24eff1f5ac9aed
msgid "Templates are used to generate files based on variables and logic contained within the template file. |chef| uses |erb| templates and |ruby| expressions and statements to define the template file. Template source files must be located within cookbooks. See :doc:`template </resource_template>` for more information about managing files using |erb| templates."
msgstr ""

#: ../source/getting_started.rst:771
# cd0f6fe701084d8d81d60135977f2e17
msgid "Manage Users, Groups"
msgstr ""

#: ../source/getting_started.rst:772
# 5a003cdae4304333b9e15021c2af667e
msgid "Users and groups can be added, updated, removed. User passwords can be locked and unlocked. See :doc:`user </resource_user>` for more information about managing users and user passwords. The :doc:`group </resource_group>` resource manges groups."
msgstr ""

#: ../source/getting_started.rst:775
# 0ef148b85b12410d82004bb55806167b
msgid "Use Script Interpreters"
msgstr ""

#: ../source/getting_started.rst:776
# c827d127f9344e11afedaba6690e85c4
msgid "Script interpreters execute scripts on a node, similar to the |resource execute| resource, and with the ability to specify the interpreter that the |chef client| should use. See :doc:`script </resource_script>` for more (general) information about using scripts in recipes. Interpreter-specific resources are available, with :doc:`bash </resource_bash>` being the most popular. Also available: :doc:`csh </resource_csh>`, :doc:`perl </resource_perl>`, :doc:`powershell_script </resource_powershell_script>`, :doc:`python </resource_python>`, and :doc:`ruby </resource_ruby>`. Two |windows|-specific resources are also available: :doc:`batch </resource_batch>` and :doc:`powershell_script </resource_powershell_script>`."
msgstr ""

#: ../source/getting_started.rst:779
# 0c801f0fb5244498bdd31ec5ac81933e
msgid "Use Source Control"
msgstr ""

#: ../source/getting_started.rst:780
# 19743e6a178941808f863621e3e97401
msgid "Most users of |chef| keep their code in some type of version source control. |chef| can interact with this code from recipes. |git| is a very popular choice. The :doc:`git </resource_git>` resource is used to manage files that exist in a |git| repository. There is also a resource for :doc:`subversion </resource_subversion>`, another popular version source control tool."
msgstr ""

#: ../source/getting_started.rst:784
# f8f0bd9e6ec24436b5874e91e7440162
msgid "About Cookbooks"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:4
# 74ba13f2515943f4a20b3d124f49aac4
msgid "A cookbook is the fundamental unit of configuration and policy distribution. Each cookbook defines a scenario, such as everything needed to install and configure |mysql|, and then it contains all of the components that are required to support that scenario, including:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:6
# 202027c871f646a2a8d660751248f7f8
msgid "Attribute values that are set on nodes"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:7
# 6979798569a7456699544910ab92b210
msgid "Definitions that allow the creation of reusable collections of resources"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:8
# 68b4528187744cf0b668e8fa93e29107
msgid "File distributions"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:9
# ce205b56a2c643b9b87b2c01befe9f83
msgid "Libraries that extend the |chef client| and/or provide helpers to |ruby| code"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:10
# a552b34d8ba94b21acff1e3df7466177
msgid "Recipes that specify which resources to manage and the order in which those resources will be applied"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:11
# 99c78716c2554b2ea1c28bd17b029990
msgid "Custom resources and providers"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:12
# 34684d9563e14c9aacb9461b627b0e2c
msgid "Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:13
# f086fde8aa6c41f1aef4ba67c265f2ad
msgid "Versions"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks.rst:14
# 3d8b9e12947c40a6b9fc594cecb1bfb2
msgid "Metadata about recipes (including dependencies), version constraints, supported platforms, and so on"
msgstr ""

#: ../source/getting_started.rst:787
# 6cf26d7f4dac4df39ae9bc84455b5339
msgid "Every cookbook follows a defined structure, but individiaul cookbooks can take on many different styles depending on how your organization wants to manage its code, who authored them, and how they are intended to be used. Some cookbooks contain only a single, default recipe. Others may contain only a library file. Some may contain only a few attributes. And other cookbooks may contain several custom resources along with many attributes and templates, and so on."
msgstr ""

#: ../source/getting_started.rst:789
# ee0afef7eb3140b59238b11201287376
msgid "Some cookbooks you will build yourself. Some cookbooks will be provided by the community. Most community cookbooks will be managed using |berkshelf|, which is a dependency manager included in the |chef dk|. Occasionally, a community cookbook will be forked, but more often a wrapper cookbook is created to handle your organization-specific requirements while still allowing use of the community cookbook."
msgstr ""

#: ../source/getting_started.rst:791
# 267bd56c89b9435cbcfeaed3491524da
msgid "The most important thing to know about cookbooks is that there are lots of ways to build good ones. There are patterns to follow, there are guidelines. There are recomended ways of dealing with attributes. There are recommended ways of creating custom resources. But ultimately, a good cookbook is the one that works for your organization. Ideally, this cookbook works across your infrastructure. Most organizations have a mix of private (internal) and public (community) cookbooks in use in their organization."
msgstr ""

#: ../source/getting_started.rst:794
# c66255f2d8f34029ba5a2a2e5a41ed01
msgid "Cookbook Patterns"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:6
# 0301b768099e4bb49dd59187072f957b
msgid "A primary goal of cookbook authoring is to create cookbooks that are reusable as building blocks, where each cookbook defines a specific configuration piece used by the organization. For example, say all servers across the organization will run |cron| and |ntp|, but only front-end servers in production will be load balanced. This building block approach relies on some basic guidelines:"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:8
# f13c3233b1f748898c7ab1be77d310cf
msgid "All cookbooks are kept in version source control"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:9
# 0211766e9fd8422da10b305e43739079
msgid "Cookbooks are never forked from their |github| repositories"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:10
# 69210b5a0d9242a1ae9b27216fca1ca8
msgid "Cookbooks may be kept in the |chef repo|, but are typically kept in their own dedicated repositories outside of the |chef repo|"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:11
# 6c6f7b05d0e84e9aa19a0beb33ff1ba1
msgid "Cookbooks are kept as small as possible and are focused on specific configuration targets, with changes to cookbooks tracked as versions of that cookbook"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:12
# 3b9b4893d7514c50a019a387c5f2614a
msgid "Cookbooks are better when unit and integration testing is done against them, automatically"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:13
# 365a3157f1fe4a488bae47313893ec63
msgid "When a cookbook is uploaded to the |chef server|, it is versioned and that version is frozen"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:14
# caa64bf531404d81a24e7bbc804bbb5f
msgid "Community cookbooks are a great resource; often a community cookbook can be used wholesale (without changes), but sometimes a community cookbook needs a wrapper that is used to ensure specific organizational requirements are met"
msgstr ""

#: ../../includes_cookbook/includes_cookbook_pattern.rst:15
# 9aa64d52d495479baf611ad8ef961cd6
msgid "Recipes in cookbooks should be modular, minimally prescriptive, and use custom resources to expose repeatable patterns that are needed to solve implementation-specific requirements"
msgstr ""

#: ../source/getting_started.rst:798
# d104458ae0c042cdbceaf197d54f1168
msgid "About |ruby|"
msgstr ""

#: ../../includes_ruby/includes_ruby.rst:5
# 10a6747a814a4c459f777f30db6b26fb
msgid "|chef| uses |ruby| as its reference language. |ruby| is a simple programming language that |chef| uses to define the patterns that are found in resources, recipes, and cookbooks. In many cases, just using these patterns is enough to configure, deploy, and manage nodes across the network. |ruby| is also a powerful and complete programming language. You can use the full power of the |ruby| programming language to make decisions about what should happen to specific resources and recipes or to extend |chef| in any manner that your organization requires."
msgstr ""

#: ../source/getting_started.rst:802
# d70b18efa4b749f6bd5f44e9b70185ba
msgid "Conclusion"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 592f5fc49f7a461ebe5b3cbcd6ed6623
msgid "The key underlying principle of |chef| is that you (the user) know best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 861c4246952b4d0d82c1baba768113b9
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

