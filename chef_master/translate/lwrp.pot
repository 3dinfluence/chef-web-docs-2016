# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-29 14:53-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/lwrp.rst:8
# cd13c88c2d144a3c975e53ba6a163746
msgid "About LWRPs"
msgstr ""

#: ../../includes_lwrp/includes_lwrp.rst:5
# 7732b4ff262d43cba61ad8044b042426
msgid "A |lwrp| is a part of a cookbook that is used to extend the |chef client| in a way that allows custom actions to be defined, and then used in recipes in much the same way as any platform resource. In other words: a |lwrp| is a custom resource. A custom resource has two principal components:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp.rst:7
# 14f6117f762748b7a4607e074cca9f9c
msgid "A custom resource that defines a set of actions and attributes that is located in a cookbook's ``/resources`` directory"
msgstr ""

#: ../../includes_lwrp/includes_lwrp.rst:8
# 2386a3b10470480d8ae8cd9dd4473809
msgid "A custom provider that tells the |chef client| how to handle each action, what to do if certain conditions are met, and so on that is located in a cookbook's ``/providers`` directory"
msgstr ""

#: ../../includes_lwrp/includes_lwrp.rst:10
# fe519f1458b94a03960c1f494fcc893a
msgid "A custom provider is typically built in a way that leverages the core resources that are built into |chef|, but they may also be built using |ruby|."
msgstr ""

#: ../../includes_lwrp/includes_lwrp.rst:12
# bb3da2555df046388771a8941acf2bd4
msgid "Once created, a custom resource becomes a |ruby| class. During each |chef client| run, the |chef client| will read the custom resource from a recipe and will process it alongside all other resources. When it is time to configure the node, the |chef client| will use the custom provider to determine the steps required to bring the system into the desired state."
msgstr ""

#: ../source/lwrp.rst:13
# d5212493c40940c4b0685d8871efc158
msgid "Custom Resources"
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:5
# 036fa02b9035418bbfb8cfc362940b50
msgid "A resource is a statement of configuration policy that:"
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:7
# 47605ffebc2046f4956f78724f1254e9
msgid "Describes the desired state for a configuration item"
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:8
# 74f83e63ffdd4ea5a05201c91932628e
msgid "Declares the steps needed to bring that item to the desired state"
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:9
# 85dd5b28cd424bb5aea3936dc99d3c07
msgid "Specifies a resource type---such as ``package``, ``template``, or ``service``"
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:10
# 3b29c5c802644349becf07da51299d88
msgid "Lists additional details (also known as attributes), as necessary"
msgstr ""

#: ../../includes_resources_common/includes_resources_common.rst:11
# a325f9deeda0445486d5b914496ca90a
msgid "Are grouped into recipes, which describe working configuraitons"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource.rst:5
# facb227de6814e93bbffa73230ecaa35
msgid "A lightweight resource is a custom resource that defines an action to be completed, which are then processed by a lightweight provider during the |chef client| run. A lightweight provider and lightweight resource work together, each being defined in the same cookbook (the ``/providers`` and ``/resources`` subdirectories, respectively); together, they are referred as a |lwrp| (or \"lightweight resource/provider\"). A lightweight resource is always authored using |ruby|. Anything that can be done using |ruby| can be done in a lightweight resource. In addition to using |ruby|, the |dsl resource| provides additional methods that are specific to the |chef client|."
msgstr ""

#: ../source/lwrp.rst:20
#: ../source/lwrp.rst:72
#: ../source/lwrp.rst:99
#: ../source/lwrp.rst:200
# db374b8cf91845bf9a6dedff46440fae
# e697eb500f4444499da69699859805a8
# c09c0ac17dad4e9c806b4030debc45e2
# 741a08a3be9b4d65bd3620254b2f76a6
msgid "Syntax"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:5
# b7c5ef61986545b08c625b8ccc3b7a82
msgid "The syntax for a lightweight resource is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:21
#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:53
#: ../../includes_lwrp/includes_lwrp_custom_resource_example_callbacks.rst:36
#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:11
#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:11
# 09fb07c03b5841cba2a5fb536d6094a7
# b50e6e65519f4262882ad0beefb6ec16
# 00a5ccbed032408ebffd01cf0bca7f23
# 6e488fd19be34425ba1df3865dc4033c
# 926480e54dc047ab9bae9cff9901c367
msgid "where"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:23
# 0548b8609f5242488cdfc7744d189992
msgid "``require`` lists any external entities that may be required by the lightweight resources, such as a library; a lightweight resource is |ruby| and anything that can be done in |ruby| can be done in a lightweight resource"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:24
# 5c0ee172dc7d4d509eae8c3f10356159
msgid "``:action_name1``, ``:action_name2``, and ``:action_name...`` represents a comma-delimited list of ``actions`` that are available to this lightweight resource; there must be at least one action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:25
# d93dbe763e584decac8b2e2f4afe3463
msgid "``action_name1`` is set to be the ``default_action``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:26
# 945f8935ef6149329eab9303ec635d4d
msgid "``:attribute_name`` is the name of the attribute; a lightweight resource may define as many attributes as necessary"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:27
# 17f9806c560d4c4193208b089255c498
msgid "``:kind_of => value`` specifies the |ruby| class (or an array of |ruby| classes) that are used to define this attribute's value"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:28
# 571020b0da3e45bd95412106f03fe4e6
msgid "``:name_attribute`` is associated with one ``attribute`` to indicate which attribute's value will be defined by the name of the resource as it is defined in the recipe (i.e. the string that appears in front of the ``do`` block in the recipe and after the resource: ``resource_name \"name_attribute\" do``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:29
# 1714d144e68d45c1899c3fa7852e509d
msgid "``:validation_parameter`` represents a comma-delimited list of validation parameters for each attribute"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:30
# 9caa8f8c60c04a7f94afdd3136b18509
msgid "``attr_accessor`` allows the lightweight resource to use the ``Module`` |ruby| class to check for one (or more) named attributes, such as ``:exists`` or ``:running``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:32
# 43b6049be50947f59811821702a66bee
msgid "For example, the ``cron_d`` lightweight resource (found in the |cookbook cron| cookbook) can be used to manage files located in ``/etc/cron.d``:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:55
# 1bbc0d6e64f04c19b1e521d4ea910f50
msgid "the ``actions`` allow a recipe to manage entries in a |crontab| file (create entry, delete entry)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:56
# 84fab34e129d452aaf8672f466fc4ed4
msgid "``:create`` is the default action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:57
# f54771f4f01a4031bf76c3915cf5f64c
msgid "``:minute``, ``:hour``, ``:day``, ``:month``, and ``:weekday`` are the collection of attributes used to schedule a |cron| job, assigned a default value of ``\"*\"``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:58
# 344e67ecde2940ed88d822ca99a0c31a
msgid "``:command`` is the command that will be run (and also required)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:59
# 241e436e2c3f4b2f944d305a0c754dd6
msgid "``:user`` is the user by which the command is run"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_syntax.rst:60
# 385cf62c251c405884148ca6029fde49
msgid "``:mailto``, ``:path``, ``:home``, and ``:shell`` are optional environment variables that do not have default value, which each being defined as an array that supports the ``String`` and ``NilClass`` |ruby| classes"
msgstr ""

#: ../source/lwrp.rst:24
# c35add23e6894e2b9491419f9462e883
msgid "|dsl resource| Methods"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource.rst:5
# 80dbdeea62b44568a374255e21d3c516
msgid "The |dsl resource| is a |ruby| DSL that is used to help define a lightweight resource and to ensure that a lightweight resource provides the correct information to a lightweight provider. The |dsl resource| is a small DSL with just three methods. Because the |dsl resource| is a |ruby| DSL, anything that can be done using |ruby| can also be done as part of defining a lightweight resource."
msgstr ""

#: ../source/lwrp.rst:28
# 33bf392d3c464baa93582d18edeab6ba
msgid "actions"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_action.rst:5
# 6f91e354052442a4829c6a8546c1a93c
msgid "The ``actions`` method is used to define a list of actions that are available to be used in a recipe. Each action must have a corresponding section in a lightweight provider that tells the |chef client| what to do when this action is specified in a recipe. The syntax for the ``actions`` method is as follows:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_action.rst:11
# c026bb013b744a54bd251d8816475541
msgid "where ``actions`` is a comma-delimited list of individual actions."
msgstr ""

#: ../source/lwrp.rst:32
# de0e4310270f459c9da16227a7b8246f
msgid "attribute"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute.rst:5
# 2489560117fa4bad836e6e4c4d2d146f
msgid "The ``attribute`` method is used to define a list of attributes and any of those attribute's associated validation parameters. The syntax for the ``attribute`` method is as follows:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute.rst:11
# 8aa706ddf13142108a1662eec7ca5d13
msgid "where ``attribute`` must have an attribute name and zero (or more) validation parameters."
msgstr ""

#: ../source/lwrp.rst:36
# fff7c19f95404860b0ddf63d831be583
msgid "attr_accessor"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attr_accessor.rst:5
# 8e99001c5bfb44b89f2d937d56a4abb2
msgid "The ``attr_accessor`` method is used to define custom attributes for a lightweight resource that can be accessed by a lightweight provider. The syntax for the ``attr_accessor`` method is as follows:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attr_accessor.rst:11
# d3592c89a5a542a5bbb49583129ef627
msgid "where ``accessor_name`` is a comma-delimited list of custom attributes."
msgstr ""

#: ../source/lwrp.rst:40
# 0759fc7ebcb94162b53dc98210e561da
msgid "default_action"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_default_action.rst:5
# b73cfd2577934438b8ed2783421c118e
msgid "The ``default_action`` method is used to set the default action for a lightweight resource. The syntax for the ``default_action`` method is as follows:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_default_action.rst:11
# a17c40aa9f58432fac0959436e56941b
msgid "where ``action_name`` is the default action."
msgstr ""

#: ../source/lwrp.rst:44
#: ../source/lwrp.rst:125
# bdad7a593a45413988f2405c0075dee4
# fbb1b3dd86b7434bbfcbf3a209c38654
msgid "provides"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:5
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:5
# 9ef513798fe64eca82f85db7d12cec18
# d660bd17852b4421b40b7d296ba4e82b
msgid "Use the ``provides`` method to map a custom resource/provider to an existing resource/provider, and then to also specify the platform(s) on which the behavior of the custom resource/provider will be applied. This method enables scenarios like:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:7
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:7
# b2db2a9a42c24464baaec859387db3d5
# a28246841177461c91b476ba96ea749a
msgid "Building a custom resource that is based on an existing resource"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:8
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:8
# 9ff711df984a43faab17282f5ce8fa94
# a3e38144bd2445718b958817c16ab0ef
msgid "Defining platform mapping specific to a custom resource"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:9
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:9
# 3530c4fc34544f48a29f41b0d6616ef9
# 792a4f8168494b7ab13c77b08c5bb5bd
msgid "Handling situations where a resource on a particular platform may have more than one provider, such as the behavior on the |ubuntu| platform where both SysVInit and systemd are present"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:10
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:10
# ff9e4b95200349158b03fa4304cdefee
# d08f6404aa524b9b80984f30079f4291
msgid "Allowing the custom resource to declare what platforms are supported, enabling the creator of the custom resource to use arbitrary criteria if desired"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:11
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:11
# 480c7b4a1f674d7b9daf129bea1384fa
# aa954ca3898749d892ff5f321a2d7605
msgid "Not using the previous naming convention---``#{cookbook_name}_#{provider_filename}``"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:13
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:13
# c1944451f9b54bc7877863ccde5fc2c5
# de4c4a2e333d4988b574ca027944a280
msgid "The ``provides`` method must be defined in both the custom resource and custom provider files and both files must have identical ``provides`` statement(s)."
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:15
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:15
# a8e0d946815047108e079195a671cceb
# f447c976a1714c90a5408b931c08fb77
msgid "The syntax for the ``provides`` method is as follows:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:21
#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:35
#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:20
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:21
#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:40
#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:39
#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:22
#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:11
# a643c48e3aa3489e960530e96a912193
# 97bbac6419b14968b627a6c278ebd71d
# 152262f3ae1a463ebf22e1ef28d01391
# 42ae3d1d78404b4d9e02c1c23f4648c5
# 95c47701fcbd4447b49cd49c45784d7a
# e1d8dd89a9a74d23b01fd697ce5530c1
# ea0b76831ada4d6fb38e2be9380c8fca
# 9a4ecd609f804f888bcac6848ec8c41a
msgid "where:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:23
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:23
# fcba665c878443e288bca5d5c8016d92
# f22412c9395f41589509136f30819a64
msgid "``:resource_name`` is a |chef client| resource: ``:cookbook_file``, ``:package``, ``:rpm_package``, and so on"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:24
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:24
# aa0b6e4d36cd442e8bf8202b7af91fd8
# 64ecc6be21a247c695d65c0819f34847
msgid "``\"platform\"`` is a comma-separated list of platforms: ``\"windows\"``, ``\"solaris2\"``, ``\"linux\"``, and so on"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:25
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:25
# 7849bfdb4f104df5858bf90e9205d15f
# 6a867ef7bc2c4cd0a6da6a814ab1a7fa
msgid "``platform_family`` is optional and may specify the same parameters as the ``platform_family?`` method in the |dsl recipe|; ``platform`` is optional and also supported (and is the same as the ``platform?`` method in the |dsl recipe|)"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:27
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:27
# c12c54ff75d94a10a62665a2ec7920e9
# d8cbbeda6cd54908a38aebad54d24517
msgid "A custom resource/provider may be mapped to more than one existing resource/provider. Multiple platform associations may be made. For example, to completely map a custom resource/provider to an existing custom resource/provider, only specificy the resource name:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:33
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:33
# cbd52622df6d4a709fcf5a7461e702b3
# 764d25b43dad43f9bafac552c67c0194
msgid "The same mapping, but only for the |linux| platform:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:39
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:39
# ce862d540b954eeb84c650ed5bbce494
# 2d5ef0be36564d12b82c54557283d98a
msgid "A similar mapping, but also for packages on the |windows| platform:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:46
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:46
# 9aa5c0f42e86410d9715b2e6a58fee6f
# f585d687b7804824a67ccf7aa4db21d3
msgid "Use multiple ``provides`` statements to define multiple conditions: Use an array to match any of the platforms within the array:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:54
#: ../../includes_dsl_resource/includes_dsl_resource_method_provides.rst:54
# b1e4ae30f54540e0a15a80a7acbaab0e
# ad73000f33034e5bafe9295e63170ce2
msgid "Use an array to match any of the platforms within the array:"
msgstr ""

#: ../source/lwrp.rst:48
# cba00d87a2684b0bb67a7f6cd577f683
msgid "state_attrs"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_state_attrs.rst:5
# 18738657944a4b65b304826ed0d6fd27
msgid "The ``state_attrs`` method is used to define the attributes that will be tracked by the |reporting| server. In general, this should be a list of attributes that describe the desired state of the system, such as file permissions, cloud provider data (like snapshots, volumes, identifiers, sizes, and access keys), and so on."
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_state_attrs.rst:7
# 9a765e919c0f4d3c868be61789a419ac
msgid "The syntax for the ``state_attrs`` method is as follows:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_state_attrs.rst:15
# f21d5cec9e624f1e9d0b57cb2f542e1c
msgid "where ``attribute`` is a comma-delimited list of attributes. For example, the ``ebs_volume`` resource (available from the `aws <https://github.com/opscode-cookbooks/aws>`_ cookbook) uses the ``state_attrs`` method to tell the |reporting| server to track the following attributes:"
msgstr ""

#: ../source/lwrp.rst:52
# 0ece222cec0c4d7eb44b21db78a06df1
msgid "Validation Parameters"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:5
# e1048b7c20c74208938de68119f60ca5
msgid "A validation parameter is used to add zero (or more) validation parameters to an attribute."
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:11
# 5596b6bcaed64075b8236e95ba103393
msgid "Parameter"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:12
#: ../../includes_resources_common/includes_resources_common_guards_attributes.rst:11
#: ../../includes_resources_common/includes_resources_common_guards_arguments.rst:11
#: ../../includes_resources_common/includes_resources_common_notifications.rst:11
#: ../../includes_resources_common/includes_resources_common_notifications_timers.rst:11
# fd33af5e966a4dc688b0c227be76edfc
# 48669e85f0ee4161b9f3fd33fb420dba
# 6455957c90c94f778815e710658b998e
# 5424daa52a3447128adc878d2566e4b9
# 00f88b7824c542dbbaf29ff054169628
msgid "Description"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:13
# 42580fa20234405dafdc018e03a1bc38
msgid "``:callbacks``"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:14
# 03d7e50c71b349cf8d184deddd5ec472
msgid "Use to define a collection of unique keys and values (a |ruby hash|) for which the key is the error message and the value is a lambda to validate the parameter. For example: ``\"Option #{key}'s value #{value} #{message}!\"``, which will insert a key into an error message if the |ruby proc| object does not return true. For example:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:24
# 392b9745ec33470d91fdd87048e2efd2
msgid "``:default``"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:25
# 05c4f88f73ee4fc89518497bdaafa17e
msgid "Use to specify the default value for an attribute. For example:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:46
# 90f4b4a7832c44cbbd2f9d07cac45988
msgid "``:equal_to``"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:47
# ee87af1b4fe74e369bb66517d4e53ac8
msgid "Use to match a value with ``==``. Use an array of values to match any of those values with ``==``. For example: .. code-block:: ruby"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:50
# 1110b0b4f6734628ab43262083b101d9
msgid ":equal_to => [true, false]"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:56
# b0bde061d2b04d7fa7e4c70c02f8a38d
msgid "``:kind_of``"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:57
# b3ac2543c62b4e6f848c32dddeecb5ad
msgid "Use to ensure a value is of a particular |ruby| class, such as ``TrueClass``, ``FalseClass``, ``NilClass``, ``String``, ``Array``, ``Hash``, and so on. Use an array of |ruby| classes to allow a value to be of more than one type. For example: ``:kind_of => String``, ``:kind_of => Array``, ``:kind_of => [TrueClass, FalseClass]`` and ``:kind_of => [Array, Hash]``. For example:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:86
# dc93a5af25f7411d9c091421e8558d40
msgid "``:name_attribute``"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:87
# 519d0a35b0a24396bc5d1ddc79d82192
msgid "Use to set the default name of a lightweight resource. If the name isn't specified in the recipe, this is the value that will be used. For example:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:92
# 2f177a946d304ed6bebb596e771a016b
msgid "``:regex``"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:93
# 657a387fb87c47dd89cfb3e7abc4c3ac
msgid "Use to match a value to a regular expression. For example:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:98
# 99d30b580d22497e9ba8bb265e526a9f
msgid "``:required``"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:99
# f4be979e729d415089cf1ea83a5a8670
msgid "Indicates that an attribute is required. For example:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:104
# 06e75d11c75443edba8a1508fa5d4c58
msgid "``:respond_to``"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:105
# b4e5597e0d684fadb549f886a9e3a2ff
msgid "Use to ensure that a value has a given method. This can be a single method name or an array of method names. For example:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:111
# 006f6a025cae4256bedf217ecc83b062
msgid "Some examples of combining validation parameters:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:121
# f16ca2b09e0b4674b9954e66d4eafc8c
msgid "From the ``nrpecheck`` lightweight resource in the |cookbook nagios| cookbook:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:131
# 6aa10e8d108d4f7aa385bd00f2751d3d
msgid "From the ``policy`` lightweight resource in the |cookbook rabbitmq| cookbook:"
msgstr ""

#: ../../includes_dsl_resource/includes_dsl_resource_method_attribute_validation_parameter.rst:140
# e00ca025317244d9a481b9370c54fa96
msgid "From the ``module`` lightweight resource in the |cookbook iis| cookbook:"
msgstr ""

#: ../source/lwrp.rst:56
# dba180d01292446aa9e26e732536a277
msgid "Guards"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards.rst:5
# be81952fb4d74520952b22c8dfedd7de
msgid "A guard attribute can be used to evaluate the state of a node during the execution phase of the |chef client| run. Based on the results of this evaluation, a guard attribute is then used to tell the |chef client| if it should continue executing a resource. A guard attribute accepts either a string value or a |ruby| block value:"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards.rst:7
# 5fc1e187e73c49bc820d978c8acf5299
msgid "A string is executed as a shell command. If the command returns ``0``, the guard is applied. If the command returns any other value, then the guard attribute is not applied. String guards in a |resource powershell_script| run |windows powershell| commands and may return ``true`` in addition to ``0``."
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards.rst:8
# 85febde7a75e45bf918224914e00ff2e
msgid "A block is executed as |ruby| code that must return either ``true`` or ``false``. If the block returns ``true``, the guard attribute is applied. If the block returns ``false``, the guard attribute is not applied."
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards.rst:10
# 4e62cf102b3f4a31b22af4ab86034101
msgid "A guard attribute is useful for ensuring that a resource is idempotent by allowing that resource to test for the desired state as it is being executed, and then if the desired state is present, for the |chef client| to do nothing."
msgstr ""

#: ../source/lwrp.rst:60
# 9af8bf5aef384017a149ed143b7b277f
msgid "Guard Attributes"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_attributes.rst:4
# cfe1e45952aa464eb439aa8813593513
msgid "The following attributes can be used to define a guard that is evaluated during the execution phase of the |chef client| run:"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_attributes.rst:10
# 828ced9f60a54fa085438c69ca900836
msgid "Guard"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_attributes.rst:12
# a6db757c6d18432788835c37b8d2fc8b
msgid "``not_if``"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_attributes.rst:13
# 138dcdd254e9435fa37a871c60995fd1
msgid "Use to prevent a resource from executing when the condition returns ``true``."
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_attributes.rst:14
# 4537d7724799473c88cefb3b1553f9ed
msgid "``only_if``"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_attributes.rst:15
# 61f27414b3404a68999fd3083f017f68
msgid "Use to allow a resource to execute only if the condition returns ``true``."
msgstr ""

#: ../source/lwrp.rst:64
# a8131c2aaa7b4380aad366eb624a7bec
msgid "Guard Arguments"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_arguments.rst:4
# 6040dc52909344b0a03b941204e452f5
msgid "The following arguments can be used with the ``not_if`` or ``only_if`` guard attributes:"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_arguments.rst:10
# fc5a5c802e5041b6b2a3b05cbc32d520
msgid "Argument"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_arguments.rst:12
# 5b22327998b247378dceaed444f8e90c
msgid "``:user``"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_arguments.rst:13
# 1d0fb708a1bb445f8dfb249c08f5b4fe
msgid "Use to specify the user that a command will run as. For example:"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_arguments.rst:19
# 3eece8eae6df4ef2a986b95a4aed5109
msgid "``:group``"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_arguments.rst:20
# abebcef423104642b7acb9861cec04db
msgid "Use to specify the group that a command will run as. For example:"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_arguments.rst:26
# 03bd4340da8c4aa2bb9491a6f41c319b
msgid "``:environment``"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_arguments.rst:27
# 2a3402e62ad7466facafa1f037f323ee
msgid "Use to specify a |ruby hash| of environment variables to be set. For example:"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_arguments.rst:35
# 2fbea2f339ac423f967fdf05fa1370c9
msgid "``:cwd``"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_arguments.rst:36
# a82626ca6ff14eff8b54e8c2dfa76e83
msgid "Use to set the current working directory before running a command. For example:"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_arguments.rst:42
# fbcda1b671b8477ca321692e5304ec42
msgid "``:timeout``"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_guards_arguments.rst:43
# 7bd1ca49aa384ade988864e4d6449c43
msgid "Use to set a timeout for a command. For example:"
msgstr ""

#: ../source/lwrp.rst:68
# 95ae98926d2948d0a45d4101511b052e
msgid "Notifications"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications.rst:4
# 512b32113020473f91573df14caf66e4
msgid "The following notifications can be used with any resource:"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications.rst:10
# f4d2febbdc1e4e5593857eed42cf28aa
msgid "Notification"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications.rst:12
# 70d3e3499b1b4f64b419a12f8a3e8a6b
msgid "``notifies``"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications.rst:13
# f424da80767a4240ae391b489fca12d1
msgid "Use to specify that another resource should take action when this resource's state changes."
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications.rst:14
# 1da605c2bdcf4d13acfd584681885548
msgid "``subscribes``"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications.rst:15
# a0ddce232ae74ec6b8ee6dd9205dfb37
msgid "Use to specify that a resource will listen to another resource, and then take action when that resource's state changes."
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications.rst:17
# 40b9264257f24cff825711c59e9b9d60
msgid "Notifications are processed during the execution phase of the |chef client| run."
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications_syntax_notifies.rst:4
# 55a05fd218654eeea1d05d180ae2a5c7
msgid "The basic syntax of a ``notifies`` notification is:"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications_syntax_subscribes.rst:4
# fe72ed4358a44983b30af984c3980b95
msgid "The basic syntax of a ``subscribes`` notification is:"
msgstr ""

#: ../source/lwrp.rst:78
# dfa8e64a4d22474f8c8099a0758d678a
msgid "Timers"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications_timers.rst:4
# 29449878330a4076bf6e392dd3ee6807
msgid "The following timers can be used to define when a notification is triggered:"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications_timers.rst:10
# db681b63792740498b001a6e9a32d920
msgid "Timer"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications_timers.rst:12
# 72e976c3f8414ecaade4f6a07fe99394
msgid "``:delayed``"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications_timers.rst:13
# 73c8a8b81b5243dda9b97b757a25f446
msgid "Use to specify that a notification should be queued up and then executed at the very end of a |chef client| run."
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications_timers.rst:14
# 5ca0337761ae4e808125b537f93daa0c
msgid "``:immediately``"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_notifications_timers.rst:15
# 9d17341e12bc48f1990faf08d9d8e43a
msgid "Use to specify that a notification should be run immediately."
msgstr ""

#: ../source/lwrp.rst:82
#: ../source/lwrp.rst:171
#: ../source/lwrp.rst:260
# 66f6c250a7f349cd9093040e03a7437d
# 667b23fe9b55450bbe4609a972aa608a
# 602dfd2b3dfd4b83b33549bbb025de5d
msgid "Examples"
msgstr ""

#: ../source/lwrp.rst:83
# 778b5e35423d4625b004a2bb51fdd8e8
msgid "The following examples show various lightweight providers that use platform resources or how to use certain parts of the |dsl resource|."
msgstr ""

#: ../source/lwrp.rst:86
# 508475d16afb44008a750b4b6f6ffc44
msgid ":callbacks"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_example_callbacks.rst:5
# ca3d784aa6224911a4bbdd2d054164b2
msgid "An example of using the ``:callbacks`` validation parameter from the |cookbook gunicorn| cookbook (formatted for better readability):"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_example_callbacks.rst:38
# 0fff185e68214bac816d6ea803fb60d5
msgid "the ``:server_hooks`` attribute requires the value to be a valid |gunicorn| server hook name"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_example_callbacks.rst:39
# 2c271551dbb64a2a8a6d78dddd07dede
msgid "the ``VALID_SERVER_HOOK_NAMES`` array defines the list of valid server hooks"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_resource_example_callbacks.rst:40
# d21abd213c3c4dddb138374ec0634bb2
msgid "the ``private def`` block ensures the ``:callback`` validation parameter has the list of valid server hooks"
msgstr ""

#: ../source/lwrp.rst:92
# 83e163532ca1465e8f6ce2a5253ad5e8
msgid "Custom Providers w/Platform Resources"
msgstr ""

#: ../../includes_resources_common/includes_resources_common_provider.rst:4
#: ../../includes_resources_common/includes_resources_common_provider.rst:4
# 238e6deed36844998e61fd0243190100
# 40e3f0e2d06940c39c68bfd3e91a0717
msgid "Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider.rst:5
#: ../../includes_lwrp/includes_lwrp_custom_provider.rst:5
# e22dd91dadc847f88235b55a5e8eb130
# 60f4efc916fb400e95f868c31aed5117
msgid "A lightweight provider is a custom provider that defines the steps that are required to complete one (or more) actions defined by a lightweight resource. A lightweight provider and lightweight resource work together, each being defined in the same cookbook (the ``/providers`` and ``/resources`` subdirectories, respectively); together, they are referred as a |lwrp| (or \"lightweight resource/provider\"). A lightweight provider is always authored using |ruby|. Anything that can be done using |ruby| can be done in a lightweight provider. In addition to using |ruby|, the |dsl provider| provides additional methods that are specific to the |chef client|."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:5
# d67d2049af4d43c1b8632ccb4291ec76
msgid "This section shows some of the common structural elements that appear in a lightweight provider that is built in a way that leverages platform resources (such as |resource file|, |resource template|, or |resource package|). Remember:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:7
#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:7
# cb0e97c8575a481bba1c24ff1ec058de
# cfffa8301daf4b998f4cc02f84c4dc29
msgid "A lightweight provider tells the |chef client| how to complete a task"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:8
#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:8
# 4da714d898774c38a19b1567dd634c18
# 1885088c097a4312aecb08c7dc6c1a0f
msgid "The structure of a lightweight provider will vary, depending on the complexity of the tasks required to complete an action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:9
#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:9
# 64fe58c8db8b4f0c849956c75ccd213d
# e086f65df4384c94af679b386c2634b8
msgid "At its platform, a lightweight provider is just |ruby| code, which means that anything that can be done in |ruby| can be done in a lightweight provider"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:11
# 4c950c6acade4fb5a47a5fdd3f46ff93
msgid "The basic syntax for a lightweight provider that is built to leverage platform resources is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:37
#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:43
# 9d1622959519485d8bec76bd7899278d
# b98f98162b1a47309c65ddf4ef62893f
msgid "``whyrun_supported?`` indicates whether a lightweight provider can be run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:38
# 5bf74c4d6595469c9ca47d11a78b7657
msgid "``use_inline_resources`` is used to tell the |chef client| to execute ``action`` blocks as part of a self-contained |chef client| run. Using this method ensures that the |chef client| can notify parent lightweight resources after embedded resources have finished processing"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:39
#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:44
# 9fa996d303474302ba193665e1771269
# e0f37b5b804b4078baba9ae048e01686
msgid "``action`` is the code block that tells the |chef client| what to do when the ``:action_name`` is used in a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:40
#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:46
# b3bdad12789f402eaf86c376d8dad67c
# 88e4275e218c41d6ba02f12b60990688
msgid "``condition`` is a |ruby| condition statement (``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, or ``for``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:41
# 9a6653569c494b34b64b45cdf46fb9dd
msgid "``test`` is used to test for idempotence; ``test`` can be defined inline (within the ``action`` block), defined as a method using a definition block elsewhere in the lightweight provider (shown as ``def test()``), or defined using any other pattern that is available in |ruby|"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:42
# 3bf444cac91c4289808485c4aa999d23
msgid "``resource`` is a resource written as a recipe"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:43
#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:48
# 479ea5b8a7d24389960676152783356a
# bbd1896b78c143e7971b17c69381c7b1
msgid "``Chef::Log.log_type`` is used to tell the |chef client| to create a log entry, where ``log_type`` is one of the following types: ``debug``, ``info``, ``warn``, ``error``, or ``fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:44
#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:49
# fe603a7d59024668a5402ba6f9f5772e
# 7965b3fc8f72428a9cd9b885836c3d48
msgid "``updated_by_last_action`` is used to notify that a node was updated successfully"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax.rst:46
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_example.rst:10
#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:11
#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:53
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:7
#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:7
#: ../../includes_lwrp/includes_lwrp_custom_provider_library.rst:7
# e962c3b4dc794b838d4047210ddc225c
# 556cfc2f2b8645b28c8c8a24fd1217c0
# a5a1e6afc81e4a59b69a488adb960095
# 3d771dda93464d3fa303dd7cc200570e
# ea2996b36017484b994eab244edb86f2
# a3b9a1a896054158963d11ed49f6b5a2
# b6a11839543f4571a4e9d3256b95c4a5
# 17ab04ed3c7b49b1a10633162e10e7f2
# b6ae57d17dba4f02803633b410448bd3
# 32022f98119c4f27874c29b77a1159ed
# 30a171bc615c46b6be6d72459bddb566
# c6d9c9f94b2d4920bcdb926ecf19cbe5
# 53160390600244e2a4615f79fda0bd6c
msgid "For example:"
msgstr ""

#: ../source/lwrp.rst:103
#: ../source/lwrp.rst:204
# 4853b8d6a40d4f43a9f03874d88e5d2d
# 4687be44601b4fd68e0c49ef9df18641
msgid "|dsl provider| Methods"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider.rst:5
#: ../../includes_dsl_provider/includes_dsl_provider.rst:5
# c394414072bf4cef9999cfd6bd3abddf
# ddd5ba2007474bfe952d0de05765e8e7
msgid "The |dsl provider| is a |ruby| DSL that is used to help define a lightweight provider and to ensure that a lightweight provider takes the correct actions when it is called from a recipe. The |dsl provider| is a small DSL with just a few methods that are specific to the |chef client|. Because the |dsl provider| is a |ruby| DSL, anything that can be done using |ruby| can also be done when defining a lightweight provider."
msgstr ""

#: ../source/lwrp.rst:107
#: ../source/lwrp.rst:208
# 5bf4a4d222e942c9874d27214cc51d19
# ddf81cb2af4542c98a83e6506d02c029
msgid "action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:5
#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:5
# 1aad138406de4d45a0e75ed70a7cde38
# eba85064decd417aa44a242ef945524b
msgid "The ``action`` method is used to define the steps that will be taken for each of the possible actions defined by the lightweight resource. Each action must be defined in separate ``action`` blocks within the same file. The syntax for the ``action`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:22
#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:24
# 4652cd5fb3ac400eb4c2f89a80cc47d1
# bbdc3f44d3ce479794d093af30b2b57b
msgid "``:action_name`` corresponds to an action defined by a lightweight resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:23
# 5fd995c105534fb3976a8e2cbfe017e6
msgid "``if @current_resource.exists`` is a condition test that is using an instance variable to see if the object already exists on the node; this is an example of a test for idempotence"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:24
#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:26
# 5727b7f687164390b67cd07ceafdea5d
# 6fec41c8ab0c47bb8bb5bfecd0ac4fbd
msgid "If the object already exists, a ``#{ @new_resource } already exists - nothing to do.`` log entry is created"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action.rst:25
#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:27
# c5ee68f6844a429b998a528cba332dbf
# 6e47ee2748894ba9b754d55c17120e44
msgid "If the object does not already exists, the ``resource`` block is run. This block is a recipe that tells the |chef client| what to do. A ``#{ @new_resource } created.`` log entry is created"
msgstr ""

#: ../source/lwrp.rst:110
# 65b35b4111ab4809a05967276f8e4416
msgid "The ``converge_by`` method is not included in the previous syntax example because when |whyrun| mode is enabled in a lightweight provider that leverages platform resources, the ``converge_by`` blocks are already defined by the platform resources."
msgstr ""

#: ../source/lwrp.rst:113
#: ../source/lwrp.rst:216
# b3caf1d715ed4219a41a4a0415dfe817
# 2fbe641a57474beb977641d4d52bc976
msgid "current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:5
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:5
# e8be4ef46f1b48d8925d8117fa48f176
# 79da4a3195704519a37f80e14030492c
msgid "The ``current_resource`` method is used to represent a resource as it exists on the node at the beginning of the |chef client| run. In other words: what the resource is currently. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state. This method is often used as an instance variable (``@current_resource``)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:25
#: ../../includes_dsl_provider/includes_dsl_provider_method_current_resource.rst:25
# e16fd55184934a0a837230bf26851129
# 5578d5a0a733466c8be4d520a22f44c2
msgid "where the ``unless`` conditional statement checks to make sure the resource doesn't already exist on a node, and then runs a series of commands when it doesn't. If the resource already exists, the log entry would be \"Foo app already exists - nothing to do.\""
msgstr ""

#: ../source/lwrp.rst:117
#: ../source/lwrp.rst:220
# 03fde396ace44819b0deabcaa436635e
# 3495090daf2645a8a29da27b960166b5
msgid "load_current_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:5
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:5
# ba8d46b00bd8407faf171dd02930ff28
# 9ae9def763734d5980ba4fe648a8c73a
msgid "The ``load_current_resource`` method is used to find a resource on a node based on a collection of attributes. These attributes are defined in a lightweight resource and are loaded by the |chef client| when processing a recipe during a |chef client| run. This method will ask the |chef client| to look on the node to see if a resource exists with specific matching attributes."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:26
#: ../../includes_dsl_provider/includes_dsl_provider_method_load_current_resource.rst:26
# dcf6f805b4224613a5b5d64f0274cf71
# 905509269c6445efbea4a71700cd0296
msgid "In the previous example, if a resource exists with matching attributes, the |chef client| does nothing and if a resource does not exist with matching attributes, the |chef client| will enforce the state declared in ``new_resource``."
msgstr ""

#: ../source/lwrp.rst:121
#: ../source/lwrp.rst:224
# 57d404143dca4a66ae93d28f3dc50ac5
# 2083785c947a40bfbd1424679846a5d3
msgid "new_resource"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:5
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:5
# 0fa59bdfec3541c8966d3e96388e8c96
# 017cadb1bb854629be6b366e280bf9d1
msgid "The ``new_resource`` method is used to represent a resource as loaded by the |chef client| during the |chef client| run. In other words: what the resource should be. The |chef client| compares the resource as it exists on the node to the resource that is created during the |chef client| run to determine what steps need to be taken to bring the resource into the desired state."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:23
#: ../../includes_dsl_provider/includes_dsl_provider_method_new_resource.rst:23
# e20b31fc7402473b9fb75e433414fb72
# a0ed608357c542d88cd50c1847199eb6
msgid "where the |chef client| checks to see if the file exists, then if the file is writable, and then attempts to delete the resource. ``path`` is an attribute of the new resource that is defined by the lightweight resource."
msgstr ""

#: ../source/lwrp.rst:129
#: ../source/lwrp.rst:232
# b11bfbde60864d19af39728c11f3dbef
# 0fb20236cd294b5fae917bc0a39886de
msgid "updated_by_last_action"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action.rst:5
# 25d628b4203f4d6dbd55c9ed01119472
msgid "The ``updated_by_last_action`` method is used to notify a lightweight resource that a node was updated successfully. For example, the ``cron_d`` lightweight resource in the |cookbook cron| cookbook:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action.rst:33
# 55359f1b63a84e409ae1c38ca8887698
msgid "where ``t.updated_by_last_action?`` uses a variable to check whether a new |crontab| entry was created."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_example.rst:5
# 5c401991af424b6d957d19a5dfd1ca2d
msgid "Cookbooks that contain custom resources in the ``/libraries`` directory of a cookbook should:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_example.rst:7
# 633db7ca33234e87b2764760182d7b77
msgid "Be inspected for instances of a) the ``Chef::Provider`` base class, and then b) for the presence of any core resources from the |chef client|"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_example.rst:8
# 851e5d3391ee4f568c9061624dddad96
msgid "Be updated to use the ``LWRPBase`` base class"
msgstr ""

#: ../source/lwrp.rst:135
# c0ab8523a09f4d478fcc54888d88e6b2
msgid "use_inline_resources"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_about.rst:4
# 06f701c6864b4bba8f998e4a8fd8ef8e
msgid "A lightweight resource is created by the ``action`` block of a lightweight provider. When the resource collection is compiled, a lightweight resource is inserted into the top-level resource collection after the point at which the lightweight provider is associated. For example, if a resource collection looks like::"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_about.rst:10
# 5affa7e394c542c2996cd667c9d25c58
msgid "then when ``lwrp_resource`` is executed, the resource collection will be modified as follows::"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_about.rst:18
# fda79e3ef4a547bdbd09694d2bf7c913
msgid "In this situation, embedded lightweight resources cannot notify the top-level resource because the top-level resource has finished processing. This has the same effect as if the top-level resource collection were invisible to the embedded lightweight resources."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:5
# d5b9c452969c451c83120ba21e3a20f3
msgid "To ensure that an embedded lightweight resource can notify the top-level resource add ``use_inline_resources`` to the top of the file that defines the lightweight provider that is associated with that lightweight resource. When ``use_inline_resources`` is added to the file, the code in the lightweight provider's ``action`` block will execute as part of a self-contained |chef client| run. If any embedded lightweight resources are updated, the top-level lightweight resource is marked as updated and notifications set for the top-level resource will be triggered normally. This ensures that notifications work properly across the resource collection."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources.rst:17
# 74b14b9234af4945b690c2d9864e6d97
msgid "The ``use_inline_resources`` method was added to the |chef client| starting in version 11.0 to address the behavior described below. The ``use_inline_resources`` method should be considered a requirement for any lightweight resource authored against the 11.0+ versions of the |chef client|. This behavior will become the default behavior in an upcoming version of the |chef client|."
msgstr ""

#: ../source/lwrp.rst:141
# 85b8980e6d15472e91032351bb060be8
msgid "Background"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:5
# c6d5d89f2b364252acb18f2f764a6fe6
msgid "The reason why the ``use_inline_resources`` method exists at all is due to how the |chef client| processes resources. Currently, the default behavior of the |chef client| processes a single collection of resources, converged on the node in order."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:7
# 1569f45bccf9469cbbabb210ffbfc4e0
msgid "A lightweight resource is often implemented using the core |chef client| resources---|resource file|, |resource template|, |resource package|, and so on---as building blocks. A lightweight resource is then added to a recipe using the short name of the lightweight resource in the recipe (and not by using any of the building block resource components)."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:9
# e6bfa606b298462ab6f19631d20f51af
msgid "This situation can create problems with notifications because the |chef client| includes embedded resources in the \"single collection of resources\" *after* the parent resource has been fully evaluated."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:24
#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:68
# 866d02b2d9c04adb9f33fb3b9219e97c
# c6e048e5edd7458eac0712bb03f87bf5
msgid "If the ``custom_resource`` is built using the |resource file| resource, what happens during the |chef client| run is::"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:30
# 6614385d11814d9bb87f796bd9664539
msgid "The ``custom_resource`` is converged completely, its state set to not updated before the |resource file| resource is evaluated. The ``notifies :restart`` is ignored and the service is not restarted."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:32
# 8d762d0688294a1a8b58a0a41774ba3d
msgid "If the author of the custom resource knows in advance what notification is required, then the |resource file| resource can be configured for the notification in the provider. For example:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:45
# 0407b8de9771497a9deaa7c0b7f25e66
msgid "And then in the recipe:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:53
# a347331ed7ec4dbca32818b0e6c6d8b9
msgid "This approach works, but only when the author of the lightweight resource knows what should be notified in advance of the |chef client| run. Consequently, this is less-than-ideal for most situations."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_background.rst:55
# b35479a12d2b4dbcbf0d77a0001e9549
msgid "Using the ``use_inline_resources`` method will ensure that the |chef client| processes a lightweight resource as if it were its own resource collection---a \"mini |chef client| run\", effectively---that is converged *before* the |chef client| finishes evaluating the parent lightweight resource. This ensures that any notifications that may exist in the embedded resources are processed as if they were notifications on the parent lightweight resource. For example:"
msgstr ""

#: ../source/lwrp.rst:145
# c65f06d58ba446dcbcd6dcd88097f6ae
msgid "Disable"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_default_behavior.rst:5
# defdc11bd8ca4cdf8e48c65c1a4d04e8
msgid "The ``use_inline_resources`` method should be considered a default method for any provider that defines a custom resource. It's the correct behavior. And it will soon become the default behavior in a future version of the |chef client|."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_use_inline_resources_default_behavior.rst:7
# 6847c02fb5e94e388e224a1b2d191f84
msgid "Because inline compile mode makes it impossible for embedded resources to notify resources in the parent resource collection, inline compile mode may cause issues with some provider implementations. In these cases, use a definition to work around inline compile mode. See `this example <http://docs.chef.io/essentials_cookbook_definitions.html#many-recipes-one-definition>`_ for how to use a definition in this situation."
msgstr ""

#: ../source/lwrp.rst:149
#: ../source/lwrp.rst:236
# 291db7c64923430391c5f12bbfeccd01
# 46daf42f59be45a6be53c61f9a441741
msgid "whyrun_supported?"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:5
#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:5
# 7c226da5f3e842a7b01dd40073c01b17
# c694b4dbb74a4fcc970d7001d7f392b8
msgid "|whyrun| mode is a way to see what the |chef client| would have configured, had an actual |chef client| run occurred. This approach is similar to the concept of \"no-operation\" (or \"no-op\"): decide what should be done, but then don't actually do anything until it's done right. This approach to configuration management can help identify where complexity exists in the system, where inter-dependencies may be located, and to verify that everything will be configured in the desired manner."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:7
#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:7
# 5b060436619d46f7be3e2bb1fd0e4245
# efe950cb203a436faefd2c412bb1e2dc
msgid "When |whyrun| mode is enabled, a |chef client| run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the |chef server|, rebuilding the node object, expanding the run list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:9
#: ../../includes_chef_client/includes_chef_client_whyrun_mode.rst:9
# 13339413482f4a9ba00b189a92bcb3cc
# 025df3c1dd08433187fd52b696a880d1
msgid "why-run mode is not a replacement for running cookbooks in a test environment that mirrors the production environment. |company_name| uses why-run mode to learn more about what is going on, but also test-kitchen on developer systems, along with an internal |openstack| cloud and external cloud providers to test more thoroughly."
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:5
#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:5
# e4871a8b653b4ccc8d76b3c055d3b5f7
# bce7d1ad5bf24585a73513d4b80793ef
msgid "When the |chef client| is run in |whyrun| mode, certain assumptions are made:"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:7
#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:7
# e2b9b6142c1743e7aa4e6b8ae121a6b5
# 7d3ec4ef36f5422b99da51ad7468457b
msgid "If the |resource service| resource cannot find the appropriate command to verify the status of a service, |whyrun| mode will assume that the command would have been installed by a previous resource and that the service would not be running"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:8
#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:8
# 4be468bc5384427b841f126e0228f87e
# 7db833d89fb64c3aaa35dece451c94c6
msgid "For ``not_if`` and ``only_if`` attribute, |whyrun| mode will assume these are commands or blocks that are safe to run. These conditions are not designed to be used to change the state of the system, but rather to help facilitate idempotency for the resource itself. That said, it may be possible that these attributes are being used in a way that modifies the system state"
msgstr ""

#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:9
#: ../../includes_chef_client/includes_chef_client_whyrun_mode_assumptions.rst:9
# 033e823deb174a4d92bcba397f588f4a
# 6af0109090164dd293c24ebc3c33b2c3
msgid "The closer the current state of the system is to the desired state, the more useful |whyrun| mode will be. For example, if a full run-list is run against a fresh system, that run-list may not be completely correct on the first try, but also that run-list will produce more output than smaller run-list"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:5
#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:5
# ff86c05ed6c3407bb84d0fb5ce921971
# 5b056ac65e604ded88418a72a47f38a0
msgid "The ``whyrun_supported?`` method is used to set a lightweight provider to support |whyrun| mode. The syntax for the ``whyrun_supported?`` method is as follows:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:13
#: ../../includes_dsl_provider/includes_dsl_provider_method_whyrun_supported.rst:13
# a401818800e640c7b62f18a93db80ff9
# 64798bac73c04e1d9bbff4783bbb5fac
msgid "where ``whyrun_supported?`` is set to ``true`` for any lightweight provider that supports using |whyrun| mode. When |whyrun| mode is supported by the a lightweight provider, the ``converge_by`` method is used to define the strings that are logged by the |chef client| when it is run in |whyrun| mode."
msgstr ""

#: ../source/lwrp.rst:156
# e40d22bff16d45a29f77f826ac7f4c96
msgid "When a lightweight provider contains only platform resources, the ``converge_by`` method is not required because it is already built into all of the platform `resources <http://docs.chef.io/resource.html>`_."
msgstr ""

#: ../source/lwrp.rst:159
#: ../source/lwrp.rst:244
# fb7c1b930f134f5bacdfde0407677d81
# 0d89fbdbfe934522ab7a5c600febbfc3
msgid "Condition Statements"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:5
#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:5
# 25d60e9110984c1f8f1bd7b7f691c4d2
# 34301f4f1f5a438db0ac1c4bc413c2b0
msgid "A lightweight provider can use any conditional statement that can be used in |ruby|: ``if``, ``else``, ``elseif``, ``unless``, ``while``, ``until``, ``case``, and ``for``. A condition statement can test for:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:7
#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:7
# b1cc7073c51248c3b4fda9ad4a82e0ed
# f27b778a880e4086b0f843657f123232
msgid "A |ruby| class (such as ``::File`` or ``::String``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:8
#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:8
# 8b06bf86354c4bd0a14491b36f27b718
# ea788070b1684303be3803bbbeb8b3e0
msgid "A ``Chef`` class (such as ``::Chef::Mixin::ShellOut``)"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:9
#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:9
# 3fdbdf05992e4ce4bd027e37a6fd30a8
# 900d7b5e8e25483a91ffa3c746616309
msgid "Conditions present on the node by using ``@current_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:10
#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:10
# 48ea926868d74ebd9690b3483171b504
# 8a663b90841e46038fa7d396acbffe4d
msgid "Conditions present within the resource being processed by the |chef client| during the |chef client| run by using ``new_resource`` or ``@new_resource``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:11
#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:11
# 74c4d1d51f8f42e3947056b4fadd120b
# 6549b438e7794d6d97622351cda941c0
msgid "To verify if a resource was updated by using ``updated_by_last_action``, for example: ``@new_resource.updated_by_last_action``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:13
#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:13
# 651def6482904bab846ec3baeed44a3b
# 2795d196bfe8414893f2d14b07325aac
msgid "and so on."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:15
#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:15
# 715adf25b8804484ab375c4f16810f88
# 312688854adb479b94fffa9fd42c5da6
msgid "For example, an ``if`` statement is used to check if a file exists (``::File.exists?``), and then if the file exists to delete a key from that file."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:29
#: ../../includes_lwrp/includes_lwrp_custom_provider_conditions.rst:29
# 5528fea23c6b4880bf0849532f5dba5a
# 0bbd0a13a243495ead4d0862d21414ff
msgid "In the following example an ``unless`` statement is used to add a key, unless that node object already has that key assigned to it:"
msgstr ""

#: ../source/lwrp.rst:163
#: ../source/lwrp.rst:248
# 64003a8e2dfb47f3a076a5d6f749fedd
# f52656dc8b724d9e834bd883fc36a8dd
msgid "Log Entries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:5
#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:5
# 4498284bef5b4e639f34a752aa185fcd
# 0308ddb961b34f659714792789e5d899
msgid "Use the ``Chef::Log`` class in a lightweight provider to define log entries that are created during a |chef client| run. The syntax for a log message is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:13
#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:13
# 2850251aa35a4762b34427648e25e63d
# 34a956f301cf4916a25f7b5f05e2e690
msgid "``log_type`` can be ``.debug``, ``.info``, ``.warn``, ``.error``, or ``.fatal``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:14
#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:14
# 34346093a62e42cf89db0dc9ed4b0415
# 55f2ffc6676e4978b2de834b67ddef77
msgid "``\"message\"`` is the message that is logged. For example: ``\"#{@new_resource} added module '#{@new_resource.module_name}'\"`` or ``\"#{@new_resource} module already exists - nothing to do\"``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:16
#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:16
# 590c123de5b549ba91f5324935ea68ee
# 68bdcf51f41547f29c51736ec44cd3be
msgid "For example, from the ``repository.rb`` provider in the |cookbook yum| cookbook:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:27
#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:27
# d1e9dc72497c4d73b08e6216f07050de
# 1bc16399374049279a22769ea30ecb8a
msgid "where the ``Chef::Log`` class appends ``.info`` as the log type. If the name of the repo was \"foo\", then the log message would be \"Adding foo repository to /etc/yum.repos.d/foo.repo\"."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:29
#: ../../includes_lwrp/includes_lwrp_custom_provider_logs.rst:29
# da071859911c4bd597fe76dab30ea0f9
# a7eea06539db492ca7737a6f2544c3c4
msgid "Another example shows two log entries, one that is triggered when a service is being restarted, and then another that is triggered after the service has been restarted:"
msgstr ""

#: ../source/lwrp.rst:167
#: ../source/lwrp.rst:252
# bad00080e98a41e7a757f305d3093894
# 71973ad176f342cdbabd5d8c6257f99f
msgid "rescue"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_logs_rescue.rst:5
#: ../../includes_lwrp/includes_lwrp_custom_provider_logs_rescue.rst:5
# 254959b2dc104a21a0ed2bff835b5870
# cd6b5ef7a1834843a7c420c5d15ef8a0
msgid "Use the ``rescue`` clause to make sure that a log message is always provided. For example:"
msgstr ""

#: ../source/lwrp.rst:172
# 27be9263570548969f1c24e2d673ae44
msgid "The following examples show various lightweight providers that use platform resources."
msgstr ""

#: ../source/lwrp.rst:175
# e4f29f312b1f42d581ddd59c17f09f1c
msgid "aws_ebs_volume"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_aws_ebs_volume.rst:5
# 2f7c0fe093194e2dbd2412aa41d80e08
msgid "The ``aws_ebs_volume`` lightweight provider (found in the `aws <https://github.com/opscode-cookbooks/aws>`_ cookbook maintained by |company_name|) defines how the |chef client| would handle a recipe that uses the ``ebs_volume`` lightweight resource and the ``:detach`` action. The following ``action`` block tells the |chef client| what to do with the ``:detach`` action:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_aws_ebs_volume.rst:17
# 6d645a784ccc451fbe066d75e6a9cfa3
msgid "and the following ``def`` block defines the ``vol`` variable called by the ``determine_volume`` method:"
msgstr ""

#: ../source/lwrp.rst:179
# b072da2f2fef416d851454af13c9c465
msgid "cron_d"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:5
# c80219bd164f45d5a0aa7d5478e9ef37
msgid "The ``cron_d`` lightweight provider (found in the `cron <https://github.com/opscode-cookbooks/cron>`_ cookbook maintained by |company_name|) is used to tell the |chef client| what to do whenever the ``cron_d`` lightweight resource is used in a recipe:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:42
# 0feeca7d0c7743fca852fbfd7d1dc2fe
msgid "two ``action`` blocks are defined, one for the ``:create`` action and one for the ``:delete`` action"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:43
# e3b99cb883984f748a2109318b8bf907
msgid "the ``:delete`` action block calls the |resource file| resource (and it's ``:delete`` action) to delete a file in the ``/etc/cron.d`` folder"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:44
# 770df0d1728640ea99023b522a8800e0
msgid "the ``:create`` action block creates a new entry in the ``/etc/cron.d`` folder."
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:46
# 9d59a547549540cdacfd86b277f7ffa8
msgid "For example, if a recipe used the ``cron_d`` lightweight resource similar to the following:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_cron_d.rst:57
# c6e303e856ce4154a81df8bb9a2d93b8
msgid "this tells the |chef client| to use the ``cron_d`` lightweight provider and the credentials for a user named ``appuser`` to create a |crontab| entry named \"daily-usage-report\". This |crontab| entry executes a command located in the ``/srv/app/scripts/daily_report`` directory at a specified interval (defined by the ``minute`` and ``hour`` attributes). Any of the attributes that are not specified in the recipe (such as ``mailto``, ``weekday``, and ``day``) just use the default attribute values defined by the lightweight resource."
msgstr ""

#: ../source/lwrp.rst:183
# b03da02ad70647f8b916e73d01f3377c
msgid "rabbitmq_plugin"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rabbitmq_plugin.rst:5
# 28722e0ef2b444ad8e2944fe2663e292
msgid "The ``rabbitmq_plugin`` lightweight provider (found in the `rabbitmq <https://github.com/opscode-cookbooks/rabbitmq>`_ cookbook maintained by |company_name|) is used to tell the |chef client| how to handle two actions (``:disable`` and ``:enable``) that are used to manage |rabbitmq| plugins. Using this lightweight resource in a recipe is simple:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rabbitmq_plugin.rst:13
# b4c0c35b0f474f69bf28a7751f52db47
msgid "The lightweight provider then does most of the work:"
msgstr ""

#: ../source/lwrp.rst:187
# 21d4616e914b40c891d4aa672b75b713
msgid "ssh_known_hosts_entry"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_ssh_known_hosts_entry.rst:5
# b65adf4a4cb3440da0147a10109ff0bb
msgid "The ``ssh_known_hosts_entry`` lightweight provider (found in the `ssh_known_hosts <https://github.com/opscode-cookbooks/ssh_known_hosts>`_ cookbook maintained by |company_name|) is used to add hosts and keys to the ``/etc/ssh_known_hosts`` file."
msgstr ""

#: ../source/lwrp.rst:193
# c2d1bb4a7c6a411ab2053d8c6a30e057
msgid "Custom Providers w/Ruby"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:5
# 9e152cedb3d647e3bd62367e39400471
msgid "This section shows some of the common structural elements that appear in a lightweight provider that is built using custom |ruby| code. Remember:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:11
# 88ab1eba0dca4f36b343f652f104de5a
msgid "The basic syntax for a lightweight provider that is built using custom |ruby| code is as follows:"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:41
# 44be500b74234d109089b181e1929ac7
msgid "``require`` is a standard |ruby| method that allows a lightweight provider to require modules that are not located in the current cookbook, such as a file located in the ``chef/mixin`` directory"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:42
# 32248f26936e4863b60a2089f730a9e3
msgid "``include`` is a standard |ruby| method that allows a lightweight provider to include a class, such as ``Chef::Mixin::ShellOut`` or ``Windows::Helper``"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:45
# 2cad3a50272a4cbca1399db73234b70a
msgid "``converge_by()`` is used to provide a ``\"message\"`` to be returned when a resource is run in |whyrun| mode"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:47
# 2faddf46f41d44d99bc2848b091e1f0c
msgid "``test`` is used to test for idempotence; ``test`` can be defined inline within the ``action`` block, defined as a method using a ``def`` block elsewhere in the lightweight provider (shown as ``def test()``), or defined using any other pattern that is available in |ruby|"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_syntax_ruby.rst:51
# a280b640c5244a999723ae8bfbcfda95
msgid "Also, commonly used methods (but not shown in the previous example) are ``current_resource``, ``load_current_resource``, and ``new_resource``."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:25
# ea9945dbf1174d9ebbf0d05608c64e08
msgid "``if @current_resource.exists`` is a condition test that is using an instance variable to see if the object already exists; this is an example of a test for idempotency"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_action_with_converge_by.rst:28
# 19e56cd29d444c088818f6c6e4f25210
msgid "``converge_by`` tells the |chef client| which message to provide when the |chef client| is run in |whyrun| mode"
msgstr ""

#: ../source/lwrp.rst:212
# d44dff7ee44e4ece823a8620cd921a3e
msgid "converge_by"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:5
# d13c1eca8f2a4f18b9431de82954beb9
msgid "The ``converge_by`` method is a wrapper that is used to tell the |chef client| what do if a resource is run in |whyrun| mode. The syntax for the ``converge_by`` method is:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:13
# 7a350543f6b645829a49e7d53867b65a
msgid "``converge_by()`` is added to an ``action`` block as a wrapper"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:14
# 3b7e4e7be1ac4cf28b8ae1e78c0a6760
msgid "``\"message\"`` is the message that the |chef client| returns when it is run in |whyrun| mode"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:16
# 306b474a13f7489a88d287f75bcd329d
msgid "Some examples:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:38
# e5a7401c91334e90ad1d746c9bf2f5cb
msgid "where the last example shows using a variable (``description``) as the ``\"message\"`` in the ``converge_by`` block."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:40
# 87bfdb703f7e497aae51db0245a0d4bc
msgid "An example of the ``converge_by`` method being used in the `directory <https://github.com/chef/chef/blob/master/lib/chef/provider/directory.rb>`_ provider, which is a platform resource:"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_converge_by.rst:65
# e424419634144fe7a06cf59babe82b72
msgid "|whyrun| mode is already enabled for platform resources. When platform resources are used as part of the ``action`` block in a lightweight provider, only the ``whyrun_supported?`` is required to allow the |chef client| to run in |whyrun| mode."
msgstr ""

#: ../source/lwrp.rst:228
# e92c824f106047059b62e218fc470948
msgid "require"
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_require.rst:5
# e2e4febccb5441c4bcece44657ae9c01
msgid "The ``require`` method is used point the |chef client| to the location of an external class library."
msgstr ""

#: ../../includes_dsl_provider/includes_dsl_provider_method_updated_by_last_action_ruby.rst:5
# 899a0fa072c34b9396f7cee6e434c02b
msgid "The ``updated_by_last_action`` method is used to notify a lightweight resource that a node was updated successfully. For example, the ``bluepill_service`` lightweight resource in the |cookbook bluepill| cookbook uses this method:"
msgstr ""

#: ../source/lwrp.rst:256
# d7457e110d9d4d778acb0fa6822177fa
msgid "Libraries"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_library.rst:5
# d67f28672ddd43b08fe121b45a9e95e4
msgid "A lightweight provider can extend another provider class. This can be done as a ``mixin``, which is then placed in a library under the ``library/`` directory of any cookbook that will use the extended provider class. The lightweight provider is then written to include that library in its implementation so that it has access to the extended platform resource. Use the ``include`` method in the lightweight provider to ensure that a lightweight provider has access to an external library."
msgstr ""

#: ../source/lwrp.rst:261
# 56e07f5966a448b695ede62b32479e2c
msgid "The following examples show various lightweight providers that rely on custom |ruby| code."
msgstr ""

#: ../source/lwrp.rst:264
# ec458f2a5bff4f6dbf0f543850e83d89
msgid "rbenv_global"
msgstr ""

#: ../../includes_lwrp/includes_lwrp_custom_provider_example_rbenv_global.rst:5
# 98d839cca0ff45fcbc29da1adfb3f0cc
msgid "The ``rbenv_global`` lightweight provider from the `chef-rbenv <https://github.com/fnichol/chef-rbenv>`_ cookbook shows a custom lightweight provider that  sets the global version of |ruby|:"
msgstr ""

