# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-05 23:30\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:8
# 33a99e5809dc40d59ab1cc354852521c
msgid "What's New in Chef 11.0"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:10
# 2d47da93849d45bc8c10c468d2fc218f
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:12
# 628507357a604d2fbda85aff0c91e319
msgid "The |chef client| 11.2 release is updated for Ruby 1.9.3-p484, which resolves a security vulnerability that existed when using prior versions of |ruby|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:15
# 17a9951861bb428380a51dc3dfced9dc
msgid "|chef client| and |chef solo|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:16
# c7eb7dd4a8794d9b8662df47d0c78245
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:19
# 9b2abedefbe34995bb3932220ab5d240
msgid "Custom API usage and Databag Population require Chef 11.6.0 or greater"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:23
# a56101fcd57b4973b1376c07c71c8de6
msgid "knife data bag from_file"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:25
# 9db0a8a4972a48dfa680bd6a00e41f02
msgid "This example will fail with Chef < 11.6.0 and EC11 or OSS, as the /data endpoint has become more RESTfully correct. See https://tickets.opscode.com/browse/CHEF-4435 for details."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:29
# 24418ad78a094c7dbd993b4e79991af3
msgid "|shef| is now |chef shell|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:30
# 47f947c3d33b4f7ab531e093e1853522
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:33
# 327a26fde8994ec58f62f345986a63de
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:34
# 0402e81fec2d43dca5d0fe224670f1ac
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:37
# aa7535706a3c4dc5a3ac89c936ea2705
msgid "LWRPs AND Recipes Both Now Automatically Qualify loaded Gems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:38
# b41fb8b8e1e44d6499e72566827b5d5f
msgid "Previously, in Chef 10, one could do the following in a recipe:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:45
# 59af3743d8e24c37b6e6e9d92d65cd5d
msgid "In Chef 11 you must add \"::\" to the beginning to avoid the automatic addition of a \"Chef::\" qualifier."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:53
# fc7e07144a6540a9a88105983ba686a4
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:54
# b95d79fb28224516a35477a1b9f66731
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:61
# 8da1832686a94aed9f19e89e0fb8ee3b
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:68
# 24cb5737d92a44ce8571ef3bc6575829
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:71
# d185b8f4a32b4a6f9a014ca526ae744d
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:72
# 2b1b404280064b4ba439da5528fdb243
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:78
# 4888b7f7947d443d9994e4fc2e132535
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:85
# d0a3919cddff4a7b9be5ebcc73b5c810
msgid "|knife| Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:86
# 86816ba0bf864622b8a99e48b113a390
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:106
#: ../source/breaking_changes_chef_11.rst:153
# bede99df194443f688cf70533087d200
# 52adf3f1c6654fa489f5e73f54c6401a
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:128
# 305530b0a28242039e10810997e8e3b2
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:130
# 31bf04941b3c4e7cb797c9ba4b008a3a
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:178
# dec76a3f021143a3a9e3dcf50b6eee8e
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:179
# ce4d624b8acf444b9aefb445e334b682
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:182
# b878bddddc574615a439840cb028545e
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:183
# 43114cf9bbf6491380c124c7fd34b12f
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:196
# 63853355258042fd9e9c395b2ad0b8c2
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:199
# 3c366a8f7b4b4ce1b06b57fd2001bae2
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:200
# 1975d61a3a2a4d5398f46dd7cd88f26a
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:210
# 9fdd3385ab53404c8d31ec026c1c3aee
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# f66ac0975e28488c8f80008ba8865b6c
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:213
# 001d0c0226794051a195691725f01f35
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# 2a81895df2a6459eb85a28b417945e6c
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:225
# 0dded4ddd7cd4331aee716f40217538f
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:228
# 3af1a7a3cbc2408c84079717bedaf2f2
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# 1d80e74712a94e22922a14e801915993
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:231
# a3383c39a14742ed87d6f1b518daae5e
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:239
# b9e9d0cd9db94fa4ab854c1d7bb27461
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:249
# 9829644d40e44475ba868edae91e1bf4
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:250
# 532519030052461da6d751e005cb8859
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:252
# ff450f32f90640b69628de19a3d123c9
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:255
# 2836eed07c0c495d85217864964184af
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:256
# 801b2d74e59d43dfaebdc2e55f9a108f
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:260
# b375993833704f79a69ac3c2b43f1b82
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# d561081a0d1246af96ff270c04766a32
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:263
# 4ff147f6dace46da84f01ccd88d12e64
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:265
# db6a564811be4c9aabcda1d1a60d308c
msgid "The |chef client| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# 7881ac89e3b7425595a90eb526283a78
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:267
# d85e82f478c24017927244cd09dc0857
msgid "An unrelated resource fails and halts the |chef client| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# a4c7b32e5627453ea3db4a24678d9939
msgid "Subsequent |chef client| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:270
# d81f907afd0a406085366d7467cb0aee
msgid "In |chef 11|, delayed notifications will run after the |chef client| run fails, and will be executed even if other delayed notifications fail. Conversely, if the |chef client| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:273
# ec33f9db40e64c81bc9bc25965e484e1
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:274
# 03d48c0778244f04bd8a302ae2086573
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:282
# 6ba4e4da0b9441e0889673e67ad2441b
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:293
# c98c1ee688904ee994795ea049308576
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# d8adba30a857487093d8c2d0d5893756
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:296
# 6dcd0ecaa3734028ab83747f27bd9a35
msgid "Because the corruption is silent, there is no way for the |chef client| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:298
# c2ac8e01e5434f51b9a11234486d79b4
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:299
# aaa43f44bbb346c9a475d673572d0618
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# f81dec0d631e457ebf611f55d9aa01e5
msgid "|chef 10| clients |chef 10-18| and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:301
# f1623b342fe6464a948ee97999be101d
msgid "|chef 10| clients version |chef 10-16| and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:302
# 3ea1a79c14c9407998f77a1f1ae25f63
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:303
# cd816eeb12b048c28186d8c338575b94
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:306
# 93229cdab3f549b6994cb50d525e5b0b
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:307
# 633781dec9924388a8677eb353f85097
msgid "When trying to decrypt a |chef 11| format data bag item with |chef 10-16| or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:317
# cd476276757e41888e8c77f4e6503772
msgid "The above error output is from |knife|; the |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:320
# d2a7b35090784423b16a25a87ecd4cf7
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:321
# 2e6885c55c9343c58eb08090ff5e7f1b
msgid "Before upgrading on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version |chef 10-18| or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:323
# bff01b75f8a14e0286e2d80728f19a01
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:326
# 24578eec322f489f8d6c94fc28c9cd46
msgid "Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:327
# 4e9ff8e5559940e6b0df67987dcf6e08
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:331
# 924698609ea447c6bca11a1c98073838
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# 4a355a65526545ec98f3e6d309f0da42
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:334
# 1f2e794d21724c7d88816ddcfe928eac
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# d731bd55547a43098047feb1de378410
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:336
# c9e66d4970d5467c9b11ce68affd067d
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:338
# 65656b0931fd4ca4995ff05b0348c943
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:347
# 98a31065e7e149a6b6a2e77b365215ec
msgid "|knife| Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# 2404e7f76fca4f66b44c188fc66e89b9
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# b5e34cb6227b441bb0cfaedd525b8bab
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:351
# d612b24ec63040858ff9546ef2ed4ebb
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:352
# bc92cd7cf03943bdb1ad6778030dd36f
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:354
# cd0a0999d00b4ce89feb8636132aaa76
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:356
# 68530663188c4a58ab79dd2038ebe68d
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:357
# e0c576efd4f14615ae3b9d1186559a8a
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:358
# edc88cb1e9a54555955ee6c497bdcfda
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# d6d429b530ed4ff3958f0287f188962f
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |company_name|-maintained cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:362
# 7ee16ecb99414be3ac2f64e467f5d43b
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:372
# a921a48bbdfa4993ade4fc82b1cc0e29
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:379
# 04f553e4f5b947e188b07fcc537d116a
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:388
# 79b3a90c79084b1ea6b0a70961407091
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:394
# 94218b83154b4732bf442363794d6272
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:398
# 2a0102ecfc984a33bc3b3bdb42081345
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
# 46d756fd7d5c4332ad9c7e94de3261c0
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:401
# 7adb1f2239d64724aee95469388da1e1
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:413
# 1810a05183894427854f08cc92f170b7
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:416
# b55db468430149e68f7adcc1b7c7de5b
msgid "The Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:417
# 3480248594d24ec5911c7e23bb2aeff3
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:420
# b05a45e8998c4e1fbf45d705a79df1be
msgid "The /clients endpoint returns |json| with a |json| class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# f2e3cb1ff3174fde97c1bb18c9ea8bfe
msgid "In |chef 8|-|chef 10|, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:423
# e64aee1d9ea24d70b9fbd037797b2aca
msgid "This change breaks the ``knife client reregister`` command in |chef 10-16| and earlier. Forward compatibility is introduced in |chef 10-18|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:426
# febb2258aa584fe5a98155f77d60331a
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# ded6ceb7699b4c4e9e0c20a7da1d00e5
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:429
# 6bb3ec06f86f406fbf0ba5af50ae9c3d
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:432
# 75f3e311a68044b387e6d072214299f7
msgid "Strict checking of top-level |json| keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# bc43a8784b204ec7b17217e429fa44a1
msgid "All API endpoints that process requests to create or update an object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:436
# 425a87e64d3f4118b803c7ea4f6f7f0c
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:437
# d812f8262cec40e7b897b72e5b434d4f
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:440
# 13e55ce745c04ecb9ae2905494397dab
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:441
# 0dbf04079f1740179986cd288b4d93fe
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:444
# 52b56b240dbc40b890e0fd3f143bee0c
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# 5fbc34f405204381b5686cf30aefd48e
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:447
# a65a4af7a540461a99cdd1606ecd0c27
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:450
# baf1c82dd10646f9a6b7bd9b375cf0aa
msgid "knife reindex is not supported in |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:451
# 997c860138fb4e498ee8c0408ab10ec2
msgid "You can trigger a reindex of object data using ``chef-server-ctl reindex`` while logged into the |chef server|. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:454
# 9e31e171df8c4b5bae87116d582a056c
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:455
# 8317d5c5e9a4458dac1bb81970fb47d1
msgid "Support for |open id| is no longer available to the |chef client|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:459
# 4b2aa1bce7c64628bd259469674d2501
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:460
# bd3e8bca67834bd6a49480a882f56815
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side have been removed from the main |chef repo|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:463
# 7f99bfc4a1ba4756838974f4e8eb5268
msgid "knife cookbook delete --purge is ignored by |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:464
# 717bffd02fc04182a24c1e40a47970ca
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:468
# d5a300a0cfbd42d5a7c7d90de778f111
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:469
# 3abc2f9e9fd04dccb3d53f885fde22d9
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:472
# 8fcf17327fe042d4b7b8b1cd4e922a53
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:473
# e57d0e79847d4afb8569ff20b3eeec52
msgid "In |chef 11|, when output is to a TTY, the |chef client| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:475
# 1940d6976f334abb9c7ca9d296b1efc8
msgid "If you prefer one type of output over the other, you can force the |chef client| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:477
# 990472cb01594179a99a396beb8b05f5
msgid "In previous versions, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:480
# 3023672a9a3b4e8a8d75dfeeffcdd597
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:481
# d01ad7fafbc6424e8d015f18efc2933c
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:484
# f260a0f80b8d43009ebaad81117a9595
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:485
# d5ec7d2a26b64c09b8c7840caacb6fa4
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:487
# 1d57ce71dac54aafa4ba257e7d1a7e68
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:488
# b6ad4b0ac61548668da1dcce46e35282
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
#: ../source/breaking_changes_chef_11.rst:497
# 3c6e37db27cc4486ab09d4e69a3b6025
# fbbfbd9c4d7f4829b7e2df69a785ff50
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:491
# 73d289baf6cb4e81a6d377be86c79a9e
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:493
# 152ce46171684580a1675363b3c6be81
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:494
# 166abb186801422e8518f60deddb74f3
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:495
# 3e9e73a4838e4593b7938bd6c798b4fb
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:496
# f19b1557e0274c54a867b7077de35aa8
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:499
# 602d95348dd14a62b67432536a958f92
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:502
# 8b537da2838e42b2b8610b8270370e3a
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:503
# 3f89f63c9bd54216960a0dab49c60c1c
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained |chef client| run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded |chef client| run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:506
# d6b1a75c0271421ea60f33dbb4b0fd2f
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:507
# cf5e81fbe7074797acb2d8c35dc50460
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:510
# 19064471c731446db5be7338e7114eec
msgid "Partial Support in Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:5
# e434b362042c469fb22d71a091b2cda1
msgid "A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:7
# 9d87d8b3ff054ec6afccf591226bbbdb
msgid "By using the |ruby| ``render`` method in the template file"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:8
# c539a79179b246e493e0f5e944465abc
msgid "By using the |resource template| resource and the ``variables`` parameter."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:514
# 2cb4aca62f614674a53e56d546ca54f0
msgid "``render`` Method"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:5
# 691e592dbfe34c7ea791d70bc0c3fe43
msgid "Use the ``render`` method in a template to reference a partial template file with the following syntax:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:11
# 66aa18e4edc04bf3bbc0548a97dd6406
msgid "where ``partial_name.txt.erb`` is the name of the partial template file and ``:option`` is one (or more) of the following options:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:17
# 84096803446f43a189b0d7ece6245e4a
msgid "Option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:18
# 7a6cd23e722445d7b3bbf8a4fe2f1912
msgid "Description"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:19
# 4e90416e8f7c4e8887a869a667220126
msgid "``:cookbook``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:20
# bbfc2c22fe8a4f30a6c1504f3067969e
msgid "By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:21
# 9ba8141b77984c239e5dea93aa365846
msgid "``:local``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:22
# 3887dae890504d4593a1e7290fe98306
msgid "Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to ``true`` to interpret as a path to a file in the local file system and to ``false`` to use the normal rules for template files"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:23
# fff3bcda763b4d7ab9806d4b14f8e67b
msgid "``:source``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:24
# fe2a43ecabc140e282e05b8d26e82e58
msgid "By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:25
# 258a84acb572442db28871dbbb2426d8
msgid "``:variables``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:26
# d91e8b1a5fbf4a3bb17d0966b59f569e
msgid "A hash of ``variable_name => value`` that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:28
# 84b5d756ae6c4e3a88ba7663c271f36d
msgid "For example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:518
# bf56320414cb4ecfa8ef55c37ca6e38f
msgid "Template Resource"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:6
# c69b186edb0f4d9f89b67f3c6a68fdd6
msgid "The |resource template| resource can be used to reference a partial template file by using the ``variables`` parameter, the ``:partials`` option, and a |hash| of partial template files. For example:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:18
# b46f9080069f45d6a419e7313bbcbd8f
msgid "where each of the partial template files can then be combined using normal |ruby| template patterns within a template file, such as:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:522
# ed48a2a4eb074c2a985e8f89a51b7ccb
msgid "|chef apply|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:523
# 58ba68b7cd0a48979f6031efb33b77c0
msgid "There is now a ``chef-apply RECIPE`` command that will run a single recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:526
# e5b6acc1d14d43b4b8af20ba222ec868
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:528
# d30b787953354f5bb30e686f84c7094d
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:529
# 99dc2d83c72f4ee880afa83376c06a82
msgid "|subcommand knife search| assumes node search when the object type is omitted"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:530
# 621882a8ebaf46b8997a8d59d6f149dc
msgid "|subcommand knife search| will search over roles, tags, |fqdn|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:531
# 320d0148b9324bacba9bb0b78bc97fb9
msgid "|knife| essentials (|subcommand knife upload|, |subcommand knife download|, |subcommand knife diff|, and so on) have been merged into |chef 11-0|"
msgstr ""

