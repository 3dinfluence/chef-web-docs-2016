# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-12 00:21\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:33
# 8a69b30466b84c61ba4283f8e05813e5
msgid "What's New in Chef 11.0"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:35
# b65e8bcf81c14b8c9431d6ee8dce61d4
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:38
# b614e45a8baa4fe9b6cc72e193a4e159
msgid "|chef client| and |chef solo|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# 499ecd46959e4fe2aca3d4c080b3af9b
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:42
# 0acacb1f1cc143f2960dab120e288651
msgid "|shef| is now |chef shell|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:43
# 0875bff9af454554932631f9102a9e3e
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:46
# 926477c4975b4742ae47f5b2a0df8070
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:47
# b692db760e0d42d0b5151b6b4032e1c3
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:50
# c6061171adfc44728e2a06cc7db6a5bf
msgid "LWRPs AND Recipes Both Now Automatically Qualify loaded Gems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:51
# 9c9ae92861454ded9920fa2be857674b
msgid "Previously, in Chef 10, one could do the following in a recipe:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:55
# 56139459e91a4170aa6d6bfb2010990c
msgid "require 'win32/registry' registry = Win32::Registry::HKEY_LOCAL_MACHINE"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:58
# d59964eb4d5343f8ab3e2af790e5e611
msgid "In Chef 11 you must add \"::\" to the beginning to avoid the automatic addition of a \"Chef::\" qualifier."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:62
# bfcfd92b72f347719123ffd88372e4f8
msgid "registry = ::Win32::Registry::HKEY_LOCAL_MACHINE"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:65
# 3c8f87c24b934fbd9d95e7be74699be3
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:66
# 57475e75099041ff8bc62568c53c327e
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:73
# 12e52fefa8f244ad8da3ffef523f7cd0
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:80
# 328c0f78595c4d2fae5ff73331021920
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:83
# 02ef7f2304cd466481abd1d0f1efca2b
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:84
# 027422be1c8e4e38b5c41fc0448f96ca
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:90
# cd9c1efcc19a4328b7ff06ec4614723c
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:97
# 1940d794c85c4f4983f66b6e2dfb4e03
msgid "|knife| Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:98
# 456bc2e208e54f808006e0ca8b930547
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:118
#: ../source/breaking_changes_chef_11.rst:165
# 6040f5e9ad3d49abbc37d95e6e1ef28f
# 70f724819889403985628f59d53e685a
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:140
# 9ad9aa6895d04f58863f2088b76953ef
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:142
# 28fa97c2301a43a78153819e283cfb3b
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:190
# 39270c6efd9e4c6bb95e33522914cd3d
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:191
# b774322d1c0e430ea0a2e64c9a58927c
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:194
# 7ac2b5b33d7743ca8a351ed8b26302d6
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:195
# 9fcd093e5f2d4f359d522be0135e4a3c
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:208
# 5caad5c1c3eb4727970eceea4c831808
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# b0538d6e105c4bcb992bb64412ab7e0e
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:212
# db655bbca94945c3a3d4f292befe4a28
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:222
# a9d8eb066aab4bbda82c07ddac0a8884
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# d41a618b38374d44a0b5aa6591542fd6
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:225
# 030c45937d51483f9c92d0f4366f9dfe
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:235
# 04adba25e9f94dfa892da4f2b9fbb50e
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:237
# 922663ed9eac41a59c9e7fff8b0fc585
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:240
# 383b1ca1a2a340289afc4ee74e1fe6b5
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:241
# 4a7dd7f7fb014f43ac4750e2f8ea4ba8
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:243
# 58611901f9844862b56f1d4e281d8dee
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:251
# 1e44b8b51b06442d917263f4e7201291
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# bcbe888e57da4d1eb0a125cc35c4ba04
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:262
# 46823683a04d47bb98dd654f8259f5fd
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# 86ca5fc526a141a19fc47b8d3a09d404
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:267
# e3fb5016a46a4e3b8fd667b0a051b08d
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# 9ba206c79a334d36b95dd377159c9edd
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:272
# 974b9f3a1f9841e7a86d0bb1df4d4779
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:273
# 2ba3432372d5482ab76f25318fee8fdf
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:275
# e68dd076a2dd4e0ca437f7336adb0600
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:277
# 45ca4d681ab347d2af7ccad0f7fc2481
msgid "The |chef client| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:278
# 4d114ca8492a4c0092b12cc53c1aeb19
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:279
# 3eba0e43aaf745c481a140ee18910d33
msgid "An unrelated resource fails and halts the |chef client| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:280
# 5f61cd99518c411dba8d499d59c87bb6
msgid "Subsequent |chef client| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:282
# 6600472e0d8349d7979ad1c886659cb2
msgid "In |chef 11|, delayed notifications will run after the |chef client| run fails, and will be executed even if other delayed notifications fail. Conversely, if the |chef client| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:285
# 735e1e5531924cf29de97e1851543299
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:286
# e781fc4717c54a8e91a4c0429ed26041
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# b1e4a34759344848b1847f0de66718df
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:305
# 2a6bec28395a4a8ea74bdaba86be307f
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:306
# c24dd75904e646438bbbf32d00843f27
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:308
# a9c9ee0275004e8987ac41e1ab3596ff
msgid "Because the corruption is silent, there is no way for the |chef client| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:310
# 739c1bd33bc647d6a38749f542d4b5c9
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:311
# 03d51a607f634719842bb03493b1b448
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:312
# 1d669b69c2124bdbaa33d6209c731ebc
msgid "|chef 10| clients |chef 10-18| and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:313
# e87f5ab7fb4541e0b63e28aef1bf5b55
msgid "|chef 10| clients version |chef 10-16| and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:314
# a77185b736504f639923af350120b119
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:315
# 6b89261fb2764f008b3793636e89d49c
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:318
# ea1baa25847f47f58de15218a13bed2c
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:319
# 699f0bbcb0e640278df51c25b5b01d9e
msgid "When trying to decrypt a |chef 11| format data bag item with |chef 10-16| or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:329
# c2b720907dab40daa48c7257fd53a270
msgid "The above error output is from |knife|; the |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# 6e157120e39b4e99b9dcf9364553ce89
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# 818bc0ea9ba54fb3ad93c4cb6f67bd80
msgid "Before upgrading on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version |chef 10-18| or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# 1ae39bf7b4544a128a0c0d3d8af3daff
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:338
# 2e0a5ea5e7a248e2b79601672ec9c744
msgid "Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:339
# 36de184d808546098a3df82710f4c284
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:343
# c1dd196a0a9f426da487ca74f097c59f
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:344
# 217858add86a49f7aeac29d6b8753203
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:346
# e8a83e3c02844563afb8d76faa1a63bd
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:347
# 4ed0a2362fed4fe393e699b23f1a6e6a
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# c76e4e01521d424d878b553eafddc051
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# 4daad02ead7540719b324d02f699f336
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:359
# 783af3bb4cf44a4a8ba070e823c39104
msgid "|knife| Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# f687c8b73e304199be62f41b6e677e6a
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:362
# c6999a5038c64e3eb7ee3f2f83a3d6aa
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:363
# a991a15db7874855b27cca5736a22ca0
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:364
# 1daef1be2a404ea7916e89ad18f29254
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:366
# c9e8eba272984530bdb07fa5f7d54a97
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:368
# eb594a4746d843f186f4cb8c243d5e06
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:369
# fba471f5dca04a6eb0b3b187255e86ec
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:370
# ad2e02dfdab94375912b4fff002aa2b4
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:372
# 69c5e0208621454180cb63308a02fd5f
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |opscode|-maintained cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:374
# 4116761a006846acb627c1f372b388d1
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:384
# 0c125f8fda5640e4aa86e463bd219d2f
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:391
# b2b131a8af714ce289da6466d41d4863
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:400
# e3e0b9cce53843df8c2d798f15c2179a
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:406
# cb586952b2db430c90a5d4f46c3e6065
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:410
# 65b07172ae144f8ea0c796b83b276987
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:411
# 6ef4cb3c67114fde9a19890c77fd63dc
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:413
# 684102be341f4325a5c8658f7b52faa0
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:425
# 08a42755b5724544a45921a2d83d13d3
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:428
# 0f8e2f6c2b964881b28a66d529bddb59
msgid "The Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:429
# 2373e99681b94822af9c4938f33986c2
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:432
# 8b9e69767f544f8781accc7af68a050a
msgid "The /clients endpoint returns |json| with a |json| class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# f4b092e5f4a14f83814a52e0a711c349
msgid "In |chef 8|-|chef 10|, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:435
# b281888c05f44edb876ab0181ed6079a
msgid "This change breaks the ``knife client reregister`` command in |chef 10-16| and earlier. Forward compatibility is introduced in |chef 10-18|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:438
# dc44f544920a4d978c28555787d5e318
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:439
# 82ffe2e318344d9fa48d77969304b0d6
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:441
# 2fa7ff95a7644db38fcfe577c7595750
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:444
# c333181b4a004b828cc0763ed5324951
msgid "Strict checking of top-level |json| keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# 61fd4c05314d4ebfb7f8d03efd07f802
msgid "All API endpoints that process requests to create or update an object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:448
# a524dde1c8e1458bb7422ba09157f4d5
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:449
# 9687242b5e3b47e18fc285e89b3a7fe6
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:452
# 6def56ac61a645829b3f370b3ffd9e61
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:453
# 47b3047165b7473983cc48ed3ab6f13b
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:456
# 366a45d974a04a8fb5f2e07186b97e85
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:457
# 3202f89ea54948b58fd4de1728c3c36b
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:459
# 8d6a71a5c1e340f08a5efbe73650319a
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:462
# af98f38b5dc94c13a328c29f93f1ad04
msgid "knife reindex is not supported in |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:463
# 1623556b9172494997c0948bca67015f
msgid "You can trigger a reindex of object data using ``chef-server-ctl reindex`` while logged into the |chef server|. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:466
# a3d71c7eeb9e4a5d910cc784f26fd8be
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:467
# bad7140ee234407c98ade9068f901788
msgid "Support for |open id| is no longer available to the |chef client|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:471
# cc08a6de4a64442780e3d3d041d6133f
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:472
# f45b898315d94e07af64b07b5b2e7d98
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side have been removed from the main |chef repo|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:475
# f987d0a3eb844fb0bf7760307305f6c2
msgid "knife cookbook delete --purge is ignored by |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:476
# ff92e2a48853445d9be12cd0853bb651
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:480
# 5414df62a42447798500bfb083a697af
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:481
# 39ffa13dd8e044629e82701ec733b080
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:484
# fdd0f9a297d64c599bce5a0d58122adb
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:485
# 74bef62fcf004521849185e2aca1b46b
msgid "In |chef 11|, when output is to a TTY, the |chef client| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:487
# dde8304ea5434855929a7f253dd6e761
msgid "If you prefer one type of output over the other, you can force the |chef client| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
# 37e4e19e4af54c1a9c63243a0cfd17e7
msgid "In previous versions, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:492
# d5f0b1b37ca94eccbf1e735d734637e3
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:493
# 9c8ffd632db94b9f8e44c375a1e0905d
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:496
# 97b769a875984fa2a124eebe78cdee77
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:497
# edc0e6130a16444c9159c3b87dfffdfe
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:499
# 08bbff4010c74c27bef8152471be457b
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:500
# 61b680b4af2343adb49bdaeae2d19bb7
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:501
#: ../source/breaking_changes_chef_11.rst:509
# f9173d2d27bb40688b0cf27d75e1a404
# 46ac8f0cc5b04652b899b2d198e93729
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:503
# c516ed30dc5d4ce7a19574ba6febec0a
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:505
# 1f0c0a8cc5a448efa6b2dfcb010ff966
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:506
# b1faa2568d4145e1943626fa5ad91a74
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:507
# a62da77b4a7c407fb8382bab6fa33fa8
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:508
# a06edd9e8354451fb448dc210809cf5e
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:511
# 95562e64b8114effbe18a0bd53b3b6b9
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:514
# 92fdda1bd8254a6b8f488c62cde737ff
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:515
# 0727401899324c0e8ca0adddd0613fdd
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained |chef client| run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded |chef client| run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:518
# a92088f7739d493dab5f99f971cecbe0
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:519
# 1959831b832b4732848a9f751d25c525
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:522
# 94a1220ed4154f9681933a774c91a474
msgid "Partial Support in Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:5
# e8d37bec5f9b4399b3a98f2ac4cc3f6c
msgid "A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:7
# ea1d4d6abbbb4600aef8afc15e8ba786
msgid "By using the |ruby| ``render`` method in the template file"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:8
# 4df3d0b278d1494ca31f72c51602b32a
msgid "By using the |resource template| resource and the ``variables`` parameter."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:526
# 47450a1f67de4e199ebc1c847cc6088b
msgid "``render`` Method"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:5
# d6d6f241d5c74894b467614ab3497e47
msgid "Use the ``render`` method in a template to reference a partial template file with the following syntax:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:11
# 82397fe433c44ed8a4cb3352c49b0fd1
msgid "where ``partial_name.txt.erb`` is the name of the partial template file and ``:option`` is one (or more) of the following options:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:17
# 397f27dbf59d44d88f3fedc34d0de03c
msgid "Option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:18
# 37999d69346b4b7ca6aa36dfb9a88a80
msgid "Description"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:19
# df93211033504306a0f6b0a1d394b27c
msgid "``:cookbook``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:20
# d44c9a6760664e94a4a92fb303a75f32
msgid "By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:21
# 3cbc1fe6e260481cad2d2b362fb8db7c
msgid "``:local``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:22
# 1300f076548f41e0b7ded98b852f3f67
msgid "Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to ``true`` to interpret as a path to a file in the local file system and to ``false`` to use the normal rules for template files"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:23
# 80c90246a62f45fa9b1f0ed22ab91b98
msgid "``:source``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:24
# 5af098f85eb543f687f2973b21c53c33
msgid "By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:25
# f1017fc1f481402e8e7edce413f46c4b
msgid "``:variables``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:26
# 7724be296a2a45028ca918401f14296a
msgid "A hash of ``variable_name => value`` that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:28
# 275c15cd4b88494dbc8897433badcf5f
msgid "For example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:530
# 88147e11edeb4eacb0d3a58481ce8873
msgid "Template Resource"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:6
# 64610aa501bb4fd4bb7c2d3c1cbe4743
msgid "The |resource template| resource can be used to reference a partial template file by using the ``variables`` parameter, the ``:partials`` option, and a |hash| of partial template files. For example:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:18
# 70632c6e4a034d83981c2d324217d7dd
msgid "where each of the partial template files can then be combined using normal |ruby| template patterns within a template file, such as:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:534
# 306f0b3a23ea49ec94f8f3db89cb24f4
msgid "|chef apply|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:535
# e76d533ed0c94988b6714a300ee8808a
msgid "There is now a ``chef-apply RECIPE`` command that will run a single recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:538
# b12ee4188d4d443b8711855b2c9fde8d
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:540
# 7bb47145063545f1bc109eee83476c9b
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:541
# 75397f546fb048e99f6e3b5d6b853d44
msgid "|subcommand knife search| assumes node search when the object type is omitted"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:542
# 736ea18291eb41c8a40b25207bcb2e7a
msgid "|subcommand knife search| will search over roles, tags, |fqdn|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:543
# 624992793a5c44ba92b5b820e9e56134
msgid "|knife| essentials (|subcommand knife upload|, |subcommand knife download|, |subcommand knife diff|, and so on) have been merged into |chef 11-0|"
msgstr ""

