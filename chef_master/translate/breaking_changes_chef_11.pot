# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-31 13:34\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:8
# 5aa5bc1fddf744828b6c853021f2a257
msgid "What's New in Chef 11.0"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:10
# e4bd0f19f7dd4b19a87bbf7bc509fbc3
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:12
# ff6a3493385e47babb6432dfffb6af8e
msgid "The |chef client| 11.2 release is updated for Ruby 1.9.3-p484, which resolves a security vulnerability that existed when using prior versions of |ruby|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:15
# 5305003b229a465eab12796d98a88a8f
msgid "|chef client| and |chef solo|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:16
# f4c10229ec6247a2ac6d12ed71ee9a47
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:19
# 605af3a2f23f41828e4288b063c28030
msgid "Custom API usage and Databag Population require Chef 11.6.0 or greater"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:25
# 06e5a6ac46ca441b86c0967b9d2becf6
msgid "This example will fail with Chef < 11.8.0 and EC11 or OSS, as the /data endpoint has become more RESTfully correct."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:27
# 06c39f88c6e34a1aaf3445282b5a3be2
msgid "See https://tickets.opscode.com/browse/CHEF-4435 for details."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:30
# 099cf4ef6375460db9cf4231ed024565
msgid "|shef| is now |chef shell|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:31
# 72048eea673440e6a25b8cc77c14e06a
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:34
# 79a0b2805d05482b8c7b2bcd280c2caf
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:35
# dc80768ec41c44f9bede4d14d7f43de2
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:38
# 4b24de7ef4ca4916bce1051d6f64dd1d
msgid "LWRPs AND Recipes Both Now Automatically Qualify loaded Gems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# 2ebf4f54853c4a83877ee34f22fdae33
msgid "Previously, in Chef 10, one could do the following in a recipe:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:46
# 6debc5d501b74d38a8c23b8f97316d8f
msgid "In Chef 11 you must add \"::\" to the beginning to avoid the automatic addition of a \"Chef::\" qualifier."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:54
# b61b267396404f1bb5f9535ab4b432d1
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:55
# 2c66e2e2ebd746c593ae5504eb8ddf06
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:62
# 876c4d59e45c451c8fbddc246ba11aef
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:69
# b2e2f388ccb148d1b3a32f0b99fe9f9f
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:72
# 9c6ad1630db148f7b5c7a4c40e6a91c9
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:73
# 5f5591d0f4b54b46970d81604c84815f
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:79
# 6e42f83b01ee498ba6b66785edb335ec
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:86
# c196d48a3ca94193841669aae48db738
msgid "|knife| Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:87
# 7f06c57d53b14b0a8ddacfaf845b9948
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:107
#: ../source/breaking_changes_chef_11.rst:154
# ef12a10dc92945db97a3a8076fbd538d
# e97d2a68ab7b46799bcbcb7bed34cb24
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:129
# e366972363514cb0a89ac6467f1ded8e
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:131
# 2aa2705933c24245a5339a476cc72cf5
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:179
# 25ad3edee8744bf4ad9be47ed528101c
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:180
# 2fefe18a616742d0a326638654ee162d
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:183
# d5539c3df9e74487b977a2c195870df4
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:184
# 97ce4ac1a4534121a7d47af10a8f469d
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:197
# 79aa715aba254d1b81f23df680303807
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:200
# ccac11da84e84991b6c4a4556e0bc2da
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:201
# 14e60bb6e0b342138976139eda351517
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# 704534f4f1714e68be06b72af93b7b72
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:212
# 4576f4d7dd124eb5a0582711bb24b59a
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:214
# 925d6704f00b462d8fbf5a58bab3590b
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:224
# b9e54c2af5e84872ac27e85ec695cf63
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:226
# a7529b177db74db5b89409313e3c78ef
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# 1c7046b8e0d34183bfd65dfe62e0ae68
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:230
# fccc6d892adc4586987f98ba00c2232d
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:232
# b58c0962c6184aaa862c1749a5fa96a5
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:240
# 71127a33acef43fbabc165de2d28c077
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:250
# dad9f353399f45319555484ab2ec9c66
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:251
# c9b8ffc140c74829935b8f605aa7b4a2
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:253
# 1837b6613f444b4db34429597bb98e5a
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:256
# df54ed7b21aa44809b9f434362606d7b
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:257
# 123c79dde432492b9f2669eea60fc23c
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# 199a9ba9eb1648ccb9864984bfd89392
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:262
# 904b286603de4dec9f941df1d9fbb260
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# 58819060dfd446a88bfb177dfe63494b
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# b23b633fde2f461d8284f88548997513
msgid "The |chef client| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:267
# 38a4a53837cf465ea80cf1622571d6ec
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# ec1bcf02ddc94fdca8d67e9f6553dcfd
msgid "An unrelated resource fails and halts the |chef client| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:269
# 0182c687c5b84e7abb77572675da4f79
msgid "Subsequent |chef client| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:271
# 9811f691a18140e5811d5e74b1982ae5
msgid "In |chef 11|, delayed notifications will run after the |chef client| run fails, and will be executed even if other delayed notifications fail. Conversely, if the |chef client| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:274
# 7fd33326b97e4ec2b931f6b0cbdd62f6
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:275
# 559b964a2ba447a2b882c211b86c0af2
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:283
# da4187c080994822bba12e7756b33ee9
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# 3714aa3d422146a290a968ef5be67cd1
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:295
# 9315e8abd39b4a059138c2f67539a324
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:297
# b00a071a428b4c02a4697860be3a303b
msgid "Because the corruption is silent, there is no way for the |chef client| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:299
# 75fbfd0510534135bdf2ed0d177e47d7
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# 92b61d63e2ed45889d606ef3b1858617
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:301
# 2c31a79e155b4880ad0ab577fee44603
msgid "|chef 10| clients |chef 10-18| and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:302
# 66916ecd8a7c4759998831e9721b2071
msgid "|chef 10| clients version |chef 10-16| and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:303
# 7227d50109064e329496deb019398e02
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:304
# e02b6624ba18484791015177cb9a4f8b
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:307
# 807674e153894bd883e378798ec9afd0
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:308
# 7c49a969f8e04353a24ace0a08b3a1a6
msgid "When trying to decrypt a |chef 11| format data bag item with |chef 10-16| or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:318
# 2c548e65895d43618518122f43402f0a
msgid "The above error output is from |knife|; the |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:321
# 68d53b231b084c87871421f6805dcd01
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:322
# 2d366b0f88474fb7abd64ced375e5099
msgid "Before upgrading on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version |chef 10-18| or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:324
# c40244ff54a74ca8bec0048c31fc6c79
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:327
# 18594b30e986414d918a0ce4ab4a2718
msgid "Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:328
# eb5547c2cec744579c632e30a0651b21
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# bc78581d0eda415fb9a76084b3ea5c30
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# 3fcf0e4f3659440a94059be3c75ea4b9
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# 449d70dc4fdb467c93ddd76a579eb20d
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:336
# 6dbaa57ed9e4495bb924a030c53d66de
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:337
# e10bdda7604a49a7a1820fc9101c9b52
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:339
# ac9f87b3887a46cb8a77e93f5df3a4b1
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# 8f0ba59f23a5493b9ef0c278ccc92828
msgid "|knife| Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:349
# 9c4441de8beb4e43b37c5a6fea09deac
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:351
# 00702d7b2d6c401590513f83651aa390
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:352
# 1faf454d8031472e9e0e1ed81e963d2f
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:353
# ae1665b18cae4cfe97adfe133765720b
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:355
# fc0ed4feafb14911bc2d066a15e4f7ab
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:357
# 3be66f66469c4fc3a7d1600c04d10b91
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:358
# 543d7728fc524b049edf587aa3399dfe
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:359
# 1396733d5c704d7d853c01703f7c6838
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:361
# 2d1f082b18cc40738279d3a51967a543
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |company_name|-maintained cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:363
# b56f52a5e7a4411aaec5aa0825ad26d5
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:373
# f1c123f9f4b74b2ba5286f27aecdddef
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:380
# 71ba7cac09e74c4cb1e9f77e2e9914dd
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:389
# 904d43f4b51440449d3a740a2cf36b2b
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:395
# e3c384f255e84d5491ee7aef42bb6622
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
# 3b226da96e4a44368799886e93fc1a1a
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:400
# 4b6c34ad20384fd39561e93ee0eaf401
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:402
# e8c7ee0c919b40e187c64ca78b71842c
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:414
# 5135253cb0c94ca7896acbec6fd9d370
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:417
# e26bd9c22ec54e2ea575f7375881ad91
msgid "The Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:418
# 2c5efdb1d3f842e499f9f46ba89f71d4
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# 67561ca79973497381e71c4991f0ee2f
msgid "The /clients endpoint returns |json| with a |json| class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:422
# 6b0f378b36444f7f97c0c4368a4ad95f
msgid "In |chef 8|-|chef 10|, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:424
# 0392b26749b04b5c93dd15196af18d7f
msgid "This change breaks the ``knife client reregister`` command in |chef 10-16| and earlier. Forward compatibility is introduced in |chef 10-18|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# 244d59be009b46cd937e42ce260949b9
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:428
# b379f7e1d80a4281a36155170dc1bf3f
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:430
# cd85d9d27c61480db867cdfd67769b29
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# a499658de76341e4a8f4e37ea5c540df
msgid "Strict checking of top-level |json| keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:434
# 0041848076dd4314a64410975b9166cd
msgid "All API endpoints that process requests to create or update an object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:437
# e731ebf4f3e54daf837b8f15b8297caa
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:438
# 893b63884d0c4720aa7bcdeba96fc9dd
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:441
# 67dfbef731ff455cb22f490e550e49a2
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:442
# 8b67bd7d1fe64a42b6cf28a94b5a3dd1
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# 1e5d2d648dc24ede888b2026b5d1b68a
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:446
# 9a542e665beb4cf4971a16d5f49cefe6
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:448
# 5fd95177443b4e28b454db72e7cc7f13
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:451
# e3c06c678dd0466ab27db811ed9a0e24
msgid "knife reindex is not supported in |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:452
# 94c6475675004e31a9e5e3e50a43a79e
msgid "You can trigger a reindex of object data using ``chef-server-ctl reindex`` while logged into the |chef server|. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:455
# b59a507fa2104d6c9e6a47e454a23997
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:456
# 0f21b158028c4271b1ec68dc7b26161c
msgid "Support for |open id| is no longer available to the |chef client|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:460
# b18ee0c0c9304535b746d8296d8f4b18
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:461
# 17a5364817b14e7f8f279bed59e0fc63
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side have been removed from the main |chef repo|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:464
# cbef7f8479314f489ee503395bb0cd31
msgid "knife cookbook delete --purge is ignored by |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:465
# 96041c7a830243cb993e9dc6e1d72e61
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:469
# 8029ffe267634493ae5e23748a2b3714
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:470
# 0c5e9108f93e4b60a3255f89ed002011
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:473
# 00720b8172a14e2fa611b5e4615369bd
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:474
# 7d0ed4ccb2874150b545d479841cd8d6
msgid "In |chef 11|, when output is to a TTY, the |chef client| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:476
# bc835dae86ba41d59ee491fab6d33385
msgid "If you prefer one type of output over the other, you can force the |chef client| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:478
# 2291e65281f74969b47fc791c6c888e8
msgid "In previous versions, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:481
# 0d63bbe126554d25b32fcbf129f934c2
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:482
# f7398716fb0f40b7a9ab170b5d3e6704
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:485
# 5992d7ff0ea34f50ab12c2dc6b3b494c
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:486
# f13b7640af2f46d1ba0150743da2bd35
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:488
# 15721ced84aa42088560dcec679bf77f
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
# f77cf3ccd7d2432983c30dda29dd198c
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:490
#: ../source/breaking_changes_chef_11.rst:498
# ec3775aea63748d986b6e8d84d5cc184
# 007324a5fafc49118625800b1716ad36
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:492
# 5e250fc907c74dad834052a09871efbe
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:494
# 69898ca5335e494baeacdc52c62e4ab0
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:495
# 5f554e7b857541d390c0fe9f3d577876
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:496
# e8e4402025c94c37b297bdfa2bf3f557
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:497
# 6c7cfca071a849078f846b61a43ab6ab
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:500
# f18ec3829fde46ea98b1901a7a818aec
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:503
# 7bf9b243b139478281a43f9b0a4f6658
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:504
# 4dd7586e0e444784805b53df987cb0d9
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained |chef client| run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded |chef client| run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:507
# 675adfdad48142c690bf7e90aacff044
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:508
# a31d79cc519e47048cd6134f94c2a724
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:511
# a47e88de2c6a47a4b145231bd994eb90
msgid "Partial Support in Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:5
# 3022e74348fc4d648385b85f3aacd39b
msgid "A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:7
# 6e79bb108ac4414bbeaefe15e065eb1c
msgid "By using the |ruby| ``render`` method in the template file"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:8
# 4be61e943f1541b0ae6454250b61b470
msgid "By using the |resource template| resource and the ``variables`` parameter."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:515
# 99c9008e76bc40fc8158f2c38cdf7968
msgid "``render`` Method"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:5
# 3ce697f3eb3a454d93ddc856ce59caa7
msgid "Use the ``render`` method in a template to reference a partial template file with the following syntax:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:11
# 0a1d17e852db4583a2f4d33298908dfc
msgid "where ``partial_name.txt.erb`` is the name of the partial template file and ``:option`` is one (or more) of the following options:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:17
# d35faeb9e3fe4c83a0af93a804d1ea8d
msgid "Option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:18
# 21cfb48cf7e043c0a22194e75713dd00
msgid "Description"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:19
# 7456cb0a95c34aaaa51fc1555feb802d
msgid "``:cookbook``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:20
# c8630eedee0a40c2899f6c03799b64cc
msgid "By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:21
# 3c758b8816664dd98a6225485b3ee618
msgid "``:local``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:22
# e7e93432bd0f4c5e81e4878e204d1714
msgid "Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to ``true`` to interpret as a path to a file in the local file system and to ``false`` to use the normal rules for template files"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:23
# ed201671ca894e18a0a56f9c40816809
msgid "``:source``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:24
# b12923803b75426d91bf281c36d2ee36
msgid "By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:25
# 66de52cd4427481d90c24883dc0f12c2
msgid "``:variables``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:26
# 892f06b932b54724a05b8d4bcfe6218c
msgid "A hash of ``variable_name => value`` that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:28
# 0e89324fd0ae4bf183feae0c8328e389
msgid "For example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:519
# 8d41a554f0b44921a7181a650dbce420
msgid "Template Resource"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:6
# fb389ebcad69403bb90b24e8f123b321
msgid "The |resource template| resource can be used to reference a partial template file by using the ``variables`` parameter, the ``:partials`` option, and a |hash| of partial template files. For example:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:18
# de339047fc43456f9666c038a22b600e
msgid "where each of the partial template files can then be combined using normal |ruby| template patterns within a template file, such as:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:523
# ef261fa74b0b4a129458ea498e6fdcfa
msgid "|chef apply|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:524
# 7ca44652646f497096e039451c0f04d6
msgid "There is now a ``chef-apply RECIPE`` command that will run a single recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:527
# c09711d70d474dd19ce422cb98dbd00c
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:529
# bb649d044b3c4a4db09670b3c6dc7ef8
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:530
# 8dd973eca13d4acf8617bc620706c4fe
msgid "|subcommand knife search| assumes node search when the object type is omitted"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:531
# 5649252f53e740d4a7ead00bb8e16a11
msgid "|subcommand knife search| will search over roles, tags, |fqdn|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:532
# 9d0893215bb245048ad02d6f5b4ca6e5
msgid "|knife| essentials (|subcommand knife upload|, |subcommand knife download|, |subcommand knife diff|, and so on) have been merged into |chef 11-0|"
msgstr ""

