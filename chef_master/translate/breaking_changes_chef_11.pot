# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-09 00:07\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:8
# e7fe1fc212884c128790c938aa13e63f
msgid "What's New in Chef 11.0"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:10
# 815a940765e04555acbe1b5d7134c33f
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:12
# 6ad276dde1024c89a4c9044280f8ac66
msgid "The |chef client| 11.2 release is updated for Ruby 1.9.3-p484, which resolves a security vulnerability that existed when using prior versions of |ruby|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:15
# bfcdc916a9a14c0aa4de6bdc850704bd
msgid "|chef client| and |chef solo|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:16
# b11186ff31ae4bcb8dbcbd4755019ab6
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:19
# 2b463e8a861542a78c27a172774f9933
msgid "Custom API usage and Databag Population require Chef 11.6.0 or greater"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:23
# 8a969ca725154b6781b1caccd9cc9779
msgid "knife data bag from_file"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:25
# 18308a4c336d4428806c2c6c5bb7886e
msgid "This example will fail with Chef < 11.6.0 and EC11 or OSS, as the /data endpoint has become more RESTfully correct. See https://tickets.opscode.com/browse/CHEF-4435 for details."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:29
# 4d0fd90f35b8409a8f521d37fa51caf4
msgid "|shef| is now |chef shell|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:30
# 5e7887b35fac4935b54dc6141056b47a
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:33
# 9cc3525c2bb74400812f7271ac248233
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:34
# f9659d8e94ec4058ba15a71bf94e0bce
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:37
# dac00d78bd4d423cb88b97bec9057f43
msgid "LWRPs AND Recipes Both Now Automatically Qualify loaded Gems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:38
# b170df1c3d9444e1aa17f7f10cd2b6a7
msgid "Previously, in Chef 10, one could do the following in a recipe:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:45
# 5798aa845e4f4858852e3e0f6bb2e4d2
msgid "In Chef 11 you must add \"::\" to the beginning to avoid the automatic addition of a \"Chef::\" qualifier."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:53
# f30b081689ef46a797456c9f5c964887
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:54
# bc6c7ccc36ee45b8b20ce1f08001c508
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:61
# ef05133b613e4338a1f3e2530ed6907c
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:68
# f6032c82d2c04bcfa250d284abd6100a
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:71
# e9a3daac12a14a0b972c8dc5058bbb53
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:72
# 3445efa1887947aa80831226da956a03
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:78
# 2b75d97a2c8741f389577b1cb7694e01
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:85
# f1e2bc62c06942e982128db8e5a892ba
msgid "|knife| Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:86
# 625666ae14934d828c049fb49d7fdc57
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:106
#: ../source/breaking_changes_chef_11.rst:153
# e34fd15668074110b34438f9a0824f4c
# a2aec8dda37c4c77985f0a0c1feacfb9
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:128
# 29a3855c11f046cb95f146922c59cbc0
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:130
# 509c6dcd5849412b94af660b93a38193
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:178
# 1f85bd8197544314a2a29514041c6001
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:179
# c906542d19be43959aa6e22aba1010c2
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:182
# 00bb2124d1c84bfea010ae7fc56272a8
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:183
# 78cdc1596d0840edbf06a1392ce8c0e2
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:196
# 98af4042de1f4a95bac194e71df244fd
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:199
# 558beb6fe76b4d31b1cf9649b1166038
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:200
# 411f16a987c443f5a4988e8d4fcb8398
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:210
# 74f79c7795d0458b845e99b2b4ce9723
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# 8a5a93e234304055993e1c738bf9fed1
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:213
# 5b0858d116674df1a983ae0127ebf09a
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# 6ec8a93eb1bd4acc97f3474ba894358c
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:225
# a85e5c23e8284c1b9dff5ed24e15f8d5
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:228
# 6cdbf5911ada4b1aa4e20cb5e364a052
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# c7f0cce9c8e84b07b2e729317901656e
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:231
# 9e5d66e77cc94ad4b95ef57fbd190ad3
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:239
# 45635eaef705475dba0d37271d9da0f2
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:249
# ae54cbc24f364bdebb3e7ff3c7431f7b
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:250
# 3bf8b92dd38247d29bf40f855593f224
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:252
# fb9e593a77ed416cb32f7fcae2b9b87f
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:255
# 319b805d40754c39987c1e532190b1c1
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:256
# b287779cc4dd42719ea951a1e91d806f
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:260
# 543a5b536ff449bcb0f567ef1017e837
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# 5f9e2792fd7640e49694759e1bdbcc37
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:263
# 3234551a0f2644ee92c795147adb3ddd
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:265
# f39f7963afb7466484005d2390018ccd
msgid "The |chef client| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# e2381291c1a64494849ab053359c9759
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:267
# 03203ae6a3da4effa024ec663974cc0d
msgid "An unrelated resource fails and halts the |chef client| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# 460f41c1936e4276baecd03d75bda613
msgid "Subsequent |chef client| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:270
# 703d41726e294c20a1e9eabc6b4c12e6
msgid "In |chef 11|, delayed notifications will run after the |chef client| run fails, and will be executed even if other delayed notifications fail. Conversely, if the |chef client| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:273
# b3d084f95c26449a95a1f30442effa9c
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:274
# 2a194cb7053f4e7d82c8b65e350fd7fe
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:282
# 2755377865834f088af5a3dd5680312d
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:293
# f83bb4f966cc49ee8147864204778a91
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# 824730f79afd497a9b4ec170a74f348a
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:296
# 5bcae636281d4bccbae67c398f81e414
msgid "Because the corruption is silent, there is no way for the |chef client| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:298
# ba44ea6a3c284d25aa89c327234e34c9
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:299
# 1f2ab59744cd44c3a50de3e6e8b4ef31
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# 1ffd87d40b5542949daf511dc638a0c9
msgid "|chef 10| clients |chef 10-18| and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:301
# cd14b0e48f154e5e8492e01ecece53ff
msgid "|chef 10| clients version |chef 10-16| and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:302
# 6552c45b62674c3684d20be17eada4d5
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:303
# 4a351e9e9972442fae797153df628b1c
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:306
# 35b62f1bf5fe4b408937b7185d66a12b
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:307
# 22e49184bdcf44f0b6fc86b299a170f5
msgid "When trying to decrypt a |chef 11| format data bag item with |chef 10-16| or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:317
# 07dc2047856a49daaaeb69fbde11c734
msgid "The above error output is from |knife|; the |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:320
# 8dd41dc52a984059b5c595f0ffbd8bde
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:321
# dccd8ea4d0ed40a3a1d46b655f290fe8
msgid "Before upgrading on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version |chef 10-18| or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:323
# 79f24f928f654184817aee75aced90c2
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:326
# a1ee0f2fe3f34ff5b8d871f54618d7fd
msgid "Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:327
# c973518db9cc47a0aa280f32ecdc170b
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:331
# 3058985fafc4433d95e7adb9b39073d1
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# 7f23bef2e27847baa9df5fbfb330e72c
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:334
# 59c06e7c450845138d6c9f2c6ea2c6da
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# 3ba1c76345674cfc92580d76cd52e0ac
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:336
# 19fc34c192374455867ff6555cc1b503
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:338
# a4dac1daefee45e285f142c78760f000
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:347
# 4de47ddf7a134f72a7f61709ac9e0af9
msgid "|knife| Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# 86f14a42349c4c10876721b11fa43674
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# 838e1532b1c4475abc44328abc8d419a
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:351
# 76c01e9c5a9746a19a9fd0556fe8be9c
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:352
# 9fed20c50d5d4f3db0801cf36c8efd07
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:354
# 5d4ac49f6c6443a69e9a3a40687e04f2
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:356
# 21e88b8347a04a01804d4de72dbe593a
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:357
# b368be0fa70b4c89b519d06c3cbdadfa
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:358
# 909cbd7c4fac43329a30caad7e364dab
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# 5cd15e0e551040bbaf5bae5b4a1cb3e3
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |company_name|-maintained cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:362
# 2b0f77214d3f4b7ab6a897252f3faaf3
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:372
# 8dd831d2970949dabe074bb8f524d267
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:379
# 52e573607e7a4a8f8ba103a68e4faf60
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:388
# 7896e5b558c949abab1dc556f0062622
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:394
# b882f98509834fc6a3b274bc41fe95e9
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:398
# bf856bd39ef4453e8f68285c6c4ff70f
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
# 194adb1c4e494df9baaf0687de2c598a
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:401
# 61238a6fb569463b93bd6cc5f8a2227a
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:413
# f26492d3e2f14995b36a359bbd746088
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:416
# 8879ad99a1c846ac96e13d78efb9856a
msgid "The Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:417
# 6eec140bb15c4964845c0128d1771558
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:420
# 220fce63390c4678be26cdd22c30ada8
msgid "The /clients endpoint returns |json| with a |json| class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# 87e1bb758f6248cf9dea10dc32e26d08
msgid "In |chef 8|-|chef 10|, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:423
# eb4efcca89734811be0ab17bb7b57ac4
msgid "This change breaks the ``knife client reregister`` command in |chef 10-16| and earlier. Forward compatibility is introduced in |chef 10-18|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:426
# 8f0f784e1f1e4ceb96ecaa4097ef7201
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# d07e89d6f586449bb7f846c1815d677d
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:429
# 6476381890ce404fa381216975791559
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:432
# 7f39da61db6b4ddd8169d8683b9abd78
msgid "Strict checking of top-level |json| keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# 27e00c978b6344dca812458dc63ef017
msgid "All API endpoints that process requests to create or update an object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:436
# d706019feaa840cc8e2d9d88c0f3a518
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:437
# 4a4789f922d744b6a0566397cdd7dff0
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:440
# adf4b8c416cd482f8471f5d6e847af38
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:441
# db143e289e974a898c4fe04dbb44c685
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:444
# 410cb01769d544ff948824abc25b723d
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# a2a11c56aad84aa294cf4d799ab35e62
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:447
# 62a0720707ef4f259cf317a8e0a807e4
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:450
# 16014c8349f14459b32ac619fe6ffe96
msgid "knife reindex is not supported in |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:451
# 3e028a15d0ef491bb05735e659e89fce
msgid "You can trigger a reindex of object data using ``chef-server-ctl reindex`` while logged into the |chef server|. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:454
# 8c3638ad1e23496db8e3df15eba4ff6e
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:455
# 971b2e59b8974ca2964ba4a2af4d59a6
msgid "Support for |open id| is no longer available to the |chef client|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:459
# 967d8a8966434329bb4973a2614a6c31
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:460
# ec65643690414d3ba619b05868640518
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side have been removed from the main |chef repo|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:463
# eeeaa2be9a514ae59f9111de688052ab
msgid "knife cookbook delete --purge is ignored by |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:464
# 89e8f3dd2fc54de686b9ade075a3abf5
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:468
# f5e2cbdd2ec44a32bb5aca9696664e10
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:469
# cceef57d0a6941ddacac9258db2034b8
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:472
# 4c719ed6d3544ed0b4e4d3e5cecc7925
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:473
# 9429f74923284ba1b00b646b14f4058a
msgid "In |chef 11|, when output is to a TTY, the |chef client| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:475
# b66cbc94fa0c4c9a8c07f07d579841ca
msgid "If you prefer one type of output over the other, you can force the |chef client| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:477
# a21bf4ea84c7427b83ad6b63e5627886
msgid "In previous versions, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:480
# 0d9aae563f5d45acbdf8c96f0f0ea12e
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:481
# 5a9c7f8ac5af4e5a93f450dd53d88d46
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:484
# 80a1f9113f63492b87c243ba188f2e38
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:485
# 05a0725e44df4ea69eeff075a72b6f60
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:487
# 056eabe0774d49e990869745df56f0c9
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:488
# 7c695a35c72145ffb44937375337d1a3
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
#: ../source/breaking_changes_chef_11.rst:497
# 904a1f055e4b40bbbe685fdfeab71057
# a9ffe230a1e74e8daf2831a282473b80
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:491
# 5fec3d0e3e824dc78af09a05f2095daf
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:493
# d7a85800b0fe4680baa3922a9ea5df1f
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:494
# e5ef66d81d5e44b9a87cf834934bebeb
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:495
# b96035a730044db6b47c1652d7787666
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:496
# b8a2a5a5e9734925952fe5dd9f0a0dd4
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:499
# b5c14b0c7a464cbbbe66cb8161571da9
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:502
# 78170bc325b14291b3f587f260a1f12f
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:503
# f45ce7e9188d43b298370f37d4cab45e
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained |chef client| run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded |chef client| run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:506
# c4d1b2ed0aa842e980b02c10971f6f15
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:507
# e31addb3a8824a2cb47b18c31a566ef6
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:510
# d92770f298da4e57b8411effc358d249
msgid "Partial Support in Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:5
# 1baa0891d4ac4c75abceb5f0870b932f
msgid "A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:7
# 3c53374aa0424f6eb0a164920346ebd9
msgid "By using the |ruby| ``render`` method in the template file"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:8
# f64c1b04a51547c4a43ceced536ea611
msgid "By using the |resource template| resource and the ``variables`` parameter."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:514
# b46fbfdc9a4849309f838beb9a98df61
msgid "``render`` Method"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:5
# fc0e451979fb4cbb903a9b950d826684
msgid "Use the ``render`` method in a template to reference a partial template file with the following syntax:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:11
# b28dfed388c149ad84c0808071cdefa6
msgid "where ``partial_name.txt.erb`` is the name of the partial template file and ``:option`` is one (or more) of the following options:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:17
# 7fe58247b8024c30ac36a73439d68ce5
msgid "Option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:18
# d9ad7c5337fa4b7ab3528e4a59f8694e
msgid "Description"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:19
# 5b65044b0a964837bad8a0c360c9b68e
msgid "``:cookbook``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:20
# d27d1d683d41444f9565f9534111b11e
msgid "By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:21
# 61ffb425b68545289501154d60847626
msgid "``:local``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:22
# da0946dd05f64855b82b315cc825cc04
msgid "Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to ``true`` to interpret as a path to a file in the local file system and to ``false`` to use the normal rules for template files"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:23
# 3d20f612927040d2a075207281be3d08
msgid "``:source``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:24
# 057360dab5664965a1579aca0b0c97be
msgid "By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:25
# a83ff085fe664112bef2c9d7f928fbf1
msgid "``:variables``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:26
# adc990a6a30f408ab6f772ec682855bd
msgid "A hash of ``variable_name => value`` that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:28
# 0ca4522ca196460faf88c205fea49159
msgid "For example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:518
# eb2fe54262374327aa02561e5beecd79
msgid "Template Resource"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:6
# 33c481c6425b4f04a77610c8f44e2e6c
msgid "The |resource template| resource can be used to reference a partial template file by using the ``variables`` parameter, the ``:partials`` option, and a |hash| of partial template files. For example:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:18
# a4d4f7b3c1ee413e952c5c906e7a5835
msgid "where each of the partial template files can then be combined using normal |ruby| template patterns within a template file, such as:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:522
# ef004fd17dd6410da3ddc5b5da2f7bf7
msgid "|chef apply|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:523
# 695a866581604a27ab5416ecb27915a9
msgid "There is now a ``chef-apply RECIPE`` command that will run a single recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:526
# 9a1bfff390d347f1860db2b033396970
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:528
# 441afe1b9b28474f8e1ff6fe77f9dede
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:529
# 90658b0463ca437c9b37086cdd3085ae
msgid "|subcommand knife search| assumes node search when the object type is omitted"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:530
# b017c18ffa9c4dbca0fad66026bb17cb
msgid "|subcommand knife search| will search over roles, tags, |fqdn|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:531
# a91625e1ca4043aa9810c1dba6d966ca
msgid "|knife| essentials (|subcommand knife upload|, |subcommand knife download|, |subcommand knife diff|, and so on) have been merged into |chef 11-0|"
msgstr ""

