# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-09 15:33\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:8
# 61a1d5fa756745e0b6e599bbcac6bfd0
msgid "What's New in Chef 11.0"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:10
# a9c7aeccf59c4628b6baf7d1d899c62b
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:12
# 9f690e43a3fe4b69ab34c96a50d310e8
msgid "The |chef client| 11.2 release is updated for Ruby 1.9.3-p484, which resolves a security vulnerability that existed when using prior versions of |ruby|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:15
# a338f057c2b54668981838e792b9aba9
msgid "|chef client| and |chef solo|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:16
# 8503eac8dca746d0bf928ea4ca05c955
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:19
# 630e48d2d19f45d0b7cbbc849a7bf0bb
msgid "Custom API usage and Databag Population require Chef 11.6.0 or greater"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:25
# b8f29ca0badf4e078da29abb52f5fdcf
msgid "This example will fail with Chef < 11.8.0 and EC11 or OSS, as the /data endpoint has become more RESTfully correct."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:27
# 6f6c5d82a60f477eae55f213f3bb0943
msgid "See https://tickets.opscode.com/browse/CHEF-4435 for details."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:30
# 0d1741bf9d634c0b9a90c0e71d08e020
msgid "|shef| is now |chef shell|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:31
# 311985592cb6461f80f129d7a08ea559
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:34
# a0c12705ab2d407585957ff431bc8168
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:35
# 217cd2ea4c8d43dda074742a2d741397
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:38
# 23d37edc65dc444bbe1d2bdc40e23ff2
msgid "LWRPs AND Recipes Both Now Automatically Qualify loaded Gems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# 7dbbc5a6c7a948d59769b76882fdbca7
msgid "Previously, in Chef 10, one could do the following in a recipe:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:46
# 2dd167f867b44500ad70bcdd142b79fa
msgid "In Chef 11 you must add \"::\" to the beginning to avoid the automatic addition of a \"Chef::\" qualifier."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:54
# 6c0944aa95b642768fd72b8ffd45f417
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:55
# 9708974510434b5198dce10b7a00422b
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:62
# 94866736d32546d3b24b382c8c925fd4
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:69
# 4ac5f69b27d2477e8d5799fe595b0722
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:72
# ee38914251b94d0ea4705bb747a9f755
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:73
# 96755bdff4a44f3abab66b5011310792
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:79
# 74c56a1b9cd04477b5989dd53a7b95e1
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:86
# 76e7d64ad35b4227a0cbca9156bea1c0
msgid "|knife| Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:87
# 79ad0391953b44d78b88d04ea5790524
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:107
#: ../source/breaking_changes_chef_11.rst:154
# ea65269f7d3b4ae5a53b0208f71fee20
# 23155aa941e745ba823e669c448dcefe
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:129
# bc35cb5b173045ff98738415fff0b383
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:131
# c134050d7ff641fc93a8ad29d954c5e3
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:179
# 5af9acb254814cf2a18fe1e9b886afab
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:180
# 018e928ab89a4a55810deb003b455bec
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:183
# d042a4bbf68c4bdb889e50b99ccff0d5
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:184
# d73a36109d5947ad94391d02a67f3149
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:197
# 3990103c545b4b8b8da386d177413d8d
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:200
# 5e272c7db96e4b8ca039cbdc83041b20
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:201
# fef431c5098d407fa32d7360973fd0e9
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# 82f4ce0f1c004de3b270c0a0d5e2bba9
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:212
# e7dec07836d148b893010b7f8fca5e74
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:214
# 6f608f92d5834072afaab770092f7779
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:224
# 33e8b226ba024a1291f9066457abf697
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:226
# 7ab1928441f54d4ab68fcadf047a97c1
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# 7ffb95db623f4a6bbdaf0fc88d0d023d
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:230
# 068913b660d24b9a87eb6ba577a91039
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:232
# 5d1165fe85dd4cf2ae8adb6f58961d92
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:240
# ff2ef1a2eabb45508ed8ed330c715d38
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:250
# f0334b42bce04c2ba3a6084cea31b506
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:251
# ae5d810ad0d04e1cac0488a41d208009
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:253
# 9541d6e388f74e87b8f0665d70d0d588
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:256
# 1b4496ce52cd4e359c2607101e5093fb
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:257
# 7bc41368113a446681d08f1ed3f0ce7e
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# 6d0229a48c2442d2891b4268c3717571
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:262
# d71f0b196b244fbeb45325cff3907b64
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# a12ba31ca675414b9ec32035455e9043
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# 302f16298e0740bda2a888aa83d87a8f
msgid "The |chef client| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:267
# 21dcc633bce14a3488354b11b557d101
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# e30f0530637943b089eb5df642a93d78
msgid "An unrelated resource fails and halts the |chef client| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:269
# 8c0e573a46f74379baa70c1f709fdff2
msgid "Subsequent |chef client| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:271
# f795e6c8e4324e4cb57063543736f84c
msgid "In |chef 11|, delayed notifications will run after the |chef client| run fails, and will be executed even if other delayed notifications fail. Conversely, if the |chef client| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:274
# b0cfa3f6ec2e4e10be80dafcb9c85fa4
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:275
# c39c0b343e7f47c396e3733e01b0cd89
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:283
# e205793292064668a975e4884ef2636c
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# f7a24d9677114f969c464c84afe83675
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:295
# a1c07ae7cf0048e8b8b99d73cc6ad295
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:297
# e91e2f4420ea45e9bef8e2e5cb4df5c8
msgid "Because the corruption is silent, there is no way for the |chef client| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:299
# 9a1943290b1741c583412d722882e479
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# 67e5a9300b964304b92a7e154fcc60a8
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:301
# e33b87247df84fedbe319d371fe50b8e
msgid "|chef 10| clients |chef 10-18| and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:302
# 32d3570e68fc42ddb1c81383b37cf19b
msgid "|chef 10| clients version |chef 10-16| and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:303
# 8d248df14c5549a6b855afff98349599
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:304
# 28958e7beeaf4bce8f92f25c946fe0da
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:307
# b405dfa1c3ee45bebe74ec7a9a3e2804
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:308
# 08d8b24b54e940bb82b22c1ef4d7a0e0
msgid "When trying to decrypt a |chef 11| format data bag item with |chef 10-16| or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:318
# 2f958a3aae53418f8f86a56376d6960e
msgid "The above error output is from |knife|; the |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:321
# f8c4dcd09e7c466d837979e62ad17c03
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:322
# be1d9f23f5194173b6a045f22af1180d
msgid "Before upgrading on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version |chef 10-18| or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:324
# 9d15e000acbd4233a5743c29608253e0
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:327
# 40d9449a7cb048cab508459a2784e86d
msgid "Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:328
# 2f18275c8cb5421d872325f14775c067
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# d36303d4f051411db4bb6d4b2b103723
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# e80771bfcdc6425f80d70760ed4e90f6
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# 0e333f3f9d13494083e50a71d23e52b8
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:336
# 2ad9eb42516b406785d06f02440c791c
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:337
# 03dbebd92e7245329ca6da5aae5b808e
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:339
# 54bef7509ab64aaf991b5722db8beaa5
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# 733c086769184713961faaf6b6c8fde8
msgid "|knife| Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:349
# 513e65f307644656a3ef46ef27fbddfb
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:351
# 350eb3b5e0b342598c194aeab832a5b6
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:352
# d7fbf3d22c91456aa966dd0481776cf4
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:353
# 2b6ccb577f9d427fb4bec117d65f20c6
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:355
# 6d864a4edaad4880bab7345399423a1f
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:357
# 4a2cca4d5c904e3e8940e283d3ed7cdb
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:358
# a07cb5baf2404d89b79dba260951f06c
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:359
# 51bdcb267c274e2d90249f2b2e92cad5
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:361
# 93e68ba675da4e8bbbcbe0a921ac5c97
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |company_name|-maintained cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:363
# 04dec95cac034c9d91c6314552d6aa1e
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:373
# 595edb6853ce430c969ac2c9316a4f06
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:380
# c023082f42b04032923347c066b5bd7b
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:389
# 164709b940e94ddfa6c871011dd3075f
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:395
# c298cdf4dde2472ba5cbd7d38b51acfd
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
# ac2aa305b60a41f5b0882f9cf52cd12e
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:400
# afa7de070ec74d2d9d3682069c5d869d
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:402
# 8d7b38804a9743119f899f773eb03682
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:414
# 8bbea02e531a4521b7978a72754215a6
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:417
# e2b563a419a54cd09f8c31c708cd9314
msgid "The Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:418
# 575e8c0086e54c53ae72836e4b15a603
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# 3a609c0004e74627896d40e58c1e0c30
msgid "The /clients endpoint returns |json| with a |json| class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:422
# af9f67233d604dffadddda9733598954
msgid "In |chef 8|-|chef 10|, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:424
# 9a3b004b4f014880808d31beaeeb4ddf
msgid "This change breaks the ``knife client reregister`` command in |chef 10-16| and earlier. Forward compatibility is introduced in |chef 10-18|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# 9cbd95bc4e664d1d9c8c78ee1c68f355
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:428
# 2e700346c9084bec8611872a7eb16256
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:430
# 36a590c4737045c7a37eceb1cc70740d
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# c769d8b3da2744bbb24fc253742d90f8
msgid "Strict checking of top-level |json| keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:434
# ed9280d1fc094ac19613e583f806888d
msgid "All API endpoints that process requests to create or update an object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:437
# 82368dfca23f4adfb3186726685940df
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:438
# 38d7ee8929c647e289a12b5856c81043
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:441
# 1789735cfb4b4a0eb58c6760c48650e7
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:442
# 2821291a198b4867b9ea0e9f1c2dbbb9
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# 5517b217dcb1494c8175f0b5b0f10edd
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:446
# 9235aae2f6ad40c9b9163e5cd9489004
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:448
# 3c44c1cc74d44269b70aab4b673171ba
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:451
# 779a5dc63efc4557ab2655624bf3ca7d
msgid "knife reindex is not supported in |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:452
# 9af0dd2841b04a2f89b953dde5ca1917
msgid "You can trigger a reindex of object data using ``chef-server-ctl reindex`` while logged into the |chef server|. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:455
# 713d7c51879346bb97f7eeb64585f82e
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:456
# e1e2b725498a4846976d937805fd752f
msgid "Support for |open id| is no longer available to the |chef client|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:460
# e412262899544061a1883b46e7e2591f
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:461
# 652a56e0109c42c69877bae1d7f823d5
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side have been removed from the main |chef repo|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:464
# 632a236d794846e1916b0b06b343c94c
msgid "knife cookbook delete --purge is ignored by |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:465
# 11e48f486b44495b911fb222cfa6204a
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:469
# c35d1e799a5c4e10a3a52b47faac1c8b
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:470
# 8203981ffda345868a25b5d45c3b7cf2
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:473
# eff0e7eac3b6437cb5450a9640781402
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:474
# c8ddaca1c1724a1fbdf1eec4983ebdc0
msgid "In |chef 11|, when output is to a TTY, the |chef client| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:476
# 52a9672af6e04d00a8353b31bc2e1a6c
msgid "If you prefer one type of output over the other, you can force the |chef client| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:478
# 42cd8cfed074428f836f1cd23bd30ae8
msgid "In previous versions, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:481
# 068e1b9ce41f40759a2a45094cce8a27
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:482
# 8b2705d2fb8f4c1fa007613b10ca2c9b
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:485
# d395674f38b04f77b855cb6d41d67c44
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:486
# 1f916d4e775a46189f26db048fa54e86
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:488
# 19cc217d2651415b80258f54f5a1690b
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
# c636c68918254c069e4c7d0e69a7ce06
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:490
#: ../source/breaking_changes_chef_11.rst:498
# 7ab8a12c5c44430cb9c8cfd0d81f293e
# a5e505d969a743cdbe2e94e489e0f980
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:492
# d64a2634d0de42348a69f06f83f1fcee
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:494
# b231b916174b4c3a8a8914ad0bd71018
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:495
# d6e2fe3c8d494053a89628e7f401e18c
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:496
# 0b35fda8e9424c358d0f9968d0d3ebf6
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:497
# e7f3b632bd18454a875e07abf0fa28e5
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:500
# f290d8c8f9944b3ca520aaf81421681c
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:503
# ff825194bc52476eb6d3b00e654c2c7b
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:504
# 5379e3241dcc49a9b5c5ab512512fa84
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained |chef client| run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded |chef client| run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:507
# 77d88aec0c4840c4812156e5f156ee80
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:508
# 197d44680ba84fe58a94e33c9d67c0fd
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:511
# cf1b8915417c4e189271041696d2b089
msgid "Partial Support in Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:5
# 53971465d3d541a28a77141560534743
msgid "A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:7
# 685f2629ffc64b8ab091f093311ad0c6
msgid "By using the |ruby| ``render`` method in the template file"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:8
# 0467f950661b49f89ecdbb7a97511f82
msgid "By using the |resource template| resource and the ``variables`` parameter."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:515
# 24f554b9c30b49d6b2d4cc22b96a2943
msgid "``render`` Method"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:5
# 6115f8e4959c4516b56c49562eaec447
msgid "Use the ``render`` method in a template to reference a partial template file with the following syntax:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:11
# a84c33b88462431f91f6fd7d2c740fc2
msgid "where ``partial_name.txt.erb`` is the name of the partial template file and ``:option`` is one (or more) of the following options:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:17
# b861935fda0c4dfa9c64e956ae90250b
msgid "Option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:18
# 433d3205289a4d3d8c6702b0fb53a1e1
msgid "Description"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:19
# 2620f3826261421e91439c9cf11ba078
msgid "``:cookbook``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:20
# 326b8f641a924d3f8bdcc59f565c67eb
msgid "By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:21
# 3b54fd11f60a4804b067b18baabd81b5
msgid "``:local``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:22
# 3a0074251918449f8243037d4f7f18bc
msgid "Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to ``true`` to interpret as a path to a file in the local file system and to ``false`` to use the normal rules for template files"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:23
# cb47b49603404a059d7f476f0d6c81c6
msgid "``:source``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:24
# 6d0e3866a966406db25f3100fad4fdd7
msgid "By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:25
# d9e202acdb8541bfbcbc6be6b6e23925
msgid "``:variables``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:26
# 6d9eab5df8114d599c795d0808ef7db8
msgid "A hash of ``variable_name => value`` that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:28
# 1fe31fe90c794b6ca34febda8244d4f1
msgid "For example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:519
# 35e26a226e844890a2db9fc4998a5e6b
msgid "Template Resource"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:6
# 99238f023d844cd39a9c662ce0a0efba
msgid "The |resource template| resource can be used to reference a partial template file by using the ``variables`` parameter, the ``:partials`` option, and a |hash| of partial template files. For example:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:18
# 5410f9d2c1e84e17b1ed90c9c6a1f99e
msgid "where each of the partial template files can then be combined using normal |ruby| template patterns within a template file, such as:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:523
# 87d804a7fe4b4ddd9f736678f846921b
msgid "|chef apply|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:524
# a69bdf11d2964ca5937bb05feb65989a
msgid "There is now a ``chef-apply RECIPE`` command that will run a single recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:527
# e6e4879649d74b2bbd16f828b5d2ba26
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:529
# 894f5e1d57014245bddf89cca4edff72
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:530
# 4403bbf1d27a487ebb4e4f5023cf9f41
msgid "|subcommand knife search| assumes node search when the object type is omitted"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:531
# 8d163afd084f43649aee759694f35150
msgid "|subcommand knife search| will search over roles, tags, |fqdn|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:532
# 41e31d1d29bc4e91b099a7ebdadef520
msgid "|knife| essentials (|subcommand knife upload|, |subcommand knife download|, |subcommand knife diff|, and so on) have been merged into |chef 11-0|"
msgstr ""

