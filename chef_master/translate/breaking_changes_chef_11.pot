# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-06 17:52\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:34
# fb71ac30512544ec8029a44f6cd0ce87
msgid "What's New in Chef 11"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:36
# f0a638f11bc34123a80286ed732aa6c3
msgid "The following items are new for |chef 11| and/or are changes from |chef 10x|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# 22581ad96d5b4730864ccf9f81eae478
msgid "chef-client and chef-solo"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:40
# da49752278fd4a678a604f67e3319946
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:43
# f018f144cdc84351adb2f0e39b3e89ca
msgid "Shef is now chef-shell"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:44
# 6a5c05f5a55848bc815213c0a2540fbd
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:47
# 99c46f1588054bd2a180a3ec9f1df781
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:48
# 3661dfd07fa14d608eccb3cb6f995693
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:51
# b7c5a20e6b34420d9fb1b781b5723b70
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:52
# b6a30d4a4ee841c2984271fe70a348ab
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:59
# d0652c864b684903912d747e44f83d93
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:66
# 69af627e148f4d80a19eca0118358125
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:69
# 8572c835e6f346c69c5b9421cc56db28
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:70
# 66921865df864063ba54edea4c5e049b
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:76
# fa84e84e40e54eb994bb4abf205ac23f
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:84
# 508893a7e3bd4e90bf0811c3c412bced
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:85
# 0bbd7c6219f64abc972e65626e8a27bb
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:88
# a08eb49216d04ef6a69f115b5727f16f
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:89
# ca0dffd69123480bbad3e836bf8ba02e
msgid "In |chef 10x| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:102
# cac6a0ecf9c84e09ab450a0ce23f921c
msgid "In |chef 10x| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:105
# 63ecbba55f6d43918852fc5ecb17ccd1
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:106
# 42bec0d3dd8d414dbcbd849e03b482a3
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:116
# 5541a3fedebe44b4bd91a329383fe7a3
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:117
# 4b84c245438149fbad28301dfaac5dc2
msgid "In |chef 10x|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:119
# 90db0555f759485a998947f8ae5148f2
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:129
# 14d4270509c1449799d14e0cfdc2b52d
msgid "In |chef 10x|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:131
# c014ce6094d34e53aa0cf6e303251a1b
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:134
# c930fca8643b4ef5840f64bcb8294bed
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:135
# fa0ab9ced652479c8093131d9916402d
msgid "In |chef 10x| and lower, you could see which recipes had been evaluated by chef by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:137
# 0c317fc51d55457986203f78e4c08316
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:145
# 1ed2de6f89a940cdb7e83f23ccfe1613
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:155
# 25ca32a3bbc94d2aae747209002e6b82
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:156
# 3d5e6f97238347d4a1476db0f3e9efdd
msgid "In |chef 10x| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:158
# 6967ee555a814930bf765e5b15200a1d
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:161
# d62cba3f58ad48f9b3644ce270b0c1d8
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:162
# c83de74199044291ae2c8e501adae777
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:166
# e3d47c5602f549a5a2343164d1532a45
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:167
# 83b3a29e97b042bc913e49d0e5916ab5
msgid "In |chef 10x| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:169
# a7bb1989a4664f308aca8e83811795dd
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:171
# b0c7d7bb2ec0404f8b682554a75e97d8
msgid "|chef| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:172
# 5f435c0e32814e0e95180bb1efb393d6
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:173
# 3b9023897f144039b9bdeb1d88436da4
msgid "An unrelated resource fails and halts the |chef| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:174
# 6581cfd293254c8d898a9e54c0a03b42
msgid "Subsequent |chef| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:176
# 9f281f7f495e4d2ebca54cb95fb05e8e
msgid "In |chef 11|, delayed notifications will run after |chef| fails, and will be executed even if other delayed notifications fail. Conversely, if |chef| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:179
# 1cdcfaa981274cf4bf368cefa2de7ba0
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:180
# 9ef191bb61fe4449bdb06bc712338957
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:188
# 501853fe97ac45ffaa1ffb7cd4d3ff12
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:199
# 84ad17c185b5412c9d871537189c4900
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:200
# 11b5bd9d8068457296b17d14334cce73
msgid "In |chef 10x|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:202
# 07f37d83018545f189b066a5f2617fe3
msgid "Because the corruption is silent, there is no way for |chef| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:204
# 779504ab3cf540459f469bff290dfb7c
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:205
# 5ed967135de94b7a8a9e7a47c33de7f4
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10x| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:206
# ab15dbe3176c4e06bcd65625b4b20651
msgid "|chef 10x| clients 10.18.0 and above will be able to read encrypted data bags created with either |chef 10x| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:207
# daeb5d84f8fc4ec0b775afd10049f638
msgid "|chef 10x| clients version 10.16.x and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:208
# 7f0273a477ee4797bfc5e734577b1203
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:209
# 6da626a503804c8092ca82996b9cfb51
msgid "|chef 10x| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:212
# 82f5ab51b3ae4f7b8ece0ad03dd40a88
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:213
# fbb762a4a4ba4c8da63d9a4cbf8d658a
msgid "When trying to decrypt a |chef 11| format data bag item with |chef| 10.16.x or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# e68556c6e5bc4a6d9e5936ff3410ba70
msgid "The above error output is from |knife|; |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:226
# d0a84f3a333149c6bda7704ff7329dde
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:227
# 23e4f7dde8c94645a74ae302aa1dabf4
msgid "Before upgrading chef on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version 10.18.0 or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# 097bd0b1e52c4192ac3b75f528954ef5
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:232
# 2ea540554e0641d3a0ee01878a28f6ab
msgid "Chef Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:233
# 389c2e6d57cc43729378bd08115d8eec
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10x|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:237
# e47b6f10178c4a6285ba06b446bffe0f
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:238
# a5bb9dcee9a84922a22c1f0653067462
msgid "In |chef 10x| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:240
# b8b70f695e1a4969a5ad85cd026b2cd9
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:241
# a2c5db2a02f245b0806a6a1c3f428b81
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:242
# 746aced4fa9e407e81a07c0384544778
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:244
# 7580b96cdf074fa2a057208b47f008e6
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10x|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:253
# 2debee82debf41409077811f85e9eb91
msgid "Knife Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:254
# d31b2ef81c404b6da1edc8a0e51e9bee
msgid "In |chef 10x|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:256
# 02c4a3406e7a4e51a7119ad2caad071f
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:257
# 98623cefbfe04f4ba2881314c4305426
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:258
# f8ba5fc1d3a74b73aaf05e8c9f15a02b
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:260
# 7993c262cf7c40f2bf9d4899620dad22
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:262
# 73d71991417149af819be0b8753d4151
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:263
# 478b90d3f1e24865bf63a5ffa86f83c6
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# 14f08e312bbf4747b79a17ed8e4edd70
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# 2b3907c1f8354376b094b9a9d3d24baa
msgid "Depending on how |knife| plugin authors have worked around the |chef 10x| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |opscode| cloud plugins have been reviewed and should work correctly on both |chef 10x| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# 8a2e8739d5c143f796299448cb9879c4
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:278
# cd63caa45b8b4bc4b09bab0eaac02dac
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:285
# 2ea9d7d4477141719cadebebd0043c85
msgid "If compatibility with |chef 10x| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# 363b466c5f494d0f9eb162a851d68a24
msgid "Default values must be managed manually until support for |chef 10x| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# 864ef89840b04d99bd6bb94ec0265bd6
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:304
# a4e05f2476294c968b4fd55b5b1c610b
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:305
# b7e9a115dd774f1688ac50e560a16413
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:307
# 97446fdc83ad42f986b6f9968a944e0d
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:319
# e8014a0e93234416bf74930221a58421
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:322
# d46608b348bb4f4d87aac02cd8c38b30
msgid "Chef Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:323
# 7646ec7888f24e3581f1601497760cb9
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10x|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:326
# 1d4e39f94f2b413db0c50924afc3fea2
msgid "The /clients endpoint returns JSON with a JSON class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:327
# 98b565aff8e34786a7d609f6e1f4f3eb
msgid "In |chef| 0.8-10.x, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation in |chef| uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:329
# e3e6b9e6aa99474ab66096f30c7922f6
msgid "This change breaks the ``knife client reregister`` command in |chef| 10.16.2 and earlier. Forward compatibility is introduced in |chef| 10.18.0."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# fa7b97644ec54f10a8b7bfbf3ccd38fd
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# 2dfa28bd987642b19b678b8e69287a54
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# 77104df79f464e949b70bfc9064182a8
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:338
# d6d3af5c19084b1fa2e6826927c03c39
msgid "Strict checking of top-level JSON keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:339
# e06bc40156824433937b607540eed45f
msgid "All API endpoints that process requests to create or update a |chef| object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:342
# 493d157047b04833a454b1d5517c53d4
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:343
# 2c67e2e14cb4481ebadb8efc517f04d4
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:346
# 20ce4d59ab2046129020a3a4deb4e3cf
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:347
# 318ffddea9b64745922b1c7b838b80e0
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# af69ef40bb804fe4b79b0a0a70712666
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:351
# 926643da93e448b9b083abeb528bb0d1
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10x| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:353
# 4d6ab2be4e5748ab8121b5ed55b12dab
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:356
# e0c94ee1b39546cabcf64bd487cedd99
msgid "knife reindex is not supported in Chef 11 Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:357
# 88a88812435142a8a33e7aa2f5807e1a
msgid "You can trigger a reindex of |chef| object data using ``chef-server-ctl reindex`` while logged into the |chef server| box. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10x| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# 8e9c96d4fd8541f8a415151c5bfba07f
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:361
# 863e53dacc934c168ce38a353f352a29
msgid "Support for |open id| is no longer in |chef|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:365
# 9cdabf3f20f24af88c4d715a16ce6874
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:366
# 33ccb7519f894c97a06ab759b575f07e
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side of Chef have been removed from the main chef repository."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:369
# 331e6036d874419db96ef6033830e4d0
msgid "knife cookbook delete --purge is ignored by Chef 11 Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:370
# cfe47486119342e8925c53400bd7c96a
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:378
# ae281e621a274ea08d54682eaf620530
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:379
# fd4325a26e9d498ea0c960021006fd0e
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:382
# 3ecdf3a36623483abb5929e0ee5565cf
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:383
# c59abbebe2954cb69384231b3ae90363
msgid "In |chef 11|, when output is to a TTY, |chef| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:385
# 238962d55b944535a290e0b52b50ed0e
msgid "If you prefer one type of output over the other, you can force |chef| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:387
# 15e3d5f13e85496dba15439ce2c7a6ec
msgid "In previous versions of |chef|, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:390
# 6bf0cb8a28be4ceab76c3566a1f49da5
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:391
# 673fc36361074f78887deb85f973a9a9
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:394
# 3ef810cd83214261b24ba9f21d3430be
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:395
# 2500be52b12741f6b76f170034e6865b
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:397
# fe12c118c6694518a50c1715a67485ed
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:398
# 38a459e8334d43a0965a0a280085c7fa
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
#: ../source/breaking_changes_chef_11.rst:407
# cded344cc6604158bd3fc90ac24a5908
# 127b0f6c1f5e4ae9a9ca0f8aea73057f
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:401
# 29568f96ddad4a94985fd36827f239b9
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:403
# d8b0bfe8b01a48fcb7c2d66a01bf2c1d
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:404
# 84d40a63c2a342ae97d533ce6327a6ae
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:405
# 1048acac163d42ecb0338b1bc2f5255a
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:406
# 9b6c43d38c074f339874cd2491e425e8
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:409
# f022583e97a44f42814e6bc1103e0b2d
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:412
# 4011bd83a8b34efd8bfb4f5628c1d492
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:413
# 30a49af8558447faa814d33ee7006904
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained chef client run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded chef run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:416
# cf1b3e9cdc6f47dbb30c47af17bf7b18
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:417
# f80f17b831f3409aa51db730c23964ff
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:420
# c4cd8aadb31e4e848745f4729d2bddd4
msgid "Partial Support in Templates"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# 1361df7165dd467b8b246e6e83e92aed
msgid "Partials can be used in templates. See here:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:423
# 70ac9ff89a3d495189499b7ba6dc3712
msgid "CHEF-3249 - |chef| support for template partials - FIX COMMITTED https://github.com/opscode/chef/pull/498"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# b61239137faa4bcfa0a7eaa2050f0c9f
msgid "chef-apply"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:428
# d42007f5c01040be8c9dc320aa492b29
msgid "There is now a ``chef-apply RECIPE`` command that will run a single |chef| recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:431
# 7cdd28f467434cff8ccc0e55319123ca
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# 1126953d85254098b7ac35ed71286cda
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:434
# 9ccd94c218a34da9b3b06854e5fcb707
msgid "``knife search`` assumes node search when the object type is omitted."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:435
# 4270ab09d27841bf8b2786d456cd3489
msgid "``knife search`` will search over roles, tags, |fully qualified domain name|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:436
# 64f2975deaa041aca43c538b02dbba3d
msgid "|knife| essentials (``knife upload``, ``knife download``, ``knife diff``, and so on) have been merged to core |chef|"
msgstr ""

