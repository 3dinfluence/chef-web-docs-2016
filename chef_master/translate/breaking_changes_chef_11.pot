# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-07 14:29\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:8
# e242ae8383c2498dbf0b49c886a1e6c2
msgid "What's New in Chef 11.0"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:10
# 88bb053259744b3c917c60b07210d319
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:12
# b756d9b4d30e4d7283c4ea195bf1c1a9
msgid "The |chef client| 11.2 release is updated for Ruby 1.9.3-p484, which resolves a security vulnerability that existed when using prior versions of |ruby|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:15
# 0fe471958bc7470896fb8f3128dff419
msgid "|chef client| and |chef solo|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:16
# 1bbfc87c7fce44c582058ee7f628b476
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:19
# d1c8d6f2ca93474ba50bcdba37c12cd8
msgid "Custom API usage and Databag Population require Chef 11.6.0 or greater"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:23
# 012bb090413e4dc7a947a8861d06c42e
msgid "knife data bag from_file"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:25
# 7f1960a3ac1649e3a3d7f77813e4912c
msgid "This example will fail with Chef < 11.6.0 and EC11 or OSS, as the /data endpoint has become more RESTfully correct. See https://tickets.opscode.com/browse/CHEF-4435 for details."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:29
# cac8a8bb0afe4c8d8daeb8bc913da4ae
msgid "|shef| is now |chef shell|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:30
# f80cd4da75f14109b38ea2bf85d7f031
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:33
# 1ab46a05a8d9410bad9817f5db2fd6d7
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:34
# ac87da83266743a4bfcb6eb1c8ac4767
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:37
# 949dbe5a4fd24bd9b95e4d0d6cadbe41
msgid "LWRPs AND Recipes Both Now Automatically Qualify loaded Gems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:38
# 85feb8e154a54f2a95165f45f10551fd
msgid "Previously, in Chef 10, one could do the following in a recipe:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:45
# 9d50c371fa844d04bc377f207d006715
msgid "In Chef 11 you must add \"::\" to the beginning to avoid the automatic addition of a \"Chef::\" qualifier."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:53
# 9cbd94fab85a4892902cac3b09104093
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:54
# a2e4b33b124a4f759c0f1aa2742d9f8e
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:61
# 1293a2bfa1814488ad328855a614b766
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:68
# 46631f5394af40f9b137700649bd0769
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:71
# a84cb072c6e648d6b717b758dc67b508
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:72
# cdc137ecae7441c8bec1835bec9d8c64
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:78
# 0df0502b857b4b0683416f6c86db6ce9
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:85
# 6efbca637c004d6690ef21fe2efb4a96
msgid "|knife| Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:86
# 5dd962f6ffbf426181dc5504078ce807
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:106
#: ../source/breaking_changes_chef_11.rst:153
# c45f7af1aa6a40d3914e44cb60ca3b07
# 72275f7205d34d5a8449f0e6a247fbbd
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:128
# d4af2b8387ca46ddb8b7a99667895844
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:130
# 9465b0c7dc5b41fd825678eb80691413
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:178
# 24fdadd9a1d54ff3809ac793af6f79b6
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:179
# c93665fed1b14e029f49651c0e9daa39
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:182
# 0478e6ea1e044ec58fd28cef628ed53e
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:183
# c8700c99612942c7956b8185b81c41e4
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:196
# 73c8feecf2274d70b6f66ef6b780526d
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:199
# ae9e87db199b4955aa91699e079d227c
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:200
# e363dd2b4f164ffcbee2b2a0092e0a0d
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:210
# 5f8da03c1cfa4c66935a02d136b4074a
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# f845febbe96143708425210cfd279694
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:213
# 3e96310f58d5495c86d4877e92a6cab9
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# c3364c503ab14577adbad38aad8f93ee
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:225
# 57b53f6d24c546cea03770a948fa4e34
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:228
# 62fd7fcce73a4251adf81ddeebe263d6
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# efeb94083c8f4224b95d035a43052a4e
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:231
# 031e268f9f65485c901d1ccb8cb5f2df
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:239
# 655525d0ea8449a8bd414af50747d863
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:249
# 80542a1299a14f668b8409d83472d796
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:250
# e0484c9d830f4e55b5ab9500b448f6e0
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:252
# fdea48fc14ce46528d87765539d29d84
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:255
# 51b84b61731348d18ca56805adc70943
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:256
# 01a8d0df501e4439a2e10d3661a41530
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:260
# 666153259f9c428fb4df7eb05e94ec62
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# 1465058061074423961c0d0b5d523b47
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:263
# 8397ca619210472bbbfee12b2474be1e
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:265
# 3c5a3f07f4bd47358a67e0f9e0adb08a
msgid "The |chef client| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# f311f5bf3beb4d07b9aaec79bf6f947f
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:267
# 57347c9e2c7a491993f87fef7022241a
msgid "An unrelated resource fails and halts the |chef client| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# 29c8ba3399a74c41b99b1c7629bc6f42
msgid "Subsequent |chef client| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:270
# 6b14256ee7d040c7b54482a236d9fa01
msgid "In |chef 11|, delayed notifications will run after the |chef client| run fails, and will be executed even if other delayed notifications fail. Conversely, if the |chef client| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:273
# e01b9db049154234bb3777eb62d33cee
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:274
# 301bef55471944af9354be5ed3f1ef0f
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:282
# 0944f1cc4075426f933c52bdf1d1f780
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:293
# 583a020103f442f1b3ad08d0ecf12877
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# d382d6ef2f0b4880bdf9ddb009c3d3bb
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:296
# 445dbad2950a4d5babda5387f9aae89f
msgid "Because the corruption is silent, there is no way for the |chef client| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:298
# 9415691bf9ce426ba84c1dde649e1922
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:299
# 5cf20813c073455080724f3836276aa7
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# 99a3b21c52d0478ba341af7caee44bdd
msgid "|chef 10| clients |chef 10-18| and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:301
# 18d66f8987324766852a129c57b176d1
msgid "|chef 10| clients version |chef 10-16| and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:302
# 25dd8c71c33146fa9f6b69feec2bb26f
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:303
# 42ccbe5f8ce64d30a36760f9f183454d
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:306
# 7b4b73aa695848048636d1736265753c
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:307
# 61017f3a9de1484780fc645c018da2a8
msgid "When trying to decrypt a |chef 11| format data bag item with |chef 10-16| or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:317
# fb3cb0b36e14428ca70818a491b40802
msgid "The above error output is from |knife|; the |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:320
# 968975844bd84bb49c9e94b1e8496808
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:321
# 413d3d23f6a94ef1b27567057caec39c
msgid "Before upgrading on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version |chef 10-18| or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:323
# bad74ff2c08a4f01b278ad7dcad1b2a7
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:326
# e5d647d0681e44cc94f0e7f66a4b4337
msgid "Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:327
# 1a1a1f9bbaa146a98d0d53faf5ca3fe4
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:331
# 994e743b9d4a4f3d8ccc90766c8c4a4a
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# da5bedfb66b140e6822274ee0b3d5638
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:334
# dfb4aa08810648e883f15320e3a290f3
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# aaae6507394449b590f95695796903c2
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:336
# 5bfb3cbd966140a8ab4ddf94161eeb62
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:338
# 6788c933448c4ddfbac911cfb1167373
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:347
# 8938ccc6e6894c689d8207b2914e2c68
msgid "|knife| Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# 9a331880068643cbbaa28bc2be83bb75
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# 3853dbafd9e74d10a9f3019e9624313d
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:351
# d7085cdc92dd40d282a278a926b9fe08
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:352
# eab0a787ead74508bd3c60d3cd1cc299
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:354
# e4c0d836861c4864acef4f8cdfbbdd7c
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:356
# e44a9a7af70442baa407c1c884edb782
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:357
# 424b2a598600445299ce918626c0adac
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:358
# a32c81a1d7f54317a74655c423f3ac1b
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# fd1fde7df7674df4b9c5246322357ed6
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |company_name|-maintained cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:362
# 0cb8fd2c39034c4bbc0db12cf5754629
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:372
# fabcab5e19924892960eee9e8d6b5b60
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:379
# 977dc9de1fb44555b2eb7310398c7b9f
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:388
# ac83271a23e54046892c3e7e3513db88
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:394
# 488d7f33c248437c9c1d3c40e0cbdc70
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:398
# 177b563ce2b94825a7e1be86af1a9ed2
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
# 22741cf8320d4c4abf6e0d8571ee729f
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:401
# eeafb638f9664e6784b81e1efeac6981
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:413
# 1e95b11fca604a69920d74a283435bfb
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:416
# e5d979a5dbcf4e12a297027d0f692da3
msgid "The Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:417
# f2ab15eee09a402e802a36f8b5ba9acf
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:420
# ee3ff060f4874098a8d5ebe9cb7ef014
msgid "The /clients endpoint returns |json| with a |json| class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# 89efc3b208fd44f4908ca1111b1e610e
msgid "In |chef 8|-|chef 10|, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:423
# 57d584bc38894982ad992f1422ad66bc
msgid "This change breaks the ``knife client reregister`` command in |chef 10-16| and earlier. Forward compatibility is introduced in |chef 10-18|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:426
# cd8816175260497e80b4d828bc93173d
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# 002eb2e20b774c4182f601b413b67774
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:429
# f6ef2550e9e4439b8b99d5a12fbb04bd
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:432
# 80c732279f5541e4b7afadd9ae85307f
msgid "Strict checking of top-level |json| keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# 4251f122c75347aa87e6c9e3b375d094
msgid "All API endpoints that process requests to create or update an object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:436
# 2bf6015d691e4c6f90d06d6d11272202
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:437
# aa09cb4941724038bad483f74adcb5b7
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:440
# 7853cf43c58b418a958d77a1a15c15b0
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:441
# f5206ba403ee41eba4af04b42e694faf
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:444
# a2741fb461ef4db5bb6b571f0f55a1d3
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# ada634c85dde42658fa05581776d6442
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:447
# 0daabd64bc3047efaafce2c431ed08cf
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:450
# 2167843cb7b84b4d84c94770670304f3
msgid "knife reindex is not supported in |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:451
# 74a1a38912564aae9280a7b56df756a7
msgid "You can trigger a reindex of object data using ``chef-server-ctl reindex`` while logged into the |chef server|. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:454
# 55ad84cdf0f94e2988ad56baf30fd098
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:455
# a4bed14dc4044b47ad57297f00d8a9be
msgid "Support for |open id| is no longer available to the |chef client|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:459
# fc160fbbe244470e847ceee44af67fba
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:460
# e25bde4d0d184fe3a1423944e4013586
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side have been removed from the main |chef repo|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:463
# b9faab68b3884c6cb1b877f69f67f2d5
msgid "knife cookbook delete --purge is ignored by |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:464
# 51e000fb3b9e49a9aa18b13b600710ed
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:468
# 3f01555e43f54793b559d103d7732688
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:469
# b3642699f95849f8ba7c65d1d2a07918
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:472
# 2fcb41addda9483ebcb76cf348dcb72c
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:473
# 07b4bbb906ae4aa9aba5914f9ed1d55d
msgid "In |chef 11|, when output is to a TTY, the |chef client| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:475
# b1e5e73a652344bbac70ce02be5dd9e4
msgid "If you prefer one type of output over the other, you can force the |chef client| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:477
# 46bcbde50ef1431691d8e093bfb614f1
msgid "In previous versions, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:480
# c3a4206a696a476e933f44735b82ed0a
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:481
# 51c24f1e4bdc4824ba22908180695dfa
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:484
# 33afd23ac5fc4d8d87562619c770de78
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:485
# 777a837c1f504de98375ddb9eaa3597f
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:487
# d310e1c073c2498494e13865fabaf8ed
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:488
# 268bda1241824660b332047dc7614b96
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
#: ../source/breaking_changes_chef_11.rst:497
# ad7a7ed376694cafa2b7fe032af19d90
# 88d405335fea4134bc3b07ad2c7c3e72
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:491
# d26fa179a8424168b66d00593f8dca5e
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:493
# f89fcdbd75e94575b24bc34ec7c2f9db
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:494
# f7939208eccf4fac99cd59b58a5a02a7
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:495
# a3b1475290a64641bedad0ad622962bd
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:496
# 9d7b3aaf3f3a498e9bc0146682b0fe23
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:499
# 5ba1346fe6e141468fb5993c808d9dc5
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:502
# 6e507ef7998140cf9fb3c29129368a1d
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:503
# 5c5f61c6280040d19a4b72d37894a6e3
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained |chef client| run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded |chef client| run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:506
# fc642a45d7a940e5b91269c0dcee61c8
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:507
# 0b07df55645140718da15a64917276b5
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:510
# 27cf88ac33e64612b2e2af65df632d09
msgid "Partial Support in Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:5
# 323d641d42644cd5bddbdc73bd8b680d
msgid "A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:7
# a2228c0c78e94540979b0a299324c383
msgid "By using the |ruby| ``render`` method in the template file"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:8
# 3565c1f78bbf4176b8477f71871d7866
msgid "By using the |resource template| resource and the ``variables`` parameter."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:514
# a6122e5f6bcd427a88577f2ae6c3f55a
msgid "``render`` Method"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:5
# 7fcf18fd27d14ef7b12f23db84318bd6
msgid "Use the ``render`` method in a template to reference a partial template file with the following syntax:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:11
# ed889cc057bc4f3ca0fff574b3f36b96
msgid "where ``partial_name.txt.erb`` is the name of the partial template file and ``:option`` is one (or more) of the following options:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:17
# 12e98c8729c84fc7aacf7d5c4045e083
msgid "Option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:18
# 86c3da61ca72429ca7d4423d65e46749
msgid "Description"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:19
# d7659a8c644e488f922223b4da0f2d4c
msgid "``:cookbook``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:20
# 2e82248cd8a745049fc7e235c04807bf
msgid "By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:21
# 70cf8793a6fd414aa4e940d1e2ad5dbb
msgid "``:local``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:22
# 39d4da0132964c28bbddbf2dc84a3499
msgid "Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to ``true`` to interpret as a path to a file in the local file system and to ``false`` to use the normal rules for template files"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:23
# fe900ff11efd4ffbaa2fa909a94b1c4a
msgid "``:source``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:24
# c92fd3ea30d340b9bb46a222a60f9e6f
msgid "By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:25
# 7a5999f40d0d406fb9fe126f3cf21684
msgid "``:variables``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:26
# a299662a9a6f4e35a33efac08bc2a3ea
msgid "A hash of ``variable_name => value`` that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:28
# d1695e9a1c764c29a76b9aea4d2fc191
msgid "For example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:518
# 53ed7c7052aa4b7a84010f5873a705e8
msgid "Template Resource"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:6
# 031baf81fb2b47e5bc9c6bdc3524d0db
msgid "The |resource template| resource can be used to reference a partial template file by using the ``variables`` parameter, the ``:partials`` option, and a |hash| of partial template files. For example:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:18
# 6eddc900bba441fbbe24ae020df26b49
msgid "where each of the partial template files can then be combined using normal |ruby| template patterns within a template file, such as:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:522
# 0d344f65b621416bbc11911dc65554c2
msgid "|chef apply|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:523
# 8bda78bc300f4dd6a6c6124c845a158a
msgid "There is now a ``chef-apply RECIPE`` command that will run a single recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:526
# c8e0c7d186f24878914f320c427b3738
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:528
# 88f1d31bfe5a4dbcaccf4e8ec5c6041f
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:529
# 660a06be40aa4067977527191396aca6
msgid "|subcommand knife search| assumes node search when the object type is omitted"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:530
# b324c0b5df49489980da12d992fbe43d
msgid "|subcommand knife search| will search over roles, tags, |fqdn|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:531
# 27303ee32b91498795be9bf0c4105483
msgid "|knife| essentials (|subcommand knife upload|, |subcommand knife download|, |subcommand knife diff|, and so on) have been merged into |chef 11-0|"
msgstr ""

