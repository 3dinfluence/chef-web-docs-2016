# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-22 20:38\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:34
# 9d419b5199e64852ae3b8eead0c7620f
msgid "What's New in Chef 11"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:36
# f774f7269aaf4f20a37d89574b58214c
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# 7905fb5d27bf4ea8a4972925dcd90043
msgid "chef-client and chef-solo"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:40
# b36dc6ec1875427eaa4dd34000e7595e
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:43
# e2ec68909a204a349d3b05c13b3d3f1e
msgid "Shef is now chef-shell"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:44
# cfa496ad728e4562b77ab9f9e647b87d
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:47
# c21f505f9f284098bbb5d095d45d972c
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:48
# 79f5f5d0a414490daf9115513caff7cd
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:51
# 68a52bd901fa459082122acf86ab53dc
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:52
# dcec98dd648f4551944dcb977f968246
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:59
# 4990c744081448dc98fdd7812cd4ce86
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:66
# c5e7901b5fd14d0dbd596dffaaf4492b
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:69
# 93939ed5da1144f59a8f7b0210ed5190
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:70
# 730e164d6a7c4c39a2dcd93ffe984e31
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:76
# 445bba07bb1043b8a8a57bf2520de78e
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:84
# 26256427a95c415bb52ea654ef4f1dbf
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:85
# 4eb2ff7e08fd4fa198063cfe5e387a21
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:88
# e3a3e2174309492a940d7fdd5c070eec
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:89
# 8c12c5b7e8e24ab3b71db79655a0f521
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:102
# 9343248feae84e9fb190f46a72cc2189
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:105
# 2b67113b040949bb85ed41c7c89a6e02
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:106
# 23a374d6576841a1b537435c6434b154
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:116
# 2ddf9ec89cbf4c038e10f8bf01af8b3b
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:117
# 1d4710139ed845fa9b94986673068ee2
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:119
# 775da4d6ca1b4664a3876f563b12a587
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:129
# 95f73e50a50f42c1a7b34e91199e929b
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:131
# 05bfdd4b8077458aa39fb97a6c7b1f75
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:134
# 365c7022f019472bbe701b3c9bcab7be
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:135
# 9bfdc81048ad4a2aa091e74d96b6e705
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by chef by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:137
# af521b5496ba4e47ae1461ee95500b5c
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:145
# 5f97c487c49d4b1fbf158ded7a04cb34
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:155
# cdb7fe24bb294c9db3930b281ec93545
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:156
# cde69161568349f9b7dec04d00ceeb9c
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:158
# 4ff8302c28cc419d8c774a11c82c2df1
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:161
# 8e31d658ad2e4d778b1b50c8eff44f06
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:162
# df71b4ad300d4405a3d8ba294ab5cdd2
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:166
# 4aef58ee12e0469285e44ac427c6e22d
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:167
# ef1d38152edf4acd828ea36ec12bf4c5
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:169
# dc669ddb66d34f7eabd055a8ac649f3d
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:171
# f3800f047d924e2ea1835ff656dde010
msgid "|chef| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:172
# 67c0a10ad9654b6f9225461da4f700b5
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:173
# 1e4e00ddbcc24a73bb931d2921c3c2ee
msgid "An unrelated resource fails and halts the |chef| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:174
# e79b749291ac44298759445040b94e1e
msgid "Subsequent |chef| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:176
# e0a29494b09141ee9594ec459c86241a
msgid "In |chef 11|, delayed notifications will run after |chef| fails, and will be executed even if other delayed notifications fail. Conversely, if |chef| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:179
# 46a0bf3878414a23866c574feff64685
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:180
# 3ed9d4b28d9a41e2b46e22600077dc3a
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:188
# fa9c2ec7308d46be950642ebba82f745
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:199
# 31b3416ff4df44bb92f765b3ab49f517
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:200
# 96575add88d244b7b11443bbb7f00508
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:202
# 6867715640364c04bbe3ef89b44f4ac1
msgid "Because the corruption is silent, there is no way for |chef| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:204
# 5858290e6e14464ea94795d473b1ebc6
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:205
# 2e6e0239324c4bec9bbc68845b99813d
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:206
# 0311b89b9aca4bb7a849992a37d6bd9b
msgid "|chef 10| clients 10.18.0 and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:207
# 4f9a549aaa4a46beb971ac033872b109
msgid "|chef 10| clients version 10.16.x and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:208
# 0e3ae72ecc5243adb04cf8b40209a215
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:209
# 3edbd97bdbd245b99a4b855de11959f9
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:212
# 3ecc0fec1d44494ca57a42f3f8c4be82
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:213
# 716d4153392e4041aa856aa7619c2f5a
msgid "When trying to decrypt a |chef 11| format data bag item with |chef| 10.16.x or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# c34af66175654c9c89b7fb1ded57989c
msgid "The above error output is from |knife|; |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:226
# 6b4ab6d211574911be344cef87612f0d
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:227
# af974bee52164c6b8436636287180a49
msgid "Before upgrading chef on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version 10.18.0 or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# 1cb385a6e15d4afa9fb478df9cf0a7cb
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:232
# 7d77976799a44463950896c033c2b44f
msgid "Chef Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:233
# 5a55a78bbcef4c89a3c03866dd80fafb
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:237
# 481332bac8d84999971ca125c9915a55
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:238
# 5b7382ff00b94aa09ff5267808347b57
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:240
# 4ade200de76544e1bf2da2f12232aaea
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:241
# 015c523a19bd4840846b31f600d73cb4
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:242
# bd5f9d0fa7bd4ff3a289b1d63bcec344
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:244
# bc4b190ecd0c4254b21270d924087a74
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:253
# 025426954cbd4fa9a4976bf4af943b22
msgid "Knife Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:254
# 591b8ffeb50d43b497f0c9394fa8c811
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:256
# 0d851a8402ab449d9f2361e2ddc03e03
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:257
# 973aa87521e7447da71a1d89fe00f1a0
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:258
# 8c0f7135eb9d4f7492411d94f2456e54
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:260
# fe9b2a4400754211b1bb7b3c9bfa1ea8
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:262
# 9f23a9762a4c4012bfaf4cf504e4b078
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:263
# ab44c9a68e444cd694a40c06a78934ab
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# 0e95e51374bf43c0a737090fdce305f1
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# bf65631ddcaf412085e5a9544d71edb1
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |opscode| cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# 13e2d70d83514b66b3aaa6cd54faebd1
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:278
# 8c485a4ea3f8414b9ca3b5634d7d8918
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:285
# b28985b17f0e4809b5c6d34e709ddaf9
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# bfb2455e9b7f414b992c435b035df159
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# 59706521c79c467a807dd2f62395c665
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:304
# 49dc0fc83100499b8d99cfd072fae340
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:305
# a4ed78a8a56b42119d000e6d562de9ce
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:307
# ac09dd45f3b3418bb84a0a3c63e2fa0c
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:319
# d3e50ea0baff4f8c93ed3bbabbcb4772
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:322
# 76f6d0fd96ce4540b5b8bf6522541460
msgid "Chef Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:323
# db76b47cdfee4d55a699387ba2447a51
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:326
# e23f1b5ed13b4d8a942d02aed8c44945
msgid "The /clients endpoint returns JSON with a JSON class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:327
# 96d0f2828c0f4e78a408ad5e9681aa17
msgid "In |chef| 0.8-10.x, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation in |chef| uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:329
# fa0381ac85aa4b5faa9e801d512d782c
msgid "This change breaks the ``knife client reregister`` command in |chef| 10.16.2 and earlier. Forward compatibility is introduced in |chef| 10.18.0."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# 2a09c5d8a6b6465bb2cb09a3da0fb06e
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# d35f1be75deb4ef5bdb10ecb3ce95439
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# 9677cf301121429f964b177d865cf364
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:338
# 121971a384bb4250b55bf48d86407db3
msgid "Strict checking of top-level JSON keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:339
# a3a024ada22b49da8a2f8102014898bd
msgid "All API endpoints that process requests to create or update a |chef| object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:342
# 727d47e21c044383b8d5fe117965b66f
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:343
# 6d50491c76b948a794580c9eac970d30
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:346
# eeccec68f60c4014b62d9c6c851dacef
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:347
# 39f7e69ec1e648bf95735674e53cf27f
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# c93ab698f4414d768fcb73571d91445a
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:351
# b4081c5f1382467ea4acab8915e75772
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:353
# d078e75a2f3443b28ddda7e19e757c1d
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:356
# 61ee0690f7ec49fb96e8c6e82892667d
msgid "knife reindex is not supported in Chef 11 Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:357
# 377651aa6e034ae299bfa5075e0c82a9
msgid "You can trigger a reindex of |chef| object data using ``chef-server-ctl reindex`` while logged into the |chef server| box. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# ad9f263cf3ba45e380a566cdd3e24247
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:361
# 2a2437a8057d4ff7a8de77a96097ce9b
msgid "Support for |open id| is no longer in |chef|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:365
# cb3115bcf2c44c38a2dd303ccf14a5dd
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:366
# ba2fe5baeaa145d895eea0c018f155f8
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side of Chef have been removed from the main chef repository."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:369
# c6080d766db84909ad073c9d1e0b91ab
msgid "knife cookbook delete --purge is ignored by Chef 11 Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:370
# 5a3c9a738dd345ce903d6a9666df777a
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:378
# e19a19a43e894189813f40b3a9c47eed
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:379
# c784173535ed481f8df25ee9775f8a45
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:382
# 3286604fc51b42c7940b78b12c9f90aa
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:383
# f9b03e3dba2b4f63bf79dd64f37ae866
msgid "In |chef 11|, when output is to a TTY, |chef| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:385
# 40d20a5959b54a56919bef3c18b908a5
msgid "If you prefer one type of output over the other, you can force |chef| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:387
# 276f4820732045a5ac32a949aa03b232
msgid "In previous versions of |chef|, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:390
# da414797d77b4b979123f6bfd971b6ea
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:391
# 7e44ddd300d14597a738f4256cb7bf53
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:394
# 8b21c0c2efb8425e810e70d857664edb
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:395
# a1662de3ce73411bb2dd9c7bac356748
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:397
# edcedcb3b1f949bdaf74951dc259e5c9
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:398
# 393c2f81b2d549e1937366be9af0aea3
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
#: ../source/breaking_changes_chef_11.rst:407
# d17f943a666f4f20ab23a5829550e840
# 5822f80eb74d4800a4929eda1e833380
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:401
# f652ce25950e4efcb520f7c039737156
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:403
# c780615e935744a7a03fcc9c9f6eee60
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:404
# 4283ab3a03f14544acf040196faeef06
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:405
# f1f3e552efe24440ae301c5547e4927d
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:406
# b70ba062c63b4333bd976dbe21445594
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:409
# d3a152f30b1746fa92fdde5f08d1886d
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:412
# e39f0f71c22d491c89619f89b8309bba
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:413
# 05bd34a4e563408fad6f90e8ef548cf2
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained chef client run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded chef run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:416
# 20d994c2abc94492b95f902f5d6688d5
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:417
# 5aaecc0e0dc9419e9aebe9241d016210
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:420
# 7f6416044a9448f8be5368a693d7651c
msgid "Partial Support in Templates"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# b823ee81f71449f7af518b96194891db
msgid "Partials can be used in templates. See here:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:423
# 49450c4037df477492bd6ed28073348b
msgid "CHEF-3249 - |chef| support for template partials - FIX COMMITTED https://github.com/opscode/chef/pull/498"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# fa67e60924de494e870acd1f99f46cb5
msgid "chef-apply"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:428
# 91fb2bbff2d941b3983f5da916624f4b
msgid "There is now a ``chef-apply RECIPE`` command that will run a single |chef| recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:431
# 0b175a11b1eb4d0489a8ce400093ae0c
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# 0ee30e34187349dd9a8562e2cfb3fe72
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:434
# 8c40338d991a4da892fdf52f552f5d81
msgid "``knife search`` assumes node search when the object type is omitted."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:435
# 1829c794a1d24f4c8a62b32a41aeb9c2
msgid "``knife search`` will search over roles, tags, |fully qualified domain name|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:436
# a437444a6e94408798cbc47d00e41c70
msgid "|knife| essentials (``knife upload``, ``knife download``, ``knife diff``, and so on) have been merged to core |chef|"
msgstr ""

