# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 17:14\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:34
# c41a45f42bec4c5c8758f743821a48b1
msgid "What's New in Chef 11"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:36
# 4bb12a77f7cb482988c139edc1239574
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# 4d9a98de21e742ba997eef9fa6800492
msgid "chef-client and chef-solo"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:40
# fff6c2ea75874aee9c4351193579f4af
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:43
# 7ba3e1cd4a0d441f8bb3086453054624
msgid "Shef is now chef-shell"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:44
# 6c20ee9a37c6491d8ccc2b8277879ca0
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:47
# a6959b8890514dcdad6555d84ef92266
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:48
# f7d98ce966bc42fe9278d275caf1a7fd
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:51
# b05c02fd80db44fe90cf0112ddcfacf0
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:52
# 6923a37d0f8e4c4082198281ed7f86a7
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:59
# 56ee3db025654994a5f7abbc7103e773
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:66
# d8071eff13c44ec19167ea9bb82ba04f
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:69
# c23b48e6d700462d98cc85dbc04c8670
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:70
# 2b8ad1a0c8364ba6a01380806838ad69
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:76
# 4fe229908e6d4a53b02bf3691d8e41e8
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:84
# dafadeefba564abcb033d9bcd0fb5c3c
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:85
# 06864937bcb44091bfd2d38e2327fea5
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:88
# b998ac105f074c37bbe3dd42c81e02b8
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:89
# c52d2cf93bab4f72b130d7d19444ed05
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:102
# 0a6f580ea0544374a880fc28accfb824
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:105
# dd9612ae49ea4b538d4f7831cf2fa18f
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:106
# ce08c8e97b4d4125bbc02236bfdf3f51
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:116
# 879543a1cc13447084957d5317583ff2
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:117
# efa7d0ef221949be906d7c5b216e62e1
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:119
# 4d605d688c9e49d1941d1238e1458831
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:129
# 7a08cb08749146a8a1977346cebe7a94
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:131
# b7e5b56b2ba14a37bce471032a47b64c
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:134
# 87302ace0396466abc048445818cb686
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:135
# 77b21248f93d4d2bab00b6a9bf71c7ab
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by chef by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:137
# d589b2148f364113a192e8b803830221
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:145
# 0c50e95b575c463cac49df72f9feeaf5
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:155
# 3401058e072a4320b109f9389bb24468
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:156
# 53762107dbf743bf8106a53473e5467c
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:158
# 187939f036564534a44bdbc62cda3652
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:161
# 69669ee0d9c541e68c1cfbbaa6001b7d
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:162
# 23a5a087d2434ef88d7b05af8520bc5e
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:166
# 92251fed5b0841808383e1e7dad4e269
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:167
# 7df78aeaaace4690980e267a535f43f7
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:169
# 33d457ded91b4e90955406b99d99511f
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:171
# be216ed572e144da9b25218589e9ab38
msgid "|chef| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:172
# 8495254ecec44932b4d6ffc4f7815c21
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:173
# 49ca69d6b0aa453ab9df039a5df030d8
msgid "An unrelated resource fails and halts the |chef| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:174
# 539254cd1f9546b9bbb893e732cef0fd
msgid "Subsequent |chef| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:176
# 152daa5e06ce467995c82dd904c8993d
msgid "In |chef 11|, delayed notifications will run after |chef| fails, and will be executed even if other delayed notifications fail. Conversely, if |chef| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:179
# 3de7cdc4e5c94b2fa59578d83af476a1
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:180
# 36b1b7f79e644c3abc257a231369fc9a
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:188
# a99c3c4370b84984820d588dbaa7a78d
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:199
# 6f207cfc3c614115a5eaecef178c0503
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:200
# 9359ac8af17246358812e0d2dc199a33
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:202
# c73b22fdcf5449aea59d9b5547707161
msgid "Because the corruption is silent, there is no way for |chef| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:204
# 64b8087d1338442c8909b7018f502698
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:205
# 854f3831ce2d416ab6a13301ed4cddf2
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:206
# 1da0987ca13b49d59ab73be3a54e79b7
msgid "|chef 10| clients 10.18.0 and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:207
# 9a5c202f66f44d2db4911ca05bd8d7ed
msgid "|chef 10| clients version 10.16.x and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:208
# 851fcd5ef3ea4e3da456d4ec80999041
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:209
# fc0ac32f54a64129a73b11f7c292fd06
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:212
# e9c9aab6ceac44458a4e47cf95e80fb9
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:213
# a6d48cf83f1a4500818add966a73a95b
msgid "When trying to decrypt a |chef 11| format data bag item with |chef| 10.16.x or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# 7bbcfdd672144cfd8be8ea8134563926
msgid "The above error output is from |knife|; |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:226
# 28d56fe2f20b4d6db6a62285b6005c38
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:227
# 739f9ceb2ae640b798152941ab0ae311
msgid "Before upgrading chef on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version 10.18.0 or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# 8a04dfdadede497995548a7fbc64bb60
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:232
# a98b93a39fd4465cb4eef10c8dad9fa4
msgid "Chef Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:233
# 3090c16dd0db4636a16a2bfee4290eea
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:237
# 2a22327ea5c545ab88c73491b4261b32
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:238
# 2f52c082fbb241fc9a6b3733e8f06e52
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:240
# c5a89cee3e674016babfa0118c479184
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:241
# 2117469cc9754bf896d5855a7dbe7ac3
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:242
# 394f4fdd1a7348ff80f9940a4fd4a59a
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:244
# d6db7d2fa412445e9463315b47cd58ed
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:253
# f460b684215a4dd8a97e628e3429ae6a
msgid "Knife Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:254
# e31b1f26d2af408097f0d900f9811eda
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:256
# 179f6bb5cf324bd5bacfcfe6c3f73f32
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:257
# 03afdcdcf66547e882936efbc4eb5bd0
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:258
# 26524b5dfdeb4d5ea0df46031eb36793
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:260
# e73711202a6847db9d9625111eee63f2
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:262
# afbb05fb36f54913a4aa97a175fdb9eb
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:263
# 30c15dd4f3c54b039a62b1b6f031f97f
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# 86392d98d1f64c0dae1998d6904c1aa0
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# a080fb3633514bc5a8adfe0bd83e1c3e
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |opscode| cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# 5955a524b9774bc391449dacfb0c3e35
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:278
# fc2ff92f299e433189d0eca76eebdfc3
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:285
# 4c0327e67ce944c387b6ee8ca25fa3cc
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# 136a9d972a934252bef330d2b4d6a555
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# 121bc7b6f8ce45bf818a288df3a98a04
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:304
# 4eced1fcf48d4c44ace971e9c7df0ab6
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:305
# 0a7008f514014e528dba975b203cfe01
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:307
# 3a78cd1f4237484195796b6fda4ece6e
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:319
# 4c2f683b942d4d49a3fa18a6e3fcd539
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:322
# c62db033576f42d89659e3530704dbd1
msgid "Chef Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:323
# e4c2b2b602b04877a62824d32a0045c7
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:326
# 8b265db16fc5433cbc136b28b078e0d3
msgid "The /clients endpoint returns JSON with a JSON class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:327
# e0d9b447b09b4f73a784c46b7761a0f6
msgid "In |chef| 0.8-10.x, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation in |chef| uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:329
# e41af2cf2fe04c65bd09e68aea33690e
msgid "This change breaks the ``knife client reregister`` command in |chef| 10.16.2 and earlier. Forward compatibility is introduced in |chef| 10.18.0."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# 1e44803c2dd942d6a11b4f34fe2b8f7d
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# 34c67e4177784aa2bce328cfe1883ab6
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# ab9af2d719e340cc92a20ae19fcc971a
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:338
# 872517c01f434123afa48d105f185e97
msgid "Strict checking of top-level JSON keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:339
# 798f3f007c5f4dc992d276039b10e07f
msgid "All API endpoints that process requests to create or update a |chef| object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:342
# 713ce799dda94f8587093f1daf51a23c
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:343
# 0ee7938ec56f48fba11b1d953a0d0760
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:346
# db17d37ed2474a25bd075eb8057e5289
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:347
# 914f525c19f24a0ab35ab182a22b9d08
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# 0cadd5e1e62443c99a37cb3c06fcf1ea
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:351
# 1bc06cd2c5414394bfa7f9568bd22b41
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:353
# 4cf8a70c45d24de5aacc59deb9fca54f
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:356
# 2db5a4f2aa374608a670882a26b63908
msgid "knife reindex is not supported in Chef 11 Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:357
# 55e59da8e616491a872ea8bcd817935e
msgid "You can trigger a reindex of |chef| object data using ``chef-server-ctl reindex`` while logged into the |chef server| box. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# 59e82ba9b54244db82e3ad26b1b08759
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:361
# cd16ea91e7f040f2b9deb5d548a33ec9
msgid "Support for |open id| is no longer in |chef|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:365
# 8d4f21ad8fda4a109063014190a03d12
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:366
# 90637aca99d14ab09927ea08c4583594
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side of Chef have been removed from the main chef repository."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:369
# e4c9f0f5371b4aad802a4988d0f21b73
msgid "knife cookbook delete --purge is ignored by Chef 11 Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:370
# 6bf981d31d754c30a1f944e31f130cbc
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:378
# a4877d38c1ad4eee923b1a535feaffdd
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:379
# be6144ab649b49179145d23d0013971f
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:382
# 044273e765ee44aabe5aea5a07eba2c4
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:383
# ff67659dd1884555ade9728145f8a862
msgid "In |chef 11|, when output is to a TTY, |chef| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:385
# 3e57aab4c26e42c789ad4561393ed282
msgid "If you prefer one type of output over the other, you can force |chef| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:387
# 802e8461b8b74b81961edb55141c35ac
msgid "In previous versions of |chef|, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:390
# 4b69bb03bfd04201a74b1eef10a41971
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:391
# 14aaa1a598484ca09245fbd8aff0037e
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:394
# 9da91b1d161f4332a155540d9786c56d
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:395
# 78abb476cbf349688998f5d5919ad654
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:397
# 6df5dac21a2e4b5082d6dfce1e5a9eb3
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:398
# a3aaad7f46c04261b3e1f0ee24362a7d
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
#: ../source/breaking_changes_chef_11.rst:407
# 794e51f818b5496da66155cdcc2ceb65
# 7d687f116c614c80b1f8491f8e99f82e
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:401
# 4ef665262bfa41e59a636c7eab1ab1bb
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:403
# 83fb7e732f6f48209afaa2789920f4a8
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:404
# 607984f652604ba08d8133f6dde6d7ec
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:405
# 84bcd8ad4a74472e812aaf0166ef6f6c
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:406
# 8ecfbaae9127432d91a2049f9a98a75e
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:409
# 3cd040b4d75e4fc18d7979cdad6dfc34
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:412
# d312d7c1b6ff48499e83888e6cbfe6c7
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:413
# 49f00adce9b24d0690456d63401328dd
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained chef client run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded chef run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:416
# c2560acb60f0419eb9cb816adfec5217
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:417
# a8e978ca42bd447ca0c3cbbf6bea674f
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:420
# 3b7a4ecdd31d4eb2a0d142399893efdd
msgid "Partial Support in Templates"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# 43e2340e40054db19ecd25bfdddb62fe
msgid "Partials can be used in templates. See here:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:423
# 97b97792226f4250baa98673d0910e3b
msgid "CHEF-3249 - |chef| support for template partials - FIX COMMITTED https://github.com/opscode/chef/pull/498"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# f671afa44f574fcc892900a63cd8ba72
msgid "chef-apply"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:428
# 9c29fe6c3dd6459fbadbc0a2b8dc1407
msgid "There is now a ``chef-apply RECIPE`` command that will run a single |chef| recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:431
# d6b8c94bd334433fa3200a603e4b6e68
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# f99748a35a314fa0bc2df820156a7730
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:434
# 5f1144830e9a484b982ec0a4670ab1b2
msgid "``knife search`` assumes node search when the object type is omitted."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:435
# 9f466e0fc5684987b835b414a2f4cb56
msgid "``knife search`` will search over roles, tags, |fully qualified domain name|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:436
# 2e86b05cbf8340288d66280a7eb9ceba
msgid "|knife| essentials (``knife upload``, ``knife download``, ``knife diff``, and so on) have been merged to core |chef|"
msgstr ""

