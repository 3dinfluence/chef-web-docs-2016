# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-30 13:47\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:33
# 83208ebea9034c2cb79237b5eb3af617
msgid "What's New in Chef 11.0"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:35
# 6ce923b7fdd744899b4477fd6e74971a
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:38
# 1ee0d85c30d74d9e8d1aacdf55cb2556
msgid "|chef client| and |chef solo|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# 56711d1c844642948c349a4a8113cb20
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:42
# 34a9d78d8fbb49fa8be877756b8fae7d
msgid "|shef| is now |chef shell|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:43
# e33303244c7b4b2b9de8258cd7831a97
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:46
# d37f87d8f345490eac024fb619db5f74
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:47
# cde7b95428cf4cb3a0b82fc0fb326b28
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:50
# cb91a8a62092441e9d20e99bb8f38755
msgid "LWRPs AND Recipes Both Now Automatically Qualify loaded Gems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:51
# 76163bf297c34dc3958b1fa6352df845
msgid "Previously, in Chef 10, one could do the following in a recipe:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:55
# 795549dc8fea4a268cffc742c1b274c0
msgid "require 'win32/registry' registry = Win32::Registry::HKEY_LOCAL_MACHINE"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:58
# a0cd209be396433591e72e0385e8ea25
msgid "In Chef 11 you must add \"::\" to the beginning to avoid the automatic addition of a \"Chef::\" qualifier."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:62
# d59609bfefe8476a8b317655157e12cd
msgid "registry = ::Win32::Registry::HKEY_LOCAL_MACHINE"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:65
# 0cd5b93f030844f196fe4103161d7368
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:66
# bea41979616f430c8f6ab8e432001abb
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:73
# 58d5ea5fbe9e46a58a08fba02ec3b858
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:80
# d1807d2fa4c54b249dad73515664a008
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:83
# 9d006d40a42a46839c279f1c1b5c1e01
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:84
# 353beb5326ab4fd19a0edc19779fc819
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:90
# be884fb4c9144552b9b7b75965435d18
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:97
# 340491d81a364b04a7a8d819effa7381
msgid "|knife| Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:98
# 2122debcf63a47838b1170ddb3f41322
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:118
#: ../source/breaking_changes_chef_11.rst:165
# 9bc4b7fbb25e4392ad9720ccbfc03a04
# a761bd4681954faf92bd608d51b5056a
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:140
# abae1e9da1ae45bcb40c90afdd1d1526
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:142
# b0528c8d39d341028c03e15dc1e25b9a
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:190
# 2a63911515444d3e8ad5888414ba0282
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:191
# 11f76fb1bb264a70bfa828c36d88ed8f
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:194
# c7b5bd03626246168a009be16b63adc1
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:195
# 8b6ea6f94143414babe0838ebe94b488
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:208
# 0592b7176c2c4494b2c6259e08fbd6f2
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# 6efd1337b3a44a5ea6687de0ad176b29
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:212
# bdcc052b34f74a61ada8ff882ae99ce7
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:222
# 9b5281e896ba443f8905949cc7183c05
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# 44b66fee88d74fc782bbe7989ac10326
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:225
# af22fba6c5c941c4897ea3b41f8f0823
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:235
# 6d26064e6db941b5b3b38f1a68661140
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:237
# ea6e451720bb46e0b96de73c7786c95a
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:240
# 3de2e6030fdd4bfc892661262002f9ee
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:241
# 4327b236d6bb4bd5bce8cb194c36bc8e
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:243
# 10034e23224a4158926e69ab2ae8d05e
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:251
# ddf555eae9524ccb956629fd362e9011
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# 7d1b7e88033549e7824445657d3929e3
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:262
# db149b62c4c74082b01d2964275afd94
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# 6d560fceee834c15a3229b1e1a44677c
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:267
# 4a5395ea243f4e24bf983dc254dde173
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# 7ba57d9aebc44c03bc2be7b427d83da5
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:272
# 52d1c327672f4425b0ef0c54e9994cf5
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:273
# 074b368cb90c438f9041888ef8df079b
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:275
# 1363c66da9654ebd8c5c9dbe4ba65775
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:277
# f8ee57b7436e44a187a0c1f1fc1d04f5
msgid "The |chef client| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:278
# 4ac0efb8e5b641589b1af7c6663f2c32
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:279
# afb88a7759724669a52d87beee3e8852
msgid "An unrelated resource fails and halts the |chef client| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:280
# adc8f7c0f3d7439bae68ddaa45294f73
msgid "Subsequent |chef client| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:282
# 24f409a770a24f8b84822408deae0ea2
msgid "In |chef 11|, delayed notifications will run after the |chef client| run fails, and will be executed even if other delayed notifications fail. Conversely, if the |chef client| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:285
# a37f627e9fca440caa7ef4ad0e39ac93
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:286
# 40cc2bbac9084ee28d6963a45fe30857
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# 74a45ef5ca1e457fa01ed4e15dcb6691
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:305
# bf2970901ff242a6a862e2480aa2be7a
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:306
# d11b15361a344a219878091e3e468d11
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:308
# 788a3f4523424928a9bef9f8b00c63a1
msgid "Because the corruption is silent, there is no way for the |chef client| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:310
# 134b4f8bf1284c7ea7bb4a44a8d72e9d
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:311
# 07a933f5cd31407196e5ebe13e051390
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:312
# 70b7df93a10449e48823f2a4cec56139
msgid "|chef 10| clients |chef 10-18| and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:313
# 0abdecc502dc49d0bdd9d1cacfc25163
msgid "|chef 10| clients version |chef 10-16| and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:314
# 0aec3bd60b3942b3a3fca9bda9757ce2
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:315
# c1ca39318b4f4ffc8412abd4f068065b
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:318
# 18184554a3cc428b968ce18a67e244b7
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:319
# c0b038f92dad4a1c8f847a1d6034dd36
msgid "When trying to decrypt a |chef 11| format data bag item with |chef 10-16| or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:329
# cfcb98c95a4246b387210d9bc90deb7f
msgid "The above error output is from |knife|; the |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# c187243e5d074a84b97fab5f277c671e
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# 4d37ffdfd90a4b3d9bd2c9d2552c96b8
msgid "Before upgrading on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version |chef 10-18| or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# 4fb8351d7152497bbbe01b4639350090
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:338
# 85ab0d114ad941919e023a04ec1950b0
msgid "Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:339
# d9f8c71457ff43479d283f4628f4f687
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:343
# 4056c33c5baf49a9993dfe9f26b280ca
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:344
# cd5573f36e884b5285a284f1df966588
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:346
# 63c95bd624ad4c2b8d9c456ee7c492ab
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:347
# f7ff4bc9d6c042e88f39185176ccd678
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# d5c2e52edafa41e4b3ee54f78bffc9a4
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# 3b437d1ff219489f9425d6bbb400f22f
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:359
# 7ebc8101259a4fefbe8876831908c627
msgid "|knife| Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# 74e08dc75abe4d7cbf2b1dd9c83ff971
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:362
# 6080a56ccb32433a804c63fb230f4bb7
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:363
# 90d1070b83044eff9028169bc2b90118
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:364
# 91012826c03f40dead4252dd6dc44a70
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:366
# b2a565a715bf49cd9daeaee13a7c299d
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:368
# 6864ab655b2143e595c88bc11fcca793
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:369
# 7a73278669ee4537af4e3aeb4c515531
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:370
# 1f9d9e97fbab4166ac6af82df44ead8c
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:372
# d6256b503661491493267cadc70cdfba
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |opscode|-maintained cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:374
# 8e7c60b2b4904c62937cd8de49eb7310
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:384
# 1fb0a248e2f54a7085bb985432f5cad5
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:391
# ba67963096aa4bf4af9096895092807e
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:400
# ecbed2c1f73f40b88a2f9a7e439d8eaa
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:406
# 3f6dcf701cd74ac1b184820336a60645
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:410
# ff27f97cd7024cf09c6fb5f5c05e3353
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:411
# be5a60542a5e478ab42f542ea9622703
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:413
# a5c3f38aab2f4c5a87ea02d52262f24f
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:425
# e54099abdbcd4646a73152a2336f74ff
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:428
# 250fc15a783045d89e0540c5957a57d8
msgid "The Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:429
# 3ade8f113f32404c83a9abd79446752a
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:432
# a4648c10d6b846ffb3c520296a4ce56c
msgid "The /clients endpoint returns |json| with a |json| class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# 775bacae19ee4eec818384b6e27a5141
msgid "In |chef 8|-|chef 10|, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:435
# c38b8bd7566d47298814db07a865d0a4
msgid "This change breaks the ``knife client reregister`` command in |chef 10-16| and earlier. Forward compatibility is introduced in |chef 10-18|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:438
# 39b1c54ad50b4113a59c247d5362bf71
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:439
# 74c3435263414faba216a39c3c88d3ff
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:441
# fdb53540cae249ea9baf1a2a8fc9f631
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:444
# f276e5225e0940009d021d7d576199e0
msgid "Strict checking of top-level |json| keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# bdb3011b010743938cee936cd6314005
msgid "All API endpoints that process requests to create or update an object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:448
# 54a4214bcba74467b45e28147647f4e7
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:449
# 7fb108190a264c48ac2f37af2bf60a8f
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:452
# 60ae433a008e424986595a3edc87af9a
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:453
# 999c63b4a3ac44bda711b21d41a60e83
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:456
# cee5c61fa22a44cb8a02f9e98387c900
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:457
# 8e9e55aa5c9549459b26d0391548b94a
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:459
# ee951293fb6b4c7e92451b2334be4715
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:462
# 7f9bc1c6745a44f99190e87c7dbe986b
msgid "knife reindex is not supported in |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:463
# 649f4277bbe7430b932398d6cca0b7e8
msgid "You can trigger a reindex of object data using ``chef-server-ctl reindex`` while logged into the |chef server|. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:466
# d36c2327e16a44fc835a77f6ed0e9f2f
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:467
# e4f91671148e40e389c87855c9e4203a
msgid "Support for |open id| is no longer available to the |chef client|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:471
# 6d9768737c4848019898c55922779b94
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:472
# e6fb694202a14b2aa6fd6a76dfab733e
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side have been removed from the main |chef repo|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:475
# 25c7bc079453434b87bd2409ba013551
msgid "knife cookbook delete --purge is ignored by |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:476
# c591cead6b4141eb9d0f6de1a16451b6
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:480
# 84278e6d194f40188eb0d3d7ce8491df
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:481
# 0ca44bc0c7db481c9a46a0af696c314c
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:484
# d87e841d01154b4fbd3f28b9ef24b55a
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:485
# a6e1945c1f1a42af89fcbb2d0f88ff00
msgid "In |chef 11|, when output is to a TTY, the |chef client| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:487
# 6ad31271860d47218a3b6105c2a77dfe
msgid "If you prefer one type of output over the other, you can force the |chef client| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
# d0cd3af3382e47668b712c3cd1ca75b9
msgid "In previous versions, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:492
# d378c6440db0495e92f802bc21da9db1
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:493
# ef166117eed24a6489792eefca647cf7
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:496
# 0ad7ad0726cd4512853e4764c8fde1db
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:497
# 3b1df06215a2423b9b0bea0a6652f87c
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:499
# 81575ae51c4c4079a048a6fa0fc57ec3
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:500
# 94fa1d3d0bfe40f0b7c04b1ae3201afd
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:501
#: ../source/breaking_changes_chef_11.rst:509
# 6af76987f2dc4f26ae429af52d518c0f
# e18706d99192415ca697f44c2ab640fa
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:503
# fdb00905c8ea487b9311d5326540304c
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:505
# 2500d5fb9d9941ce9380dc5197b7d467
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:506
# d0ca36f1e36d48838e4fd3a06420b0b5
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:507
# f6829b5db72f4c68bd31336af3875bfa
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:508
# 2e3aee92579744cb9ce1f789cc37fe7e
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:511
# 0d7eb6dc746a470bb26903f3d347ca2c
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:514
# 5638d38f33e24d919683d593211badee
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:515
# cd182f509d8c46909108737f7a6f6d50
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained |chef client| run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded |chef client| run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:518
# 62b28a2eedea41a3b38eecf845586d78
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:519
# cbdef6d07dfb4776bdf8d5109c8dd4db
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:522
# 88d58ed4360e461cb5667825e36efafa
msgid "Partial Support in Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:5
# b7e76f79474749baaebd0ed5dbe90a14
msgid "A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:7
# 508dd3f1cf3745188c154ef516db8266
msgid "By using the |ruby| ``render`` method in the template file"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:8
# cc4327e68fa543fba3a02392fd64e292
msgid "By using the |resource template| resource and the ``variables`` parameter."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:526
# 856b09d9ad074ccea3c19ef422a65811
msgid "``render`` Method"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:5
# e46364708fdb4680bb4f4d16f9d106a7
msgid "Use the ``render`` method in a template to reference a partial template file with the following syntax:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:11
# ebbf2d27a52e4574a6b67ad1a62d6ce7
msgid "where ``partial_name.txt.erb`` is the name of the partial template file and ``:option`` is one (or more) of the following options:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:17
# 8d9aee7a556c4312827760b5e07dd5a2
msgid "Option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:18
# 5e71425d8d0b44a4b7370f91d3ea8b19
msgid "Description"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:19
# 9bf5ef8212644f4aa4002628c81f58da
msgid "``:cookbook``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:20
# 2e87a72db77840419a5a18e554639b9d
msgid "By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:21
# 36df883dc2254a8eb5bf4e8ebd8f3979
msgid "``:local``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:22
# 92666c8f31814ca48ceb032b4093eb48
msgid "Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to ``true`` to interpret as a path to a file in the local file system and to ``false`` to use the normal rules for template files"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:23
# eca220e83bd44723b1ec198ba371a9e6
msgid "``:source``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:24
# 999380d723344f3eae821f7e132fe520
msgid "By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:25
# a8fe41d41af34cd69a17260a450a9781
msgid "``:variables``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:26
# 14af397a04194e348346d61533d49344
msgid "A hash of ``variable_name => value`` that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:28
# 2b79f82c258948da998af493e0d2d9a6
msgid "For example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:530
# 84d568e00c1b40e398be6e95a0e1a790
msgid "Template Resource"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:6
# 75f5dbfbcd804064892aca2f6ca4d28f
msgid "The |resource template| resource can be used to reference a partial template file by using the ``variables`` parameter, the ``:partials`` option, and a |hash| of partial template files. For example:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:18
# ddb2ba0e995e4b36a395fd5edf366d45
msgid "where each of the partial template files can then be combined using normal |ruby| template patterns within a template file, such as:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:534
# b16a54495fc9444681bf6132569de47f
msgid "|chef apply|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:535
# da04e5e263df40ef90c5d2c4616814b9
msgid "There is now a ``chef-apply RECIPE`` command that will run a single recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:538
# 880ed0bedd204107930252b3400c989d
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:540
# fd9686b550754e41b7e00ca43c5cfb4d
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:541
# 14c965ffb9ef4694808fc4a0e2714c0b
msgid "|subcommand knife search| assumes node search when the object type is omitted"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:542
# d267d82b095a4b08bd532d511033cc10
msgid "|subcommand knife search| will search over roles, tags, |fqdn|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:543
# aef84708bffb4be09149c5e589d7eef2
msgid "|knife| essentials (|subcommand knife upload|, |subcommand knife download|, |subcommand knife diff|, and so on) have been merged into |chef 11-0|"
msgstr ""

