# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-10 09:56\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:34
# 8f2e2dced9674a3e866d650e74e871c1
msgid "What's New in Chef 11"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:36
# eec8d89f8f6f4f3e8cd8e1248183b23d
msgid "The following items are new for |chef 11| and/or are changes from |chef 10x|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# b3ba5799e2d24e2d8b8ed52d48802138
msgid "chef-client and chef-solo"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:40
# 7549796bf9474162b48e3bbf467263d5
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:43
# 425cf82ff1874ddca14ff11edf86df72
msgid "Shef is now chef-shell"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:44
# c1ea3684ecbb44f5aa847de830d58023
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:47
# de9a2a5cbc0649ea8d78fa449d6f767b
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:48
# 68e2f6ff563e4ab5aa413ab3ab8573e7
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:51
# 88574f3f52014bce8b9aed0f39ff152a
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:52
# 8cccb64882004eb49b245879dc3fb699
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:59
# a005efe4164449898e375f67f892a1d7
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:66
# 6b4f5a097be5418daace7ed07f744fbb
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:69
# 90f4a36ba5914ee0882dcc7886406d1d
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:70
# 3ed0aa96fdd1482294c0e7ba1345335a
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:76
# 202bb0e1659a43b7a4eecd4774b318f4
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:84
# d7ec0cf220ac4638ab674e84b80a99bc
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:85
# fde6d5852dc946fd88f128f2d8448b3c
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:88
# 51ee4b770933443d833b83127f381b8c
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:89
# ecd82acf166649cdbac65fa0286052fa
msgid "In |chef 10x| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:102
# ed61c086734c42faa1c5c24ed88eae57
msgid "In |chef 10x| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:105
# cb7eb780e060458c989c3a849215b549
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:106
# 59a6f2fbc1574797b3db1270d5e97234
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:116
# d589d0ca9732486a856f5ff9f33b92e2
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:117
# 6a1880a0af0f43b08c23c4fa8f08fa2e
msgid "In |chef 10x|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:119
# 1edad0b1bb9d45a89e69b3b205e275c4
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:129
# 860d6f9298374d9e930cdd6479f671c4
msgid "In |chef 10x|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:131
# 9314e423987d4e568a7ae22fa612d7e5
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:134
# 8b16e5a2fcf24d9ab633e40c277b1f29
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:135
# f7212304dd2f4a8dbbeb23d3accdc644
msgid "In |chef 10x| and lower, you could see which recipes had been evaluated by chef by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:137
# 3008e2ac14ef4e99974235655c470d29
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:145
# 127ea02b54904080a7ab1066a9d2b394
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:155
# e36ff107e5bc42c0bfa6023fc6338e26
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:156
# 09ec441415a74357908eb847f86b6e8b
msgid "In |chef 10x| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:158
# 29206a495372400daf764aaaec8f1c5d
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:161
# 5ded1d0135fd4896bfcb9a3c21cd08e6
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:162
# c8126989f78348eb8d3355d6a66a8b88
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:166
# 5b6562212ee74b31b2cf5c7b4569839d
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:167
# 1477b98251414250ad2f3d5776d906ac
msgid "In |chef 10x| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:169
# b89c38a5def240cfb81e9abbec06b5b4
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:171
# 51dca87fa28f4ab88def73e0f0daa89a
msgid "|chef| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:172
# 792f9ba865114923aa14766d49e1f111
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:173
# 2bb792431a3c4a9f9ecaa5abf2b8ae5d
msgid "An unrelated resource fails and halts the |chef| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:174
# b1d3ad5c7c73413e8a066bf60a941a7e
msgid "Subsequent |chef| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:176
# bd7bcdcd2fb04e9caac17061039e3f29
msgid "In |chef 11|, delayed notifications will run after |chef| fails, and will be executed even if other delayed notifications fail. Conversely, if |chef| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:179
# fd695bff7e2545059f015aa6d2533381
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:180
# 0d612e1068ca4df6aee0bbde31183ade
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:188
# 8da8eecb617c4575bde4431ad69ce0c8
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:199
# 8a90a94abb2b474aa22c57e396523f9a
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:200
# 92608fd7c61b49da959566165348015b
msgid "In |chef 10x|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:202
# c50849a1896843ea9a18af0a6e8dab8e
msgid "Because the corruption is silent, there is no way for |chef| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:204
# 37ecb31e364f43a3994b97e464f52ba7
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:205
# 0aeacbaa210e4af898ade10da2a3bcd0
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10x| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:206
# 4add25721cbd484c824fd684c3705f0f
msgid "|chef 10x| clients 10.18.0 and above will be able to read encrypted data bags created with either |chef 10x| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:207
# ced00f762cf345feab4fba0f991f7ed8
msgid "|chef 10x| clients version 10.16.x and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:208
# b937658484744283963c7c8bcb463328
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:209
# cdd73baa78944f52871e62aa8a70fce3
msgid "|chef 10x| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:212
# 9a817877595049a894d8cb55f7423a67
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:213
# 9b7ace63b72b428e828887bc81e5dded
msgid "When trying to decrypt a |chef 11| format data bag item with |chef| 10.16.x or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# 4720874375634538a6f9f5093f7243d8
msgid "The above error output is from |knife|; |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:226
# 19f5e85f884d47c89af4cdbc2b9908d3
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:227
# 764f534c616a43caa9343b78d6705ba7
msgid "Before upgrading chef on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version 10.18.0 or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# 0b8b5f1ca6684590ac1ec96b3758c4de
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:232
# de5bc8a834164db9b1e43c6b3add226f
msgid "Chef Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:233
# 27bfccd91d6945d781c9582b75a4721d
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10x|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:237
# afebe90536184fc88c2bc0e99be6d23d
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:238
# e5d2d3e277ae4035b6082cf4f324f40d
msgid "In |chef 10x| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:240
# 08808797e8b241f9b91e85af0183d12b
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:241
# bacfda861a584d6fa9a4064b8c70e870
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:242
# ed25e8d219614d9888bfaa58e59c1aaa
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:244
# 2685421e31844605b2c770c0b4a12e57
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10x|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:253
# f789cd945b8f4ab2837fff57547c5f07
msgid "Knife Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:254
# dc638cc63c8b49428eec8c43ec8a4b7e
msgid "In |chef 10x|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:256
# 2ab26e6f995a49fea39547d7c8e1a16a
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:257
# 5e03d8c2f43f485f89690e1fae745859
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:258
# 022b185a7bbf44a398cf0b13fbd9f58a
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:260
# 06f109ceb9d94eb08e73642dffc02a9c
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:262
# b2af70f9cf6543d4a24f473790822873
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:263
# 04299a929f4947dc9f175c4188e5907b
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# a5adfa0646654bbda27fa5103e56153c
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# 52dbe48e1ea648a0b6189f5f63b87a10
msgid "Depending on how |knife| plugin authors have worked around the |chef 10x| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |opscode| cloud plugins have been reviewed and should work correctly on both |chef 10x| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# e74dc6344ff74c7285fc861e6c16c556
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:278
# b9b005f7ac784438afdfe2f3c3c039a6
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:285
# 57bc8747163f4b86961fe456da85601b
msgid "If compatibility with |chef 10x| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# 32d9671ca7b04effa5956608daf361db
msgid "Default values must be managed manually until support for |chef 10x| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# 625c18735f19445aa39b2223e95da8ad
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:304
# 5b2f23da5d094cecadf55f075d4207a0
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:305
# 2829941b202340cfb040fcaffe3edfe0
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:307
# dee1e99ca5bc4b6181e5728e82ca4865
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:319
# b9e8c907d4934a7a928c5f5991300650
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:322
# 770abcaf004c41d8857b227cc401d6d4
msgid "Chef Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:323
# 122012e5cbaf47298a4926b3824da9da
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10x|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:326
# 74ffb2413b1741d5ba9bbf6f9d4a24ac
msgid "The /clients endpoint returns JSON with a JSON class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:327
# ae0a7917469a412587acd73b351412be
msgid "In |chef| 0.8-10.x, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation in |chef| uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:329
# 178e8427113d43999614029361f8e5a9
msgid "This change breaks the ``knife client reregister`` command in |chef| 10.16.2 and earlier. Forward compatibility is introduced in |chef| 10.18.0."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# ddc351a2e2ee462694534659a4c681f2
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# e80526962a57473b8a37cc96dbeb5d16
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# b9d3884a855f454482ccaa10340e9f5f
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:338
# 001123239fee46c89d156c672046b5ae
msgid "Strict checking of top-level JSON keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:339
# 3e029e124aa84ad8aedf1d12de4a48e4
msgid "All API endpoints that process requests to create or update a |chef| object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:342
# a75aed825d2e4826b04d33e91db25a79
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:343
# 1170a4684e0e47548bcbfd8b3636e9a9
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:346
# ff8ad77ab62c418c80183318eac9f2f2
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:347
# faf9b017ac4b4a63b15496dfdef69993
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# 86be5aa3877c42f3a6dd389958e771b4
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:351
# 2e85fa1ce9f84dee84cae90caa358e99
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10x| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:353
# 679f9f7bce414eb09acea35082e27e1d
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:356
# 12578707a270424980e75129d4341154
msgid "knife reindex is not supported in Chef 11 Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:357
# 47989dbe66224ced912fc058c6d8f3e6
msgid "You can trigger a reindex of |chef| object data using ``chef-server-ctl reindex`` while logged into the |chef server| box. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10x| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# c8b222ebc6174b18bfa264201a593802
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:361
# 451d3ef604aa42bdb75bcce08b5dffe8
msgid "Support for |open id| is no longer in |chef|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:365
# 8785b987ed324e2f80b57dee284661fc
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:366
# 9d05f406ee5f4e44a72e70b3e9201038
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side of Chef have been removed from the main chef repository."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:369
# ac9d186b30cb4460a9ad496311b819dc
msgid "knife cookbook delete --purge is ignored by Chef 11 Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:370
# b11a61360acf4c86a1f12b2d0b70a81c
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:378
# 87385d384a0a453fbf0613f342fe3fb1
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:379
# c70dacb93ad641ef9b888d19fab48327
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:382
# 4c97aa02ae6a460e8620f143b212706a
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:383
# 12a8d0811c1d4204b6350331696de0be
msgid "In |chef 11|, when output is to a TTY, |chef| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:385
# 8de6dd4382794f3eb6d1f74babe23150
msgid "If you prefer one type of output over the other, you can force |chef| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:387
# 394f8e56ba6941629dea2840cb1a3c7d
msgid "In previous versions of |chef|, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:390
# d48fa1df657949e4a213ab564df2dec3
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:391
# b3b3357890874c73ab958b0c5c330374
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:394
# 4c18de73436b435d9e9aff0b862291f9
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:395
# 6a79818291c5442b972c3e424bf9d5a7
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:397
# 87a6cffc7ea3448eb8cebe22eab683e1
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:398
# bbaa8c3f9a5148e99f1aa126cb8bbab1
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
#: ../source/breaking_changes_chef_11.rst:407
# a7931da5aafe46c9b5295e09a8eaa9c1
# 59944f3656e5424f9d7a91d1b1093d13
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:401
# b3df887fe7e24aeab84e282f75733d70
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:403
# 1c9a45361f984a34a459af410952b771
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:404
# 67a9df6583a541dca77eee2a1342e950
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:405
# 98894b23bbce46d4b98ce389d77c54f1
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:406
# 7de9ab4ef9fc481cad89596a8ba95780
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:409
# 452ac145f79f4c32a25d69410795efc6
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:412
# 5d8d4982287449e19eee871e7b887eb4
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:413
# 146d9d36c70641fa92fc15e2b0b016ba
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained chef client run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded chef run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:416
# e05462a76b8c46799dbe2aae6d24eacc
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:417
# 1d2b80a6517e493890d2e374d789e14e
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:420
# b266062606404767a6ea44b9d9b0bec5
msgid "Partial Support in Templates"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# efbc8a6fe8f64c71a33d66f0eeff79bb
msgid "Partials can be used in templates. See here:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:423
# 7993ab40629a42018652e9a46a146f81
msgid "CHEF-3249 - |chef| support for template partials - FIX COMMITTED https://github.com/opscode/chef/pull/498"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# 3a7024cfbe2e4c00bf8d66f27306544f
msgid "chef-apply"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:428
# 41a0dace36614d699ad81c028214ae0f
msgid "There is now a ``chef-apply RECIPE`` command that will run a single |chef| recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:431
# c520e1d375dc456cbe3911f5a6eb0712
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# 7858110364ae48a5b274bab6b72fa36e
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:434
# f3f7106e41554b77b7b249b92ef75032
msgid "``knife search`` assumes node search when the object type is omitted."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:435
# 5b373b1df2084c7d8994db5b27b102d5
msgid "``knife search`` will search over roles, tags, |fully qualified domain name|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:436
# efa803a7bc1440e48db7fc515e78bce1
msgid "|knife| essentials (``knife upload``, ``knife download``, ``knife diff``, and so on) have been merged to core |chef|"
msgstr ""

