# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-14 11:24\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:33
# 43c446d4f4a643869f8eaec0dd4dae47
msgid "What's New in Chef 11.0"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:35
# f0d47ae845e64ec38d623e31d5a173bb
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:38
# bfbdec22bc0c4e26bcc03fbe2124fcda
msgid "|chef client| and |chef solo|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# aa06b7a0283a4b0c9d3e16c5552fbf59
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:42
# 699f1731eea14c06b51b6b00302de829
msgid "|shef| is now |chef shell|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:43
# 86bbe60b63994921aba8699cc1843f8b
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:46
# 00ef45250d3941289cf84f061a546e15
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:47
# 7d667e5995a44561bfac46211da9b101
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:50
# 85a38b1ac9d64e9fbb4354e7cd29407d
msgid "LWRPs AND Recipes Both Now Automatically Qualify loaded Gems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:51
# 4071f143023b4529a6ba71590f181167
msgid "Previously, in Chef 10, one could do the following in a recipe:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:55
# 295c05df453f428c8bb5a50cc62b8f52
msgid "require 'win32/registry' registry = Win32::Registry::HKEY_LOCAL_MACHINE"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:58
# fc0f0385f32549e2b84f29a5daa32390
msgid "In Chef 11 you must add \"::\" to the beginning to avoid the automatic addition of a \"Chef::\" qualifier."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:62
# acce4005861e43ec8b0eabe66ac19074
msgid "registry = ::Win32::Registry::HKEY_LOCAL_MACHINE"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:65
# 9a0b7f6c2723460994417fd5998b41dd
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:66
# 682a44a2085742d38bb9323093931359
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:73
# a13b7ccae4f445a2816fdba069b0eede
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:80
# fd15f112833f4b98bf2902f89454a6d4
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:83
# d955301fb4164d6fa8f8d1d137f41e6b
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:84
# 00090a54fe384892b78b057e9ba603b8
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:90
# 69897e9aed0b4659b2ff40084fefe5f3
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:97
# 543d19d94d2647a898f879c1ade4a94c
msgid "|knife| Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:98
# ae9745e3f79d4e42b88efff2cce0cd38
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:118
#: ../source/breaking_changes_chef_11.rst:165
# d375e274a0544094a6a0e9e0ddcf8297
# 78b4d82877f84ab49db812a952658543
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:140
# 073165d53c4444f681372c4118880eef
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:142
# 90a156c851be4470b7f3181a186caab2
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:190
# 1750a26aa98d4a419189f62faa5385eb
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:191
# 80c9815829814bc68ace719cf9672b33
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:194
# 61e005d8832e4b47b70643ab6001a505
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:195
# 053a163e977c479f81763064ee6dad7c
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:208
# 2f16ce5564bc40a5b057ebbffeae4818
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# df678e3e6e5f467382617a441f45b16a
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:212
# 77e128a2f3c246ab93ba4240cba18afd
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:222
# a3d227f0f2454972a2ba3b49b276eb78
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# c72033326c0244ccae3bad596a43adec
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:225
# edb2416f6cf145948c111fa52c4cd141
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:235
# da55fea5a4d44d81932dd08bbdb368cb
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:237
# 9e7eead83cd34fc4b3d67be57d47c3f2
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:240
# 5b13c4d4143b478a8b030c99cfca3fc8
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:241
# 226ffb8c856d44288ead28f8f20e3d6a
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:243
# 8503107c44334d48aeb5c676b0e3a792
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:251
# 917e4a8278784a0195aa5a6b41d611ca
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# aaa47a2bc8ae4449aefc6696acccedc9
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:262
# 14f63621845f45d0952602b1f79ff650
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# c0cbb5d12c3e445cacba428af3876bdf
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:267
# 7781795d4b3c49f6bef24d6d5e6484db
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# 3eb21d76b5ac43b3a2268adf0cd0e143
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:272
# 166d09ae5d054ffdae9ce1c6d7503530
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:273
# 1f22c410cb6442a384ba5b78c01c3d2e
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:275
# c704480079e8476ca56c9a87b515bd26
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:277
# 9b9726231c5e4f8c97f4e5370d803d8c
msgid "The |chef client| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:278
# fc4900da010e4bd786244549c26351c2
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:279
# 3cdd9fc62d9c47f1913d286595b9367d
msgid "An unrelated resource fails and halts the |chef client| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:280
# de0bf7e658c743acb42596abe3a268d1
msgid "Subsequent |chef client| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:282
# 7410fd2d496447948198fdcfb836aa52
msgid "In |chef 11|, delayed notifications will run after the |chef client| run fails, and will be executed even if other delayed notifications fail. Conversely, if the |chef client| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:285
# f370d4255a5c49f1b05806cf49a71eba
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:286
# 0c226d8150bc405b97b981182fab2223
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# 875e8c1337804add95abf162710a5de3
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:305
# 767f12d4e5694d27a3cc52a791389d10
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:306
# fb8ff0f5f3c64c519073054fe3016c29
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:308
# d3ce65318a4d4271877bcb74062b4ffd
msgid "Because the corruption is silent, there is no way for the |chef client| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:310
# ed69c77b120540ba97b49b7ef6758883
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:311
# 133449272eeb444aa57d7daa16d6cba1
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:312
# a88b4dcfd28243ae887cc46cb5c6a3ad
msgid "|chef 10| clients |chef 10-18| and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:313
# b617f36a7b9f4266a97540a03762ed16
msgid "|chef 10| clients version |chef 10-16| and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:314
# 6416b5f206bb4cdbbc43d2803dd6daea
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:315
# 4249a25b108644389e6ab2be4d28db6d
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:318
# e21d3c1576074c68bb8a5a4d4d9f782e
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:319
# 833428deae084ad6959065eaab86075e
msgid "When trying to decrypt a |chef 11| format data bag item with |chef 10-16| or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:329
# 0dbc87aeb8b34a3e9618dbd9785f6867
msgid "The above error output is from |knife|; the |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# b7e489b298c34481a6fe4bd3f3afc598
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# c5b9f61a9f49433da38c962825fd760c
msgid "Before upgrading on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version |chef 10-18| or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# fab797d66a9d45e79ec88134c7460897
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:338
# e0d4c76b63384dc4a0fb9666af9844b8
msgid "Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:339
# c0fefc4f71174123ab904885bf597c6b
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:343
# f487fab7cf8b41d099682318dd414bbf
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:344
# 4afe1137c5a44f79ad99977875819346
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:346
# 1f1add1206804af5a9b8f88e82911aab
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:347
# b068c00af7ae4b7aacde9a3c45d4946d
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# 8d571249ad1c472b8b40e1164c620d18
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# fa36ac78af16494eb16fa88719746bef
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:359
# c472ba904f5440c6818d06798277f97e
msgid "|knife| Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# cc8822e58d134900b622294ef3b6c64b
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:362
# 79e3c2b6f29b4ffc8e7bd4a2498ff67c
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:363
# 76bdab602cf44663b19f94f13f1de11a
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:364
# b275f586b20246d0a7cb553c15f06aa6
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:366
# 0e0e6fadeff44027838376cd64aac09e
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:368
# dae39ba469be4d58829ace1b4e1f415a
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:369
# 9ec1d9af879b49bda0a302ff3ed3c7ef
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:370
# 34280d71d5474c0e8c7c32a278a78133
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:372
# daad7adf617945b6bbdcea197757280f
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |opscode|-maintained cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:374
# 3ce66506d3db4692808ebe3866e50d1a
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:384
# 980772990708416ab209996fc6ee5b99
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:391
# 3b5c1d6744064f12b636abddd0650669
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:400
# 2018f29d798346ccb4c286e8eaa33414
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:406
# 22bb64cc0fde4a968d9a0e14fcf95360
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:410
# 05363f94e30b4e75b471dc813e6fe0d8
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:411
# fc688f1d2232408fa74f9d9fe59eafb6
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:413
# 04e0fadfaae946c4b3d24e7d1b083e58
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:425
# 95005377687441bf88b876c8bc7a7f3e
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:428
# ba5902ee801a4016a6653cd587546985
msgid "The Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:429
# 06b5d2fb6f184918ba179a6a0420b1cd
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:432
# 9b77843dbbc94464b03a0ae04e15d8ac
msgid "The /clients endpoint returns |json| with a |json| class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# 8b86aa93ccbc49a586cb8ed401b0d37d
msgid "In |chef 8|-|chef 10|, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:435
# 9537e71722e448aca4678ed8326ba12a
msgid "This change breaks the ``knife client reregister`` command in |chef 10-16| and earlier. Forward compatibility is introduced in |chef 10-18|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:438
# 12e5d35c2705485590c55e171e74ac26
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:439
# fdf5c71ed7644636908053482d9db54c
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:441
# d876363eec87420ba191886a71520d72
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:444
# da2d649353654fae9175a77bba1eb307
msgid "Strict checking of top-level |json| keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# 03465abce696444da48435f9cf735bc5
msgid "All API endpoints that process requests to create or update an object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:448
# 06b298a4e30b48b18ae70753d3117506
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:449
# 2d5ceaf54155488a966bc5ae5648b38a
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:452
# 2eff9a48a6fe4f819b861b8f76929d60
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:453
# b39050f31a2d437cabaa7009205ef544
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:456
# 74d7c58adca2464ba64fbf53d3ad8fb7
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:457
# 6d82faf970d241deb50795626b0f7069
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:459
# fc0a87a7b6554395baf5e35558c793ba
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:462
# 58138612e03a4b20a247a22d1a526647
msgid "knife reindex is not supported in |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:463
# 1da790d96dc04b35ae6d2b7b3dcb3fef
msgid "You can trigger a reindex of object data using ``chef-server-ctl reindex`` while logged into the |chef server|. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:466
# b44e3ed06a014807a78ab406bedb6bea
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:467
# 83ed7d0052d6405ea9896571fd47bc61
msgid "Support for |open id| is no longer available to the |chef client|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:471
# 228c5dcbab0d413392635b5d10319cd3
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:472
# f929da31fea34de6845d44776873c0a4
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side have been removed from the main |chef repo|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:475
# 5cacd0fb6f7e428f8a7ee705dc48588e
msgid "knife cookbook delete --purge is ignored by |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:476
# f0ff8e15cee840ea94fa933756149db7
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:480
# f60ab4916a714667b59a141a75f7e6dc
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:481
# 5afc39383f5f4e9d8d06ead75d7b4512
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:484
# 3571d4152c644f0dbe7e3dd55b91fbed
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:485
# 56f9a349931944a89cafcbe678da8e3f
msgid "In |chef 11|, when output is to a TTY, the |chef client| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:487
# 0cdae63356a648d5845dcc89e209d92b
msgid "If you prefer one type of output over the other, you can force the |chef client| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
# 591cb6078e63480cad94198b5dafae1e
msgid "In previous versions, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:492
# 95e9a7697b674425b770662f243b0e51
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:493
# 80bbd31e18d34a5881e99f26c2f5cb1c
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:496
# 7d41c7d7c3764b85b67dadb3e3eac586
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:497
# 3fc9ba6f95384a75a46cb08f3e3e8d9a
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:499
# d9bd455358984a2bb67903450cc87576
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:500
# acd57770e6ad4be08e4475eb10e758c9
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:501
#: ../source/breaking_changes_chef_11.rst:509
# a335105de26246eb986e21d2e3e978fa
# 2fe4500f7ace42fbb1dbee993c43c82b
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:503
# 809dcf3bf188416cac16c393c98e917d
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:505
# d58bd79fe9c74addabd2eb22f2ba4a8e
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:506
# ae5d3f333a914cbcace15015bc6f2470
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:507
# 37230bf14d93407ebaa35562a270d021
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:508
# 53c000110be041a495511c433d7655d5
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:511
# b87de2ca14d445f3a57043e6c9e64638
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:514
# fc141b2a050a49a2907f2ca18fe09dcf
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:515
# abdf6c78cb1f467da209697625565c8a
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained |chef client| run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded |chef client| run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:518
# e239b0c15def42b6b33f48b6675550d7
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:519
# c787a8c9b58047dd9750083460a65c2f
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:522
# 9abebf1e857046c5b7bc7e314d9cafef
msgid "Partial Support in Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:5
# 7a6bce0fe59846a0a286063f13c47963
msgid "A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:7
# 0e0db9d9895148739c3f333ca50f0526
msgid "By using the |ruby| ``render`` method in the template file"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:8
# 43667c97c53c4497a1c3c6a3b4f06873
msgid "By using the |resource template| resource and the ``variables`` parameter."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:526
# 5b16a096827f4c8592e336e005d91d23
msgid "``render`` Method"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:5
# 7492b064a7c94ecfb9f03b83305739e0
msgid "Use the ``render`` method in a template to reference a partial template file with the following syntax:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:11
# 86e06d836ffc47d893a36dceb16a2568
msgid "where ``partial_name.txt.erb`` is the name of the partial template file and ``:option`` is one (or more) of the following options:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:17
# cebad7854d904168b760fe42ba3be3df
msgid "Option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:18
# a3841cf1c68e4282baa37b234edf7aab
msgid "Description"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:19
# 4f9b32f257b54a16b1c9c9f078c07cc1
msgid "``:cookbook``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:20
# 1ac64f521994420db7b07497e61db2f7
msgid "By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:21
# c1e2b920d6a043f3984624ca1d0ebb21
msgid "``:local``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:22
# b9cb00a02cc34129bc027b5d9bac5f36
msgid "Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to ``true`` to interpret as a path to a file in the local file system and to ``false`` to use the normal rules for template files"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:23
# a090d5065adc4aaea34b6b9fd739a6f5
msgid "``:source``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:24
# 424f9057975241d38f902c01be142bdf
msgid "By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:25
# 3d9dcb27f70e4f3e8e9d98dab579042c
msgid "``:variables``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:26
# 3af134c7589e443d91806b1f8f137cd8
msgid "A hash of ``variable_name => value`` that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:28
# d5b7c2848567470e96e0b32d2fe5a3eb
msgid "For example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:530
# 05a54e5f614f407cbc5ecab90d372cb2
msgid "Template Resource"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:6
# de8b88a7bc304b8bb35f7315e488ce40
msgid "The |resource template| resource can be used to reference a partial template file by using the ``variables`` parameter, the ``:partials`` option, and a |hash| of partial template files. For example:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:18
# 0b1f57463b7742918560d8f1ddfb37e5
msgid "where each of the partial template files can then be combined using normal |ruby| template patterns within a template file, such as:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:534
# 8bca6a0bb63d48a6a94fe25e31b70bfc
msgid "|chef apply|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:535
# 0fdb251aef9a48099ee8d0e7b3ca4414
msgid "There is now a ``chef-apply RECIPE`` command that will run a single recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:538
# 5f913855f9f942a0850391d81f364a96
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:540
# 7bf10775b84f4d309f95b4bccea2b26c
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:541
# 2353bed1c400475090d418a3d8206e47
msgid "|subcommand knife search| assumes node search when the object type is omitted"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:542
# cdcaf42278304375a42a741d5cb7e025
msgid "|subcommand knife search| will search over roles, tags, |fqdn|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:543
# 67bfa162f3374be19cad1db770fb8ac2
msgid "|knife| essentials (|subcommand knife upload|, |subcommand knife download|, |subcommand knife diff|, and so on) have been merged into |chef 11-0|"
msgstr ""

