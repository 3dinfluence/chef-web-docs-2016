# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-06 00:26\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:8
# 7227f658f5274c04a79357af84503d3c
msgid "What's New in Chef 11.0"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:10
# 53577dbff2c3464abf774fcc2f737025
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:12
# dd5dba8a196e4288924ce49150d3095b
msgid "The |chef client| 11.2 release is updated for Ruby 1.9.3-p484, which resolves a security vulnerability that existed when using prior versions of |ruby|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:15
# af19945062ee488495935dd9f57178b3
msgid "|chef client| and |chef solo|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:16
# 17b2cb1f39674fce9414422efead76aa
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:19
# 9e27f6f4b1e148b3a23d3373f6578243
msgid "Custom API usage and Databag Population require Chef 11.6.0 or greater"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:23
# 62178ab115c64a2e9633440e44db500c
msgid "knife data bag from_file"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:25
# 3282521c1db84e7d9a937c630ee397b4
msgid "This example will fail with Chef < 11.6.0 and EC11 or OSS, as the /data endpoint has become more RESTfully correct. See https://tickets.opscode.com/browse/CHEF-4435 for details."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:29
# 2afaad2e9f164b768b91dc3de0502a5f
msgid "|shef| is now |chef shell|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:30
# 1ca4c103fc824c759f501add5c52d889
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:33
# 077c5b2c6dea4fa8a6f8c832da9a57be
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:34
# 675968405dc24c40b8636789dbeb0ce9
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:37
# 4d273d7465ed40c2be73b8c1eb1a0d17
msgid "LWRPs AND Recipes Both Now Automatically Qualify loaded Gems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:38
# 26f8ece6c59f4217a7f49fe112a7f712
msgid "Previously, in Chef 10, one could do the following in a recipe:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:45
# 8ab0cba9d4b6458d9d01ec4ad40acdff
msgid "In Chef 11 you must add \"::\" to the beginning to avoid the automatic addition of a \"Chef::\" qualifier."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:53
# 44d2dbf1394547bc9bae339881668aa1
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:54
# 33d555bb5f024cb1b63b25341860db3f
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:61
# 2655991ba50d442688e9801f94a2b3ab
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:68
# ec65b6d5843142098b2362bff7e1ab08
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:71
# 15dfbae6d32e49b8822ffb98feb2f5f0
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:72
# a315e2f1ebe448d287b3e8835cac6b44
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:78
# 0d8198e27f024d558d921cdd7271ade8
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:85
# 817ff3f665bc4e5d8c05b2d9b845a406
msgid "|knife| Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:86
# fbd926ff6e3645fe8db03196c069c2e8
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:106
#: ../source/breaking_changes_chef_11.rst:153
# 36315120d17d48398e9b6003b9ceda07
# 66697e62e1ee45a995e4c06cec4b68f4
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:128
# 9cffe1ba652d438db60a5880b0a41783
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:130
# de3372b3512e4c21882d5077bdf02b17
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:178
# c63eb283a01d489d8b41e38dacec462d
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:179
# 99211b735be8459d9f4378424ea789cd
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:182
# 3977198d8c144ebaa3f1dc4556664f1f
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:183
# 5e6cea38e69a4548884b196d8009d652
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:196
# 7377d8c2f8f2409081c317457cd3a8bf
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:199
# 8e6b4f7ce3344b46b62808f7d16ae0fc
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:200
# 300f9cfddf894ddb98dcb3d754f586b3
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:210
# 561af5ec38ae450b83463c797bb80cb4
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# 1d4a0302c15841e5bb1d3d15042990b3
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:213
# ab7b8a47a45f4ef0aef077767e0198ae
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# a0f5a8c98c494f418ed08c44643195b1
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:225
# bde64b7488e14342840492d9688fb0f7
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:228
# 06a2d75cc5034f92a75ce30ae8a09623
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# 05bc833e9d104a899428cdba5fa26ba0
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:231
# 58ea668e6da248bba7dec4bf9ef6b00d
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:239
# 7097b3ee7716454eb8e61dac53c938ad
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:249
# 6702e98da07b4f38a6e8029d47d9fe21
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:250
# 2876d4ba6737453eb7c2b7107ca75ddb
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:252
# 590a673e6d9a496b8bd35a2200a13b5c
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:255
# 97c795824efd4431871c008700c7b732
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:256
# 766b64eae4db48c58c8a0204d7730401
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:260
# 2ee793da787b4f68beca75509a2439de
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# 7947c25a3e94428db262ddac3cbeba7f
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:263
# 184f897d32c94dac809e38b27522e19d
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:265
# fbad2102db324650bc3f8c1b1488cd08
msgid "The |chef client| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# 7ec6dcbbbd1c4d7999e50631406820e8
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:267
# 2d3c2a6ab6c9447aaa9716974d82ed0b
msgid "An unrelated resource fails and halts the |chef client| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# d6c6dab5113c46b3ae7d25f7d44501ed
msgid "Subsequent |chef client| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:270
# 7a2b8b4181544f65ba3c0642f93a7f59
msgid "In |chef 11|, delayed notifications will run after the |chef client| run fails, and will be executed even if other delayed notifications fail. Conversely, if the |chef client| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:273
# 60fa33d2fe134b35b3303ed6cd327020
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:274
# 1d104b3bd80d4cc786367aaca8e9d0ef
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:282
# ad5c5b4c1084445382187a676132f750
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:293
# a8e93ebfb4e24e51a55dfb78ddffc6f8
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# 624b3971f2cc48119a410ec8b93b4a28
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:296
# a14e8757ec9f47558d031a4fe10fd1bf
msgid "Because the corruption is silent, there is no way for the |chef client| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:298
# 491ea50ba5e348849cb5a37126dde0f8
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:299
# f754deea18a746ca86c49ac5f07abde1
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# c86494be30e14342865a9ac7847684b1
msgid "|chef 10| clients |chef 10-18| and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:301
# cb14d1b6355a43908b9bda9294c09e04
msgid "|chef 10| clients version |chef 10-16| and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:302
# 925c0b7f836f4fcb92fe7576cf7adb33
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:303
# 01796a9c81764aa2bff7378da2e182a7
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:306
# 563c67336e5d40f4a06bbfc6e6ea8dd6
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:307
# f5702425981a44309ca2e36b5e187950
msgid "When trying to decrypt a |chef 11| format data bag item with |chef 10-16| or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:317
# 80e8c5320f264962a427a0b5eee0f613
msgid "The above error output is from |knife|; the |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:320
# d969415b369942308ba5f2a1e5b90118
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:321
# c38126b6ffdf4ef983d6a7f533a7ec9b
msgid "Before upgrading on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version |chef 10-18| or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:323
# 91297ad8fe604662a850bc4b1ae2dd00
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:326
# 7580e0fbe56749f2a3433af643a146f8
msgid "Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:327
# 3b26f8ab50574eefac21dbb01eda1c73
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:331
# 2e1d96811376499991388a33eec14d87
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# edce686762f140818b90aa26a6a169ea
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:334
# 365ca9a2b63a429683c7c4065b9c583d
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# 39924ea95ddb417094f2e01c7c31820a
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:336
# ea6fa6eb376443ceabbb243d24e4a1be
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:338
# a31f0236b814471b8fd16579ac173f6c
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:347
# 9c71cd38eec5468281b4f9d347ce2eab
msgid "|knife| Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# c0420d265a6e47d68384887c8cf99805
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# 5d5ff2fde12b419a9391eb494825d266
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:351
# c7e92e0893394d8ba20a4604643f73eb
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:352
# 0604e36422b144a3b463eb9a7da8ad61
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:354
# 339233f6539d430699ae4c5755fffd9c
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:356
# 263c48c99ace4459bc082800c3759fb6
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:357
# a909c7a2c2e24a0da023b1a48f24c53f
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:358
# 4ca5e492f6a947319a2e7b235606b6c5
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# 07d8c4e54e5b486784e51b3c5291f9e0
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |company_name|-maintained cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:362
# e84cc2815bc1430eb17740ddaa9d10a4
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:372
# a3029be43b7a437bb795360ea88699df
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:379
# 798e0ca560d14284b7c25e49ab220aa6
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:388
# b8e12db693054255b78da984c5be3e81
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:394
# a565be5152b54638a7589382e1e10b77
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:398
# 3d4e1b6590634e6d8ed15dce4f6b419a
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
# 0d374d6df323426286db08dd24df150c
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:401
# eec1375dd9f649208d61388f9ee83ff3
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:413
# 25a085106be3434ca81b4cb66475bce2
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:416
# 5a125031697d4701a886ab8c4ba0b977
msgid "The Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:417
# 7b19e45efbb842c5adc03f991b13923a
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:420
# 6da0f32c134d4486b0817bb9a6a4e56a
msgid "The /clients endpoint returns |json| with a |json| class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# 24f7995ddbe7464c8b823265b1b207a4
msgid "In |chef 8|-|chef 10|, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:423
# f495d13d64e94ae491d556028651c778
msgid "This change breaks the ``knife client reregister`` command in |chef 10-16| and earlier. Forward compatibility is introduced in |chef 10-18|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:426
# 8a78c52e1e4941e9bdc364869b75c814
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# 6d1f611c8f6e45d2a257d979a4f756d0
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:429
# 0cf023f692144996a67fb9a26fd07808
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:432
# 6d813136b31141c8b407468e7223e2e4
msgid "Strict checking of top-level |json| keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# efc78d4639564c95b27c41b0ce047992
msgid "All API endpoints that process requests to create or update an object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:436
# d2987e9176e54045805f8aee797d54f0
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:437
# 0b60984f1f54424c8fe61901c5fb6a84
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:440
# 21c657afdb184ae788a4f28a7787d94d
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:441
# 5113c30ebe354a3d85808a53de63d417
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:444
# 2cc95ff5a2484a569c79020c40a74236
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# eb665058ef514abebee54351c8091656
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:447
# 5403088114d14264851b6b658465e944
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:450
# 0978a9edb533442eb93374086e68e736
msgid "knife reindex is not supported in |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:451
# 633f53491bdf4063ac38781686097aca
msgid "You can trigger a reindex of object data using ``chef-server-ctl reindex`` while logged into the |chef server|. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:454
# c1c93a826d634e3e9c894bf61fec158a
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:455
# 6dca991173be41e6a4c11c4beb467f8c
msgid "Support for |open id| is no longer available to the |chef client|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:459
# 37a48d8c4af445158c3e3a189af39958
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:460
# fdcc0dd1dab14492a6aac64b4873c140
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side have been removed from the main |chef repo|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:463
# 66544b7acc91461dae92748f47889b54
msgid "knife cookbook delete --purge is ignored by |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:464
# 71c532c32b55459b8e231a0a149b932c
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:468
# f81948b0c75d4c6595fca0cdafb18fb7
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:469
# 1842306d044c41a9bedde0b1e5131a6b
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:472
# 86b4b602f38a4e139e874d82b3a1491b
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:473
# 00d5d83ae2834617bdb8d2263ac7ba5c
msgid "In |chef 11|, when output is to a TTY, the |chef client| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:475
# 22d29836b0ca4addbb93aa02edb4b47b
msgid "If you prefer one type of output over the other, you can force the |chef client| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:477
# 733ecf347a5e4689ba0e45cf90708c0f
msgid "In previous versions, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:480
# bf1f4fea70e942edbc32a2f57663201e
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:481
# 47ed6f0a0bda4883acdd65611eea498d
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:484
# dfd5fc77240b456ca55e44d74091660c
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:485
# b1fea51fc71c4640aac6c5fa9755fcab
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:487
# 9de1b5f5c2a44fd7bfffebd89a6bc4b3
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:488
# c3e943e404c6481281257fd36e41d14b
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
#: ../source/breaking_changes_chef_11.rst:497
# 2584932bb4a746d4abf5ec71c8cf1450
# 1dd06c1f1c674de09775ad8aa1c265fc
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:491
# 7914f849de1f40df90c96b56ddfddb6d
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:493
# 3a196ac9c4e74d0c9da004ff9f662aa1
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:494
# aa791902b7374227a97933d0320e0062
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:495
# dcb9551fb638412fb207180f077dd9cf
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:496
# 854f92d058c44a4784e9f0e4629365c0
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:499
# ca9c2200310343e5b9d2957f6b7a89c1
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:502
# adfd0b13b6f34b97b6029e0e7b9ba2ab
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:503
# 479aa8ad84bf4e15af95f805691d210c
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained |chef client| run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded |chef client| run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:506
# 9686dd0b247f49438c7ff874b3022d8a
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:507
# 4e982714ed05407789731aa56f06201e
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:510
# 941ad3f40f4a4967bf599d2b8fd56c01
msgid "Partial Support in Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:5
# d21dc889236742a29c84b8f6a053ae42
msgid "A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:7
# f4f9c597d2b14ac08402a25724c73f44
msgid "By using the |ruby| ``render`` method in the template file"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:8
# 10b5281de6654205a6d7f19db673948f
msgid "By using the |resource template| resource and the ``variables`` parameter."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:514
# f059d9d505fe495380b004c35c04c2b1
msgid "``render`` Method"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:5
# d69b40e203ae4e588ae811d747b15945
msgid "Use the ``render`` method in a template to reference a partial template file with the following syntax:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:11
# 70e130d935be4a2798db525f4ae20c18
msgid "where ``partial_name.txt.erb`` is the name of the partial template file and ``:option`` is one (or more) of the following options:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:17
# e6b49054f7684542980b763e0fa0e63c
msgid "Option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:18
# 0636314f79ac4ef5ad69ec7ac4024d02
msgid "Description"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:19
# 646b709fd4cd4d9ca961e4abf90d5e79
msgid "``:cookbook``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:20
# 8c27f99a6eee4ec491a0b3e3ae9ec2bd
msgid "By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:21
# adb6e4fd9c65432fbbf962fa70e72865
msgid "``:local``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:22
# 830c617f5f864548b1d92345960584d9
msgid "Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to ``true`` to interpret as a path to a file in the local file system and to ``false`` to use the normal rules for template files"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:23
# a67ec89989bb49bf9c967cfba7fac85a
msgid "``:source``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:24
# 229e8fc39f1f40c885cc360105cac10a
msgid "By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:25
# 1a4f3d341fd0404bb910490913fd73d6
msgid "``:variables``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:26
# 6d9cc735c283415fa051593016275504
msgid "A hash of ``variable_name => value`` that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:28
# 629ea8437c104340a8725220231ca67a
msgid "For example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:518
# 35019dd3599d494cb993fb80694aeb99
msgid "Template Resource"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:6
# 4026a89ad2b04be98d62c18c675188d5
msgid "The |resource template| resource can be used to reference a partial template file by using the ``variables`` parameter, the ``:partials`` option, and a |hash| of partial template files. For example:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:18
# 6954591284744afea014804b4d68aecb
msgid "where each of the partial template files can then be combined using normal |ruby| template patterns within a template file, such as:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:522
# debd96e08e0048c695719b56345e290c
msgid "|chef apply|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:523
# 5326b262254e402bb0f622aff5d1a59e
msgid "There is now a ``chef-apply RECIPE`` command that will run a single recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:526
# 4806db2937424fe2b0bbf54fe4fb5134
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:528
# a512436287ce4e509fd28a153e91b3d8
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:529
# 22179fe1c7e54befb53bf15bfc66d4df
msgid "|subcommand knife search| assumes node search when the object type is omitted"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:530
# c9ecd4887b3948d9a72bf208348c82c8
msgid "|subcommand knife search| will search over roles, tags, |fqdn|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:531
# 525e8f5ca2cd449a924a509d968b95d9
msgid "|knife| essentials (|subcommand knife upload|, |subcommand knife download|, |subcommand knife diff|, and so on) have been merged into |chef 11-0|"
msgstr ""

