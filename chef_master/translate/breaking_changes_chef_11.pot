# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-20 14:08\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:8
# 8c02bee8662347598f518a9a1903ca87
msgid "What's New in Chef 11.0"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:10
# 294b5da414fe49a6b7e33a4d99fbf525
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:12
# 542940ae1b7c41fcbdb8f5a59d1f2428
msgid "The |chef client| 11.2 release is updated for Ruby 1.9.3-p484, which resolves a security vulnerability that existed when using prior versions of |ruby|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:15
# 7cd69e8f0f964162bc33173a65e9343a
msgid "|chef client| and |chef solo|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:16
# 390c91d36a064d18af26da8f88a12234
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:19
# c863adc27c6842ac94abe6c3e84d2165
msgid "Custom API usage and Databag Population require Chef 11.6.0 or greater"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:25
# e8308d0d241c4b478400817564ad7b73
msgid "This example will fail with Chef < 11.8.0 and EC11 or OSS, as the /data endpoint has become more RESTfully correct."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:27
# 9b1e8a9bfa1444a79ebe964e7d854107
msgid "See https://tickets.opscode.com/browse/CHEF-4435 for details."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:30
# ab3dd4eee2e94665a254246739fd79c3
msgid "|shef| is now |chef shell|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:31
# 44fa1267778a4d98b85a1eeceea6176d
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:34
# ca8a545e0386406792d6b0eb7cbcb566
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:35
# 1d1511aca6ea4d6cbf8d69aa6c08e664
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:38
# 21038ca857e84d00a39c2e758b27504f
msgid "LWRPs AND Recipes Both Now Automatically Qualify loaded Gems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# 9d36aca7a296492c802bda6add4d5d2b
msgid "Previously, in Chef 10, one could do the following in a recipe:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:46
# e45ed45c1ebf4008b43458e4b63f927c
msgid "In Chef 11 you must add \"::\" to the beginning to avoid the automatic addition of a \"Chef::\" qualifier."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:54
# f6d08ceffa0b4b6f8c0eef9a9f1df79f
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:55
# bba5b7a11adb45fa8f946fd02dfbfe23
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:62
# c2065fba3d5e4d1daf46b28020fb2bb6
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:69
# ef8531b7475f47d4a8cc77bb1f34ea83
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:72
# fe583ed08bae46329adde8dc71540dac
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:73
# 0be2413f406448ecb6786509a7be5a0f
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:79
# c100f8f020e2407d89bb9f0a80be97db
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:86
# 6ee967ff7993430dafbc0ad2b06c9210
msgid "|knife| Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:87
# 6398738414da42d8b740ca87527c1d27
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:107
#: ../source/breaking_changes_chef_11.rst:154
# cb6ba57010064696a3ca363da8b2af39
# 3f62a5d6825a4bfc869918187b13cd93
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:129
# 11487363b50b44fc84a70b99cb1fdd78
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:131
# 5cec26ad584247b1b794c32bfaae0f89
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:179
# 46d65b11035944c4908b0306e8b02891
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:180
# 57a40cd4a4bc402ebc3a90202c53c514
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:183
# 86141e0b7feb43f69e479f63cc5b572a
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:184
# 7f5729b6f4d24ee2b7254b6c9b50e095
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:197
# cd43ca3c469d4b24960e77a107e3d8b8
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:200
# e3c729f3861c4f1088e58c9c4181b72b
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:201
# 40ecf648e07a4e19bf288739bf680e66
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# 2b93c55eb33a4bd3985ed34fdcd8fbbc
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:212
# 537214bf603e4c85a367bd0bb4c53b3c
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:214
# 801f5a5036c943b3a1034cc044d990cd
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:224
# 784ee46fd24748289deb29e4c1f03bbb
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:226
# 45178ab6f5354565aa9bc4a8dd5d0433
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# 2ef336d19abb4af4899953cb92f863f2
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:230
# 721a87f62b3040aea6b814a5a44e9509
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:232
# 6fcc996c6b3045b3a3aea6289bc5fcfe
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:240
# 780e4ec279274ad5bcb06a685001a6b8
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:250
# 846bef073f934926aad6e2430efe5863
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:251
# 36360c49db604b54ab974dd0af87f8f9
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:253
# f8ad5c0217ce4956839da2b1a8ac1b7f
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:256
# d60fbf12c651411f97d76e238b33d46e
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:257
# 510756963f1848298fc2fb7842c2233f
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# 920e87c60d24427e8111c1893a35ca9e
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:262
# 5a8c7da9b75f4436a78bab620ff08929
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# 5ea57aebb73e4c7c9a237598eeff83c5
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# 2c8bbf596b074d5b90d6d7297f6b1917
msgid "The |chef client| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:267
# 5c4ee54d622846209941081cb086bd08
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# 9b949701f0d04330921bcd688cab03ff
msgid "An unrelated resource fails and halts the |chef client| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:269
# be0b45985f704511bce44b34cc9e64e6
msgid "Subsequent |chef client| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:271
# 0cc3ddb004f24aa3af0449ca757ea7e4
msgid "In |chef 11|, delayed notifications will run after the |chef client| run fails, and will be executed even if other delayed notifications fail. Conversely, if the |chef client| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:274
# fcf3b369fbee4593b178211c4220fdc9
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:275
# 88be98748f4047a5b7264a4e3eb04419
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:283
# 6594664a82d84586ad9e2ade86a8f4c6
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# dada16d8223f49be94c01ee3cba33f9f
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:295
# 57bfda4d613640eaa94fb1e046d57f14
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:297
# ead9de6920b2477681630398017a98ad
msgid "Because the corruption is silent, there is no way for the |chef client| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:299
# 22303b9ddab14beda203c1a99733b889
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# 008ac453545e4bd3a1a6c7dfd4cdfc7c
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:301
# 7a2b11ee8e794713bb4564535fddc5d8
msgid "|chef 10| clients |chef 10-18| and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:302
# 8f9d9398a0da4b519e19298905584140
msgid "|chef 10| clients version |chef 10-16| and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:303
# bb03200aabeb4532bac3514eade61d62
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:304
# 2e6721312b5742c7b5f568006df7e34c
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:307
# 909e1e69b0a649b98d644057135e1da1
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:308
# 9f7504bed64340c0a23a64c516653224
msgid "When trying to decrypt a |chef 11| format data bag item with |chef 10-16| or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:318
# 44ac518f56984dfc93e212f889fbfd88
msgid "The above error output is from |knife|; the |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:321
# 6afa5444776d4bd7ba96c66a13ba417f
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:322
# 68c8ac893b55411bb8f823d106c0ad24
msgid "Before upgrading on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version |chef 10-18| or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:324
# ddcc759a8c2a465abda45cc8a853bf53
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:327
# deddbf6bafcc4bb0984292cbac058e44
msgid "Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:328
# d45f9602ec174c469f7aa9809ef8cdaa
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# bbe60354c8c740fda000c0b02f375cb8
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# 0734e2d2943b410ea795d1a3ce914749
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# a0cb129df94a4583ad634712ae326bb5
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:336
# 8fd5d23708b1491f80df771cb4c94419
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:337
# 406393ca27f748f8a43f239474245d1c
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:339
# 3c71833b576e4fb58ead63ed0b58e717
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# 2b6ee56a481d40a0a3d2f6974fdea02f
msgid "|knife| Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:349
# 1fb3fd69873743e282955c4578e4a625
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:351
# 88c5a7f188a242d9be60f2d37ed79cd4
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:352
# 62a0760d57f5439c8f92c494c9c2569e
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:353
# d0bb2533cfa144fcbd9cbb4a0a6fb526
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:355
# 0486eb853c854d14abc1114f9d1d0db1
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:357
# e7ca999242a14de8999fb14436e30314
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:358
# 65a65c822f7f4436828503f7dfed0b4b
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:359
# b977933021234d5ead8035d636c6e7c7
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:361
# 07b9c725177c4b809eab6771c3c8e0fc
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |company_name|-maintained cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:363
# 2126a95b16e44f62b6e07bb43290f245
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:373
# 98a013dd57f3495ea56640037b016444
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:380
# 66cc8dc9eb53420587b67780e96ee602
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:389
# 28bc4e9b59104d8cae92a983b5418ce0
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:395
# 2af904afead44db29481e672e5d7bc89
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
# 365b4a378513485595aff0c7c10d275a
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:400
# 312ca56abe5a476fbfc873cb365249ef
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:402
# 17f35b5f88d8435e9002b3780822aa56
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:414
# 2c6d2dc07e8d4ece8c13e5376bf96dfc
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:417
# 09a715bf6ddf42f7a5aa456c84fe1a94
msgid "The Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:418
# ecb57f70a29f438091feaaf446c24dc5
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# e76fdd4c714e4ee69e7519aa19eeb5f6
msgid "The /clients endpoint returns |json| with a |json| class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:422
# 8feb5f0b1aa542009de30451f5109d1d
msgid "In |chef 8|-|chef 10|, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:424
# 125da0371fee491e97b89d0e2fa361e4
msgid "This change breaks the ``knife client reregister`` command in |chef 10-16| and earlier. Forward compatibility is introduced in |chef 10-18|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# ce2600dce76d4765847201c24b921a9e
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:428
# 9631d855140143668a74e7fe490a7568
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:430
# 3953f4b5d97b4a7ba0d0dca0cfc226e7
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# 65c8a550bd4d4876b73cd177c08e2cbd
msgid "Strict checking of top-level |json| keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:434
# 42580f25f10543e09a31c0c5181604f0
msgid "All API endpoints that process requests to create or update an object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:437
# dbaee09b57b7436b9541861df281b593
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:438
# 8ffc4499fcf74eef86ca4e6e3547aa07
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:441
# 349986dc509d42a784864ac3d4f51274
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:442
# b94005bdd53346fc91e5fa44e4671863
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# 9c37509850554f2da21aa888f57e42a4
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:446
# eb94cdb9befe4499accc44bcaf4bf59b
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:448
# 7389204c910a494685bc5667e0ea15a3
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:451
# e98e214d727841da998c4f39ee5a797d
msgid "knife reindex is not supported in |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:452
# 5d0a1bc7044b4c3e886e3de6a66449b7
msgid "You can trigger a reindex of object data using ``chef-server-ctl reindex`` while logged into the |chef server|. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:455
# a7f624e38c8744eea77629db2f819c9b
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:456
# 3782f87f08744b0e8232c632fb05f393
msgid "Support for |open id| is no longer available to the |chef client|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:460
# 95cb98fc79994f7c8dfd125ca7336e9d
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:461
# 69f872491b484be9ad696db46efadea2
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side have been removed from the main |chef repo|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:464
# 52ea396a8c4c480b829944c752efc206
msgid "knife cookbook delete --purge is ignored by |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:465
# cef29bdd40864c36a87624dbac27701a
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:469
# ef16f051c6a543229d205e82c33e6df0
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:470
# 9e6ed7a1380d439fa1beeec037895c6d
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:473
# 4259c4afe7344605a345f7beec68152c
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:474
# 68f5760f53f14d0e9c8bef5f2de46529
msgid "In |chef 11|, when output is to a TTY, the |chef client| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:476
# 40f97ddd2d38408cbf885800f7ef34f4
msgid "If you prefer one type of output over the other, you can force the |chef client| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:478
# 75a56708bcce43e9b7362f50db47b80a
msgid "In previous versions, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:481
# 23a32be719a744c08d1cdef3117b7b1e
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:482
# 3361f7fa89ad405bb06c9772892ab710
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:485
# 8e8676890d79427bbb7ac03752af167a
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:486
# 4bc32fb19bc441aca6e60cf64ab7c146
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:488
# 8e4b696b2c9c4348868dd907fee3a779
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
# d163fc55dc4e413a8952c1a65d75ce5c
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:490
#: ../source/breaking_changes_chef_11.rst:498
# 7fc61db0e7c6424d99165b27c8afa6f8
# 9051b6101ab54588a3a7bfd88c2dd926
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:492
# c73d6f80204248f7ad8e3c7bb3f5dc2c
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:494
# efe6b3f76bcf466cbf93da7f3201fbc9
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:495
# 4fafd8d1118d4c5a9f880c57fd6e91c9
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:496
# bf462482bce84745b9a7d43503f6fd9e
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:497
# ad19acd44ccd4d94835c52db2d1850b6
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:500
# 57b3b28eeb3947509fad986e605e9141
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:503
# 392af00be42d41e7a01ec1d18e53e0bf
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:504
# d38818a321224d408e5dc7556a77fd0c
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained |chef client| run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded |chef client| run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:507
# b74860ab8c3844bcbf23ddff66a6733e
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:508
# 1e5b8cc5322d45cf89eb25a7d7f492b2
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:511
# ab35470b9f96484f9e1183ef8b13061c
msgid "Partial Support in Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:5
# 3c0aeb48621047b6a0c41e90d8601f16
msgid "A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:7
# 4f187ca0ed7747cfb4ca690245e7ebed
msgid "By using the |ruby| ``render`` method in the template file"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:8
# 0749694073614dc69bff1d42c4312c4e
msgid "By using the |resource template| resource and the ``variables`` parameter."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:515
# 314ebd48bd3347babd3eda64ac0db5e2
msgid "``render`` Method"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:5
# f24cc5a3cf794c15b76c8884c58ec12e
msgid "Use the ``render`` method in a template to reference a partial template file with the following syntax:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:11
# aae80baf2201486bb83826ddd4e4959e
msgid "where ``partial_name.txt.erb`` is the name of the partial template file and ``:option`` is one (or more) of the following options:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:17
# 6231b721d0b74cf184fb0e4f4e44a546
msgid "Option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:18
# 68a5f87f93504a36bb68349d4da160c1
msgid "Description"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:19
# 936d106ade3c4974afebcc3cf98d9d12
msgid "``:cookbook``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:20
# bdbd7d4fc3424272bf99a94b69b74f55
msgid "By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:21
# bb3769fd99164249903215f96fdc8f8b
msgid "``:local``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:22
# 819b59ea13bc4ef1b5a640237a1d58c2
msgid "Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to ``true`` to interpret as a path to a file in the local file system and to ``false`` to use the normal rules for template files"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:23
# 37a1112c569048c1bfe1183d164f3ba3
msgid "``:source``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:24
# 7bac86f346f3491bbb3d2fbe43f73db0
msgid "By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:25
# e21b91720837432ea5e70fe571f88834
msgid "``:variables``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:26
# 173bd4d09b10438883ec8c92a6450f0a
msgid "A hash of ``variable_name => value`` that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:28
# dba6e14df5bb452798fa2e0ab29940b4
msgid "For example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:519
# ccd6a040746a490fb295c3e13753034d
msgid "Template Resource"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:6
# 8f013ab8b1fd45b8b8f3cd2f91a896be
msgid "The |resource template| resource can be used to reference a partial template file by using the ``variables`` parameter, the ``:partials`` option, and a |hash| of partial template files. For example:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:18
# fd9858cbecb945e1aac010f1eeb6b72f
msgid "where each of the partial template files can then be combined using normal |ruby| template patterns within a template file, such as:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:523
# 66f7a69c97af48d89da61f47fa9df166
msgid "|chef apply|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:524
# 55af4fdfae004d3fb47e1481191737f0
msgid "There is now a ``chef-apply RECIPE`` command that will run a single recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:527
# 0c519435a9d54af59d762a7cb488c1e3
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:529
# 4b0117f2adcf4efabbb471c91eb02680
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:530
# 0c8a1bdea225449e80d30737ef2747a1
msgid "|subcommand knife search| assumes node search when the object type is omitted"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:531
# 31038f9cb4474bc79d8972277f0cdd8b
msgid "|subcommand knife search| will search over roles, tags, |fqdn|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:532
# 16032d0cbdc7440e8f2dddbf5cf2bfcc
msgid "|knife| essentials (|subcommand knife upload|, |subcommand knife download|, |subcommand knife diff|, and so on) have been merged into |chef 11-0|"
msgstr ""

