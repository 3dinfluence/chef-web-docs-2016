# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-06-07 08:08\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:34
# ad6ec7e106b149958e21cfc735132100
msgid "What's New in Chef 11"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:36
# 14c67747e1c745a9a267f87645645506
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# 010ae00172a44f268182fa9f8c93d35e
msgid "chef-client and chef-solo"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:40
# 8d5bc5bcacde4d9fa793a7ee83337afe
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:43
# 01523003006647c9bf517182fb363561
msgid "Shef is now chef-shell"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:44
# 18d992af8f95457da58a68c47a6d9336
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:47
# a62aff9caae04c76bd63977c41c2558b
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:48
# 7b0209193a474fbeb01c41d1c7591d0a
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:51
# 607821bf38dc42c181782d4733089a64
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:52
# 7ef10fb170ed4881870e1aeb41cee617
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:59
# a10a47dbd6184449b8fe5244b075e707
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:66
# d80d1b44f9cb4733abb17f6d5cc34024
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:69
# 1dc0f942d80b453f9edbcc3d7f31881f
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:70
# 996b2dfab044454a93981c5778406a0e
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:76
# 9117d039bd284868ad9f19128627c004
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:83
# c3ad69be01cc481b9e2efa12e20fcd43
msgid "Knife Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:84
# c4cdb87ad50c440ab6fa6fc43f013db5
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:104
#: ../source/breaking_changes_chef_11.rst:151
# 379455f51f8c400593b4270fe618a672
# 1046a187cc5d4b2d9a1664bd8737302c
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:126
# 1b971f44c8154e9685cd04fae5d2f1f6
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:128
# 1772cb4ff98d4f8fadd0fb440fa08c22
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:176
# 2f0a2255e19f4d0d8b3606d8c7969e7b
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:177
# 06d80cfee8074eb0a1f6b982f7a6e56a
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:180
# 57a296a710244c55b36d1fd203f442c9
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:181
# 4a93485a15d743759d7d82519206a7d5
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:194
# d262e1ad1cac4c7c8ad553d8fe292282
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:197
# 610db40ee69646d4a333ac31475aca91
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:198
# 99ec579df0dd4382bef9e884a03d0225
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:208
# 01016e4bd1ab49eb8db32b2a41b76146
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:209
# e9f67a3e0dd340d2aaf86acbf03e39b1
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# f7d449ba79864e4f8d82936c2d0edae6
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:221
# ec55715b89274fea99ab162b2ede1795
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# 36dd27aae1204b799c56bd9e67c7b7e0
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:226
# 1d26943a1e204932bb4c3362ded7f582
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:227
# ddcb68be1deb442db36b527a95ca24b1
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by chef by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# 3878281a9f6642c29f0dd288127909b8
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:237
# 48420d420b204cd0a8f3ac84708cd0c0
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:247
# 8d6b5ebe24f84ff589479b6e0944e39f
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:248
# 7cc9256965f24689aec4a104f6dbf042
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:250
# f9be2a6bbe424f14a9f023be369f4155
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:253
# f9f7940b518a4f2cbeac95d0cba3fabb
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:254
# e18841d3de4d4f8fa0551e2e601f5567
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:258
# 1de35542d0a142bdbeb1a7f7116b12f0
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:259
# fca9389548e14675a2fc4aa55bfd79bf
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# c643aae8cecc4c73bcec56701f8e6446
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:263
# 6b76629b017447409ce9fc33530fcad8
msgid "|chef| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# 65ed232652284fd4a1656a1c910df69b
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:265
# 9e2418f2baba42bdb2aadf7aeb400802
msgid "An unrelated resource fails and halts the |chef| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# 02f378c0be32491ab67fdd030e299b2f
msgid "Subsequent |chef| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# 025f1423df004ffcb6abc7b439e90ac2
msgid "In |chef 11|, delayed notifications will run after |chef| fails, and will be executed even if other delayed notifications fail. Conversely, if |chef| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:271
# 67028c33f41c4e00bae1cf2940933c2e
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:272
# 089810dc88104f8d87f726f6af13a302
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:280
# 9827e13549234ad382110e7449d5e25f
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:291
# 82efdb585f4a4422bf7ca797725eef1e
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:292
# ad2edfa334bf4dd69bf0af33d6a7b394
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# 0386e0dc6c6a4ed19642a528b3c455c2
msgid "Because the corruption is silent, there is no way for |chef| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:296
# 51c884c9ce554a5d8c1880e90e1e26a2
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:297
# 75190347748c43548a70ce941b83c450
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:298
# 82b54d55f16b44e4bc16915da50911e4
msgid "|chef 10| clients 10.18.0 and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:299
# da5961c727394492be26256f3cc96c8c
msgid "|chef 10| clients version 10.16.x and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# 4059ed7fa8904610ba04d38930ae85d0
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:301
# dee2b7552ad04ef8a582c88d9ffa9222
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:304
# 5302e184ae1947e4b738792c47598f0b
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:305
# 2fb951e61b9c44428b9b7ce2aa83f1ec
msgid "When trying to decrypt a |chef 11| format data bag item with |chef| 10.16.x or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:315
# b6fa1564a9254663ace2b9964a433b8b
msgid "The above error output is from |knife|; |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:318
# 76fb764770f84c718c8293d169155f15
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:319
# c3f2f579eab743a69c08762e84545f9d
msgid "Before upgrading chef on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version 10.18.0 or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:321
# 3fb7fe2ab4784eeaa0a110b01896c9b4
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:324
# a7655dc8b46e4f309383baf55ccb855e
msgid "Chef Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:325
# a49afe2b77974fb4aee2c877e7a73cab
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:329
# 7c81442e5ab3481086b2d5d973ef7b8c
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:330
# c8992b964389417da3232fb130203449
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# f4db4d9c1fb44e51a215b54602b01c5e
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# 80c5e1eadcdd46b5a90c8f365ca292af
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:334
# 09ae2c2e7222448db137181354f803bf
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:336
# eaf5883bad634648b92107f918ad8ef7
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:345
# 6886d7e27595426e8fc4b13cf8195c83
msgid "Knife Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:346
# e704c236704244eea2ed357e1ebd1a7f
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# 789cdd8ed7fe4039b1be91826de2e0ef
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:349
# db1b39a032db4cdaafc7aaf0f9823114
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# e40f6240b3af437eb0ba2118aabfe333
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:352
# 034cc02f5d9b4396918b45637f3e4609
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:354
# 337befd89ef14eec8d2b6c1cb1585971
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:355
# 0e079e6946e942f2958e86c95fbb553e
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:356
# cafdfa330708403babe639ae03a233ba
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:358
# 8078de5e04aa4240a7a12fb08c8604e3
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |opscode| cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# e369cb464b4d469e918f6ec8fff15081
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:370
# e9e9fc33f09b484f8c6c7f52c3ec86fa
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:377
# 51f9df39ecb44cf3af9502003867e0f6
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:386
# dca2cfd3b8514dafb76ad2acb0518918
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:392
# 8921a3833aad4cccaaea25ad1df271e7
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:396
# 481a4d135ced4895b24521737086be14
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:397
# 695a233490b34c839cab3ba3142abeec
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
# 81430874361f42b8bff8c28befc926f9
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:411
# c8930af27471460cb6ba03fbde42bbf8
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:414
# 33fd3c1c5fe4454593bc5d94205d43ae
msgid "Chef Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:415
# 8c95010e7b9147739857356c72356ac0
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:418
# 5a37ae32330b43ed888726d06edae312
msgid "The /clients endpoint returns JSON with a JSON class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:419
# a7229fea5f4f461dbc66343d622d9afe
msgid "In |chef| 0.8-10.x, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation in |chef| uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# 9a51eaab5abb49538dfc5f1189626fc5
msgid "This change breaks the ``knife client reregister`` command in |chef| 10.16.2 and earlier. Forward compatibility is introduced in |chef| 10.18.0."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:424
# 398cf765a5f041f1a31292f3eebbd0d3
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:425
# 06e8c54c981b4cca9cbcdd283ec94536
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# 1d34cf2eb34a42ffac6c5de05fed3ef9
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:430
# 5c394592079845f19657f30c559beedf
msgid "Strict checking of top-level JSON keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:431
# 878f914a23a84e77a795f05624b36e26
msgid "All API endpoints that process requests to create or update a |chef| object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:434
# 13041b7ff3b74937b8c474021c51ff3d
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:435
# ec1dfbb20b184729a425c7234d49f510
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:438
# 0294c73dd5c24a098a82e28ba3d2b83a
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:439
# b2447c3565ee4e6fa60b0d642bb537a1
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:442
# 3e5d680d08bc4bb1b90c5069940eba52
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:443
# 32857526c3954cc29b7447205e12efdb
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# 6bf90f0768e84b948eaa8440c21e1950
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:448
# 882e120cabe848438be2eb38a8ef1407
msgid "knife reindex is not supported in Chef 11 Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:449
# b898a4712d4845c8ae821f6be043addd
msgid "You can trigger a reindex of |chef| object data using ``chef-server-ctl reindex`` while logged into the |chef server| box. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:452
# 6ba1eb5ac7cd4b7b8634ac29d5378850
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:453
# f7b8f871c17f472cb26e16860068024f
msgid "Support for |open id| is no longer in |chef|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:457
# 7eab462d673f40cb917f597bb54be221
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:458
# f3c11c0303944dbd8c0c5b4bb170b33e
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side of Chef have been removed from the main chef repository."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:461
# 7c8b7e8bfbcd4190937a53656279c0a2
msgid "knife cookbook delete --purge is ignored by Chef 11 Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:462
# c6aec6d3f0cd4fd892873fcdc5a06b01
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:470
# 56fcad2031434e67a6d7d5b483c91d8f
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:471
# 3fef3895241d42589e50b76a9b2f8835
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:474
# 41874b67ba7c403191c31b5e4033c404
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:475
# da9f114fd6e244efb91b0a46d7515d5c
msgid "In |chef 11|, when output is to a TTY, |chef| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:477
# 6afadc5ebb264751a410563d4c3f43a8
msgid "If you prefer one type of output over the other, you can force |chef| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:479
# 81bc0a58feb8457ab4e7f9f74959e58e
msgid "In previous versions of |chef|, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:482
# 5cae3644f5964992a2be308b3dc80f0d
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:483
# d0360d38d26d42b6bd751ab4572c0d50
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:486
# 8e84734ceb1843edacc6eda51de94ab2
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:487
# 6c11fd39baae4327a73f1a4a46fb2e73
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
# 5cb97eb8d1d94ab9ab51250b1d8828aa
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:490
# c135fc600f674d22a26a271547d1ac9a
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:491
#: ../source/breaking_changes_chef_11.rst:499
# 04d725c23f2d44d2bb79233210cba866
# 77dde37087cd417c943ad966f486f1e1
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:493
# 1ddc8dbd8f3748c7b56bc78ba18508d9
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:495
# cb9c5d5a446e4a22bac718a720df6165
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:496
# f2c490186d8747f79af1969307429b9d
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:497
# d3a7476a4cf14c22b18049145b9cc7fa
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:498
# 2165cd350b8d41a6b08d7a0c6e366793
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:501
# 1f59e1f2ceec4b90aecc6ebbe04966dd
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:504
# 76dc326cbb424ac885763058c285ba58
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:505
# 8b8c150ea2944e039eb576a6e107a5e9
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained chef client run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded chef run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:508
# 618172631a74411a9e399bfdc46ac072
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:509
# 6984046cac8a4f3caaec99da7a420a1e
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:512
# 960fc79c217541ba938e8b971b813bed
msgid "Partial Support in Templates"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:513
# 14785dcc36544f45a1dc84eff42a5d58
msgid "Partials can be used in templates. See here:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:515
# c2443154e7af4e30a6a4891c0eaffb7d
msgid "CHEF-3249 - |chef| support for template partials - FIX COMMITTED https://github.com/opscode/chef/pull/498"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:519
# 2b6bf660d414430e966205a409365114
msgid "chef-apply"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:520
# e1d95246e4c24943b01503787a19057c
msgid "There is now a ``chef-apply RECIPE`` command that will run a single |chef| recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:523
# aa3e8fb28e6946d69163d5b6dfbdf99b
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:525
# 1e4d17392dfd4744a0ee1cf64030cc4f
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:526
# 844a3c6efb7146e28e02df6895852c6f
msgid "``knife search`` assumes node search when the object type is omitted."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:527
# 0bc7ed513f344470bd5d0421875d9eed
msgid "``knife search`` will search over roles, tags, |fully qualified domain name|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:528
# 5cd13225ebfb4b15aaeafb2b1f0e36e5
msgid "|knife| essentials (``knife upload``, ``knife download``, ``knife diff``, and so on) have been merged to core |chef|"
msgstr ""

