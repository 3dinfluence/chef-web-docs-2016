# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-25 13:54-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:8
# 68fa3423f811457cae43d8da6d2acfae
msgid "What's New in Chef 11.0"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:10
# 2da25422d92041a99d729b3b9a30512a
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:12
# fd869bbe970148e3a9022fa58cfb79dd
msgid "The |chef client| 11.2 release is updated for Ruby 1.9.3-p484, which resolves a security vulnerability that existed when using prior versions of |ruby|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:15
# eb6adafb416a4c5e83ee6015a9974248
msgid "|chef client| and |chef solo|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:16
# bf235a92306946a99f2dce9601098e2b
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:19
# fd77dad3ad57460694a31494f5f9c57e
msgid "Custom API usage and Databag Population require Chef 11.6.0 or greater"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:25
# dbdad01213d843acb46a1ffabdeda9bd
msgid "This example will fail with Chef < 11.8.0 and EC11 or OSS, as the /data endpoint has become more RESTfully correct."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:27
# b08da4cd18134d04a3032a9dc4f5e279
msgid "See https://tickets.opscode.com/browse/CHEF-4435 for details."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:30
# 8e4819bc054c470c92c58f603fb5b55e
msgid "|shef| is now |chef shell|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:31
# a64de46525c844c98d30c35d5124a0cc
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:34
# eacbbe8ccbb041509b6d8afffbdbb96d
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:35
# ff253c4acabe4eb9a6a5b2d8f0354109
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:38
# 56457cb549364396883c6013ed33caf9
msgid "LWRPs AND Recipes Both Now Automatically Qualify loaded Gems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# 4a550bd4cab24673a575ce26bfb7c01f
msgid "Previously, in Chef 10, one could do the following in a recipe:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:46
# 88c122165c5f4cceb3d7cc11d3ed0571
msgid "In Chef 11 you must add \"::\" to the beginning to avoid the automatic addition of a \"Chef::\" qualifier."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:54
# cabf8077846848c68a2859a4dd6daf1d
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:55
# 487e2839c587426db115b72d5f11d24c
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:62
# 17a18c63c10a4f22acff37b61d97a296
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:69
# d70b564e472f4217baaf3e1ab2483040
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:72
# c833ae0ad06b4703a09507c20e720cde
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:73
# 7b2bea8a09714a0e91d380c727a995d8
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:79
# de8e39bd17fb48b28462095b68590c8b
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:86
# 159b2a1f69b54c9fa45bf8b2083babcd
msgid "|knife| Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:87
# 9c1d1ae2a64849098ea9d3d8854ea423
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:107
#: ../source/breaking_changes_chef_11.rst:154
# 947ffbd2f16b4b9dae203fa21ea0b039
# d49660eb2b6a4ec28e42972ab145b4d5
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:129
# 5d22219f2c8f4118a1fdbcd22ea8c62e
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:131
# 4f933c3dca2740bf95dddaa4ea57ddbf
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:179
# 37d38235e39e4055a077cad2239f1c83
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:180
# b7715f426bf34cd8b5f38f6d5283a541
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:183
# 768d27738d2545b0a5afc0ab60a36b9b
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:184
# 9013f3ef9306458f8e8f43b1c540d676
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:197
# 53dcc89101104206878084ea049b53ff
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:200
# bf03e487a3c64f529b9d87cb07a826d8
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:201
# 17acdd3717334cd0bd26fb47156002ea
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# eb3a09de8f22437382aa77a47bb63176
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:212
# 66c166af4730420a9267ec0206a1099b
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:214
# a4bc6a2351b543e5bc6cd9131004cdb7
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:224
# ec943e05b57a4b7e8033dddca2917be5
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:226
# b1a827c08b564020b5461b841f455ca7
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# 7ccfdf04642a4b63b60c16062b080cbd
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:230
# b06b74609b1748bf917fdf6cf01e78a4
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:232
# 82b92dc0422242b18480bc3bd4ed715a
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:240
# 9b7e420b97e74ebda62419548d004f02
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:250
# 5dbf7b8c74a041b4a434834762f09b14
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:251
# 68770af5ace044b4a33c400021530bbc
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:253
# aa95387e4ce94994a301a77d8a72c738
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:256
# 3b6ce5de53b94984a021ec875318011e
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:257
# 364af13057ab43f2be7deac923620b70
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# 69da0e50c509461caa9a892bf7c099c8
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:262
# 431fbb893ab44e3bb74608e1d1fd1af2
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# 8a81f211bab3449082e4b41ef56f2403
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# f9fec57294984d55977cc1ca33db97b8
msgid "The |chef client| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:267
# 66736c6e27964105a4d7cd03b499762c
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# 3cd7f528ae084cf6af9dc0af76b0a3fa
msgid "An unrelated resource fails and halts the |chef client| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:269
# 63e951c239e94e49bc9da47ab51423ad
msgid "Subsequent |chef client| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:271
# 41bf8b8ead944d93b1314ab8e622fc64
msgid "In |chef 11|, delayed notifications will run after the |chef client| run fails, and will be executed even if other delayed notifications fail. Conversely, if the |chef client| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:274
# feea91a3a1474aadbc70617d1f0c34f2
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:275
# 5517caa19e2e42aa985d2ea5140b645b
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:283
# 18e7096d63aa4d1ea38d1947d3fb7cd2
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# 14d3c4c25bcb41e08e04ddc5064a1370
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:295
# ae4083ea795949fdbe39f20835738159
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:297
# ba7a7ffa2e3f4d499b6be512d3c62a4e
msgid "Because the corruption is silent, there is no way for the |chef client| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:299
# 9e3d42116b5a4a1c8d9187754f8c587b
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# 9aa9326b9ae34421b8bae3baf4e48ec1
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:301
# 5b0d63deb61a472196b21418a613b7e0
msgid "|chef 10| clients |chef 10-18| and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:302
# 6004f85d1c1046faa8d625d3108fb321
msgid "|chef 10| clients version |chef 10-16| and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:303
# 6b76576fb37e406f8ace7ba3a65c965d
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:304
# 5f3336186f9743e18208bd6682eafeb1
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:307
# 88db96e5766744e0a8766811b17313c6
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:308
# 4df1ca5f40354553b29aa72bcef1da16
msgid "When trying to decrypt a |chef 11| format data bag item with |chef 10-16| or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:318
# 63e2348b5a6e438ba649997c9785236a
msgid "The above error output is from |knife|; the |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:321
# 6450f23f0d344bd39d8a09c045cf701b
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:322
# 8b10d2f6099b4f2cb6711bb31b44c165
msgid "Before upgrading on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version |chef 10-18| or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:324
# 2091ef464db44428a852ddc046ff80ea
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:327
# 624f37f5d15c4a23a04df93828fbf04b
msgid "Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:328
# f3fab9210e754bb786c350e290974f8c
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# 3bac40c2c82248eb89fc6e714d779629
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# b9787d7a339c48b0bd9f01dc5fc0c2cd
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# ec89fd2a02c040ee85d9dd9214dcd466
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:336
# 871bd043372b462bb9c6d410c9f7d582
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:337
# dcaa4334e138406aba3a473c3bbbfc24
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:339
# 2386d700944b40aab57eb1a888f1b43a
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# b6f6152067294139b346cbd0d2b8ad3a
msgid "|knife| Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:349
# 34e82b8bc50a4bd0b30085103fa29662
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:351
# 25baa8ba822b4c16a33bcbbfe3e6c216
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:352
# 12ad627fb06643eaa35b18908ca86e20
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:353
# 752060da1e1c4106a8ed9ef9023b4283
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:355
# b4f6330998ed4706b12a2e0158058e32
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:357
# f8d796f15cf9413b8c1ff0e1f9272103
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:358
# 54d88ce89ab6494aa839d4946ab5fc30
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:359
# 8c00a114951b43fc93d398dd13ce3eb5
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:361
# 896cbe15d31848fd8ac2e4f77fb4f720
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |company_name|-maintained cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:363
# 7cfe02f8440d4fc2b0016e7918e3f278
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:373
# f6cfb03248174ddc94aec73bfc8a995d
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:380
# f583c0d86195491ab41e47e12b3db585
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:389
# 5d36efc2c70b4988a4354565bac3e4b2
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:395
# 260a6b11457145849535d12cf4991a1b
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
# b7dc910ca9de41efaecd1dfbe7e15011
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:400
# 454368e95ffe47d6a388919350a081a2
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:402
# 6d7e0f7efbea4c4582b319cada631827
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:414
# 2e0f9c80b7e2445f88683ec971db1711
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:417
# 5f661a14322a4d7baa592c29a745cf1c
msgid "The Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:418
# 0f963d17ec184cd4ac832646d8bfb96b
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# fbcd74b6993e4571abf3eb1b1ee63c9a
msgid "The /clients endpoint returns |json| with a |json| class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:422
# 6de22037c0ba4290af5e79ba310ecab3
msgid "In |chef 8|-|chef 10|, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:424
# 88e3702110f54b3a85bdc214e5136b09
msgid "This change breaks the ``knife client reregister`` command in |chef 10-16| and earlier. Forward compatibility is introduced in |chef 10-18|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# 4695071acc8f4725bbc00160f4ccfe19
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:428
# 89fda7fd5db149b089ab6f1ad12c2109
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:430
# 8bfecb33d5e540ebb576ee39a0b65697
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# fa8c100a010d49bb9141fbb004bc09b6
msgid "Strict checking of top-level |json| keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:434
# a4a027b6776349dcb01634394db36dcc
msgid "All API endpoints that process requests to create or update an object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:437
# 1797347d33da46ef8dc415ad1add3bb5
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:438
# de15a4eaece14f488db0e14e3668241a
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:441
# 87fb236fc6e747429cb13ae61e03b009
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:442
# c59cf269409247a7bef78c4cc95c57b8
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# 75036de883ed4b6c9283ab22a5f57c49
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:446
# 096a94a255a543df86c0d2e4f0b7be7c
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:448
# e2bd7d24ec0e41b990c7e48e9afbe41f
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:451
# 591b7aabd9564bb8a8a5d50b8dc02997
msgid "knife reindex is not supported in |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:452
# 1255926b77f843b496226fbcafb5a1d3
msgid "You can trigger a reindex of object data using ``chef-server-ctl reindex`` while logged into the |chef server|. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:455
# cffabe5ebd8d46b89687a039b3e0b52d
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:456
# e992ff2d3e114439a999cdeebe82bf65
msgid "Support for |open id| is no longer available to the |chef client|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:460
# 7c8d841a179340f8ba11a7c2284f16c0
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:461
# 457d144fa3eb4aafa9cd108b1a7752e3
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side have been removed from the main |chef repo|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:464
# cdaf6f622fbf46f781bd37376f72bef5
msgid "knife cookbook delete --purge is ignored by |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:465
# ea28ea63d1cc4478a2e2fbf0aa7305d8
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:469
# 29f3967d32444644952e3dfd0e7b5582
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:470
# ba7eb4c4ab44487ba2374950f9e52f7b
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:473
# 0d8541afd0d1467198abcabe19ebd258
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:474
# 6b3da9c137f046498cdb54b3a8e54c45
msgid "In |chef 11|, when output is to a TTY, the |chef client| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:476
# b7e9f5e719c442249ac01db85599dd7e
msgid "If you prefer one type of output over the other, you can force the |chef client| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:478
# ad3aa3014af1413a94ea7a60ac6e01b1
msgid "In previous versions, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:481
# aafa38a076934c37b7628d3e1e761016
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:482
# 4a595444a4474ef99d1f52b50fe0f8bb
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:485
# 054ffa652ab24dea934fd10a16a26101
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:486
# 56b85d1d1033487b9cf44232efd18e09
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:488
# bac5172cf33c4957927d0927f1cf1295
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
# 04b9210ddd4a42d6b414cf375c44d512
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:490
#: ../source/breaking_changes_chef_11.rst:498
# a555a56e126944679ad97a81a4c8ab4c
# 4fde6e4d27d143a1955f26c66962a66a
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:492
# 25571b0ea81e4d81910ae5e2d6a22985
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:494
# 2b6163357c3f4ff292a5c12407a4ce72
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:495
# 8ba8ccad19e44068b4be7dd42282122b
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:496
# b5dd0a31cf1a424bbe7433d9932d869b
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:497
# 3e8786eaff7245e3896c34e99f386184
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:500
# cc0fb17ef01b4aa495f866268fe9e2c4
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:503
# 3351c56f6b8644d4a9ea2df70997845a
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:504
# 5c97a891c990433f862187c29153d7ef
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained |chef client| run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded |chef client| run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:507
# b3589bc0c8204b348637636aaf45ee80
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:508
# a5dc740acc0c406f8623c70a5c6b9aa8
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:511
# e6de9e057fae4454be39d9eecada2de8
msgid "Partial Support in Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:5
# 163519f02ac54a66938ffcbc519de2a0
msgid "A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:7
# cfac606627f24e5ea40dd26714af7a6f
msgid "By using the |ruby| ``render`` method in the template file"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:8
# 68620c26e61a4ffc9b17a08b10c29259
msgid "By using the |resource template| resource and the ``variables`` parameter."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:515
# f9180978f8c246d1a3c66f382673aeaa
msgid "``render`` Method"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:5
# 7642f1dce54e498a9c08e3cb7f3034bc
msgid "Use the ``render`` method in a template to reference a partial template file with the following syntax:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:11
# 4a7f4d6e991041a6a63391302c601602
msgid "where ``partial_name.txt.erb`` is the name of the partial template file and ``:option`` is one (or more) of the following options:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:17
# d08db5d783e04a87a7d7b3461ce8d6f7
msgid "Option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:18
# 6f268f6aa5584490a2b4393a6e9850ce
msgid "Description"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:19
# ca73aea85ca54737bcd64d422b467780
msgid "``:cookbook``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:20
# bb016ecde0854e50bb9a98683c35838d
msgid "By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:21
# 7102a29832fe40f2886f3135f14c4acb
msgid "``:local``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:22
# c0c6d5f317384e369b7d51e90df5abb4
msgid "Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to ``true`` to interpret as a path to a file in the local file system and to ``false`` to use the normal rules for template files"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:23
# de0cb64bb17c4e1093780782f703369a
msgid "``:source``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:24
# 6985f4b45e17421b9aacf2f249e8e2f6
msgid "By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:25
# 3823106de4044686bfe1539ee19e4b95
msgid "``:variables``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:26
# c8b31da2fd3d4c59947c16622de6bc1a
msgid "A hash of ``variable_name => value`` that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:28
# 0a319b91698f4b26bee9bb02f66a5a9b
msgid "For example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:519
# 613ae298d67242779960e38cde9f229a
msgid "Template Resource"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:6
# c366438954354ee2b67e4ea07ad32b10
msgid "The |resource template| resource can be used to reference a partial template file by using the ``variables`` parameter, the ``:partials`` option, and a |hash| of partial template files. For example:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:18
# 2fe9f061ac614fb4a80db4c3a65e581d
msgid "where each of the partial template files can then be combined using normal |ruby| template patterns within a template file, such as:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:523
# 35e21d59c36e44119e6d91535af6785f
msgid "|chef apply|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:524
# cd8ded6faeb543f88eb558582f84c11f
msgid "There is now a ``chef-apply RECIPE`` command that will run a single recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:527
# 88fe823e3f594e3e8f0088834dd6baae
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:529
# a8242c24094444d48a259d1417822d5c
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:530
# 0d4cc464d27343f69b68ec0e1a834d00
msgid "|subcommand knife search| assumes node search when the object type is omitted"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:531
# f404cff6543b4c389342970eb0881df8
msgid "|subcommand knife search| will search over roles, tags, |fqdn|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:532
# fa745331d1cc47e29621bc8a1eec0d3f
msgid "|knife| essentials (|subcommand knife upload|, |subcommand knife download|, |subcommand knife diff|, and so on) have been merged into |chef 11-0|"
msgstr ""

