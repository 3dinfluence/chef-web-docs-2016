# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-07-25 18:13\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:34
# 5b7ef7db355a4c55800beeb1a5dc0ae0
msgid "What's New in Chef 11"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:36
# 730cec56dbd54558bfc5e942ac99ef71
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# 71203377a4e244e18fbdb501d88cbb39
msgid "chef-client and chef-solo"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:40
# 6368ffdd36c64f97acc44a5660f164ef
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:43
# 429d83b9d0454aa7970986fe12dbf2b9
msgid "Shef is now chef-shell"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:44
# 87fa09606b1d47b49ac5126dee7dbf23
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:47
# 5abcbc37d1094071b501e6e9877f3570
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:48
# f8a9fabf513b417e95be47fc8948b773
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:51
# 8713d8411c5d4893b700940cc3291da0
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:52
# 1331ebc81b9d423ab1d7ca48f5ca6a3d
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:59
# 69f37e7a4b054f1488c5cca5b7ef2f4f
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:66
# 4abc46d2477b4a8691c04ea13f2c4940
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:69
# 398640283627414a80a118b6dfbc8ac8
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:70
# 39071cd2d8764619a7307bd4d4e165a5
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:76
# 1c321d302167487db8a4c6d6fb219136
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:83
# 79273d8b98a7487d8e5efc63263d4d88
msgid "Knife Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:84
# f1240e7010174e9199fbd703a0aebb7b
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:104
#: ../source/breaking_changes_chef_11.rst:151
# 68c5f1d2bfb045928fcfabe8fc957bcb
# 267e166b3e3e475184f8050cc8f6f319
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:126
# 93b2520067a14c98aa821af7d6fd5e5c
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:128
# 17e561eb1ff74b658f0747270ce17511
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:176
# 6cf5e8b5275141249c0cde80b5eb4c12
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:177
# 4ff493f4b23a4a8db8f56f4ba82a5b14
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:180
# 44cb330d7b9446a28ef5cfd11168d284
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:181
# e8bccdde36994e8eaf686308efd18a0d
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:194
# 34704402cf244aa4a02417493c5e8540
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:197
# c74be716b2e14b19aea689e8abc27b8f
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:198
# 9bb70c929e8b4852a2709d878594c8c2
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:208
# b7e95462ea434c2c9985e2f15314f542
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:209
# 55ab743382ed4cecb2721a1e267907bc
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# 307e28dd86a3452599b4f49fc6a9e88a
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:221
# 422922f6388b4a3db7d9fe7642123e10
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# cc629aff66e14c7ab39ef4cc400c82f0
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:226
# bd6749e665ce40c5adba3a8b05f2a71c
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:227
# 1c2ea77e803b4c16834b843545bc335e
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by chef by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:229
# 8fece0afe6c54274a32c8de5dc1c750d
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:237
# d7ecb82f28004bc6ad562539b65ab37c
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:247
# e20991bd2d104f0aa47f55809466038a
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:248
# b3d9826563084dbead080e9bd43fb753
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:250
# cabe796b7fec4892867e62750711309c
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:253
# 1722852aa15743e7beb5a1be7ce2e012
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:254
# 6766d9f94697435abfa2510b02df264d
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:258
# ee26b661dcef41c2a6e5877c88e487da
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:259
# 060d2b6917db47feb319b8ba399eeac3
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# 78a2c3b78dd14871ac7f4653ebf9b799
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:263
# 99024a2f5c2b4c5bae3d8a21bdf7fa36
msgid "|chef| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# 125457d494f24d268ed0ef85fa80b852
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:265
# bc4e705f3d8748fcaa25e8822f6fbc9f
msgid "An unrelated resource fails and halts the |chef| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:266
# de643b1033a44a0eaab276771be28341
msgid "Subsequent |chef| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# eb499216832d4a84ac9efd292be04c4d
msgid "In |chef 11|, delayed notifications will run after |chef| fails, and will be executed even if other delayed notifications fail. Conversely, if |chef| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:271
# 5aba1f8cff1b49008cb2f5d8dd822c9e
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:272
# 1ae92d0d14df4152862e4e61ccb2b68f
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:280
# 6a74a45932e045fc9cb415f9b8916c3b
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:291
# febc020fc3f144fa8950454eebfeb134
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:292
# c5dd4f4ad3be47a798cdcc1f57ea31fe
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# 2f0c31153b9148c997f38ae861bbf5ce
msgid "Because the corruption is silent, there is no way for |chef| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:296
# 2f4266d2dc6c4250a4af59980c8ccc8c
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:297
# 41ae1abeac344f0c90770102f3fe97e2
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:298
# b455baf5afb4429284a04fb2d3cade03
msgid "|chef 10| clients 10.18.0 and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:299
# be411be493904611ab464aa37a38e685
msgid "|chef 10| clients version 10.16.x and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:300
# 005394faf5364c85af162b80f53f8878
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:301
# 16f13cfc89c44240ac8b139d21e0e9d3
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:304
# edcde0896942463ab1c112998ea44948
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:305
# 863f9caa536d476cb80727309adcf82d
msgid "When trying to decrypt a |chef 11| format data bag item with |chef| 10.16.x or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:315
# 87474f0eee0a4a0cb08ad1c1d423442b
msgid "The above error output is from |knife|; |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:318
# 513867f1b7194a84b0044228db37334d
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:319
# ab0bc12699af41f4bd65bd62ae70886c
msgid "Before upgrading chef on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version 10.18.0 or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:321
# 48f29d7534474ab5a22d858900b595c5
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:324
# acecc15f0958449e83681809a98f8dc3
msgid "Chef Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:325
# 2863df97a2894215a93cc535cded651e
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:329
# 0ea94e76299c4481b606e3f965238a04
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:330
# 33e1f7513e7840aaae0a2c13b68e0f76
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# d4992c2846444caba66d7a87c6656148
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# fa11f31bee40408bbfe3ff693206609f
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:334
# d4782a1b5666453b98c38b71e76601d2
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:336
# 2a6c335943c64461a395565f7a177be9
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:345
# 8580f0568ff44fabbfe8f71a47e73103
msgid "Knife Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:346
# b9104571e5854431a08a109e85a8c0b9
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# f0c1151eec4c4d5786e500fc82a6e772
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:349
# 4f2292b3995543cab323c767f7be96e3
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# 987269aa244845949c24e972351c629c
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:352
# 922ceadb895543db9e8b26f84dcaa8ed
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:354
# eb851c516f7e400cb4f17a167edfcc6f
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:355
# 90defee94fcc4384b584f1355b0de60e
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:356
# abd30fa0adab435ab7b3176a507de444
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:358
# 3e3956ffeec44147942a41623d9ea959
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |opscode| cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# 7e14ec88c2904b168459ed05bfca8561
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:370
# 8166a7484eb54404a01032d7d2d061b9
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:377
# 21af2a77094f4ec99bf8a0a7f661fa34
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:386
# 38dc1c8a405c409c84ac36222ff433cc
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:392
# e02b82b230464007a490e3d2300c2dde
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:396
# ea87a313972e401686eac53d8f46b6f0
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:397
# 2a3a1d04fae9447382bba191f57289c3
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:399
# 4cde065c421546e1b412fa71ef83d8e6
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:411
# 0d261ce862fc452a909123460c01b2d6
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:414
# bef1094dcd944ab78b594f5fa977cb23
msgid "Chef Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:415
# 391f86add2014e4eb33a49d9b014c84b
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:418
# 1c3e58069cbf4f5ca4c6560c1b72a389
msgid "The /clients endpoint returns JSON with a JSON class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:419
# 35e058f2535e4fc48fdac05235fe8880
msgid "In |chef| 0.8-10.x, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation in |chef| uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:421
# 1b32cd26175c4071b389938a8fb1d3ef
msgid "This change breaks the ``knife client reregister`` command in |chef| 10.16.2 and earlier. Forward compatibility is introduced in |chef| 10.18.0."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:424
# 5f72f4f73c9d449fa29fc71b293dba79
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:425
# bdfea0608c9c465fabd5c67e60894d0f
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:427
# 43010aa8f510466d952ffcfda321ca9b
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:430
# 5e31f867d8214eeebcc4ff23b83a5abf
msgid "Strict checking of top-level JSON keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:431
# 2f1cb0e15fed4ba7a2def7f7316c8621
msgid "All API endpoints that process requests to create or update a |chef| object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:434
# 6134474a70f84a9dbebf646c14062f7f
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:435
# 1da63a099082419094f2708c9c64d1a5
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:438
# ffd999ba045b4d5793fc1e6f4511b85d
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:439
# 65f55fa83c4c42519870ab458f449c34
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:442
# 4b414bed4e714fc4a9e62ecfe8826158
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:443
# e6c195c2454a4ca79e1f3e1752034648
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# f9a8522f8fe34dfbaab7e13c84697f7a
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:448
# cb7bc23d422a424aa798248807504b4a
msgid "knife reindex is not supported in Chef 11 Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:449
# f5fad3725c52437fbdf890168b5821a0
msgid "You can trigger a reindex of |chef| object data using ``chef-server-ctl reindex`` while logged into the |chef server| box. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:452
# 0a62f3c101094e3682d91c31bab471f9
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:453
# 5c1a9f4a07414b0b959061c64e2c375f
msgid "Support for |open id| is no longer in |chef|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:457
# 46d01acd8b374552883081a5ae4c6b36
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:458
# a7a7f76303104cb0a3af6c4db7d26d1f
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side of Chef have been removed from the main chef repository."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:461
# 6019ad9ef9764098819e55a97a5847ec
msgid "knife cookbook delete --purge is ignored by Chef 11 Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:462
# d4449ef09f974e81bd71c7d6d7a373be
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:465
# 894bfa2dff92453d837db4dcdc3881fe
msgid "The API request timeout has been reduced to 15 minutes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:466
# 72a172c6fd6441a6a48dcaee51afc26d
msgid "In |chef 11|, the timeout on the timestamp embedded in API requests (used to prevent replay attacks) was reduced from 60 to 15 minutes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:468
# 1dd498014d1b4ea99550c1b5b573c5c8
msgid "To increase the timeout to an hour (in seconds), modify ``/etc/chef-server/chef-server.rb`` and add this setting:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:474
# f226e0de7f1e4e00ba1ce4c125617d0f
msgid "Then reconfigure the server:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:485
# 98650323a33248ee8f3ca539434a97eb
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:486
# bcd96b94de1a41f9917c63ef3157d2d5
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
# 47c22ea77c6747a68853497778ad748f
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:490
# aed7bff840bf4cf690cdf94b5acdead5
msgid "In |chef 11|, when output is to a TTY, |chef| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:492
# 14d25db075264050ab13ac6ffd73cf96
msgid "If you prefer one type of output over the other, you can force |chef| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:494
# decce47cea3745e7ab1d36d2ee3d2123
msgid "In previous versions of |chef|, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:497
# f01b3168e0344d9b835d8f053c175623
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:498
# 5fa2d87bf0454b299c5be2dca2ca29fd
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:501
# a7ea38f2417042e7a6e7dbfae40c6862
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:502
# 427ac73296274c8b8822f9ffddff1a46
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:504
# 11904bf7683e4932b997d74b1c37a017
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:505
# 4f46aefe522c4f318b59ead5f6e89201
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:506
#: ../source/breaking_changes_chef_11.rst:514
# 620f15b40c0f48b0a397a5733247d5fb
# a7c77d78f2e84ff999d8891c9b2d7fd8
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:508
# b58ceaf77c9c4c3483c453825aa11047
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:510
# 8edb3737a2b64f1ea5ba7f0e92d2bcda
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:511
# e124c4a3e94b42d59f4bc46fbb9cfbb4
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:512
# 37cd532afbcc4888997e2d49e0c93f0d
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:513
# 46893381c9c1449c9649ca84d536e60b
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:516
# ad274c1bfedc456eadf2c5215488289b
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:519
# 411be32fd0ca4260bf66c3bb350b5d8d
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:520
# 1ee7af89d9e44c1c8d4b7335ba5ba3cf
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained chef client run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded chef run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:523
# 4d63756e24b6494eafd75da271b88320
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:524
# f7f48bfa72cf40a2946d23969fb257b3
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:527
# 12cc854c09634d419fcdd288b80bfd03
msgid "Partial Support in Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:5
# 1cf5c8ccd8f8497382f8b10435c3c8f2
msgid "A |chef| template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:7
# c447e513577644cbb5fe6fe9d43ef437
msgid "By using the |ruby| ``render`` method in the template file"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:8
# a300d9c94c024bec969d9bb0c95d693e
msgid "By using the |resource template| resource and the ``variables`` attribute."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:531
# fe5e49ef2fda44b8830d0ab666af5850
msgid "``render`` Method"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:5
# c267112f76574b58b7fddebb256ffc98
msgid "Use the ``render`` method in a |chef| template to reference a partial template file with the following syntax:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:11
# 2c3270642d4b4e01962da44e4aba0802
msgid "where ``partial_name.txt.erb`` is the name of the partial template file and ``:option`` is one (or more) of the following options:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:17
# ae45d975f2d54662a07aad7bf721eb1f
msgid "Option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:18
# 143cac74696440019aa1095074ec59fd
msgid "Description"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:19
# c061c38fa77e4b7a8891e4bad894d3f3
msgid "``:cookbook``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:20
# 4c60fa4e63f9414984fa73d027e442db
msgid "By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:21
# af09d430f26d4efea03d26a5d8c2693e
msgid "``:local``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:22
# 2e528a32bb3f475ba13243c55e7e1941
msgid "Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to ``true`` to interpret as a path to a file in the local file system and to ``false`` to use the normal rules for template files"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:23
# cbbee7b627d24fe6ae8952572526e0d8
msgid "``:source``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:24
# e96820ae414c41d596539df408de4f3d
msgid "By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:25
# 3d028d589a1c4177bff6554798edd637
msgid "``:variables``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:26
# 1a0d7970ded64625a014b08044d8d94b
msgid "A hash of ``variable_name => value`` that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:28
# 8f5d229e19ba4edebc7d7f1bc71bba5f
msgid "For example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:535
# bc13da7144f540799d5ddafb8b7d8e55
msgid "Template Resource"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:6
# bd4a4c03b9a340a1a08aaeedc33d2eab
msgid "The |resource template| resource can be used to reference a partial template file by using the ``variables`` attribute, the ``:partials`` option, and a hash of partial template files. For example:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:18
# 806c4ae0ab1f46f68c71fb41cef494f7
msgid "where each of the partial template files can then be combined using normal |ruby| template patterns within a template file, such as:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:540
# ac42f4b1bf87432c8ad4fe5f7a277a8a
msgid "chef-apply"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:541
# 4b66dde6da6d463fa4444e130c00553a
msgid "There is now a ``chef-apply RECIPE`` command that will run a single |chef| recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:544
# e46ed448266b4e19b87a612d4f7a058b
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:546
# 38cfb76d7a084041bdb61c81074cfbbc
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:547
# 63d66814a80a48e5bc7366df36067ea0
msgid "``knife search`` assumes node search when the object type is omitted."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:548
# 5e1e0ffdfb4a4f128120742602cdebc2
msgid "``knife search`` will search over roles, tags, |fqdn|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:549
# fbdcfc7a4adb450183e7de66779ec39e
msgid "|knife| essentials (``knife upload``, ``knife download``, ``knife diff``, and so on) have been merged to core |chef|"
msgstr ""

