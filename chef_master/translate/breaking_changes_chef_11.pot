# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-14 12:45\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/breaking_changes_chef_11.rst:33
# 5354216ec35141228537e9d9243aeca6
msgid "What's New in Chef 11.0"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:35
# 744f04c5e27d445c86526c75f19be1f2
msgid "The following items are new for |chef 11| and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:38
# 203f3a0e4708485db66e95539d9c0cf0
msgid "|chef client| and |chef solo|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:39
# 6654826a490845648f6b1cd4ca824a8c
msgid "The following changes have been made to |chef client| and |chef solo|. Some of these changes may break recipes (or may change their behavior); other changes may affect workflow or scripts."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:42
# 1835e353a76d4487a5fc7e9a148c774d
msgid "|shef| is now |chef shell|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:43
# a12c686b6ac944339ccf202ff03f150c
msgid "|shef| has been renamed to |chef shell| (CHEF-2925). Recipe mode and attributes mode must now be entered using the ``recipe_mode`` and ``attributes_mode`` commands."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:46
# cd16a97f38af489a8e2d479ac6d46245
msgid "Node attribute changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:47
# 14828063dcaf496d9ef6c6b5a9bbec43
msgid "In order to fix bugs and surprising behaviors with attributes, the implementation of ``Chef::Node::Attribute`` has been completely overhauled. The APIs for reading and writing values are now completely separate."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:50
# 3080cd000ef94c3281839fa368a55086
msgid "LWRPs AND Recipes Both Now Automatically Qualify loaded Gems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:51
# 79d57ecd5f99493091fa6261cb4e44eb
msgid "Previously, in Chef 10, one could do the following in a recipe:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:55
# 31f3016472a648978c0744ef8e1f8d6e
msgid "require 'win32/registry' registry = Win32::Registry::HKEY_LOCAL_MACHINE"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:58
# 7fdbb8c463804d0eacc04bb431ec7a29
msgid "In Chef 11 you must add \"::\" to the beginning to avoid the automatic addition of a \"Chef::\" qualifier."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:62
# 80033fd64b31448dadd0fd61bc981964
msgid "registry = ::Win32::Registry::HKEY_LOCAL_MACHINE"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:65
# 27d2dd57c7a4488d937db6255a841303
msgid "Implicit writes removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:66
# ada2c3f9a78745e3887fdf60f331b872
msgid "Node attributes may no longer be set without specifying which precedence level to set. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:73
# 7f6bb7946f32427ca38678a76665ae19
msgid "When a precedence level was not specified, ``normal`` was assumed. For |chef 11|, the following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:80
# 4dbe4471bd5d41b384796976f11a78ee
msgid "Even with this change, please take a moment to consider if a cookbook should be using default-level attributes instead. In general, normal-level attributes are only required when a value needs to persist across |chef client| runs (such as auto-generated passwords) or when a node is a \"special snowflake\"."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:83
# 5777be27e6214f28b224753ef27b2d57
msgid "attribute=\"value\" required"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:84
# 74fa2f61a3754768b010b98d23d5c31b
msgid "The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:90
# 015347c99ff04600b56a88f28a08128f
msgid "The following example replaces the previous example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:97
# 4a51dd3818ae453ebb3df75e268fe495
msgid "|knife| Output Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:98
# 802aa7de6f504d4cbf1ebda3198c72de
msgid "Previously, |knife| was adding the ID field to search results for node attributes. With |chef 11|, |knife| groups search results by the name of the node. For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:118
#: ../source/breaking_changes_chef_11.rst:165
# 94afe24b7fb94d24908eba7a89874c53
# 44d6c9e63adc4b44b51ce6bd043a27ef
msgid "and the new output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:140
# cbc194f8ebd047c9b7ec57483363b090
msgid "This may require that search queries be updated for |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:142
# 6c4bd9bf1d204014a4eded748f05f202
msgid "This change also affects |ohai| plugin output.For example, the old output looks something like:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:190
# dfc0052d28d04b48b008431074882521
msgid "Role and Environment Attribute Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:191
# 47a0ba65bd264511927d5f90d8fb1952
msgid "Role and environment default and override attributes are visible in attributes files. In |chef 11|, several changes have been made to attributes to enable you to include more complex logic in your attributes files. Though you should still try to keep your attributes files simple, you can effectively generate attributes composed of other attributes or based on a node's platform in attribute files now."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:194
# 7c09e4180dab47bda06572522c6968e4
msgid "Computing attributes from attributes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:195
# ebfbe58eee9f43f48187a4bc08b708d8
msgid "In |chef 10| and lower, code like the following will not work if you intend to modify the \"source\" attributes from roles or environments:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:208
# 6bb1f4b935d84bf2b7483f76dcf36cb4
msgid "In |chef 10| and lower, default and override attributes are stored as a single nested hash, and role and environment attributes are applied to the node after attribute files are evaluated so that role and environment attributes can overwrite attributes from attributes files. In |chef 11|, the above code will work as you expect, because role and environment attributes are stored separately from attributes from cookbooks, and are applied when the run_list is expanded (before any cookbook code is run)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:211
# f12c1dd51c9a42878eebd5730fd511c3
msgid "Setting attributes by platform"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:212
# 00bf4f3e480249958f8013d9c362ee1f
msgid "In |chef 11|, ``Chef::Node`` now includes the platform introspection mixin, so you can use the following methods in attributes files:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:222
# f1e9458cfabf43b297b7eeecabd02d9c
msgid "Behavioral changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:223
# 3e2966ee2477411bb48a54d3ca80985d
msgid "In |chef 10|, you can set a default or override attribute in a recipe, and it will overwrite the default/override value from any role/environment/attribute file. In |chef 11|, node.default always sets a cookbook-level default, and node.override always sets a cookbook-level override. Since cookbook-level attributes have lower precedence than role or environment attributes, a default or override attribute set in a recipe will not overwrite a value set by a role or environment."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:225
# 4facfb64eb7747fab76af759a70e5149
msgid "For example, given code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:235
# 1cb14f29af0d4475a20806a3277836bf
msgid "In |chef 10|, the value of node\"app_name\" will be \"from-recipe\" and in |chef 11|, the value will be \"from-role\" (assuming there are no competing normal or override attributes)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:237
# 8eb67be674aa432b9b74396edd56c964
msgid "Likewise, if you take any action based on the value of attributes when evaluating attributes files, be aware that attributes from roles and environments will now be used to compute the attribute value."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:240
# 36b201ea8ffb42d7acebe89a51cc2c07
msgid "node.run_state Replaced"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:241
# 3b92a9512a324393b51840ab2c15b179
msgid "In |chef 10| and lower, you could see which recipes had been evaluated by looking at ``node.run_state[:seen_recipes]``. ``Chef::Node`` was not the correct place to track this information, and the previous implementation resulted in bugs where a recipe like ``nginx::default`` could be loaded after ``nginx``, even though they are the same recipe."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:243
# e8b24bce1bcc4539ad9886215214ad92
msgid "In the new implementation, this is tracked by ``Chef::RunContext``. The following example is no longer valid:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:251
# fde37854298a4827853a691dfc2531ba
msgid "Use the following approach instead:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:261
# f4c21bbc5b1a4fce99696667621bfb20
msgid "Subtractive Merge Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:262
# e7455042d35345e4af7886c72547448a
msgid "In |chef 10| and previous, you could use special \"knockout prefix\" attribute values beginning with ``!merge`` to make the deep merge algorithm remove values from arrays. This feature was very seldom used, confusing, and greatly increased the time and space complexity of the deep merge implementation. This feature is removed in |chef 11|, and attributes containing the \"knockout prefix\" will trigger an error upon merge."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:264
# 494dc8a1970b4bc3a45ad47a7d03a674
msgid "If you need to selectively remove elements from arrays in your attributes, you should place this logic in a cookbook. Combined with other fixes to attributes in |chef 11|, you can put this logic in an attributes file, which is the most natural place for it."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:267
# 306cfe7908ca4494a366e3571114cbbb
msgid "Chef::REST#run_request Removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:268
# 4726bbae498e4d508801f113e3d768be
msgid "The ``Chef::REST#run_request`` method is removed. Use ``api_request`` or ``streaming_request`` for low-level access, or (better) use the higher-level ``GET``, ``PUT``, ``POST``, ``DELETE``, and ``HEAD`` methods."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:272
# b736afdfbcef4b98a6151bc8e8b80f89
msgid "Delayed Notifications Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:273
# 65821fb899f14af691c916fa0ffa6aa9
msgid "In |chef 10| and lower, delayed notifications are lost when Chef does not converge successfully."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:275
# 63fb24cd20a3419db53ac0eb561c7201
msgid "This fixes addresses the following scenario:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:277
# 70f213d7398843f4bc0df75384142d53
msgid "The |chef client| reconfigures a service"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:278
# 55a1e5cb680a47ab942dc04f67344f04
msgid "A delayed notification to restart the service is queued"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:279
# a2b5dbaf83fe432c970ef1d2235e65a6
msgid "An unrelated resource fails and halts the |chef client| run"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:280
# 7c97b52b539040bfa1707c9b9333d35d
msgid "Subsequent |chef client| runs don't restart the service because it hasn't been reconfigured during that run."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:282
# af8aadab4e8e42e1b3fb98e55695b09f
msgid "In |chef 11|, delayed notifications will run after the |chef client| run fails, and will be executed even if other delayed notifications fail. Conversely, if the |chef client| fails to configure a service and a restart action has been queued for that service, the service will be restarted and will probably be broken."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:285
# e760aa8746fc48a09f7a44ac5b086f53
msgid "Single Notifies for Notification"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:286
# ebbefdc9b505489a83d847dd6da40a6e
msgid "Previously you could specify multiple notifications in a single call to notifies with code like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:294
# 36c0f58eddae46dabe9042acb8304314
msgid "Instead of the above, just put multiple calls to notifies in your resource declaration:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:305
# 36f8036a41e04d109bf5f268140ce6c5
msgid "Changes for Data Bag Encryption"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:306
# 48b67497002f48be9beba6d1be8c46b1
msgid "In |chef 10|, objects in encrypted data bag items are serialized to |yaml| before being encrypted. Unfortunately, discrepancies between |yaml| engines in different versions of |ruby| (in particular, 1.8.7 and 1.9.3) may cause silent corruption of serialized data when decrypting the data bag (the version stored on the |chef server| is untouched and can be correctly deserialized with the same |ruby| version that was used to create it, however)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:308
# 0c17b36d92cb47a5b26bc9fa3c3c8d62
msgid "Because the corruption is silent, there is no way for the |chef client| to detect it; furthermore, all workaround possibilities we've investigated have severe limitations. Additionally, we wanted to modify the encrypted data bag item format to support using a random initialization vector each time a value is encrypted, which provides protection against some forms of cryptanalysis. In order to solve these issues, we've implemented a new encrypted data bag item format:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:310
# e2ad723cc35d4ff7ab54aa0de696e2c6
msgid "The user interface to encrypted data bags is unchanged. This change only affects the format of the encrypted values."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:311
# e11b2af5f7ae4aacbb62c053789c37db
msgid "|chef 11| clients will be able to read encrypted data bags created with either |chef 10| or |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:312
# d2f7972a294f4167a408aaea571d8991
msgid "|chef 10| clients |chef 10-18| and above will be able to read encrypted data bags created with either |chef 10| or |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:313
# 659f80c0013b49339cc280dbd8baac67
msgid "|chef 10| clients version |chef 10-16| and lower cannot read encrypted data bags created with |chef 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:314
# 2996da9edca9406b94bd4ba12c7ed504
msgid "|chef 11| knife commands will only create data bags in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:315
# 8e82e74b75da4d35b36532931b073327
msgid "|chef 10| knife commands will only create data bags in the old format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:318
# 41b4c3f9b64246128e597c14d0e04a27
msgid "Diagnosing Compatibility Errors"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:319
# c1c82db6729c494d8c010c651ba9418d
msgid "When trying to decrypt a |chef 11| format data bag item with |chef 10-16| or lower, you will see an error like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:329
# 05ce932232d64a1e9857870397c5d9a7
msgid "The above error output is from |knife|; the |chef client| will fail with a similar error."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:332
# 4a9d4aa1b34c4214baa8b04ed1108210
msgid "How to Upgrade"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:333
# 8f2b42dff35e4a749ceba30e76937354
msgid "Before upgrading on any workstation you use to create/edit encrypted data bag items, upgrade |chef client| on all machines that use encrypted data bags to version |chef 10-18| or above. Once your |chef client| fleet is upgraded, you can start using |chef 11| on your workstation (the box you create/update encrypted data bag items on)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:335
# d7a8691ef6cf44fabe4be5e7902cb4db
msgid "In order to get the benefits of improved security with the new data bag item format, it's recommended that you re-upload all of your encrypted data bag items once you've migrated to compatible versions of |chef client|. To migrate your data bag items, simply edit them with ``knife data bag edit`` or upload them with ``knife data bag from file``, whichever you normally do. |chef 11| will automatically upload your data bag items in the new format."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:338
# 90c347414ce945fbab5af51ceb916f3d
msgid "Server Versions"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:339
# f5c530caf15d4db0a25cc34c284e4209
msgid "Because encrypted data bag items are implemented as a client-side layer on top of regular data bag items, the format change is transparent to the server. You can begin using |chef 11| data bags even if your server is version |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:343
# e17621cffc3c46babcc81f3a1c00ee74
msgid "Non-recipe File Evaluation Includes Dependencies"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:344
# 749bfd9ad4a249f59b198619e55c6be9
msgid "In |chef 10| and lower, library, attribute, lightweight resource, and resource definition files are loaded in undefined order (based on the order given by the |ruby| Hash implementation, which differs based on version and vendor patching). In |chef 11|, these files are loaded according to the following logic:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:346
# 8ffd0eadf153422d94b60d6809fedcde
msgid "The expanded run_list is converted into a list of cookbooks in the same order"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:347
# 9751f34481dc4371bd421e6f7ca426d6
msgid "Each cookbook's dependencies are inserted into the cookbook list before the cookbook that depends on them."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:348
# 618f2983ba8d4be9b23e74f809cffd35
msgid "Duplicates are removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:350
# d997d9b57cd14ecbb4fa511f8eafef12
msgid "For |chef client| users, there should be no negative impacts from this change, as the previous order was essentially random. For |chef solo| users, the new loading logic means that files belonging to cookbooks which exist in the ``cookbook_path`` but are not in the expanded ``run_list`` or dependencies of the cookbooks in the expanded ``run_list`` will no longer be loaded (in |chef 10|, all non-recipe files from all cookbooks in the cookbook path were loaded). Additionally, |chef solo| users will now see ``CookbookNotFound`` errors when a cookbook is listed as a dependency in the metadata but not present on disk. The error message will look like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:359
# 650d1e0d5afa4b9da48ab5e16910215f
msgid "|knife| Configuration Parameter Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:360
# 2d1aea74a9a54244b5b48ec039ebbc67
msgid "In |chef 10|, it is difficult and error-prone to ensure that configuration parameters are applied in the right order. Configuration should be applied in the following order:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:362
# 0aeaf4d9bc384606a24a7799ad282d3b
msgid "Default values"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:363
# 5115130e90ce49148ac45f1ed18d01c0
msgid "Values set in |knife rb|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:364
# 8cd0322d0b0648bf9790f375348cfaec
msgid "Values passed by command line option"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:366
# 43ff0286874c48e18d97ad40b492323f
msgid "Because of the way the the ``mixlib-cli`` library is implemented, it is difficult to determine which values are defaults and which values are user-supplied command line options. |chef 11| takes advantage of a new mode for ``mixlib-cli`` that keeps default values separate from user-supplied values. In the configuration process, |knife| automatically applies config:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:368
# 9dd2cecef03444dab769351cff9c86ae
msgid "Default values set in the mixlib-cli DSL"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:369
# 44b000d629bc424680f4e1a56656361c
msgid "Configuration settings under Chef::Config[:knife]"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:370
# 08907359703748faae45818443e90451
msgid "User supplied values parsed by mixlib-cli"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:372
# de36f192a033453c857f6d74d7421f5b
msgid "Depending on how |knife| plugin authors have worked around the |chef 10| behavior, it's possible that this change will lead to incorrect values being used for configurable parameters. The |opscode|-maintained cloud plugins have been reviewed and should work correctly on both |chef 10| and |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:374
# 4a580ef850984eb6904fac971def4b9a
msgid "When writing |knife| plugins for |chef 11|, plugin authors are encouraged to define default settings using the ``mixlib-config`` DSL, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:384
# 48ae86ec33444de78c6acd45e248b728
msgid "and access configurable values via the config hash with symbols, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:391
# d03463bdfc1c4f499ebba243b88d9f8c
msgid "If compatibility with |chef 10| is required, accessing configuration via a helper function like this will work correctly, but only if default values are NOT set with the ``mixlib-cli`` DSL."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:400
# deeca50202fb4a38896c2e72fbce2269
msgid "Default values must be managed manually until support for |chef 10| is removed, for example, like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:406
# 7289454f54db4e11afa0dfc54656ad9e
msgid "Further information is available in the ticket: CHEF-3497 - Allow |knife rb| to implicitly provide all |knife| related options - FIX COMMITTED"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:410
# ac298ff7ab8e4e3f8b14ff27724c329c
msgid "Remote File Mirror Support May Break Subclasses"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:411
# b2c3549be7a94e55a4766912ea070761
msgid "In |chef 11|, |resource remote_file| now supports fetching files from a list of mirrors. As a result, the ``source`` parameter of the |resource remote_file| resource is internally stored as an array. This change is transparent to users of the |resource remote_file| resource; however, any library code that subclasses the |resource remote_file| resource---for example, to provide |amazon s3| support---will likely need to be updated to support and/or work around this change."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:413
# 59703cb815e44edcbee030562d774827
msgid "To effectively revert the change so that the ``source`` parameter is a string, add code like this to your resource:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:425
# dc0be12306fb4716868ba6dd4a37da01
msgid "Alternatively, you can update the provider to handle the case that the ``source`` parameter is an array."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:428
# ebc18c5a8e644b66bd9c3e3a48b27cf6
msgid "The Server"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:429
# 0e728a30acbd400389539515e256b307
msgid "The following items are new for |chef 11| server and/or are changes from |chef 10|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:432
# cd5a1a945f1e44b3b2acca62517070fe
msgid "The /clients endpoint returns |json| with a |json| class for edit (PUT) operations"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:433
# 6b7f9fb708294202b63d63985900df55
msgid "In |chef 8|-|chef 10|, the server's response to a ``PUT`` to ``/clients/:client_name`` does not include the ``json_class`` key, though other calls, such as ``GET``, do include this key. The client-side |json| implementation uses the presence of the ``json_class`` key as an indication that it should \"inflate\" the response into an instance of that class (otherwise, a plain hash object is returned). As a result, code that modifies a client (such as requesting a new key from the server) and parses the response with the |ruby| 'json' library must be modified to accept a ``Chef::ApiClient`` or a hash."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:435
# 0bdd859fa97a4ace9a6fde5e38ca036c
msgid "This change breaks the ``knife client reregister`` command in |chef 10-16| and earlier. Forward compatibility is introduced in |chef 10-18|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:438
# e77bb4c912ba4041a8edf7ed0ea856ac
msgid "The admin and validator flags are exclusive"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:439
# 155f7990c4d54560a66f4204fba65647
msgid "In |chef 11|, clients may not be both admins and validators at the same time. In the current alpha release, you can set the admin flag on the validator but it has no effect. In a future release, you may receive an error when attempting to set the validator flag on a client, or when attempting to create a client with both flags set."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:441
# 54ea8e7077b84753b3e00710b169609d
msgid "Exact behavior may change before release or in a minor version release after |chef 11|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:444
# c219b54468da47da88d66067a3a2fc8c
msgid "Strict checking of top-level |json| keys"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:445
# c62e261c4e9b4264a5f2375ecb17d5c0
msgid "All API endpoints that process requests to create or update an object validate that the |json| sent by the client does not contain unknown top-level keys. A 400 error response will be returned if unknown top-level keys are encountered."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:448
# fbfeeb61275349f690c6d7730a08be14
msgid "Creating an empty sandbox is now a 400 error"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:449
# 9623c99626444c02bf993c3e480b4aec
msgid "Sandboxes are used as part of the protocol for uploading cookbook content. An empty sandbox cannot be used for anything. Creating such a sandbox may indicate a logic error in client code and is (mildly) wasteful of server resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:452
# 412354a805754a5fa7c21ca33106b67b
msgid "Error messages included in server error responses have changed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:453
# 7183dd4a7ac5420eb590c7f94a2bbe31
msgid "As part of the move to |erchef|, error messages have been made more consistent. Code depending on specific error message text may be broken by these changes."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:456
# 8976d993009648fb8b7b528dde438637
msgid "Some error codes have changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:457
# 0207bcc522884470815abb75a346b39b
msgid "In a number of cases, |erchef| returns a more specific error status than the |chef 10| server. For example, returning 400 instead of 500 for some bad request data situations."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:459
# 3964215100554e27a07d8190a1e68821
msgid "The ``chef-server`` cookbook has been completely rewritten to support an omnibus |chef server| install"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:462
# 2d642dbf139f4f4692aa4be3ddabe19b
msgid "knife reindex is not supported in |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:463
# 9046cc7ba368408988bc11c762ba5ab3
msgid "You can trigger a reindex of object data using ``chef-server-ctl reindex`` while logged into the |chef server|. The |knife| command is still present in the |chef 11| |chef client| for use with a |chef 10| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:466
# dfa72d34d49f456c8c0f5c984d52d760
msgid "OpenId support has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:467
# 3aa1cdb45d704c0083872ae28ca78ebf
msgid "Support for |open id| is no longer available to the |chef client|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:471
# 6c766dbc47a446dab7f53d9bed2db55a
msgid "The Ruby server code has been removed"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:472
# 17828858f2c44986b1da9aab86383bd6
msgid "As part of the move to Erchef, the Ruby API server code along with classes not needed by the client-side have been removed from the main |chef repo|."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:475
# 95385584f48a49ed9a4e6ab87ccd8c9b
msgid "knife cookbook delete --purge is ignored by |chef server 11|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:476
# afc0bd5e76884743a06c4c7f0bb4211c
msgid "In |chef 11|, the server keeps track of which cookbooks use a given piece of cookbook content (via checksum). When a cookbook version is deleted, associated content will be deleted if not referenced by another cookbook version object. Therefore, there is no need for a purge operation when using the |chef 11| server."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:480
# c0bca8f6ecc34dc9b6b9730d1162145a
msgid "Other Notable Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:481
# 5309ed2c92fa4657a139f4a8374822c2
msgid "Changes that are not expected to be breaking, but are notable improvements."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:484
# e593b81a447f4e7db53302dfb93853c1
msgid "Output Formatters are the Default Output when Running in the Console"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:485
# 5120b4525e794de29b10ca5939cf8e48
msgid "In |chef 11|, when output is to a TTY, the |chef client| will automatically use output formatters to display information about what it's doing. To accommodate this, the default log level is now ``auto``, which evaluates to ``warn`` when running with a TTY (so log messages will not obscure the output formatter output), and ``info`` when running without a TTY (so you get important information about changes being made to the system when output formatters are not active)."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:487
# 45dd4ec03cb7400aa43f63b80f1f9e2c
msgid "If you prefer one type of output over the other, you can force the |chef client| to use output formatters or logger output with ``--force-formatter`` or ``--force-logger``."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:489
# dca954479d5c40b89d6e159dd0e3cdf9
msgid "In previous versions, bootstrapping templates would generally configure the log level to ``info`` in the |client rb| file. You may wish to change this to ``auto`` or remove the setting from your config file entirely."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:492
# cee9135a01724407a98fb2be6eeacad1
msgid "Inline Compile Mode for Lightweight Resources"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:493
# 78382bcb4dd348e78cad587893dfd1ec
msgid "In |chef 11|, there is an optional \"inline compilation\" mode for lightweight resources, which is intended to make notifications work correctly for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:496
# 2bc7ac039d3f41b7b6b9d24cc12bf101
msgid "Without Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:497
# 7d0c833e1bf64c70b0125cba5ef810e6
msgid "When not using inline compilation (it is disabled by default), any resources created in a lightweight provider's action blocks are inserted into the top level resource collection after the lightweight resource it belongs to. For example, given a resource collection like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:499
# df7ad504226b4102abbbcfa4a4d68cb2
msgid "top_level_resource_one"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:500
# 27b49fbb4ac44a0b8978c9dc958fafd4
msgid "lwrp_resource"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:501
#: ../source/breaking_changes_chef_11.rst:509
# 600e345b3971459c8ea2dc2b842e6a88
# 69e9bc9f279e4ed6a2a5f6d7dc54b66f
msgid "top_level_resource_two"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:503
# c2a71b17275445fb9f376b3d1aaf16b8
msgid "When ``lwrp_resource`` is executed, the resource collection will then be modified like this:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:505
# 84d0f11d5d0543a79e7b874c035c8a09
msgid "top_level_resource_one (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:506
# 5f9105e9741a4dcc9c632087d8a1484c
msgid "lwrp_resource (already processed)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:507
# c3a6fb35602946a9b748ba4db4badc3b
msgid "embedded_resource_one (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:508
# 342805993efc42c4b7d8ae6b7a38d3f1
msgid "embedded_resource_two (created by lwrp)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:511
# 4f5f32ba515d4da4b0b165169fbcc06c
msgid "This means that the ``lwrp_resource`` cannot correctly set its updated status based on the embedded resources, because it has finished executing before its embedded resources are processed."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:514
# fab227bb28434c60ba541fe8a882e7a3
msgid "With Inline Compilation"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:515
# 9c4f3f654e0045b59d887b037e872565
msgid "Inline compilation is enabled by calling ``use_inline_resources`` at the top of your lightweight provider file. When this is enabled, the code in your action block is executed in a self contained |chef client| run, with its own compile and converge phase. If any embedded resources have been updated, the top-level lightweight resource is marked as updated, and any notifications set on it will be triggered normally. Within the embedded |chef client| run, resources in the top-level resource collection are invisible to the embedded resources, so embedded resources are not able to notify resources in the top-level resource collection."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:518
# 1344b6e0938449429baddebb0875c27a
msgid "LWRP Class Hierarchy Changes"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:519
# b5333ca7fc3c4dd78ff362e1101ff1d9
msgid "In |chef 11|, lightweight resources resources now inherit from a ``LWRPBase`` resource instead of directly inheriting from ``Chef::Resource``. Likewise, lightweight resources providers inherit from a ``LWRPBase`` provider instead of ``Chef::Provider``. This should not impact existing code for lightweight resources."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:522
# d7acb39ee9f6477791dc19a69dca2585
msgid "Partial Support in Templates"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:5
# 8006eb4f9bd044128fdaab4d250ac064
msgid "A template can be built in a way that allows it to contain references to one (or more) smaller template files. (These smaller template files are also referred to as partials.) A partial can be referenced from a template file in one of the following ways:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:7
# eca27ee1e4914920b6b8a8fbf5718cdc
msgid "By using the |ruby| ``render`` method in the template file"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials.rst:8
# 6b494ff69796455da0a9d6ac35f1dc51
msgid "By using the |resource template| resource and the ``variables`` parameter."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:526
# e27cfc20e9444f5783fc0b48ad30e8ee
msgid "``render`` Method"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:5
# d42fb15083d94e7396bda4027ce4eb9b
msgid "Use the ``render`` method in a template to reference a partial template file with the following syntax:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:11
# 84eef2cf534c467db3242f439930a039
msgid "where ``partial_name.txt.erb`` is the name of the partial template file and ``:option`` is one (or more) of the following options:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:17
# aa033c22f3b04d6e958661f82a42684d
msgid "Option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:18
# bc502fedec944a699c1618a0954d0039
msgid "Description"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:19
# c866da2a1b844adda34597e11176da06
msgid "``:cookbook``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:20
# 206e93e6568744de9b1cacddf8109fc1
msgid "By default, a partial template file is assumed to be located in the cookbook that contains the top-level template. Use this option to specify the path to a different cookbook"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:21
# 84f244c5f9c343b7999f9ef4f4f7c667
msgid "``:local``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:22
# b3b271f9df6541829c5da0e09c6fd174
msgid "Indicates that the name of the partial template file should be interpreted as a path to a file in the local file system or looked up in a cookbook using the normal rules for template files. Set to ``true`` to interpret as a path to a file in the local file system and to ``false`` to use the normal rules for template files"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:23
# 638392c7de054813879456d6acc27129
msgid "``:source``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:24
# cfe54d830ab4409ca852eccf6fd4f0c9
msgid "By default, a partial template file is identified by its file name. Use this option to specify a different name or a local path to use (instead of the name of the partial template file)"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:25
# 1ebe7af7781e4ee1949720a6cfaf14a5
msgid "``:variables``"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:26
# e8a58d18cad44d52a24a2f6d708d2ed6
msgid "A hash of ``variable_name => value`` that will be made available to the partial template file. When this option is used, any variables that are defined in the top-level template that are required by the partial template file must have them defined explicitly using this option"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_render_method.rst:28
# 17831c971d9a406a874590b30eb277a4
msgid "For example:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:530
# 7103af33e56a4af291b62d8b6c53e540
msgid "Template Resource"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:6
# 2ec1468a41cd44b994ad75ed775794f2
msgid "The |resource template| resource can be used to reference a partial template file by using the ``variables`` parameter, the ``:partials`` option, and a |hash| of partial template files. For example:"
msgstr ""

#: ../../includes_cookbooks/includes_cookbooks_template_partials_template_resource.rst:18
# b4de0f07e43a475fad240ed84edb5e56
msgid "where each of the partial template files can then be combined using normal |ruby| template patterns within a template file, such as:"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:534
# 32aa4217a833402ea68e204ae0e55155
msgid "|chef apply|"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:535
# b457bbecd0194a489df9e4cbc596fb91
msgid "There is now a ``chef-apply RECIPE`` command that will run a single recipe with no ``JSON/run_list/config`` file required."
msgstr ""

#: ../source/breaking_changes_chef_11.rst:538
# 10c21787622f47cb83c314ebbd21f529
msgid "Miscellaneous"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:540
# 34f7130b52ca442c80c9105d88ed5e5a
msgid "Locking is used to prevent simultaneous runs on |unix|-like systems"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:541
# 4264bbbe25854ac5ae066d6673d2df84
msgid "|subcommand knife search| assumes node search when the object type is omitted"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:542
# c724cd95ec1f462e8567e1afafadc3e6
msgid "|subcommand knife search| will search over roles, tags, |fqdn|, and IP addresses when the given query is not in |apache solr| format (does not contain a colon : character)"
msgstr ""

#: ../source/breaking_changes_chef_11.rst:543
# 369cf1b32d6e4b37a8b2af922d476a12
msgid "|knife| essentials (|subcommand knife upload|, |subcommand knife download|, |subcommand knife diff|, and so on) have been merged into |chef 11-0|"
msgstr ""

