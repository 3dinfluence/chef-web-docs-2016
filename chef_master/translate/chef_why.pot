# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-03-21 17:35\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:34
# fac2d4626e2a4bacb77e260533bc55d9
msgid "Why Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# cd9b139f60534d0b886eb2b51c1a6ccd
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That |chef| community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:39
# 81115a90a63a42bcbfe9d0317f9a39ae
msgid "What are the core principles of Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 3f0534b2b0ed4a52b458f0bd31ae28b6
msgid "The key underlying principle of |chef| is that you (the user) knows best about what your environment is, what it should do, and how it should be maintained. |chef| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:44
# 76c4307f1d87415b9f50241e8d6a4b52
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# 729d72f6ce3045f6a70bc17f89e03a45
msgid "A recipe can run multiple times on the same system and the results will always be identical. In |chef|, a resource is defined in a recipe, which then defines the actions to be performed on the system. |chef| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has change, then |chef| will not do anything."
msgstr ""

#: ../source/chef_why.rst:48
# 41f2d57f48e9419e9a86f427b92444fd
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# 76896f82a3ec44efbe2c5419cc5a1512
msgid "|chef| does as much work as possible on the node; a |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute of data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:52
# 419703a967e0476b92210b3f1bf0ce60
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# e514583c93164626ba0f9e3c399be678
msgid "When |chef| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. With |chef|, for each node a list of recipes is applied, which in turn specifies resources. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. |chef| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install Apache before I can start my Django application!\" It also means that given the same set of cookbooks, |chef| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:56
# 538d609fc71d4e249ac7279e1e7b843a
msgid "Why was Chef created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# 5e6c925098e64d71bec46efb97a1f097
msgid "|opscode| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. Everything from installing operating systems to full application development. Over the course of building a dozen or so different startups on the same basic infrastructure timeline (over a one year period), we realized that getting to a place where everyone could have a fully automated infrastructure, regardless of the expertise of their system administrators, was possible. Only a few things stood in the way:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# 02515c38bfbe4baa849ad1f4600f4bfd
msgid "A fully automated infrastructure is a fully integrated infrastructure. The different components need to be able to communicate with each other. (Your application informs your infrastructure, just like your infrastructure informs your application.)"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:8
# 329ab01dd782437487d0f6f1746f4a13
msgid "Configuration management is the fundamental bedrock of infrastructure automation. For the infrastructure to be fully automated, it must expose configuration management as a service."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# 1aa800cfa2cd481b844de50c04ed21d6
msgid "Share the code that builds the infrastructure is difficult; the available tools required a level of specificity that made sharing difficult."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:10
# 3848b8e8f20f409d92976ad54fef24f7
msgid "No other open source tools met the requirements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:12
# 54df0bdcad60435bbbc7db636f418cb5
msgid "We solve these problems by:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:14
# d6ce3dfed6a2476cb1328a8d5b341c73
msgid "Building a systems integration framework on top of a configuration management system, powered by |ruby| and a simple DSL. This approach makes it easy for beginners."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# cebf250fdbc1483bb82345411af90a48
msgid "Making it possible to easily extend the capabilities of |chef| and by allowing |chef| to take instruction from ad-hoc sources."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:16
# d006a71269cf43cfa358dcfa0aaf3d3c
msgid "Every decision about |chef| was made with an eye to keeping as much as possible inside of cookbooks, which are sharable chunks of automation that are easily reused and extended."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# d8b3dbb7701c4f57a8303057a58172aa
msgid "Sharing an open source version of |chef| with everyone, creating an outstanding community, with a license that allows everyone to safely integrate |chef| into their environment. |chef| (and |ohai|) are licensed under the Apache License Version 2.0, a liberal, non-copyleft free software license. We maintain Contributor License Agreements, which allows anyone who uses |chef| (or |ohai|) to know they are free from any copyright or patent entanglements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# a8baa6e23989471ab6f08e5e3c8e90f0
msgid "The goal is to remove people from the process of building automated infrastructure, as much and as often as possible. |chef| is the first part of a framework that will allow all of us to do that."
msgstr ""

#: ../source/chef_why.rst:60
# 584cdd0a07d044678607aad324883678
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:61
# 306c2bbf162d459887533cad1a5c575e
msgid "Join the |chef| community, participate in the discussion going on right now on IRC, sign up for the |chef| mailing Lists, and read the instructions on how to contribute to an |opscode| open source project."
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:4
# ea370456d44e447f81ed22107d97c2e6
msgid "Here are some contributions from the |chef| community:"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:6
# b868e6a9c78542d6bf4bb69fb0b58a2e
msgid "**Workflow:**  `Berkshelf <http://berkshelf.com/>`_ | `Librarian <https://github.com/applicationsonline/librarian>`_ | `Spiceweasel <https://github.com/mattray/spiceweasel>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:8
# 9036fc780f904fb08a0e30b8d7ba5ef8
msgid "**Development tools:**  `test-kitchen <https://github.com/opscode/test-kitchen>`_ | `Food Critic <http://acrmp.github.com/foodcritic/>`_ | `cucumber-chef <http://www.cucumber-chef.org/>`_ | `chef-workflow <https://github.com/chef-workflow>`_ | `chefspec <https://github.com/acrmp/chefspec>`_ | `Cookbooks <http://community.opscode.com/cookbooks>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:10
# bc636cf4ec974ec9adc9531a0799a4cd
msgid "**Discussion:** :doc:`Guidelines </community_guidelines>` | :doc:`lists.opscode.com </community_lists>` | `Food Fight Show <http://foodfightshow.org/>`_ --- **Chat channels:** `chef <http://community.opscode.com/chat/chef>`_ | `chef-hacking <http://community.opscode.com/chat/chef-hacking>`_ | `openstack-chef <http://community.opscode.com/chat/openstack-chef>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:12
# f1bdca0b09c947d99b4e46b9ebd9c03f
msgid "**Plugins:** :doc:`Chef </community_plugin_chef>` | :doc:`Knife </community_plugin_knife>` | :doc:`Ohai </community_plugin_ohai>` | :doc:`Report handlers </community_plugin_report_handler>` | `Ridley <https://github.com/reset/ridley>`_"
msgstr ""

#: ../source/chef_why.rst:66
# b90aed0173d34d6692d142bcfa04d66d
msgid "Do I really need to know Ruby?"
msgstr ""

#: ../source/chef_why.rst:67
# 85305cab759b4049ab5f7fea39c247fa
msgid "It helps, but its not required. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:70
# 5ecb3711d9e740ee80e41e25488e6ad4
msgid "Can I trust |chef|?"
msgstr ""

#: ../source/chef_why.rst:71
# 1df6045f0e474c078059ead9e72c3e6a
msgid "Yes, absolutely. |chef| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code."
msgstr ""

#: ../source/chef_why.rst:75
# 2b4284d4ec754abf939bb78b22fe2248
msgid "Who uses Chef?"
msgstr ""

#: ../source/chef_why.rst:76
# d5298d0f541f46c8b4058ddc11aaaa2d
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:79
# 5699adfb45f34c9fa803b3b1aa106e6d
msgid "Why the Apache license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# 7b1426fd60604e37a78b6611bf8040f5
msgid "The short version is that we had three broad requirements for the license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# abb83c1361a34f0a87bdd6f593d8aa1e
msgid "We are an open source company. We make money from our open source software. We wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# 8694922e8a1f4603a99c05129e3fbae2
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# 31203419e2d948c490cc6cf4fcc23a3e
msgid "We wanted to build an open and equal community of users. We did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# 7cd7a506623042829154412131043394
msgid "For more detail, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:84
# f9f2a14514644edda8c243da8056f325
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:85
# 96f2a13ddca14b3c850ca0ac3e4c2dd6
msgid "There are some other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:88
# 3e1a1870c72a4baeb8c944b8ee2344f4
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:89
# 343077a34372458d8e02749019cf31a4
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does not share any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:91
# fc72a6c1fe3045fba24a35dba2d485ff
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:93
# 4b233e187e5e41a68a7db9ef83a3f76b
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:94
# b32a88beb3e241ac95164bec319328fd
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:95
# 79df02ea5af248318cc1bfdf53cc955b
msgid "|chef| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:96
# e8ec757187054d41b6b06cabc92cc902
msgid "|chef| resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:97
# c55b9559e64145a2af7c67e0b2a892b0
msgid "Resources can appear more than once in |chef|, and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:100
# bdb086e1f8a14e7e8dfb0101e667188a
msgid "As |chef| grows, the services we expose will likely be integrated with |puppet| as well. There is more than one way to do it."
msgstr ""

#: ../source/chef_why.rst:103
# 65ab3b23166c4a149e852a00917a3082
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:104
# e8622c841f9e45fc8913388fdbaa824d
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../source/chef_why.rst:131
# 4c09c8e7db7e4fb39cf9f3beb84ba3a4
msgid "xxxxx:"
msgstr ""

#: ../source/chef_why.rst:137
#: ../source/chef_why.rst:139
#: ../source/chef_why.rst:140
# 9dca8769ffec4048b5a79a6ade238b92
# 925060c1fa1340aebfc81ef89cc6cbb1
# 7cc672d3f3f942a4aa943063dd61fdf8
msgid "xxxxx"
msgstr ""

#: ../source/chef_why.rst:138
# 1b66b95602c9438f90e66bd146a4299e
msgid "Description"
msgstr ""

#: ../source/chef_why.rst:145
# 8f12ad3073704a54b876e91250e2b069
msgid "Conclusion"
msgstr ""

#: ../source/chef_why.rst:149
# e416ab3d4ca549d6a966097957fed1e6
msgid "For more information ..."
msgstr ""

#: ../source/chef_why.rst:150
# 1f95e997ffee4352820f95c7fdf9e16c
msgid "For history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../source/chef_why.rst:152
# fcc96a5d74fa4aeb969138f146e68ddf
msgid "Part one: |http opscode youtube short part one|"
msgstr ""

#: ../source/chef_why.rst:153
# 99d8a7ce83e54e2c831fdb78bc7fa4b0
msgid "Part two: |http opscode youtube short part two|"
msgstr ""

#: ../source/chef_why.rst:155
# 66540983f72340f9b2e3ab4bd7c57e43
msgid "For more information about |opscode|, cookbooks for |chef|, and the |chef| community:"
msgstr ""

#: ../source/chef_why.rst:157
# 5dc434d9011143729c5720ed418a782d
msgid "|http opscode|"
msgstr ""

#: ../source/chef_why.rst:158
# a25ae237d9a74065a3d909ade46c05dd
msgid "|http community|"
msgstr ""

#: ../source/chef_why.rst:159
# 19cc513918f74c40ab932498c62cd63e
msgid "|http community cookbooks|"
msgstr ""

