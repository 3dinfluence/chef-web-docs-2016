# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-17 09:47-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:8
# 4e76fa699f1b407da3592cb842e2e192
msgid "Why |chef|?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# c8ef657367924cbe9f130a65400ce7cb
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:13
# 6c57f2d2a2634adf9f6db2073e5a895d
msgid "What are the core principles?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 388abd73bf02441bbd7908e63e92b50e
msgid "The key underlying principle of |chef| is that you (the user) know best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:18
# 9f44e9bc57c74aaebcf44b5f8b859d31
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# 2e54ff4dc1834b62b1d79e8508eccc37
msgid "A recipe can run multiple times on the same system and the results will always be identical. A resource is defined in a recipe, which then defines the actions to be performed on the system. The |chef client| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has changed, then the |chef client| will not do anything."
msgstr ""

#: ../source/chef_why.rst:22
# 39990bd8b4e1431bad544d2dc6568d01
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# c7ec49a64d804cc3aa9a8e7c3ecc5253
msgid "|chef| does as much work as possible on the node and as little as possible on the server. A |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef client| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:26
# 94bfca39cf734329845b884700efae29
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# bfcc823b5d064896ac9d234da0b2c381
msgid "When the |chef client| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. For each node a list of recipes is applied. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. The |chef client| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install |apache| before I can start my |django| application!\" It also means that given the same set of cookbooks, the |chef client| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:30
# 09f02823ef6c4475a52fe88df5a03929
msgid "Why was |chef| created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# 86b1b5d1fce4433f96ff985600c69b0f
msgid "|company_name| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. |company_name| then changed its name to Opscode, which was a cool name for a while. But then interactions started going like this:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# 05f12de72fd24ddba72eb7d99f522fde
msgid "\"So where do you work?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# 816a118a5ac64a76a8ce0df6e684b045
msgid "\"Opscode.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:11
# e93b928901864119a42084fdb3d25848
msgid "\"What does Opscode do?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:13
# 8928137b2996451ab9cf1c1564b0429b
msgid "\"Devops software, infrastructure automation, you know...\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# 5fded25d6f17457e9170874a34fcbb33
msgid "\"Oh, you mean like Chef?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# 17da073d7c2841a7929dea4995dd84df
msgid "\"Yes, just like Chef.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# 697416c29df74b67851f6ea70ef41e32
msgid "Sometimes we felt like we were explaining \"Why Opscode?\" more than we wanted to. And then Opscode itself turned out to be a weak brand, easily confused and often misspelled:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:23
# a83a53f5caee4dc1ab8e6c4d48d076a5
msgid "So now we call ourselves what we should have called ourselves all along: |chef|. Everything else is still the same. Our software removes people from the process of building automated infrastructure, as much and as often as possible. |chef| is a system integrations framework built on top of a configuration management system. It's powered by |ruby| and by a simple DSL. |chef| is open source, with an outstanding community, and a license that allows everyone to safely integrate |chef| into their organization, and then extend it to match each organization's unique complexity, requirements, and scale."
msgstr ""

#: ../source/chef_why.rst:34
# b120f55da992432495a409dd7bde6234
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:35
# 3a622ab32500415ca0ee0cad857dad07
msgid "`Join the community <http://docs.opscode.com/#the-community>`_, participate in the discussion going on right now on IRC, sign up for the mailing Lists, and read the instructions on how to contribute to an |company_name| open source project. For more information about participating in the community, see"
msgstr ""

#: ../source/chef_why.rst:38
# 20cab1430e7849e291bb025bc801fa8c
msgid "Do I really need to know |ruby|?"
msgstr ""

#: ../source/chef_why.rst:39
# 74649bec1be349cc8349b4f491c86782
msgid "It helps, but its not required. Many recipes are just structure and patterns that use |ruby| as the definition language. Having actual |ruby| coding skills? Helpful, but not required, especially to get started. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:42
# bf08717cd8d147c589592a7f89d5fceb
msgid "Can I trust |chef|?"
msgstr ""

#: ../source/chef_why.rst:43
# 8c8f8af4ddc74a8dadf0ec9048f77762
msgid "Yes, absolutely. The |chef client| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code and visibility into how it all works."
msgstr ""

#: ../source/chef_why.rst:46
# 7506c72368004c0190fd39db27c7eeac
msgid "Who uses |chef|?"
msgstr ""

#: ../source/chef_why.rst:47
# 2283af5369da4703be584e2a6e232363
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.getchef.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:50
# df76ed534f33477a894fd3b8eec8655a
msgid "Why the |apache| license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# 42a6f106400f401d927b0243ee1d27c0
msgid "The short version of why |company_name| chose the |apache| license for |chef| is because we defined three broad requirements for a license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# 91f2cd0080c640faa6766bb451e91699
msgid "We are an open source company and we make money from our open source software so we wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# b4c7d9580901480684d6832b8416c62c
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# 899a453cf1e44998af0b4bfb7383cd55
msgid "We wanted to build an open and equal community of users and did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# 373f0f686f1a403fa339ae12dcddce1b
msgid "For more details, read `the blog post about why we love open source <http://www.getchef.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:54
# 0d7efc4964334c5a9fbbca7ea7e71509
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:55
# eec0bfb4b2824e7ea6fc0294da0abd94
msgid "There are other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:58
# 5bebc1f24f9b4627896e6b395aa60a03
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:59
# 3e0144e2da75440593da8c263f0132e4
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does **not** contain any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:61
# d813c1a7538b42cea80b2f52e6b64c7a
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:63
# b68126026f6045fea7ee8b2fb1004c8f
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:64
# 3d5b850cdd2e4d6bab80e7d53ac1b7cf
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:65
# 33ddc1caaca6468193c6004f55a514e5
msgid "The |chef client| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef client| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:66
# b44efbdbd744464192878732858679d1
msgid "Resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:67
# 5af30ca4a8664b158ece7690beee0f8d
msgid "Resources can appear more than once and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:70
# 6054d15ba2724e818078873f3a2298cc
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:71
# a79ccae117644bbf9fda2ceba41e2e35
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

