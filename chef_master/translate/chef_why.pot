# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-25 09:45\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:33
# 5a9a31106a3c4647bb11a744fbd36a7e
msgid "Why Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 7d15ed843b5e4505a455bb5d2666ed39
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:38
# 9caf9f4db60e4e828bb72021ae53e840
msgid "What are the core principles?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 125eb67101134adbbe70ce143b1454ac
msgid "The key underlying principle of |chef| is that you (the user) knows best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:43
# 76348bbefb0244fc8dfaa103b1c01702
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# 0df70ab7fda3472fafaefabb406364cd
msgid "A recipe can run multiple times on the same system and the results will always be identical. A resource is defined in a recipe, which then defines the actions to be performed on the system. The |chef client| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has change, then the |chef client| will not do anything."
msgstr ""

#: ../source/chef_why.rst:47
# fe59d27bc13141229a8c67ed4ca3e0a7
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# 9e8678af0ca742508f8b9ce4ca35b8c5
msgid "|chef| does as much work as possible on the node and as little as possible on the server. A |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute of data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef client| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:51
# b49ff2c22c704d82bb651a0a0ebc0bd0
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# 97b62ee1226944f1b0f2f96108d001a6
msgid "When the |chef client| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. For each node a list of recipes is applied. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. The |chef client| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install |apache| before I can start my |django| application!\" It also means that given the same set of cookbooks, the |chef client| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:55
# d5c1cd3d6f51456ea8549d82403193f4
msgid "Why was Chef created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# 18130e85242e4fa89df5d05f7d77241a
msgid "|opscode| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. Everything from installing operating systems to full application development. Over the course of building a dozen or so different startups on the same basic infrastructure timeline (over a one year period), we realized that getting to a place where everyone could have a fully automated infrastructure, regardless of the expertise of their system administrators, was possible. Only a few things stood in the way:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# 07ff0bc337be4b7e99a54e01ae0a7f3e
msgid "A fully automated infrastructure is a fully integrated infrastructure. The different components need to be able to communicate with each other. (Your application informs your infrastructure, just like your infrastructure informs your application.)"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:8
# 7802309eaf8443f3a03242501f947731
msgid "Configuration management is the fundamental bedrock of infrastructure automation. For the infrastructure to be fully automated, it must expose configuration management as a service."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# 9c85d92ee60a4f43aa070bd30a989896
msgid "Share the code that builds the infrastructure is difficult; the available tools required a level of specificity that made sharing difficult."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:10
# 794170ba2d3a4568ade92feb9cdb2c6b
msgid "No other open source tools met the requirements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:12
# 7f8649e015454b5f86e8cddae9e4eb75
msgid "We solve these problems by:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:14
# 5fa8e5ce8bb14745947a43406c777001
msgid "Building a systems integration framework on top of a configuration management system, powered by |ruby| and a simple DSL. This approach makes it easy for beginners."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# fd5d2143c3dc483197ae7a74fe28b5b9
msgid "Making it possible to easily extend the capabilities of |chef| by allowing the |chef client| to take instruction from ad-hoc sources."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:16
# 64d42978834e473988d5b10ba95f898a
msgid "Every decision about |chef| was made with an eye to keeping as much as possible inside of cookbooks, which are sharable chunks of automation that are easily reused and extended."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# f9289c444fbf451699043d274f1212c9
msgid "Sharing an open source version with everyone, creating an outstanding community, with a license that allows everyone to safely integrate |chef| into their environment. |chef| (and |ohai|) are licensed under the Apache License Version 2.0, a liberal, non-copyleft free software license. We maintain Contributor License Agreements, which allows anyone who uses |chef| (or |ohai|) to know they are free from any copyright or patent entanglements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# 6769c1c19a5a4caeaf3e5e2d708adda1
msgid "The goal is to remove people from the process of building automated infrastructure, as much and as often as possible. |chef| is the first part of a framework that will allow all of us to do that."
msgstr ""

#: ../source/chef_why.rst:59
# b78d694b9e614fba973cf9569a6d33f7
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:60
# 2bde9dcef1f64195b1f429ad12c67279
msgid "`Join the community <http://docs.opscode.com/#the-community>`_, participate in the discussion going on right now on IRC, sign up for the mailing Lists, and read the instructions on how to contribute to an |opscode| open source project. For more information about participating in the community, see"
msgstr ""

#: ../source/chef_why.rst:63
# c5c7255c2c69423c93b345a8a2f365fc
msgid "Do I really need to know Ruby?"
msgstr ""

#: ../source/chef_why.rst:64
# c5cc5d337c9242ff81bc92c2f2e34e87
msgid "It helps, but its not required. Many recipes are just structure and patterns that use |ruby| as the definition language. Having actual |ruby| coding skills? Helpful, but not required, especially to get started. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:67
# 494e656b383344c5977c5a292d510d60
msgid "Can I trust Chef?"
msgstr ""

#: ../source/chef_why.rst:68
# 5392f830a31341d8a6584dd8f50607cc
msgid "Yes, absolutely. The |chef client| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code and visibility into how it all works."
msgstr ""

#: ../source/chef_why.rst:72
# ea52ccf650704bcdaa87efcea892e2b8
msgid "Who uses Chef?"
msgstr ""

#: ../source/chef_why.rst:73
# af06d5c8e88241b8a482c109cfa941ea
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:76
# 63591c7345a1443dbdd08c9f640b966d
msgid "Why the Apache license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# 64aa9d14182748069e5395031607ef67
msgid "The short version of why |opscode| chose the |apache| license for |chef| is because we defined three broad requirements for a license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# e29b24aca40e4e61be72474c97242bf8
msgid "We are an open source company and we make money from our open source software so we wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# 78f5c9cc79284c97a8f1cfcfbdc1f7ea
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# c5c41ea99eef49ce83f5375cb66657cc
msgid "We wanted to build an open and equal community of users and did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# 1c3d9f498bdf40e498cb95ec116ce262
msgid "For more detail, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:81
# 08e0aa3627794627a9336b26ed758bc8
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:82
# 333b2ab0251d44738f60e432a98445bb
msgid "There are other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:85
# 9780cdf81e084b65bd542d975f19b9c4
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:86
# e8ae25616a0c446b96c57661e0a829e5
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does not share any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:88
# 211d58aa86b748318046ca026628c530
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:90
# c3ce7345a44f493ea245eaa5b73f5e9a
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:91
# ab9f4dc406d54254a466b677e8115cac
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:92
# 76746a1c4b324985bac89e71bd684375
msgid "The |chef client| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef client| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:93
# 53f03e251e3e482ab7e18eb2d698f235
msgid "Resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:94
# a9fcd3c96a3f4aab92c588bce25293c2
msgid "Resources can appear more than once and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:97
# 82668221f3d84f3596c24e1b06e1958e
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:98
# 1d959662fc7a4e85b501f557a35afc88
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../source/chef_why.rst:101
# c22b9ac664f744688cc0cf78bb58f77f
msgid "For more information ..."
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:5
# 7eb7befb9fb04608837c2e86a2ad9d06
msgid "For a history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:7
# b4c15c7e26b547bb9988baab484386f7
msgid "Part one: |url opscode_youtube_short_part_one|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:8
# 543ab186407242c59f56ef634c9b4de5
msgid "Part two: |url opscode_youtube_short_part_two|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:10
# 8e4a5ae6adac49b6bdd47d13e4609cf9
msgid "For more information about |opscode|, cookbooks, and the community:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:12
# 237f432addfd4bc4be6e637b780188e8
msgid "|url opscode|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:13
# 6a3cc4a052ee4295aca17e46858d8b70
msgid "|url opscode_community|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:14
# 2638c1fe37e94fa0955f79b672fe0c7f
msgid "|url opscode_cookbooks|"
msgstr ""

