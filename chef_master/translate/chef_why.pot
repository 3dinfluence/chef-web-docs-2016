# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-16 13:47\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:8
# 5e8d56b9272a4b7096a64f6f7577c3fa
msgid "Why Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 470becb0e80c418889d03e374bbe74b6
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:13
# 71032df7c27a4702b40d3bcf3c138e03
msgid "What are the core principles?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 3bda53d0d1724b5bb069b82b7fc115f4
msgid "The key underlying principle of |chef| is that you (the user) knows best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:18
# f2c64460b2604bcea87abeb428fc9d05
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# 0ee9b9ad0b494a5492f3ef0e01d5dcfa
msgid "A recipe can run multiple times on the same system and the results will always be identical. A resource is defined in a recipe, which then defines the actions to be performed on the system. The |chef client| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has change, then the |chef client| will not do anything."
msgstr ""

#: ../source/chef_why.rst:22
# 6a594ade7e444d8d9230274a3b4def48
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# 598cf011661348649430ee9ee5f255fc
msgid "|chef| does as much work as possible on the node and as little as possible on the server. A |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute of data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef client| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:26
# 2fbff6a195154b61afd895d60dc5eefa
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# fb2e96c8a0a54550ba68e1483a7aeec1
msgid "When the |chef client| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. For each node a list of recipes is applied. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. The |chef client| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install |apache| before I can start my |django| application!\" It also means that given the same set of cookbooks, the |chef client| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:30
# a6d94fd08e0349be926ae621d89d962c
msgid "Why was Chef created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# d610c6f4ac764c439e28240b8ba5d941
msgid "|company_name| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. |company_name| then changed its name to Opscode, which was a cool name for a while. But then interactions started going like this:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# 5f612cd55dd24aa2a94b59a84350a1cd
msgid "\"So where do you work?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# 4d913d9bba6c40a4ac293b42a59f1659
msgid "\"Opscode.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:11
# 1b30c741e8db4a02bd2cf486fa058e47
msgid "\"What does Opscode do?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:13
# cb82671594044da1bdbc0a9ca8abad16
msgid "\"Devops software, infrastructure automation, you know...\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# a25ccd8ad1aa42cea6dda59d89055ee0
msgid "\"Oh, you mean like Chef?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# 8a4c9cce056d469c841080226167da8d
msgid "\"Yes, just like Chef.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# 299caa64f357426fbed40beabe9396ec
msgid "Sometimes we felt like we were explaining \"Why Opscode?\" more than we wanted to. And then Opscode itself turned out to be a weak brand, easily confused and often misspelled:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:23
# 450f076c236041b5ad0efc05719cc7e6
msgid "So now we call ourselves what we should have called ourselves all along: |chef|. Everything else is still the same. Our software removes people from the process of building automated infrastructure, as much and as often as possible. |chef| is a system integrations framework built on top of a configuration management system. It's powered by |ruby| and by a simple DSL. |chef| is open source, with an outstanding community, and a license that allows everyone to safely integrate |chef| into their organization, and then extend it to match each organization's unique complexity, requirements, and scale."
msgstr ""

#: ../source/chef_why.rst:34
# 3e90f9d2d2f9488c80d0308f903d54ef
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:35
# 1000d1a782b6422188e373bcd7bd0a98
msgid "`Join the community <http://docs.opscode.com/#the-community>`_, participate in the discussion going on right now on IRC, sign up for the mailing Lists, and read the instructions on how to contribute to an |company_name| open source project. For more information about participating in the community, see"
msgstr ""

#: ../source/chef_why.rst:38
# dfc167385112460384b1b5347965a84d
msgid "Do I really need to know Ruby?"
msgstr ""

#: ../source/chef_why.rst:39
# 5bf3e95e3bc249b6aba071cec8f73db6
msgid "It helps, but its not required. Many recipes are just structure and patterns that use |ruby| as the definition language. Having actual |ruby| coding skills? Helpful, but not required, especially to get started. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:42
# d92dadc562f44a0a92e08c75e4d7d453
msgid "Can I trust Chef?"
msgstr ""

#: ../source/chef_why.rst:43
# 1da79557fa5a4f7e87f2ff700f2859ec
msgid "Yes, absolutely. The |chef client| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code and visibility into how it all works."
msgstr ""

#: ../source/chef_why.rst:47
# e44518472b8b434ba170ca27909a0a49
msgid "Who uses Chef?"
msgstr ""

#: ../source/chef_why.rst:48
# 609829d8591c48a78a9add0a7b0bb669
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:51
# 8cb81cb2204d4b3b93a5674538aaf75f
msgid "Why the Apache license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# fe416122db5c45b2b3182a51e7ee16cf
msgid "The short version of why |company_name| chose the |apache| license for |chef| is because we defined three broad requirements for a license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# e61bd1ae6b2b46f6b152d2c3168ca06e
msgid "We are an open source company and we make money from our open source software so we wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# 757c14ac0c36414e88a1356e0df5f673
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# 38324f9c402b4239be138fe326e5f164
msgid "We wanted to build an open and equal community of users and did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# 5fedee9d0e6b4cc995abe88b71838500
msgid "For more detail, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:56
# 436dd27da2bf45fe8e49ebcd6d141f51
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:57
# be803b99fbf148d3926e111f30f731f4
msgid "There are other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:60
# 4edfd7f68e904d1baab6e15bee54b5d4
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:61
# 8b3d9bf944a044e8af5b1fb31ce2cb5e
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does not share any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:63
# 2620c945042b4cdb88a3194f1cef499d
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:65
# 4b069720c7274280944ec2c08da44165
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:66
# 3193c99baf3040e0b6098c58ab7efd09
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:67
# f86c9170ff7d41ed94db1bc5b1729197
msgid "The |chef client| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef client| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:68
# 4cc7f37524114d4fa36f50fe8c9cf6d7
msgid "Resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:69
# b6ae87ef67ec4027868f3548361877bf
msgid "Resources can appear more than once and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:72
# 48620d485f3e40198ee1dc107d9f6341
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:73
# eeb51e8dbc96411a9a36ba6eb0aa01fa
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../source/chef_why.rst:76
# 088654ab57604d1f8a8b22d8f67c5490
msgid "For more information ..."
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:5
# 15694ab1e5644547846deb4a6ccd9ff0
msgid "For a history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:7
# 5c4026a2882049c0aa34046328477db4
msgid "Part one: |url opscode_youtube_short_part_one|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:8
# 76b963a7a9aa4dddb489c2beeca9c58c
msgid "Part two: |url opscode_youtube_short_part_two|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:10
# bc85506389ba48e88b8b34b08f012078
msgid "For more information about |company_name|, cookbooks, and the community:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:12
# be2ac839dc5247a0942bb4e963178cc5
msgid "|url opscode|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:13
# f77c82bc1b74461ea8169b399039204e
msgid "|url opscode_community|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:14
# 2375c4ddfd3b40cdbedd9fd7b0648813
msgid "|url opscode_cookbooks|"
msgstr ""

