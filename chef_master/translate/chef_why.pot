# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-07-25 18:13\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:34
# 5eee9292c1ad40c0a2e647dc97ae77b1
msgid "Why Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 3936d52c88984924b2aa6cc993efde31
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That |chef| community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:39
# 4a2626d85d1146639509f130493cb5f0
msgid "What are the core principles of Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 21c676dedf0646dfa6a879e2cff0c6b7
msgid "The key underlying principle of |chef| is that you (the user) knows best about what your environment is, what it should do, and how it should be maintained. |chef| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:44
# 0965022f0dd64ad58ff5a61a9196b419
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# fb6d5d0cc94141aca8a1aa8fd43b060f
msgid "A recipe can run multiple times on the same system and the results will always be identical. In |chef|, a resource is defined in a recipe, which then defines the actions to be performed on the system. |chef| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has change, then |chef| will not do anything."
msgstr ""

#: ../source/chef_why.rst:48
# c7753ec0a2604b08b1d228d9091f93d6
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# 243295476dd84f13ab7fd3e8d7dc4c46
msgid "|chef| does as much work as possible on the node; a |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute of data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:52
# 9fba9ae4c4014c4ba36b54bd9f094347
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# 84f0636d339b4eba8ccc4db07aa7923a
msgid "When |chef| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. With |chef|, for each node a list of recipes is applied, which in turn specifies resources. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. |chef| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install Apache before I can start my Django application!\" It also means that given the same set of cookbooks, |chef| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:56
# 9e9884ec5d9842e18094083d28fc3fb0
msgid "Why was Chef created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# a94ba5a3388945a6a41e6b5c25f8c62a
msgid "|opscode| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. Everything from installing operating systems to full application development. Over the course of building a dozen or so different startups on the same basic infrastructure timeline (over a one year period), we realized that getting to a place where everyone could have a fully automated infrastructure, regardless of the expertise of their system administrators, was possible. Only a few things stood in the way:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# 6538a4fc0e074450a3dcbfd1d21d153f
msgid "A fully automated infrastructure is a fully integrated infrastructure. The different components need to be able to communicate with each other. (Your application informs your infrastructure, just like your infrastructure informs your application.)"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:8
# 44b9c9cb160a422db4819569eaa8f7af
msgid "Configuration management is the fundamental bedrock of infrastructure automation. For the infrastructure to be fully automated, it must expose configuration management as a service."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# 96decb2427644101983a5b1b7850635a
msgid "Share the code that builds the infrastructure is difficult; the available tools required a level of specificity that made sharing difficult."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:10
# 72ac1241e5ab414eb339582007839936
msgid "No other open source tools met the requirements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:12
# 0311be754fe94f4190dc5a11d537b366
msgid "We solve these problems by:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:14
# b90c12f729824804b26f6c29f5f02e2c
msgid "Building a systems integration framework on top of a configuration management system, powered by |ruby| and a simple DSL. This approach makes it easy for beginners."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# f831c424adcb48bbb2ee7d7cb6b2b6d5
msgid "Making it possible to easily extend the capabilities of |chef| and by allowing |chef| to take instruction from ad-hoc sources."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:16
# baa346e0b51d4887a6d878dc2182bb50
msgid "Every decision about |chef| was made with an eye to keeping as much as possible inside of cookbooks, which are sharable chunks of automation that are easily reused and extended."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# 448a4149f7a947b8b24ca65c71229dc5
msgid "Sharing an open source version of |chef| with everyone, creating an outstanding community, with a license that allows everyone to safely integrate |chef| into their environment. |chef| (and |ohai|) are licensed under the Apache License Version 2.0, a liberal, non-copyleft free software license. We maintain Contributor License Agreements, which allows anyone who uses |chef| (or |ohai|) to know they are free from any copyright or patent entanglements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# 415acaa4aae24c1d93581d1bbff70bfe
msgid "The goal is to remove people from the process of building automated infrastructure, as much and as often as possible. |chef| is the first part of a framework that will allow all of us to do that."
msgstr ""

#: ../source/chef_why.rst:60
# 038b837479c8491c92b8e593736959a8
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:61
# b92af32e3fce4909b91e51029049c313
msgid "Join the |chef| community, participate in the discussion going on right now on IRC, sign up for the |chef| mailing Lists, and read the instructions on how to contribute to an |opscode| open source project."
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:4
# fe358c1a53c04b5584a7362355a08078
msgid "Here are some contributions from the |chef| community:"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:6
# 15f33ff0c1b5475387ff53825a0167d7
msgid "**Workflow:**  `Berkshelf <http://berkshelf.com/>`_ | `Librarian <https://github.com/applicationsonline/librarian>`_ | `Spiceweasel <https://github.com/mattray/spiceweasel>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:8
# 22287d30ac9b4d8ba9464b13dd3e622c
msgid "**Development tools:**  `test-kitchen <https://github.com/opscode/test-kitchen>`_ | `Food Critic <http://acrmp.github.com/foodcritic/>`_ | `cucumber-chef <http://www.cucumber-chef.org/>`_ | `chef-workflow <https://github.com/chef-workflow>`_ | `chefspec <https://github.com/acrmp/chefspec>`_ | `yard-chef <https://rubygems.org/gems/yard-chef/>`_ | `Cookbooks <http://community.opscode.com/cookbooks>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:10
# 050326cc19da4a00832f2264553b5fa9
msgid "**Discussion:** :doc:`Guidelines </community_guidelines>` | :doc:`lists.opscode.com </community_lists>` | `Food Fight Show <http://foodfightshow.org/>`_ --- **Chat channels:** `chef <http://community.opscode.com/chat/chef>`_ | `chef-hacking <http://community.opscode.com/chat/chef-hacking>`_ | `openstack-chef <http://community.opscode.com/chat/openstack-chef>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:12
# f2b46dc4af244fabbf770881df1a068a
msgid "**Plugins:** :doc:`Chef </community_plugin_chef>` | :doc:`Knife </community_plugin_knife>` | :doc:`Ohai </community_plugin_ohai>` | :doc:`Report handlers </community_plugin_report_handler>` | `Ridley <https://github.com/reset/ridley>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:14
# 5ac831d16cef4ca08fde523a98badaf6
msgid "**Documentation:** `Contribute to this documentation <https://github.com/opscode/chef-docs>`_ | `Style Guide <http://docs.opscode.com/style_guide.html>`_"
msgstr ""

#: ../source/chef_why.rst:66
# c751f72d76d2433aaead7ecfabc80d87
msgid "Do I really need to know Ruby?"
msgstr ""

#: ../source/chef_why.rst:67
# 2bfb39a93fe74e389e4dadfb20f561e4
msgid "It helps, but its not required. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:70
# b2cc059909bd4f1fbcf0af6116e73c78
msgid "Can I trust |chef|?"
msgstr ""

#: ../source/chef_why.rst:71
# 0316abecda0c4193a2dffeed05d3e4ba
msgid "Yes, absolutely. |chef| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code."
msgstr ""

#: ../source/chef_why.rst:75
# 6cdf83a25fc4461d8dc26c908405ff39
msgid "Who uses Chef?"
msgstr ""

#: ../source/chef_why.rst:76
# 76fcf4b6572c4622a7a7e2fd67a24c27
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:79
# 955e5ddd14954602980c6913c12b1428
msgid "Why the Apache license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# d7f12c72ce0d48a0b5636f25d3ec1b38
msgid "The short version is that we had three broad requirements for the license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# 39355096cf4447539b7a05e032bbc7ce
msgid "We are an open source company. We make money from our open source software. We wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# 96bb063953c34e9c88a3cb2f055810a7
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# 67da5564a7ea41fda1af8073884dd647
msgid "We wanted to build an open and equal community of users. We did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# 3272d3a5e3cb43c1a2e3e788f80cb5e1
msgid "For more detail, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:84
# d9d9ae173f154229a22c7fb75fb8db1d
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:85
# 466a16431ef64fbab92f141414d2269b
msgid "There are some other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:88
# 329f266e40a94836985d5ca38688fb90
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:89
# 448a63bef31a4f25bb5f8a60bbfe4a0c
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does not share any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:91
# 57ff0d442c034e5a8adc5d5b5892e657
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:93
# 1251dcec05474b4495d120b67482dd6c
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:94
# 64e0e0bad5de479f9da12b07c9c6b1fc
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:95
# 2bf1c2bddf2d4a9b96cf48eea9a5f366
msgid "|chef| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:96
# a33c508f46964df5b8ca65b41995664b
msgid "|chef| resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:97
# 4305056ce8524a9a8722d750f184f005
msgid "Resources can appear more than once in |chef|, and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:100
# b4a4de78f4404ebcb8c7693e09ff5fb4
msgid "As |chef| grows, the services we expose will likely be integrated with |puppet| as well. There is more than one way to do it."
msgstr ""

#: ../source/chef_why.rst:103
# 43b3b45105a94272b574617aaf4b1840
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:104
# b937536516a242d9a54db861a2a77e46
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../source/chef_why.rst:107
# 1b44a1cdafd94ea393cbabf0b76d3995
msgid "For more information ..."
msgstr ""

#: ../source/chef_why.rst:108
# 9a7b89d4315f4d32b88b599c0c59a5df
msgid "For history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../source/chef_why.rst:110
# 78b5a11baeac47fcb1fb442e8deba702
msgid "Part one: |http opscode youtube short part one|"
msgstr ""

#: ../source/chef_why.rst:111
# 530c5c14196648a393ddab533a6938a6
msgid "Part two: |http opscode youtube short part two|"
msgstr ""

#: ../source/chef_why.rst:113
# e494cf18a4aa4586bab246ca9501ef55
msgid "For more information about |opscode|, cookbooks for |chef|, and the |chef| community:"
msgstr ""

#: ../source/chef_why.rst:115
# 1e5c50c15eb94414a44f52344114ac5b
msgid "|http opscode|"
msgstr ""

#: ../source/chef_why.rst:116
# 8a6e21fc82ed4614be75c47c2bd2e8f3
msgid "|http community|"
msgstr ""

#: ../source/chef_why.rst:117
# 44102a0b5d28462fbc2f255a8cd4ab2a
msgid "|http community cookbooks|"
msgstr ""

