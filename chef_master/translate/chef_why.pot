# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-06-20 12:06\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:34
# 54b88a2bab934abeb542c55a5b91f9c5
msgid "Why Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 66f20148e1e84471aba28d053d98a9ca
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That |chef| community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:39
# 6b8c1014aee94efcaf858e260d9ee992
msgid "What are the core principles of Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# f78bcbf28440498fa53d3dc5ca239c62
msgid "The key underlying principle of |chef| is that you (the user) knows best about what your environment is, what it should do, and how it should be maintained. |chef| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:44
# 81ac4c89c8b941d39b6280f979ed9975
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# 6e0ef0b1bac4447c884d5034ec38eed0
msgid "A recipe can run multiple times on the same system and the results will always be identical. In |chef|, a resource is defined in a recipe, which then defines the actions to be performed on the system. |chef| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has change, then |chef| will not do anything."
msgstr ""

#: ../source/chef_why.rst:48
# 94f5523cd3414f468cc1503ff14f8d85
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# b9a8c84d96044041b8039ab90c8db7cf
msgid "|chef| does as much work as possible on the node; a |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute of data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:52
# f0b493ef260d409ab64451980e5745f3
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# 899328b658ab4924a03d5ccad0176f64
msgid "When |chef| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. With |chef|, for each node a list of recipes is applied, which in turn specifies resources. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. |chef| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install Apache before I can start my Django application!\" It also means that given the same set of cookbooks, |chef| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:56
# e440e6fb2edf4043b566c17eae72209c
msgid "Why was Chef created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# 9207d14120244a7181063ba67d4f48de
msgid "|opscode| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. Everything from installing operating systems to full application development. Over the course of building a dozen or so different startups on the same basic infrastructure timeline (over a one year period), we realized that getting to a place where everyone could have a fully automated infrastructure, regardless of the expertise of their system administrators, was possible. Only a few things stood in the way:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# 8086a792a6c84ef7b8adf2275acbd98d
msgid "A fully automated infrastructure is a fully integrated infrastructure. The different components need to be able to communicate with each other. (Your application informs your infrastructure, just like your infrastructure informs your application.)"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:8
# d7804e3405174b67b7be32062d8b88ff
msgid "Configuration management is the fundamental bedrock of infrastructure automation. For the infrastructure to be fully automated, it must expose configuration management as a service."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# 19c56b4ad689482692fdd3f698f38f84
msgid "Share the code that builds the infrastructure is difficult; the available tools required a level of specificity that made sharing difficult."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:10
# 7ba1cee22fe848958a9bae6e0cfc455c
msgid "No other open source tools met the requirements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:12
# 7bafa7f9939b4a58885d212371c6ccca
msgid "We solve these problems by:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:14
# b6559afd8b504ede9ddd363008f97727
msgid "Building a systems integration framework on top of a configuration management system, powered by |ruby| and a simple DSL. This approach makes it easy for beginners."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# 43a448cbaeb1449797d1f84ae15f9a7f
msgid "Making it possible to easily extend the capabilities of |chef| and by allowing |chef| to take instruction from ad-hoc sources."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:16
# 2e40529a03284ba59e09fc74e5a0a7f9
msgid "Every decision about |chef| was made with an eye to keeping as much as possible inside of cookbooks, which are sharable chunks of automation that are easily reused and extended."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# 84904407a956478d841ea58337d1787c
msgid "Sharing an open source version of |chef| with everyone, creating an outstanding community, with a license that allows everyone to safely integrate |chef| into their environment. |chef| (and |ohai|) are licensed under the Apache License Version 2.0, a liberal, non-copyleft free software license. We maintain Contributor License Agreements, which allows anyone who uses |chef| (or |ohai|) to know they are free from any copyright or patent entanglements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# 25eabf0b596744a39b85fa3aca8a9b77
msgid "The goal is to remove people from the process of building automated infrastructure, as much and as often as possible. |chef| is the first part of a framework that will allow all of us to do that."
msgstr ""

#: ../source/chef_why.rst:60
# dca80c90e591456a8af5911994b6dfb4
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:61
# c2f7819fc8e34270b67e2985b499ae93
msgid "Join the |chef| community, participate in the discussion going on right now on IRC, sign up for the |chef| mailing Lists, and read the instructions on how to contribute to an |opscode| open source project."
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:4
# 668a1e1670434fb5b07413aceb425ce5
msgid "Here are some contributions from the |chef| community:"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:6
# f2079ee1cf20465cbcec4a70cb683952
msgid "**Workflow:**  `Berkshelf <http://berkshelf.com/>`_ | `Librarian <https://github.com/applicationsonline/librarian>`_ | `Spiceweasel <https://github.com/mattray/spiceweasel>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:8
# 83e2938d93e343409362d624d23aa7a6
msgid "**Development tools:**  `test-kitchen <https://github.com/opscode/test-kitchen>`_ | `Food Critic <http://acrmp.github.com/foodcritic/>`_ | `cucumber-chef <http://www.cucumber-chef.org/>`_ | `chef-workflow <https://github.com/chef-workflow>`_ | `chefspec <https://github.com/acrmp/chefspec>`_ | `yard-chef <https://rubygems.org/gems/yard-chef/>`_ | `Cookbooks <http://community.opscode.com/cookbooks>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:10
# 9c5ab5acead748a9a8952f0e40e0e46f
msgid "**Discussion:** :doc:`Guidelines </community_guidelines>` | :doc:`lists.opscode.com </community_lists>` | `Food Fight Show <http://foodfightshow.org/>`_ --- **Chat channels:** `chef <http://community.opscode.com/chat/chef>`_ | `chef-hacking <http://community.opscode.com/chat/chef-hacking>`_ | `openstack-chef <http://community.opscode.com/chat/openstack-chef>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:12
# edc8aff715bc425f8bf82d0013f5310a
msgid "**Plugins:** :doc:`Chef </community_plugin_chef>` | :doc:`Knife </community_plugin_knife>` | :doc:`Ohai </community_plugin_ohai>` | :doc:`Report handlers </community_plugin_report_handler>` | `Ridley <https://github.com/reset/ridley>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:14
# 8cc9590de862453e82da7b8d9e0d8d65
msgid "**Documentation** `Contribute to this documentation <https://github.com/opscode/chef-docs>`_ | `Style Guide <http://docs.opscode.com/style_guide.html>`_"
msgstr ""

#: ../source/chef_why.rst:66
# 783ed58ff21d46b28308ea842e69df7c
msgid "Do I really need to know Ruby?"
msgstr ""

#: ../source/chef_why.rst:67
# e201f015d4e04a86baa7e88f5344f9f6
msgid "It helps, but its not required. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:70
# 9a3e4d75b5354322863b6c8678706f9d
msgid "Can I trust |chef|?"
msgstr ""

#: ../source/chef_why.rst:71
# 260a0ff35bd94994979798fd361daf41
msgid "Yes, absolutely. |chef| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code."
msgstr ""

#: ../source/chef_why.rst:75
# 0c107a0bc4de48a5a268d871f39b6c78
msgid "Who uses Chef?"
msgstr ""

#: ../source/chef_why.rst:76
# bd1e4380e60441eaac630bce7ab888bd
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:79
# c1e19071ce5d4f02838dc581bc5d430f
msgid "Why the Apache license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# e6bb8828cfd048c991603131f11d6f55
msgid "The short version is that we had three broad requirements for the license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# 71015469eff5455f97fd35dc85f0aa9c
msgid "We are an open source company. We make money from our open source software. We wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# a6486f1691324c5eb54758530b3ccf1b
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# a2c2e0d19ed746fcab2d741240b23b07
msgid "We wanted to build an open and equal community of users. We did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# aabbe34991d84f0b83db99180317d92a
msgid "For more detail, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:84
# d139c7a63e13406e8d46e5dd5baa6dc1
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:85
# e13e175a20c144bca1fc2690636b6566
msgid "There are some other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:88
# f9a27b4d58f84c2d91f40bb540a31284
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:89
# 9d3b718d6a0c4cfaadae39045c5c1a1e
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does not share any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:91
# 308ccb31516b4987a4595f2c2d3a1162
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:93
# b1171684cb4345f98b14022eace4a14b
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:94
# 4bb0c822556646349a00b0025424d442
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:95
# bed373afb51e4ecab27bf45e2308931d
msgid "|chef| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:96
# 52f3d338d8d84ec28bf78d9327408f7d
msgid "|chef| resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:97
# 8ac2c19e49954ef08078560d40b942ea
msgid "Resources can appear more than once in |chef|, and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:100
# 39e5f529fc6a406e89361f6a81475735
msgid "As |chef| grows, the services we expose will likely be integrated with |puppet| as well. There is more than one way to do it."
msgstr ""

#: ../source/chef_why.rst:103
# c33812a237e94ce7a2ea29fecdd91c74
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:104
# a2379c6f75784e12bb158683c1c70d70
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../source/chef_why.rst:107
# 8e3a25751d834ea7b093919c7ffa0e7d
msgid "For more information ..."
msgstr ""

#: ../source/chef_why.rst:108
# a1c03b574347460ab3649aa40f5b6db9
msgid "For history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../source/chef_why.rst:110
# 27caf9f7b0774333aba7134fe358eb08
msgid "Part one: |http opscode youtube short part one|"
msgstr ""

#: ../source/chef_why.rst:111
# b4cdf2cefef446729d92b83ed4bcb94e
msgid "Part two: |http opscode youtube short part two|"
msgstr ""

#: ../source/chef_why.rst:113
# c7292ff6f51f4174822c78d29fb67332
msgid "For more information about |opscode|, cookbooks for |chef|, and the |chef| community:"
msgstr ""

#: ../source/chef_why.rst:115
# f93ae8c0438541fd96807cc50ec7c9de
msgid "|http opscode|"
msgstr ""

#: ../source/chef_why.rst:116
# 977a8bf15ed14a0898d4ffb48957ae17
msgid "|http community|"
msgstr ""

#: ../source/chef_why.rst:117
# 04498803ff204a9297887f34e7c9e23f
msgid "|http community cookbooks|"
msgstr ""

