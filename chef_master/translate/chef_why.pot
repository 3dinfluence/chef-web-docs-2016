# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-14 12:45\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:33
# fd50f4b29ebd4008a7a918630ab5922e
msgid "Why Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 6e2f0118519e4110a2eee2261f7eaa28
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:38
# 16b3200b20e141438fc3264cc9dd8ab0
msgid "What are the core principles?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 533ff22932df4c0889a1a001be6832e5
msgid "The key underlying principle of |chef| is that you (the user) knows best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:43
# efccb8b2196e471796b6180eeb3dadc3
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# d35c18abd54d4cac86ba4a979d9b36a4
msgid "A recipe can run multiple times on the same system and the results will always be identical. A resource is defined in a recipe, which then defines the actions to be performed on the system. The |chef client| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has change, then the |chef client| will not do anything."
msgstr ""

#: ../source/chef_why.rst:47
# 3476f98c68da40debb09346c736bf64d
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# b01af5bdee9f4bf79500f513c53958fd
msgid "|chef| does as much work as possible on the node and as little as possible on the server. A |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute of data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef client| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:51
# 8a16a8b0f8014aa2a396aad38208737a
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# 9cfffcd4b9a44702b39225bfd94d4bbb
msgid "When the |chef client| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. For each node a list of recipes is applied. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. The |chef client| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install |apache| before I can start my |django| application!\" It also means that given the same set of cookbooks, the |chef client| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:55
# 6d373f0f6c4e43768d8dbbaa2c52ac2e
msgid "Why was Chef created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# 8c47ff142c1e4b9883f19a7adb220416
msgid "|opscode| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. Everything from installing operating systems to full application development. Over the course of building a dozen or so different startups on the same basic infrastructure timeline (over a one year period), we realized that getting to a place where everyone could have a fully automated infrastructure, regardless of the expertise of their system administrators, was possible. Only a few things stood in the way:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# 6615c41791cd4b4e9b0a13195541f5ba
msgid "A fully automated infrastructure is a fully integrated infrastructure. The different components need to be able to communicate with each other. (Your application informs your infrastructure, just like your infrastructure informs your application.)"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:8
# b2ed19f50e5c4d9688466c1d46d0960d
msgid "Configuration management is the fundamental bedrock of infrastructure automation. For the infrastructure to be fully automated, it must expose configuration management as a service."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# a5456d2c48e14d0b933c6fb489e9af7c
msgid "Share the code that builds the infrastructure is difficult; the available tools required a level of specificity that made sharing difficult."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:10
# f360bf973db04769a97b82322ef1fc3c
msgid "No other open source tools met the requirements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:12
# 019fadc8f40a465ca8c8f0d1e2bdd3e6
msgid "We solve these problems by:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:14
# b4a9234c1f0342c6a68d05f8adddac44
msgid "Building a systems integration framework on top of a configuration management system, powered by |ruby| and a simple DSL. This approach makes it easy for beginners."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# 3d6df714043f40f2b426a8a70e744e0e
msgid "Making it possible to easily extend the capabilities of |chef| by allowing the |chef client| to take instruction from ad-hoc sources."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:16
# 011ef791cb424168b446212f0b1f9211
msgid "Every decision about |chef| was made with an eye to keeping as much as possible inside of cookbooks, which are sharable chunks of automation that are easily reused and extended."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# 8f36640efe794c0e98573ad023fbba09
msgid "Sharing an open source version with everyone, creating an outstanding community, with a license that allows everyone to safely integrate |chef| into their environment. |chef| (and |ohai|) are licensed under the Apache License Version 2.0, a liberal, non-copyleft free software license. We maintain Contributor License Agreements, which allows anyone who uses |chef| (or |ohai|) to know they are free from any copyright or patent entanglements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# e560b72c36124d0481a667f1da563362
msgid "The goal is to remove people from the process of building automated infrastructure, as much and as often as possible. |chef| is the first part of a framework that will allow all of us to do that."
msgstr ""

#: ../source/chef_why.rst:59
# 695ded755a4247f5a4a506fb4a0ed46a
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:60
# 022fa0e108e946e783d84a3e13582886
msgid "`Join the community <http://docs.opscode.com/#the-community>`_, participate in the discussion going on right now on IRC, sign up for the mailing Lists, and read the instructions on how to contribute to an |opscode| open source project. For more information about participating in the community, see"
msgstr ""

#: ../source/chef_why.rst:63
# 6cc7158179b549ed8cde85172b5dfa92
msgid "Do I really need to know Ruby?"
msgstr ""

#: ../source/chef_why.rst:64
# d8856dda7ba54ed9b18f72d4d2317303
msgid "It helps, but its not required. Many recipes are just structure and patterns that use |ruby| as the definition language. Having actual |ruby| coding skills? Helpful, but not required, especially to get started. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:67
# 53e4d9f01133470f8473a65641ed91af
msgid "Can I trust Chef?"
msgstr ""

#: ../source/chef_why.rst:68
# 902b81e5b7f54d00a72fbfe7eea07ebb
msgid "Yes, absolutely. The |chef client| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code and visibility into how it all works."
msgstr ""

#: ../source/chef_why.rst:72
# d1c0c54779f84e7f8fcb4cb1f4ad3e07
msgid "Who uses Chef?"
msgstr ""

#: ../source/chef_why.rst:73
# 846b2368f6894ba99c3eb659d61757e8
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:76
# 1e7beed7b2dd40ffb049ed368e2bbc6f
msgid "Why the Apache license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# 3a377cdfbf014eb99cc61d1c29e69720
msgid "The short version of why |opscode| chose the |apache| license for |chef| is because we defined three broad requirements for a license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# f38117a804d5450c93990943bcf99e91
msgid "We are an open source company and we make money from our open source software so we wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# 9b6294aaa497406198740f7bd17eb083
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# 8dd38edbb8f14ab28e5737fe270944a3
msgid "We wanted to build an open and equal community of users and did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# 16fc02cbeae241b3963e660c459c4b27
msgid "For more detail, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:81
# 0c35c48f2022435da14f7532a9c86a86
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:82
# 0feb69a3f9734e04976e40b6492b362f
msgid "There are other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:85
# de21f8396dd14fa1814f38371030a4c9
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:86
# 545c3976ee9348848f9f062a54059686
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does not share any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:88
# effced580f1e45c88833b8a13ec4a4f1
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:90
# 12c6f8abacb140909a6135149d1e0f90
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:91
# b34df1f9040943d481ae6c15fe2837e9
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:92
# bc5fdb2ab063437cb012c7657376e1fb
msgid "The |chef client| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef client| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:93
# 859fad73afff4a95b3840103d776ec38
msgid "Resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:94
# cd25aa94251a4fdbb90c71e6ab08c878
msgid "Resources can appear more than once and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:97
# 36555de0f724463c9559ded56cd3e27c
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:98
# 70cd44b19b0e40a89c92ac6bb90a686f
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../source/chef_why.rst:101
# 949b035057204f68a5befbdcf1b9b9bb
msgid "For more information ..."
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:5
# 5f9d5fbdea5848908a9234baafed55b0
msgid "For a history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:7
# 4ce7910b94d14909bbc49c86c8affcec
msgid "Part one: |url opscode_youtube_short_part_one|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:8
# ff59ae466baf400f8d6454ff602432c1
msgid "Part two: |url opscode_youtube_short_part_two|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:10
# 9fdecd23a9394b6fa012ddcd0b8e020a
msgid "For more information about |opscode|, cookbooks, and the community:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:12
# 270188eddca0410483365026d8927f14
msgid "|url opscode|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:13
# 15edb0215ee14fdd8eab72b0c1696285
msgid "|url opscode_community|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:14
# 89034831979345c1b3ff9bafc6a5769c
msgid "|url opscode_cookbooks|"
msgstr ""

