# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-19 11:19-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:8
# 6c49a32c11614b869e553c67b630a2c2
msgid "Why |chef|?"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_you_know_best.rst:5
# 932332aa46f746cc8c06b90297d969af
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:13
# eef2fd69c9324762b167cdd038a4f2ee
msgid "What are the core principles?"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_principles.rst:5
# a7e23a1a38ef4570869509310d50b754
msgid "The key underlying principle of |chef| is that you (the user) know best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:18
# 46d06b36d29b4d789ea18c09bb908fe4
msgid "Idempotence"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_principles_idempotence.rst:5
# 6c30bdc6d0d34892ad5f1e38e9fe26f9
msgid "A recipe can run multiple times on the same system and the results will always be identical. A resource is defined in a recipe, which then defines the actions to be performed on the system. The |chef client| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has changed, then the |chef client| will not do anything."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:22
# 3e9f6a83da4241749cc8fe5bad4d058f
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_principles_thin_client.rst:5
# 83d8417027744073b64952f0a7f7a44d
msgid "|chef| does as much work as possible on the node and as little as possible on the server. A |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef client| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:26
# 85aae424f87c4bfd90c83d2e5a545938
msgid "Order Matters"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_principles_order_matters.rst:5
# c6a34cf6b5bb450a9f99b3952d6ed9b2
msgid "When the |chef client| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. For each node a list of recipes is applied. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. The |chef client| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install |apache| before I can start my |django| application!\" It also means that given the same set of cookbooks, the |chef client| will always execute resources in the same exact order."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:30
# 566061d6469740f1b7cf93dbeba2ee0c
msgid "Why was Chef created?"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_origins.rst:5
# c5ed81f813844e6da4026f4367c62e54
msgid "|company_name| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. |company_name| then changed its name to Opscode, which was a cool name for a while. But then interactions started going like this:"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_origins.rst:7
# da77c61b10074869b2b646d7cfbbe03b
msgid "\"So where do you work?\""
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_origins.rst:9
# 09febbd79cfb47d8ad359ee14e7ea19e
msgid "\"Opscode.\""
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_origins.rst:11
# d2f864333f4246f298c27619c83eb630
msgid "\"What does Opscode do?\""
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_origins.rst:13
# ac5c7bc4d3ca4a31974fa1e6c350affd
msgid "\"Devops software, infrastructure automation, you know...\""
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_origins.rst:15
# 2daa516524fa455993e3c96bb4e0a3ab
msgid "\"Oh, you mean like Chef?\""
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_origins.rst:17
# 45ff77ac17594e49be389efd98991ff7
msgid "\"Yes, just like Chef.\""
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_origins.rst:19
# fddaa45a3b2d4d2c83d9842db5ab3aae
msgid "Sometimes we felt like we were explaining \"Why Opscode?\" more than we wanted to. And then Opscode itself turned out to be a weak brand, easily confused and often misspelled:"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_origins.rst:23
# 7ef6705a46144b679ad0ba3d46f6ea64
msgid "So now we call ourselves what we should have called ourselves all along: |chef|. Everything else is still the same. Our software removes people from the process of building automated infrastructure, as much and as often as possible. |chef| is a system integrations framework built on top of a configuration management system. It's powered by |ruby| and by a simple DSL. |chef| is open source, with an outstanding community, and a license that allows everyone to safely integrate |chef| into their organization, and then extend it to match each organization's unique complexity, requirements, and scale."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:34
# e97d64037d414e199d5b849cbece741f
msgid "How can I help?"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:35
# 1a129231009549e9aaf47d8c6af7de94
msgid "`Join the community <http://docs.opscode.com/#the-community>`_, participate in the discussion going on right now on IRC, sign up for the mailing Lists, and read the instructions on how to contribute to an |company_name| open source project. For more information about participating in the community, see"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:38
# 8ea6c88058a144c69927dd747623dfef
msgid "Do I really need to know |ruby|?"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:39
# 733db650812843c593d97c5a6e6c8b79
msgid "It helps, but its not required. Many recipes are just structure and patterns that use |ruby| as the definition language. Having actual |ruby| coding skills? Helpful, but not required, especially to get started. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:42
# 79ada33259584a0ca75fa1d367cdb23e
msgid "Can I trust |chef|?"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:43
# 8f4a9674fe9647e392f03a0fee6e36f1
msgid "Yes, absolutely. The |chef client| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code and visibility into how it all works."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:46
# 9dbd266226e343b5bf8edb3655050a34
msgid "Who uses |chef|?"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:47
# fe89401fca324732bffd0caf03d21c64
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:50
# d69c7c48b9e54dc786c28158dbdc2408
msgid "Why the Apache license?"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_apache_license.rst:5
# f7d036f2a3a14d9dbb774f17e02ab89d
msgid "The short version of why |company_name| chose the |apache| license for |chef| is because we defined three broad requirements for a license under which we would release open source software:"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_apache_license.rst:7
# 669b292834e9459ea033e0326c6affe3
msgid "We are an open source company and we make money from our open source software so we wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_apache_license.rst:8
# 3685f7f006154e3aa88b6586b835478f
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_apache_license.rst:9
# 0e0b079cbd8849b08ab371f4b0e7cdd8
msgid "We wanted to build an open and equal community of users and did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_why_apache_license.rst:11
# 78db53ebf771466a8ff678e144e9cc26
msgid "For more details, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:54
# 6577aeb8435746afb24cdf1f64f7c7e7
msgid "Comparisons"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:55
# 65c1e395d59443258a2d7f9dd4af86bc
msgid "There are other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:58
# 9607a78145524ebf9b9853a1a0e3afc0
msgid "|puppet|"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:59
# d99f852a05204d258e0efa339f413181
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does **not** contain any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:61
# cce3629c0acb4b3eadcc3802a35941b1
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:63
# e51afe442b4041a98f3bd96a7360b060
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:64
# 900d2ac8800841289685df426aeedf46
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:65
# c2f0012cc7da4ee88521d08bc3e8166c
msgid "The |chef client| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef client| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:66
# f5cf0b1c1ac44a3dba12773350966632
msgid "Resources have actions, which can be signaled"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:67
# 14eb8c8be17e4b908c9a0c83e8ba5e7b
msgid "Resources can appear more than once and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:70
# caaf8880dcc049c88c4b77c53cd9cb35
msgid "|cfengine|"
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:71
# 12c424d3aad24f7bbab3e76f8c16fdd8
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../../../desktop/chef-docs/chef_master/source/chef_why.rst:74
# ff3214f7f3584fa7a06fd8a0f233e699
msgid "For more information ..."
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_for_more_info.rst:5
# f262ad00d96741bab00d4f673f7a4bf6
msgid "For a history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_for_more_info.rst:7
# 19cbe268c0c34bf3980bae0a3199e4c5
msgid "Part one: |url opscode_youtube_short_part_one|"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_for_more_info.rst:8
# 93fd435266484f9593c35786205368f2
msgid "Part two: |url opscode_youtube_short_part_two|"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_for_more_info.rst:10
# c73aad8aaddc4ca883949ffbbdc9d9c9
msgid "For more information about |company_name|, cookbooks, and the community:"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_for_more_info.rst:12
# 831522a4af954eb7947f9da84096936c
msgid "|url opscode|"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_for_more_info.rst:13
# 6395815a0a1a42cb95163ecaa4bc26b7
msgid "|url opscode_community|"
msgstr ""

#: ../../../desktop/chef-docs/includes_chef/includes_chef_for_more_info.rst:14
# 440fe5c837314d46b0dfa2611f097904
msgid "|url opscode_community_cookbooks|"
msgstr ""

