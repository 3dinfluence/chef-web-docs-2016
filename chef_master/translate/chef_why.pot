# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-04-06 21:31-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:8
# 4888053a15a2487e9ec61395f614d697
msgid "Why |chef|?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# b7829bc5a9b342f599ed82a6d39ee487
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:13
# 01fa34b8142e42f59c2cb191c7612942
msgid "What are the core principles?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# e141b9ebfdc240baa966432fec0147ad
msgid "The key underlying principle of |chef| is that you (the user) know best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:18
# b3cdfd1a42b04ba7bc2f641f2d7e42c8
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# 1b81bdc674e54ba58d64e83d2a4b1e86
msgid "A recipe can run multiple times on the same system and the results will always be identical. A resource is defined in a recipe, which then defines the actions to be performed on the system. The |chef client| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has changed, then the |chef client| will not do anything."
msgstr ""

#: ../source/chef_why.rst:22
# bc26a38aa8474daf970e912375e1b023
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# 94540a0829bf4c9bacf315d6b5d71e3f
msgid "|chef| does as much work as possible on the node and as little as possible on the server. A |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef client| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:26
# d5d3af9e5f1745998e6e143501b0dc0e
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# 6deb8a8d1ad84a65bce7e8951abb503f
msgid "When the |chef client| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. For each node a list of recipes is applied. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. The |chef client| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install |apache| before I can start my |django| application!\" It also means that given the same set of cookbooks, the |chef client| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:30
# efc9baa1a5e64fe8b1d288274a7a7f94
msgid "Why was |chef| created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# 4547a5d1dd9845fc91ce2df0e7092e10
msgid "|company_name| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. |company_name| then changed its name to Opscode, which was a cool name for a while. But then interactions started going like this:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# 4d97378cb2df4b7fbce2b4e92199e743
msgid "\"So where do you work?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# 4961504dd1b4437a888feff9096d73a8
msgid "\"Opscode.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:11
# 70590a56be07485ebfd4abef54b83e55
msgid "\"What does Opscode do?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:13
# 0b60e111b9234025bb35ce63d47bbd89
msgid "\"Devops software, infrastructure automation, you know...\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# 12e27112200f44e2bf0516aa241548d2
msgid "\"Oh, you mean like Chef?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# fb1a301ae1a84cdb8a87bc76c67a4070
msgid "\"Yes, just like Chef.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# 7e0668a1f5354df7bb8b0e5fb0f4627b
msgid "Sometimes we felt like we were explaining \"Why Opscode?\" more than we wanted to. And then Opscode itself turned out to be a weak brand, easily confused and often misspelled:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:23
# 7025ec60a2a0497d9279a44ce430f0e7
msgid "So now we call ourselves what we should have called ourselves all along: |chef|. Everything else is still the same. Our software removes people from the process of building automated infrastructure, as much and as often as possible. |chef| is a system integrations framework built on top of a configuration management system. It's powered by |ruby| and by a simple DSL. |chef| is open source, with an outstanding community, and a license that allows everyone to safely integrate |chef| into their organization, and then extend it to match each organization's unique complexity, requirements, and scale."
msgstr ""

#: ../source/chef_why.rst:34
# 71e332d8977d4a2ab28e463b9fe7ffa2
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:35
# 32318370cf104ec7a1deb502a77d5b5a
msgid "`Join the community <http://docs.chef.io/#the-community>`_, participate in the discussion going on right now on IRC, sign up for the mailing Lists, and read the instructions on how to contribute to an |company_name| open source project. For more information about participating in the community, see"
msgstr ""

#: ../source/chef_why.rst:38
# b6ea320a0695464c9d2d7d1ece174c45
msgid "Do I really need to know |ruby|?"
msgstr ""

#: ../source/chef_why.rst:39
# d2a3055481d64e9aa972b5a65ba14108
msgid "It helps, but its not required. Many recipes are just structure and patterns that use |ruby| as the definition language. Having actual |ruby| coding skills? Helpful, but not required, especially to get started. You can learn :doc:`Just Enough Ruby for Chef </ruby>`."
msgstr ""

#: ../source/chef_why.rst:42
# b6863dfdc1cf46219e2ad35fc539acae
msgid "Can I trust |chef|?"
msgstr ""

#: ../source/chef_why.rst:43
# b1a3431dece44f9fb9e2d33175a88d25
msgid "Yes, absolutely. The |chef client| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code and visibility into how it all works."
msgstr ""

#: ../source/chef_why.rst:46
# ee2fffe59c954857bedf7d29a14b41d2
msgid "Who uses |chef|?"
msgstr ""

#: ../source/chef_why.rst:47
# f1447502b393493fb96bcae35564fb5c
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.chef.io/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:50
# d10085e847f04068a11f8e01c1bde5bd
msgid "Why the |apache| license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# 17832969756248f18bd4c54d8b4254bf
msgid "The short version of why |company_name| chose the |apache| license for |chef| is because we defined three broad requirements for a license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# fdc2868cf95e4715b5a012f6bb371e03
msgid "We are an open source company and we make money from our open source software so we wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# ef1d2de209f2472e94ca868bd7196e32
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# ce73de5d3f584d7bbb646a756bf1d3e2
msgid "We wanted to build an open and equal community of users and did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# c128b948ed124ac7b3d9fb42883b30ca
msgid "For more details, read `the blog post about why we love open source <http://www.chef.io/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:54
# b8bbafa219604f769bd29718163d36ef
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:55
# dfb51b5d8b46435c819e87b69ac7a566
msgid "There are other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:58
# 959044023c294cad85813bb7b4ee5a8a
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:59
# db4ca49c337a42c7be15e8b916899682
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does **not** contain any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:61
# d44d687fd44d4a0688a5a8dd34faa4d2
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:63
# b15ebf0ceb3c46929922bb9bc092531e
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:64
# 35306fcdcb984f6b82d4b6f14f72726f
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:65
# fd26d03688a94d15a7f54f4ad2948f22
msgid "The |chef client| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef client| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:66
# 717b1c9c73274c23be49dce15c6dd443
msgid "Resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:67
# c7cb25e2dc9f4a469d16fab8df6c45c9
msgid "Resources can appear more than once and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:70
# ddf98c4cde32415fb952a200af1c72cb
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:71
# 53e67319bbdc44949914fb034cae6313
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

