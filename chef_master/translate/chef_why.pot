# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-05-03 15:53\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:34
# 71fae6088eed407199dfb4dc3de4e806
msgid "Why Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 422edecaedeb47a094bb3d5f316a9985
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That |chef| community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:39
# b8f5140e5f50440c8631c4836e19be0a
msgid "What are the core principles of Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# c11063f4d5b24716b1ef09c753db682c
msgid "The key underlying principle of |chef| is that you (the user) knows best about what your environment is, what it should do, and how it should be maintained. |chef| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:44
# 20a02dfbd037483392cb663fdeaf0caa
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# 32ed49fef7254316a5c9a0dafcc2a6ef
msgid "A recipe can run multiple times on the same system and the results will always be identical. In |chef|, a resource is defined in a recipe, which then defines the actions to be performed on the system. |chef| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has change, then |chef| will not do anything."
msgstr ""

#: ../source/chef_why.rst:48
# 516250ce53734447b882530352fbc0f3
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# 44a7b94151bd419d867322e7f0932165
msgid "|chef| does as much work as possible on the node; a |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute of data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:52
# 2265a722cc324ecc8302538f26af21d4
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# 930a459096094f90963bc500d95a29b8
msgid "When |chef| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. With |chef|, for each node a list of recipes is applied, which in turn specifies resources. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. |chef| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install Apache before I can start my Django application!\" It also means that given the same set of cookbooks, |chef| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:56
# 47abd9ee403641e8a058190655de7e32
msgid "Why was Chef created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# c71b3a77887249d9bcbd96bb4c80251f
msgid "|opscode| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. Everything from installing operating systems to full application development. Over the course of building a dozen or so different startups on the same basic infrastructure timeline (over a one year period), we realized that getting to a place where everyone could have a fully automated infrastructure, regardless of the expertise of their system administrators, was possible. Only a few things stood in the way:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# 46259c83ddcf4cef8d03040bb4d16c2a
msgid "A fully automated infrastructure is a fully integrated infrastructure. The different components need to be able to communicate with each other. (Your application informs your infrastructure, just like your infrastructure informs your application.)"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:8
# a89629a817ae45dab0679383e2d51743
msgid "Configuration management is the fundamental bedrock of infrastructure automation. For the infrastructure to be fully automated, it must expose configuration management as a service."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# dbe6ee53f8ae416dad2d2c8846780104
msgid "Share the code that builds the infrastructure is difficult; the available tools required a level of specificity that made sharing difficult."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:10
# a852b520e1374331b2a0637ad51fb6ce
msgid "No other open source tools met the requirements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:12
# 3f99f46d1ad442ccabed9f640af9a5cb
msgid "We solve these problems by:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:14
# b19cc5b654ce46aca54b040835301a3e
msgid "Building a systems integration framework on top of a configuration management system, powered by |ruby| and a simple DSL. This approach makes it easy for beginners."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# 27f1f8047bf740cba0e36896f69f0614
msgid "Making it possible to easily extend the capabilities of |chef| and by allowing |chef| to take instruction from ad-hoc sources."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:16
# 37ce19f70369401681908df468e8a0c7
msgid "Every decision about |chef| was made with an eye to keeping as much as possible inside of cookbooks, which are sharable chunks of automation that are easily reused and extended."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# 2893a37137c54d199fecd263a69eaee2
msgid "Sharing an open source version of |chef| with everyone, creating an outstanding community, with a license that allows everyone to safely integrate |chef| into their environment. |chef| (and |ohai|) are licensed under the Apache License Version 2.0, a liberal, non-copyleft free software license. We maintain Contributor License Agreements, which allows anyone who uses |chef| (or |ohai|) to know they are free from any copyright or patent entanglements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# d216c461fb694366872c268a6d8ebffa
msgid "The goal is to remove people from the process of building automated infrastructure, as much and as often as possible. |chef| is the first part of a framework that will allow all of us to do that."
msgstr ""

#: ../source/chef_why.rst:60
# b188c8f346c64e6d970cfac26442ab6e
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:61
# 4f393dc606f04b178e80ba68b45120b2
msgid "Join the |chef| community, participate in the discussion going on right now on IRC, sign up for the |chef| mailing Lists, and read the instructions on how to contribute to an |opscode| open source project."
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:4
# 8f9e04c39a90434f8a62bbae222f30d7
msgid "Here are some contributions from the |chef| community:"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:6
# d4ffd0cccbff42239765f4cc173dad6b
msgid "**Workflow:**  `Berkshelf <http://berkshelf.com/>`_ | `Librarian <https://github.com/applicationsonline/librarian>`_ | `Spiceweasel <https://github.com/mattray/spiceweasel>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:8
# 6a9e9e9d3ee542c186606bac4851ead0
msgid "**Development tools:**  `test-kitchen <https://github.com/opscode/test-kitchen>`_ | `Food Critic <http://acrmp.github.com/foodcritic/>`_ | `cucumber-chef <http://www.cucumber-chef.org/>`_ | `chef-workflow <https://github.com/chef-workflow>`_ | `chefspec <https://github.com/acrmp/chefspec>`_ | `yard-chef <https://rubygems.org/gems/yard-chef/>`_ | `Cookbooks <http://community.opscode.com/cookbooks>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:10
# 4a6fb6e5644a47ac923b4ca0a3f34696
msgid "**Discussion:** :doc:`Guidelines </community_guidelines>` | :doc:`lists.opscode.com </community_lists>` | `Food Fight Show <http://foodfightshow.org/>`_ --- **Chat channels:** `chef <http://community.opscode.com/chat/chef>`_ | `chef-hacking <http://community.opscode.com/chat/chef-hacking>`_ | `openstack-chef <http://community.opscode.com/chat/openstack-chef>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:12
# dece59132afd4a6f9d6a0464d6014007
msgid "**Plugins:** :doc:`Chef </community_plugin_chef>` | :doc:`Knife </community_plugin_knife>` | :doc:`Ohai </community_plugin_ohai>` | :doc:`Report handlers </community_plugin_report_handler>` | `Ridley <https://github.com/reset/ridley>`_"
msgstr ""

#: ../../includes_community/includes_community_contributions.rst:14
# c97ce2e235324186993b65590ad9e7a2
msgid "**Documentation** `Contribute to this documentation <https://github.com/opscode/chef-docs>`_ | `Style Guide <http://docs.opscode.com/style_guide.html>`_"
msgstr ""

#: ../source/chef_why.rst:66
# 4798c9a275694b57b69de8bef68664d8
msgid "Do I really need to know Ruby?"
msgstr ""

#: ../source/chef_why.rst:67
# 83d7b0dbe98f454fa7c8cdf16636c96f
msgid "It helps, but its not required. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:70
# 48d8ec2367f94040bf6872a3718d6805
msgid "Can I trust |chef|?"
msgstr ""

#: ../source/chef_why.rst:71
# 42010e4f9f54490d8f6a4f0601b8717d
msgid "Yes, absolutely. |chef| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code."
msgstr ""

#: ../source/chef_why.rst:75
# be6c2a3a251b491fadf501f8b1b999a6
msgid "Who uses Chef?"
msgstr ""

#: ../source/chef_why.rst:76
# b09a4cc045174184941c6552ece402d7
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:79
# 5c373c208cb9489a929f6391626eba52
msgid "Why the Apache license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# 8157b28dea984662ab51a900bce880e4
msgid "The short version is that we had three broad requirements for the license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# 6bc43785171c4933949649e71f5a7233
msgid "We are an open source company. We make money from our open source software. We wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# de6347a484e14b32a7353b164d991f45
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# e263f1f205db400f81c1bb478e1350d7
msgid "We wanted to build an open and equal community of users. We did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# 5f38fa9a0be64a7f92eef2cfe04ee91b
msgid "For more detail, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:84
# 35c1252a817446a4b2b06520a00db6d1
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:85
# e25ce8711bd441dba2d182d55622c670
msgid "There are some other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:88
# 0b595a77fefe41469369e046815ca3b7
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:89
# f15e91f369344a4ab9478bc21d72e8a1
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does not share any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:91
# 3da72d30e9b24b198cec6b09fcdb5fe5
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:93
# 880783006a9e4b2288ed45d0c54b7ba7
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:94
# bf37762ed09d4bfebbad481232c85f6e
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:95
# 8cae5d0be2ef41d1b0aaa07f47dc0b37
msgid "|chef| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:96
# ff94d546e584462aa484d40da49e2064
msgid "|chef| resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:97
# 040da38c9ab44330af36d03432149918
msgid "Resources can appear more than once in |chef|, and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:100
# 2e786b4439f145b1bcd1c4bc3deb4023
msgid "As |chef| grows, the services we expose will likely be integrated with |puppet| as well. There is more than one way to do it."
msgstr ""

#: ../source/chef_why.rst:103
# a663507d589d4b289ae9f414c106c0e8
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:104
# fe1607d0f8f1430c87f45d1ac02248ad
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../source/chef_why.rst:131
# b11a0317541b4ee89dc1f21d854ffa70
msgid "xxxxx:"
msgstr ""

#: ../source/chef_why.rst:137
#: ../source/chef_why.rst:139
#: ../source/chef_why.rst:140
# e25af2f6a3304e8b83f4dd856a458a13
# a464aba76a214fa9a18705915b781c11
# dfcd56037cb14d3ebde7c573437a3bd8
msgid "xxxxx"
msgstr ""

#: ../source/chef_why.rst:138
# c4a2c2ed590d4db8ad6a42d8af36d81d
msgid "Description"
msgstr ""

#: ../source/chef_why.rst:145
# e40cefa471bf45608e4f23c337f29c3b
msgid "Conclusion"
msgstr ""

#: ../source/chef_why.rst:149
# a274b4097238422f8457b1d30dcd461a
msgid "For more information ..."
msgstr ""

#: ../source/chef_why.rst:150
# cca6bc08dd3448eeb3103a0d7b67e593
msgid "For history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../source/chef_why.rst:152
# 955ff4160e3a4268abbb63169d201601
msgid "Part one: |http opscode youtube short part one|"
msgstr ""

#: ../source/chef_why.rst:153
# b20f6107649a4ccab27fe7f8644a021d
msgid "Part two: |http opscode youtube short part two|"
msgstr ""

#: ../source/chef_why.rst:155
# 88c3fad4fed941daa64c4fa1cb12afe9
msgid "For more information about |opscode|, cookbooks for |chef|, and the |chef| community:"
msgstr ""

#: ../source/chef_why.rst:157
# 21196828072b421ebea1eda52f871fd1
msgid "|http opscode|"
msgstr ""

#: ../source/chef_why.rst:158
# 9bf3064a37374435ae7df9e8a5db5591
msgid "|http community|"
msgstr ""

#: ../source/chef_why.rst:159
# 448de0dfb03046fe8790ab13f91ed1f1
msgid "|http community cookbooks|"
msgstr ""

