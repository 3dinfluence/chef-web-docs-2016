# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-20 14:08\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:8
# af9b8da149ec4d84966953d72faba730
msgid "Why Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 6eb3965243fd43cc96ad49ea883f9375
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:13
# d9c37fb6293441b68ba109952b80868c
msgid "What are the core principles?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# f0215aac952b4c16894131d8f34da9de
msgid "The key underlying principle of |chef| is that you (the user) knows best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:18
# b1c759f6e5c94352af938126f83290f5
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# 8ffc914154314ad2baa497f4833590ba
msgid "A recipe can run multiple times on the same system and the results will always be identical. A resource is defined in a recipe, which then defines the actions to be performed on the system. The |chef client| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has change, then the |chef client| will not do anything."
msgstr ""

#: ../source/chef_why.rst:22
# a07b4591919e440c8f87718ffc15068b
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# 2b270daebbb946dca4e8f8fd68c5b3a7
msgid "|chef| does as much work as possible on the node and as little as possible on the server. A |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute of data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef client| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:26
# 3e4a44ef48b44453aa4423a27eab8193
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# d3516ec5402a40a195bdfe39a0844089
msgid "When the |chef client| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. For each node a list of recipes is applied. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. The |chef client| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install |apache| before I can start my |django| application!\" It also means that given the same set of cookbooks, the |chef client| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:30
# 720ea7240f4f40c78b287fef764026a5
msgid "Why was Chef created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# 96faca628a864d49948a0e4ce8ca21ba
msgid "|company_name| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. |company_name| then changed its name to Opscode, which was a cool name for a while. But then interactions started going like this:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# 0dd14ecce6af43c289d47ef34ebde809
msgid "\"So where do you work?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# 24fafd530f4e4fb4853acc3adf49905c
msgid "\"Opscode.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:11
# df572d0e5e4e49f6a98959c7d04248c3
msgid "\"What does Opscode do?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:13
# 83a75eb226e046769dcc25c3a8f49a8c
msgid "\"Devops software, infrastructure automation, you know...\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# b405f933bdfc42159dc45543c30740f7
msgid "\"Oh, you mean like Chef?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# 4e7d88a5bd694128a5b5cbef0fde49aa
msgid "\"Yes, just like Chef.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# 2a2d295b8e7a4ae999a1334f91e195bd
msgid "Sometimes we felt like we were explaining \"Why Opscode?\" more than we wanted to. And then Opscode itself turned out to be a weak brand, easily confused and often misspelled:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:23
# 6caadd5ad943440cad3a636b68881bed
msgid "So now we call ourselves what we should have called ourselves all along: |chef|. Everything else is still the same. Our software removes people from the process of building automated infrastructure, as much and as often as possible. |chef| is a system integrations framework built on top of a configuration management system. It's powered by |ruby| and by a simple DSL. |chef| is open source, with an outstanding community, and a license that allows everyone to safely integrate |chef| into their organization, and then extend it to match each organization's unique complexity, requirements, and scale."
msgstr ""

#: ../source/chef_why.rst:34
# 0090037708864ac7a53a6192b9c90c12
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:35
# bc2208ce14464ec3adcff8618f71f30e
msgid "`Join the community <http://docs.opscode.com/#the-community>`_, participate in the discussion going on right now on IRC, sign up for the mailing Lists, and read the instructions on how to contribute to an |company_name| open source project. For more information about participating in the community, see"
msgstr ""

#: ../source/chef_why.rst:38
# 4a5cb65ec5af46ab9573d7aa0c4fbd3d
msgid "Do I really need to know Ruby?"
msgstr ""

#: ../source/chef_why.rst:39
# d82f07430c9d413bbb981272485bd4f0
msgid "It helps, but its not required. Many recipes are just structure and patterns that use |ruby| as the definition language. Having actual |ruby| coding skills? Helpful, but not required, especially to get started. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:42
# 8a09cb1969ea4d4faa5a3bd0bbcca205
msgid "Can I trust Chef?"
msgstr ""

#: ../source/chef_why.rst:43
# c097467c5cef4e7e833cd4d5bfa157af
msgid "Yes, absolutely. The |chef client| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code and visibility into how it all works."
msgstr ""

#: ../source/chef_why.rst:47
# 61f65593ae2e4120bbe56fc0712afc9c
msgid "Who uses Chef?"
msgstr ""

#: ../source/chef_why.rst:48
# c29bdf1a6d1c4956b465bb393f778390
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:51
# 6c195bd9ac5241a88037c97351a90c0f
msgid "Why the Apache license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# 8ad5a447629c4627814f0ba1a47fb7dd
msgid "The short version of why |company_name| chose the |apache| license for |chef| is because we defined three broad requirements for a license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# 54e905bc978e4cecb8eb5679a9f5d552
msgid "We are an open source company and we make money from our open source software so we wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# 1902ef5514ea4059b75d1096d3f24f64
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# 4267e76e4a8a4f8999eb5af15e5fdf09
msgid "We wanted to build an open and equal community of users and did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# 1f9d3ba7bff64488814fe02d6f715761
msgid "For more detail, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:56
# f3eb6d598510439b95a174b72da043ae
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:57
# 19defe31f44a46f6b8772dda17175b19
msgid "There are other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:60
# f6048ea9d70d46028438805b4e50c9d6
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:61
# e57cee25e4a448af8c65d6dcf0bd2a46
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does not share any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:63
# 7db1145ebd794c48bf261ac9042b15fc
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:65
# 93af67d015914f2fb539f2762f713458
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:66
# 688ed68080ed4651aaff8a129a43fe7c
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:67
# 0f2aae7cc5e64c93ac88d36cb6510177
msgid "The |chef client| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef client| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:68
# 29fc88e2d8a04f4092e339a7e0b6dd6f
msgid "Resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:69
# 0ed583d0cbf943b38ecf1332853d2d94
msgid "Resources can appear more than once and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:72
# 8798e19a84cc4e278736355c1eb7622a
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:73
# f57e8db233244e43b2303ed7cd96c82f
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../source/chef_why.rst:76
# 663c698fdd904f0cb8de79e9f6563c71
msgid "For more information ..."
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:5
# 7aa4324a89fe4cb6acb84e99a865e447
msgid "For a history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:7
# 260621b2bc564656b5fd7afd0416d185
msgid "Part one: |url opscode_youtube_short_part_one|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:8
# 39a216572abe4e42a002a848ae8ce4cf
msgid "Part two: |url opscode_youtube_short_part_two|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:10
# 17f7c175f6b74cc1a4cf30592dbba157
msgid "For more information about |company_name|, cookbooks, and the community:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:12
# 8cc4226ccbe84ab48b3bce0219f81217
msgid "|url opscode|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:13
# ae41d7c98dac4992ba13af88165259d8
msgid "|url opscode_community|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:14
# 52e0631e24a547b0b26f9d6deb3de98d
msgid "|url opscode_cookbooks|"
msgstr ""

