# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-02-10 09:43-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:8
# a2e87734b6a846f9a8284c9958a16445
msgid "Why |chef|?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# a94b372bce92485198b44d3b0a5f0df7
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:13
# e0033ff02ae04164a39cb24fe4e130e3
msgid "What are the core principles?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# eb6d2de910ea417d88bedb1f6ba78c05
msgid "The key underlying principle of |chef| is that you (the user) know best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:18
# 555f164e051e449e929565ed7a7bce18
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# 28bff99d84604f91b5757fa2793847dc
msgid "A recipe can run multiple times on the same system and the results will always be identical. A resource is defined in a recipe, which then defines the actions to be performed on the system. The |chef client| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has changed, then the |chef client| will not do anything."
msgstr ""

#: ../source/chef_why.rst:22
# 9b0f040559be48689e019ba0ccfffc0d
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# d486dcfc6b464f64b4dd1d0c4a7e4f10
msgid "|chef| does as much work as possible on the node and as little as possible on the server. A |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef client| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:26
# c03cd704854f4444befc6ab2e4e098cd
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# f437fe1137134c92be9c3ff0b13049f2
msgid "When the |chef client| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. For each node a list of recipes is applied. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. The |chef client| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install |apache| before I can start my |django| application!\" It also means that given the same set of cookbooks, the |chef client| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:30
# 2e05dc603d4447e284373b8676f57535
msgid "Why was |chef| created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# 0ce7c2dc6917435c84d4fa2a6e131631
msgid "|company_name| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. |company_name| then changed its name to Opscode, which was a cool name for a while. But then interactions started going like this:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# 524c39492af04711ac51848fb9d052cd
msgid "\"So where do you work?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# fdfa752003c44e26bbc23f9fa65f9a23
msgid "\"Opscode.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:11
# 00f3981b9b5b493c97c637995caefe2a
msgid "\"What does Opscode do?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:13
# 1cb3249c46f44b238fd593f97a8e6177
msgid "\"Devops software, infrastructure automation, you know...\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# e2b036400b4e4089af8f3d78a26e521c
msgid "\"Oh, you mean like Chef?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# 46d1df724e3347a48e6e64effb5dd2af
msgid "\"Yes, just like Chef.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# 070fdb764ce146e19d22b2d664be3a2c
msgid "Sometimes we felt like we were explaining \"Why Opscode?\" more than we wanted to. And then Opscode itself turned out to be a weak brand, easily confused and often misspelled:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:23
# 214ecffc354c4094addce7df4b6ae81a
msgid "So now we call ourselves what we should have called ourselves all along: |chef|. Everything else is still the same. Our software removes people from the process of building automated infrastructure, as much and as often as possible. |chef| is a system integrations framework built on top of a configuration management system. It's powered by |ruby| and by a simple DSL. |chef| is open source, with an outstanding community, and a license that allows everyone to safely integrate |chef| into their organization, and then extend it to match each organization's unique complexity, requirements, and scale."
msgstr ""

#: ../source/chef_why.rst:34
# 713a7f184a6446ae81615d841cb24da5
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:35
# e48069a3d89740d0b22f87bfe062d12e
msgid "`Join the community <http://docs.chef.io/#the-community>`_, participate in the discussion going on right now on IRC, sign up for the mailing Lists, and read the instructions on how to contribute to an |company_name| open source project. For more information about participating in the community, see"
msgstr ""

#: ../source/chef_why.rst:38
# 7f6876c1ff184aa18aacae22ec289a2f
msgid "Do I really need to know |ruby|?"
msgstr ""

#: ../source/chef_why.rst:39
# 26992f5fa56e477a93c3fefe68500c62
msgid "It helps, but its not required. Many recipes are just structure and patterns that use |ruby| as the definition language. Having actual |ruby| coding skills? Helpful, but not required, especially to get started. You can learn :doc:`Just Enough Ruby for Chef </ruby>`."
msgstr ""

#: ../source/chef_why.rst:42
# 5e0c1d092ca745afae5153944c0aae5d
msgid "Can I trust |chef|?"
msgstr ""

#: ../source/chef_why.rst:43
# 8570e8111c7d4ef09dcce1925b46c208
msgid "Yes, absolutely. The |chef client| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code and visibility into how it all works."
msgstr ""

#: ../source/chef_why.rst:46
# 1e106778fca6466c83aea4e864df8ad9
msgid "Who uses |chef|?"
msgstr ""

#: ../source/chef_why.rst:47
# dc62f10183ec40bd9bc67f2a70db7e4e
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.chef.io/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:50
# b8f794a7960740c785a6caab1638afe1
msgid "Why the |apache| license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# 846cc0015e96413e93c59bafb097183b
msgid "The short version of why |company_name| chose the |apache| license for |chef| is because we defined three broad requirements for a license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# 6f2f1a092b984e268ca6df6f083b7d90
msgid "We are an open source company and we make money from our open source software so we wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# 8f9a343de9274f629e3f4c14afc2e6e8
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# 3ec23dafec86454db8a52cce7260ee43
msgid "We wanted to build an open and equal community of users and did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# 0de6258fedbb499083a0ef5247110ca0
msgid "For more details, read `the blog post about why we love open source <http://www.chef.io/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:54
# 7b50967429b24f89be73d5b86ecd08b0
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:55
# 827016216ec8476b96b7c6be2fb78321
msgid "There are other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:58
# 97477c13b27a4ae192ec9b5040e3687b
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:59
# ddfabae846864c8c8c3ce96dfd2758bc
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does **not** contain any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:61
# bde27c5ab80049b697777992105cb415
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:63
# fd13b97111854a3eb0b65215fa5e9ef2
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:64
# 3091219477914b8ea0612d7402df1836
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:65
# 7fd597fc5a0d497184b7250d66f022fd
msgid "The |chef client| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef client| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:66
# 5814e26ce6074f33808b1fb1de4e5476
msgid "Resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:67
# 13c3010ae2b04982bb81de88db580ab9
msgid "Resources can appear more than once and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:70
# 0e32ab6ab5a648399ebcc6941d59c880
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:71
# 9369cd38632b421a925c5d85333ecc7e
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

