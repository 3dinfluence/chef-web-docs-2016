# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-11 18:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:33
# 791d6f7a54f1467999fcfcfd8f5d3da9
msgid "Why Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# ec38570a449644f987991d987a833a92
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:38
# 550af02730224a05a8e1e733bf963b2a
msgid "What are the core principles?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# fddfc6138e0344df8ca7f3cf54849674
msgid "The key underlying principle of |chef| is that you (the user) knows best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:43
# b3ed157a57d741b98781affa66dcc9cd
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# d252adabac23470dba65cf25a23ced60
msgid "A recipe can run multiple times on the same system and the results will always be identical. A resource is defined in a recipe, which then defines the actions to be performed on the system. The |chef client| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has change, then the |chef client| will not do anything."
msgstr ""

#: ../source/chef_why.rst:47
# d20e240221b54dcaaee56c14dba3c24f
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# 2338e53ac02e4b69adebf48a5eb3f60d
msgid "|chef| does as much work as possible on the node and as little as possible on the server. A |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute of data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef client| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:51
# 17dd12137cd34cd9a0ea2ac56ee2597b
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# 0b17136ca62d4cc7bd0800d57dc0a62e
msgid "When the |chef client| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. For each node a list of recipes is applied. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. The |chef client| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install |apache| before I can start my |django| application!\" It also means that given the same set of cookbooks, the |chef client| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:55
# 6ecb454f260d4789950d22f849838f39
msgid "Why was Chef created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# 7e59ad49a3514afb8c3923131f013e69
msgid "|opscode| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. Everything from installing operating systems to full application development. Over the course of building a dozen or so different startups on the same basic infrastructure timeline (over a one year period), we realized that getting to a place where everyone could have a fully automated infrastructure, regardless of the expertise of their system administrators, was possible. Only a few things stood in the way:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# ef349f47966d4e27979c553365b0d5eb
msgid "A fully automated infrastructure is a fully integrated infrastructure. The different components need to be able to communicate with each other. (Your application informs your infrastructure, just like your infrastructure informs your application.)"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:8
# ccdef35b01bf482a8c1e771dcb745d85
msgid "Configuration management is the fundamental bedrock of infrastructure automation. For the infrastructure to be fully automated, it must expose configuration management as a service."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# a80b82e4629f458cb7fed7fecfeda061
msgid "Share the code that builds the infrastructure is difficult; the available tools required a level of specificity that made sharing difficult."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:10
# 8a20160a5e4b4d0fa8740d1dd2839c3f
msgid "No other open source tools met the requirements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:12
# d172a821054a43539958e41722ea4b6b
msgid "We solve these problems by:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:14
# 003b231251cc402a813d6415675b58b6
msgid "Building a systems integration framework on top of a configuration management system, powered by |ruby| and a simple DSL. This approach makes it easy for beginners."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# 41c0970a048c425281f84cb2ee066de4
msgid "Making it possible to easily extend the capabilities of |chef| by allowing the |chef client| to take instruction from ad-hoc sources."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:16
# e675073b20584431810ee6180d19a945
msgid "Every decision about |chef| was made with an eye to keeping as much as possible inside of cookbooks, which are sharable chunks of automation that are easily reused and extended."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# 646c709fa6cc454b9652becacc90a156
msgid "Sharing an open source version with everyone, creating an outstanding community, with a license that allows everyone to safely integrate |chef| into their environment. |chef| (and |ohai|) are licensed under the Apache License Version 2.0, a liberal, non-copyleft free software license. We maintain Contributor License Agreements, which allows anyone who uses |chef| (or |ohai|) to know they are free from any copyright or patent entanglements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# ce2f51f328da497ab7620ad4e4a1c47e
msgid "The goal is to remove people from the process of building automated infrastructure, as much and as often as possible. |chef| is the first part of a framework that will allow all of us to do that."
msgstr ""

#: ../source/chef_why.rst:59
# 9ceecad70f2f4a478df4c09131f7e60b
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:60
# a8ff2dcc50ef4f89b44c8c04a79f9b33
msgid "`Join the community <http://docs.opscode.com/#the-community>`_, participate in the discussion going on right now on IRC, sign up for the mailing Lists, and read the instructions on how to contribute to an |opscode| open source project. For more information about participating in the community, see"
msgstr ""

#: ../source/chef_why.rst:63
# 94818d602fb348299fceacf1cc27480e
msgid "Do I really need to know Ruby?"
msgstr ""

#: ../source/chef_why.rst:64
# 2f2da4ebd24a4feb9e8feaf74360ce60
msgid "It helps, but its not required. Many recipes are just structure and patterns that use |ruby| as the definition language. Having actual |ruby| coding skills? Helpful, but not required, especially to get started. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:67
# 01aa4995cae3465585c6ebd064549c5a
msgid "Can I trust Chef?"
msgstr ""

#: ../source/chef_why.rst:68
# 3935c4ae96474a6d94c46f1b780e4b1d
msgid "Yes, absolutely. The |chef client| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code and visibility into how it all works."
msgstr ""

#: ../source/chef_why.rst:72
# 58d08bcc2f07410a8e00aa0153ae0ce9
msgid "Who uses Chef?"
msgstr ""

#: ../source/chef_why.rst:73
# 1b1e1855c8d64f5784a2411e5b6e7415
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:76
# 3f80776faf1644fdb672221171bb6ed5
msgid "Why the Apache license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# 7eae1b2828504d6d954b04b134b482ef
msgid "The short version of why |opscode| chose the |apache| license for |chef| is because we defined three broad requirements for a license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# a2be4ec483784cb8ba00348ee4f296f7
msgid "We are an open source company and we make money from our open source software so we wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# 65e3e8d7475d4e7f9ff892ad1efb033f
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# 0204ec567a0445608dce66176d7a8cd9
msgid "We wanted to build an open and equal community of users and did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# 1d21475fb2d64bbdb059408ad19b85ef
msgid "For more detail, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:81
# d86079bdb2434e7ba499d7aab283d7fa
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:82
# 6d24887907ea426c9249c878275399df
msgid "There are other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:85
# e628eaf612dc4ab582585a6fddf37305
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:86
# 06deafae64d9421e9788ab36528267c0
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does not share any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:88
# d681907e752e46b5b4131a40a289b43d
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:90
# fcb7ef530a6240c8b973dd8952bdc1d9
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:91
# bc6c9bc7fa0f4821b40f0ef7367fef76
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:92
# 0250d87753fc459b9ffc198cc028244c
msgid "The |chef client| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef client| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:93
# 2aa38389aa7e46938b9dde7b85e57560
msgid "Resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:94
# 09df9ee9debf4f4589086fa266bb54f2
msgid "Resources can appear more than once and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:97
# d6e9b808403c4d5baa72b6835c096786
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:98
# 23591578688842baa4c8ec3eb42a2c21
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../source/chef_why.rst:101
# 8af09a0aaa03468c98f88b62ef7c8039
msgid "For more information ..."
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:5
# 824e5c6b4cb34915b2f4f394930406cb
msgid "For a history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:7
# 1dc003e06cbd48c789be408d8a1c9b73
msgid "Part one: |url opscode_youtube_short_part_one|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:8
# f6a95af6af754723a3e01208c8f405a4
msgid "Part two: |url opscode_youtube_short_part_two|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:10
# 1a7afd51fb544b2eb43cb64e6964ddb6
msgid "For more information about |opscode|, cookbooks, and the community:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:12
# f5e865849d1a4cf48962e646ad4a0a1c
msgid "|url opscode|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:13
# 85ff9bb711ec4b63bb3e4d8a6030251f
msgid "|url opscode_community|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:14
# 2e197917c4fa4d58b4257cf78b69714b
msgid "|url opscode_cookbooks|"
msgstr ""

