# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-31 17:02\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:33
# a170d37ab5264b079c51642a4a076a89
msgid "Why Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 8ced548cc11742f090e3cec772b24c3c
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:38
# 574817aae0ee4d9aac1b1203881b8542
msgid "What are the core principles?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 0d9aa0053cfd4f6087e31a37dacf1c7a
msgid "The key underlying principle of |chef| is that you (the user) knows best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:43
# 892969816df74b45b2f6567b1ed8b748
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# f6989ab7968b49c993c00bb2a7d07f90
msgid "A recipe can run multiple times on the same system and the results will always be identical. A resource is defined in a recipe, which then defines the actions to be performed on the system. The |chef client| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has change, then the |chef client| will not do anything."
msgstr ""

#: ../source/chef_why.rst:47
# 96e71ed62a6e4257975fe7cdbdc47c57
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# 62450067f7ec4feab7bf0b07bb514668
msgid "|chef| does as much work as possible on the node and as little as possible on the server. A |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute of data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef client| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:51
# d847c7d6e77c4e4392bb482b33093ca9
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# 3273cecabe4a4f97b54b72064c63f9c6
msgid "When the |chef client| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. For each node a list of recipes is applied. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. The |chef client| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install |apache| before I can start my |django| application!\" It also means that given the same set of cookbooks, the |chef client| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:55
# 1d99792247a241708bc11aa6d169404a
msgid "Why was Chef created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# 4a1dfe6314fc4439acd8eebad2451ce9
msgid "|opscode| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. Everything from installing operating systems to full application development. Over the course of building a dozen or so different startups on the same basic infrastructure timeline (over a one year period), we realized that getting to a place where everyone could have a fully automated infrastructure, regardless of the expertise of their system administrators, was possible. Only a few things stood in the way:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# 3f0967ceb7334f3fbad976a35145f913
msgid "A fully automated infrastructure is a fully integrated infrastructure. The different components need to be able to communicate with each other. (Your application informs your infrastructure, just like your infrastructure informs your application.)"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:8
# 44274b50b23a482c92a554a6641b60ce
msgid "Configuration management is the fundamental bedrock of infrastructure automation. For the infrastructure to be fully automated, it must expose configuration management as a service."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# 4b4f44e167f44a5695f0640f06e80872
msgid "Share the code that builds the infrastructure is difficult; the available tools required a level of specificity that made sharing difficult."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:10
# 3c530ecdc84f4081ab31eb728e5f0b18
msgid "No other open source tools met the requirements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:12
# e691e7f80dd04642b680deb769d11334
msgid "We solve these problems by:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:14
# 16641e3c48c4427193c57e63b9e82222
msgid "Building a systems integration framework on top of a configuration management system, powered by |ruby| and a simple DSL. This approach makes it easy for beginners."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# b337501dffd544029bd07d75aef7c9e0
msgid "Making it possible to easily extend the capabilities of |chef| by allowing the |chef client| to take instruction from ad-hoc sources."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:16
# df9a7b928d46489dbca9e3d1d2179b39
msgid "Every decision about |chef| was made with an eye to keeping as much as possible inside of cookbooks, which are sharable chunks of automation that are easily reused and extended."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# b15739201a204c6ab91d6041567b1244
msgid "Sharing an open source version with everyone, creating an outstanding community, with a license that allows everyone to safely integrate |chef| into their environment. |chef| (and |ohai|) are licensed under the Apache License Version 2.0, a liberal, non-copyleft free software license. We maintain Contributor License Agreements, which allows anyone who uses |chef| (or |ohai|) to know they are free from any copyright or patent entanglements."
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# 43cb6ab2af8c487bb5e27a273a0def38
msgid "The goal is to remove people from the process of building automated infrastructure, as much and as often as possible. |chef| is the first part of a framework that will allow all of us to do that."
msgstr ""

#: ../source/chef_why.rst:59
# 4c24b14354f6449dab9faeb6b5cea667
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:60
# 383adffb41cd4862a4da928a87a7b6e8
msgid "`Join the community <http://docs.opscode.com/#the-community>`_, participate in the discussion going on right now on IRC, sign up for the mailing Lists, and read the instructions on how to contribute to an |opscode| open source project. For more information about participating in the community, see"
msgstr ""

#: ../source/chef_why.rst:63
# d32c4dbdc53c4424851cac81a092acdf
msgid "Do I really need to know Ruby?"
msgstr ""

#: ../source/chef_why.rst:64
# db2abc50caac4cddadd943b901f3dc8d
msgid "It helps, but its not required. Many recipes are just structure and patterns that use |ruby| as the definition language. Having actual |ruby| coding skills? Helpful, but not required, especially to get started. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:67
# 91a0a96b361a4aed9e8bdccb13be66cc
msgid "Can I trust Chef?"
msgstr ""

#: ../source/chef_why.rst:68
# 5c0eca68be6243b3ad1c8ba19386bff9
msgid "Yes, absolutely. The |chef client| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code and visibility into how it all works."
msgstr ""

#: ../source/chef_why.rst:72
# 592a4b1e48684ee28a761fd4cd350bb9
msgid "Who uses Chef?"
msgstr ""

#: ../source/chef_why.rst:73
# f2dd60d6782249aa95de53a90092e3da
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:76
# d6b9d1748bf14b58b359cf02631bd06f
msgid "Why the Apache license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# 2dd0e76e70954ad9ac026caecde9e403
msgid "The short version of why |opscode| chose the |apache| license for |chef| is because we defined three broad requirements for a license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# eb9154e1c17a435aabbc480f34cb86bd
msgid "We are an open source company and we make money from our open source software so we wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# 72b076bbadc74762a3de5681343d2815
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# e321298945f745c6a9f74b6773b486e6
msgid "We wanted to build an open and equal community of users and did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# ab75347e40b640b493b06570e9844076
msgid "For more detail, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:81
# 03b5124ec5984034b6c2bc032689c5a0
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:82
# e4d6fc3c47af48908a5cf1643ee01987
msgid "There are other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:85
# 57ccab0b042d40cc89074625a692965d
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:86
# 82365fcb75304e1e94175f3aa00a9330
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does not share any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:88
# 988da88fa6a04d87890e5027962a67c1
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:90
# b37c174dbda34de8bba9b58b0760fba6
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:91
# db2e005f29fb4637bc01cfbb64a05c41
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:92
# dbb2f9638959403690ef616aebd74547
msgid "The |chef client| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef client| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:93
# b08f99d839df47debb55b27720e14309
msgid "Resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:94
# 15a7a8c77a44401c8c5a7e67aa0cf912
msgid "Resources can appear more than once and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:97
# 4e2ca0cc5a514381b147d1164c89adac
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:98
# b1defb3c981744fa95777edaea59de01
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../source/chef_why.rst:101
# 98ef756fac37460d829ed8509c381fe1
msgid "For more information ..."
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:5
# 90dea430830e4c3fb2f64ccca52dde3e
msgid "For a history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:7
# 135085dce6f94a7798ff1b0651bae70e
msgid "Part one: |url opscode_youtube_short_part_one|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:8
# 9a764d34c03343d49cc9ff0e43eaf664
msgid "Part two: |url opscode_youtube_short_part_two|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:10
# 5e0b0cec23554271b37ba5eb5d10b490
msgid "For more information about |opscode|, cookbooks, and the community:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:12
# 6bd3e5ffcdc747caa6ece673d511b7cc
msgid "|url opscode|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:13
# 96a1204d61694eb8bb9018d4217a1203
msgid "|url opscode_community|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:14
# 22fb468904884632a38d0b8db56eed97
msgid "|url opscode_cookbooks|"
msgstr ""

