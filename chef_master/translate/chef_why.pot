# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-31 13:34\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:8
# 99db52a7fadf4cb3b0367f5af7229b96
msgid "Why Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 29b84386b78e4efa95f53822d1b25f09
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:13
# 3f639426b0b944a0a2a5512cffe0f885
msgid "What are the core principles?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# 140b15ca103244c6b7fb5e694651552c
msgid "The key underlying principle of |chef| is that you (the user) knows best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:18
# e64d1ed598a84f2d91b391dadac67477
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# 5450c77ff67c4cb49857d549fb54a5ee
msgid "A recipe can run multiple times on the same system and the results will always be identical. A resource is defined in a recipe, which then defines the actions to be performed on the system. The |chef client| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has change, then the |chef client| will not do anything."
msgstr ""

#: ../source/chef_why.rst:22
# fdcdbc8479094f2182ef2f917e2d1201
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# 8dd68a291d2e43de8d28c86266c275a8
msgid "|chef| does as much work as possible on the node and as little as possible on the server. A |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute of data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef client| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:26
# f674240280454fac8dd21da54840e1a1
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# 8a67b04f14644ed9a37693c1a1ff1851
msgid "When the |chef client| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. For each node a list of recipes is applied. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. The |chef client| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install |apache| before I can start my |django| application!\" It also means that given the same set of cookbooks, the |chef client| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:30
# 9197bf5ec2564a2d9d26e52d107627cb
msgid "Why was Chef created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# 62a33ac693214054a7058349b45c9d78
msgid "|company_name| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. |company_name| then changed its name to Opscode, which was a cool name for a while. But then interactions started going like this:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# e1b8e6cfecc145a5bb82bd868f789ace
msgid "\"So where do you work?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# 436ec7a75cbf416b96f2f2e8832399d3
msgid "\"Opscode.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:11
# 9f5c2a2b25e041e6b3aa733d6dc38e53
msgid "\"What does Opscode do?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:13
# 8d4b5864c0704886b8eab2901c0bb809
msgid "\"Devops software, infrastructure automation, you know...\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# 882f0213a84c4dbe8b83bde87c4ab676
msgid "\"Oh, you mean like Chef?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# f8e8e0ca374e41f797fef79fde109bad
msgid "\"Yes, just like Chef.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# 0b2c9f0f9d184d2f8a9163cc2ca9b63f
msgid "Sometimes we felt like we were explaining \"Why Opscode?\" more than we wanted to. And then Opscode itself turned out to be a weak brand, easily confused and often misspelled:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:23
# 49edda0a853f4a378920fa5fc3d8f007
msgid "So now we call ourselves what we should have called ourselves all along: |chef|. Everything else is still the same. Our software removes people from the process of building automated infrastructure, as much and as often as possible. |chef| is a system integrations framework built on top of a configuration management system. It's powered by |ruby| and by a simple DSL. |chef| is open source, with an outstanding community, and a license that allows everyone to safely integrate |chef| into their organization, and then extend it to match each organization's unique complexity, requirements, and scale."
msgstr ""

#: ../source/chef_why.rst:34
# 54aa509e73f844f7ba419d5192742001
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:35
# 71f6b32f63b04c559af392c45bca6aa7
msgid "`Join the community <http://docs.opscode.com/#the-community>`_, participate in the discussion going on right now on IRC, sign up for the mailing Lists, and read the instructions on how to contribute to an |company_name| open source project. For more information about participating in the community, see"
msgstr ""

#: ../source/chef_why.rst:38
# 6d349e6fdcfd448e9d92bc132c1999cf
msgid "Do I really need to know Ruby?"
msgstr ""

#: ../source/chef_why.rst:39
# 6c899cacb8c4492db04f81d3b17cfff0
msgid "It helps, but its not required. Many recipes are just structure and patterns that use |ruby| as the definition language. Having actual |ruby| coding skills? Helpful, but not required, especially to get started. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:42
# 3586ad7d4ca049b68b26b0278ca7c546
msgid "Can I trust Chef?"
msgstr ""

#: ../source/chef_why.rst:43
# 4145cbd385084a6cbb9cd16fb0d47657
msgid "Yes, absolutely. The |chef client| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code and visibility into how it all works."
msgstr ""

#: ../source/chef_why.rst:47
# d4403ff5ccfa48e2b18cb951de8ec395
msgid "Who uses Chef?"
msgstr ""

#: ../source/chef_why.rst:48
# 889dd89d085a47c3a103a3ab4cea56b2
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:51
# 1d9267926113499faffc30497acd42a5
msgid "Why the Apache license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# c3772f0518fe4544b4e6e0054a5df1fb
msgid "The short version of why |company_name| chose the |apache| license for |chef| is because we defined three broad requirements for a license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# 626bce36bf7f42a5a2f49e66f77e5892
msgid "We are an open source company and we make money from our open source software so we wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# d6e05c2b246c4a38a282cd386c179731
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# ab4e1277b7164922acf108b5e5ebecc5
msgid "We wanted to build an open and equal community of users and did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# 04e17d9701f648b1a7b1e873a45c38b4
msgid "For more detail, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:56
# d82924d1e6dc48e5becd547f54df7673
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:57
# 5d284d321e9746408335c39ab7d6e6d5
msgid "There are other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:60
# 63b6574c22e1402ebe536f6450a1f5aa
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:61
# e30d720f4cbe42f3a2e2f039c8d4542c
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does not share any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:63
# 4a18f374a4394186b1531049020076e9
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:65
# 440b800e77804c16b911fe32e33e70b4
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:66
# e2f4698d129b487998d38ac50213053a
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:67
# 2dfca669ab0c446792ede6f16ba0f0ff
msgid "The |chef client| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef client| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:68
# 03f61a2e0b3c4567b75d33523a67f89d
msgid "Resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:69
# 42a46ad0f24743ea8799c2aab439a369
msgid "Resources can appear more than once and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:72
# ffe34600c00b4557a73b8ff828db62ab
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:73
# 7f019c8f386843e5890f381e1d138f75
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../source/chef_why.rst:76
# 454b89e333ee4c7987701c7aa17ec2aa
msgid "For more information ..."
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:5
# 445fcec019d9438483f2def9e204db81
msgid "For a history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:7
# 3fc4dc137a7545b681cfe7d9531df009
msgid "Part one: |url opscode_youtube_short_part_one|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:8
# 9560f52f4ecb4576a41d3d8878deafda
msgid "Part two: |url opscode_youtube_short_part_two|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:10
# 8bc8aa674d9a4946b5f231f24a7d4b25
msgid "For more information about |company_name|, cookbooks, and the community:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:12
# 7d405a9c42164859b47a5b36d2a616fe
msgid "|url opscode|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:13
# 50090ad1a173478393463629ef9996aa
msgid "|url opscode_community|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:14
# a02bc74fc6c84fac8e68cf9851361529
msgid "|url opscode_cookbooks|"
msgstr ""

