# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-21 10:57\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_why.rst:8
# 5b1cc840e7a1424a93ba963a90001096
msgid "Why Chef?"
msgstr ""

#: ../../includes_chef/includes_chef_why_you_know_best.rst:5
# 1010323c70514d69ad6bc2ba8aafaee8
msgid "The idea that you know best about what should happen in your organization goes hand-in-hand with the notion that you still need help keeping it all running. It is rare that a single individual knows everything about a very complex problem, let alone knows all of the steps that may be required to solve them. The same is true with tools. |chef| provides help with infrastructure management. And |chef| can help solve very complicated problems. |chef| also has a large community of users who have a lot of experience solving a lot of very complex problems. That community can provide knowledge and support in areas that your organization may not have and (along with |chef|) can help your organization solve any complex problem."
msgstr ""

#: ../source/chef_why.rst:13
# d374761d5c79420cb33d42917e0f717d
msgid "What are the core principles?"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles.rst:5
# a24e25a8020b4688895f5f482d8421c3
msgid "The key underlying principle of |chef| is that you (the user) knows best about what your environment is, what it should do, and how it should be maintained. The |chef client| is designed to not make assumptions about any of those things. Only the individuals on the ground---that's you and your team---understand the technical problems and what is required to solve them. Only your team can understand the human problems (skill levels, audit trails, and other internal issues) that are unique to your organization and whether any single technical solution is viable."
msgstr ""

#: ../source/chef_why.rst:18
# 085b6254a70144119370841a3145237c
msgid "Idempotence"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_idempotence.rst:5
# ff7f7226c28049d0bc8b27e144f9f8b7
msgid "A recipe can run multiple times on the same system and the results will always be identical. A resource is defined in a recipe, which then defines the actions to be performed on the system. The |chef client| ensures that actions are not performed if the resources have not changed and that any action that is performed is done the same way each time. If a recipe is re-run and nothing has change, then the |chef client| will not do anything."
msgstr ""

#: ../source/chef_why.rst:22
# e982aeadcb19486d8334246cf772d931
msgid "Thick Clients, Thin Server"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_thin_client.rst:5
# d63a285d0822414ea1be8c237fe7ebd7
msgid "|chef| does as much work as possible on the node and as little as possible on the server. A |chef client| runs on each node and it only interacts with the |chef server| when it needs to. The |chef server| is designed to distribute of data to each node easily, including all cookbooks, recipes, templates, files, and so on. The |chef server| also retains a copy of the state of the node at the conclusion of every |chef client| run. This approach ensures that the actual work needed to configure each node in your infrastructure is distributed across the organization, rather than centralized on smaller set of configuration management servers."
msgstr ""

#: ../source/chef_why.rst:26
# 1e24146760cf40bda5d3b34e9c3153ec
msgid "Order Matters"
msgstr ""

#: ../../includes_chef/includes_chef_why_principles_order_matters.rst:5
# cbf0cba916cb49c2aaf2f7b802a488ad
msgid "When the |chef client| configures each node in the system, the order in which that configuration occurs is very important. For example, if |apache| is not installed, then it cannot be configured and the daemon cannot be started. Configuration management tools have struggled with this problem for a long time. For each node a list of recipes is applied. Within a recipe, resources are applied in the order in which they are listed. At any point in a recipe other recipes may be included, which assures that all resources are applied. The |chef client| will never apply the same recipe twice. Dependencies are only applied at the recipe level (and never the resource level). This means that dependencies can be tracked between high-level concepts like \"I need to install |apache| before I can start my |django| application!\" It also means that given the same set of cookbooks, the |chef client| will always execute resources in the same exact order."
msgstr ""

#: ../source/chef_why.rst:30
# f2f5905582f744babc0d0b1df7891355
msgid "Why was Chef created?"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:5
# 2b3978094f4f4f9e91920b1cdddf6bcb
msgid "|company_name| began as a consulting company named HJK Solutions, which built fully automated infrastructure for startups. |company_name| then changed its name to Opscode, which was a cool name for a while. But then interactions started going like this:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:7
# 59a5619c840446b08c970ca07bbfbace
msgid "\"So where do you work?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:9
# 69b5c30e36004cc9ab38004938c98a5a
msgid "\"Opscode.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:11
# 9bdef04437ef445689a90f66827eade3
msgid "\"What does Opscode do?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:13
# 4b1920bd9e2c47189f375bf8dac10da4
msgid "\"Devops software, infrastructure automation, you know...\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:15
# b436091828ae4250baee49c2b2f26db3
msgid "\"Oh, you mean like Chef?\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:17
# b3aeaa0e328347c7a2c89ba020ca9ba2
msgid "\"Yes, just like Chef.\""
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:19
# edcf54e882fe4a3e84e663d3455b1405
msgid "Sometimes we felt like we were explaining \"Why Opscode?\" more than we wanted to. And then Opscode itself turned out to be a weak brand, easily confused and often misspelled:"
msgstr ""

#: ../../includes_chef/includes_chef_why_origins.rst:23
# 2b2c68970006497eab8ea3e14db4fe02
msgid "So now we call ourselves what we should have called ourselves all along: |chef|. Everything else is still the same. Our software removes people from the process of building automated infrastructure, as much and as often as possible. |chef| is a system integrations framework built on top of a configuration management system. It's powered by |ruby| and by a simple DSL. |chef| is open source, with an outstanding community, and a license that allows everyone to safely integrate |chef| into their organization, and then extend it to match each organization's unique complexity, requirements, and scale."
msgstr ""

#: ../source/chef_why.rst:34
# ed1d10c3e3c446748b46d10b0542f831
msgid "How can I help?"
msgstr ""

#: ../source/chef_why.rst:35
# c29bbfe6e48b4f42a23e01cf3454641f
msgid "`Join the community <http://docs.opscode.com/#the-community>`_, participate in the discussion going on right now on IRC, sign up for the mailing Lists, and read the instructions on how to contribute to an |company_name| open source project. For more information about participating in the community, see"
msgstr ""

#: ../source/chef_why.rst:38
# 6a7108c9b56542248184319813b047ce
msgid "Do I really need to know Ruby?"
msgstr ""

#: ../source/chef_why.rst:39
# 9e402f30db8b430d9b48d856e1f97365
msgid "It helps, but its not required. Many recipes are just structure and patterns that use |ruby| as the definition language. Having actual |ruby| coding skills? Helpful, but not required, especially to get started. You can learn :doc:`Just Enough Ruby for Chef </just_enough_ruby_for_chef>`."
msgstr ""

#: ../source/chef_why.rst:42
# 9457a5dbacc14ca5b305a9a877db8aa3
msgid "Can I trust Chef?"
msgstr ""

#: ../source/chef_why.rst:43
# 5d1b39b28db944cca4d4654d0ea3b644
msgid "Yes, absolutely. The |chef client| will not do anything to your system that isn't in a recipe. Because |chef| is an open source project, you have full access to the source code and visibility into how it all works."
msgstr ""

#: ../source/chef_why.rst:47
# 6e11cbbc9cfa42148b228e6097a67bdd
msgid "Who uses Chef?"
msgstr ""

#: ../source/chef_why.rst:48
# 5cfeb7cd00974e91a8f5dbccb6e936e9
msgid "Lots of companies, ranging from `small startups to the largest companies on the planet <http://www.opscode.com/customers/>`_."
msgstr ""

#: ../source/chef_why.rst:51
# 6aaeeb50cf5b4635b8c84e9dd7e5a249
msgid "Why the Apache license?"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:5
# 132f355f06e14d78807a6a83601891e7
msgid "The short version of why |company_name| chose the |apache| license for |chef| is because we defined three broad requirements for a license under which we would release open source software:"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:7
# fc56ce0e17af4b2bb1fc8fc5a32c2f53
msgid "We are an open source company and we make money from our open source software so we wanted a license that allowed us to build a business from the things we created"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:8
# f1f8859561c2425e88292b465cbfaa20
msgid "We wanted anyone (or any company) whose problems were solved by our software to be able to use it, in any environment they wanted, in whatever way they wanted"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:9
# 529e4b8ae6154e3ebe5b34ba77fa6aa8
msgid "We wanted to build an open and equal community of users and did not want to reserve any rights for ourselves that we didn’t grant to the all of the other people (and companies) who helped build our software"
msgstr ""

#: ../../includes_chef/includes_chef_why_apache_license.rst:11
# 2c540e235ed74418a11159b33ea4843e
msgid "For more detail, read `the blog post about why we love open source <http://www.opscode.com/blog/2009/08/11/why-we-chose-the-apache-license/>`_."
msgstr ""

#: ../source/chef_why.rst:56
# ebe99824d6944a5997acb74bb82b1819
msgid "Comparisons"
msgstr ""

#: ../source/chef_why.rst:57
# a95c7f1799104c369adf782c02394078
msgid "There are other applications out there that do things similar to |chef|. We believe that we are different (and better) and that by choosing |chef| you are choosing the best option."
msgstr ""

#: ../source/chef_why.rst:60
# 8b08ea1bd5784e4f89a509eae316a0ed
msgid "|puppet|"
msgstr ""

#: ../source/chef_why.rst:61
# 808b4a1fd50c4532b55800228d43e7d3
msgid "|puppet| evolved from |cfengine| and showed potential to be a new kind of configuration management. The original design of |chef| was strongly influenced by our own experiences working with and contributing to the |puppet| project. That said, |chef| does not share any code from |puppet|, and is not a \"fork\" of the |puppet| project."
msgstr ""

#: ../source/chef_why.rst:63
# 19a639162bee4b019b6935d3ea8602e0
msgid "|chef| is different from |puppet| in a number of important ways:"
msgstr ""

#: ../source/chef_why.rst:65
# f87ea2a768bf4a2892ada8016923bd1c
msgid "|chef| uses |ruby| as the configuration language, as opposed to a custom DSL"
msgstr ""

#: ../source/chef_why.rst:66
# 4ec3ab8b22b84e2c8c184dd3685384a8
msgid "|chef| is designed from the ground up to integrate with other tools, or to make that integration as simple as possible. |chef| is not the canonical representation of your infrastructure. It is a service that exposes data about the state of your infrastructure"
msgstr ""

#: ../source/chef_why.rst:67
# 06541cd704e14d668017321596777267
msgid "The |chef client| applies resources in the order they are specified in recipes. There is no dependency management. This means multiple |chef client| runs will always apply the resources under management in the same order, every time"
msgstr ""

#: ../source/chef_why.rst:68
# 66d228d0aa7c4f59aef198a75e8fae25
msgid "Resources have actions, which can be signaled"
msgstr ""

#: ../source/chef_why.rst:69
# a6f048989bac4a469023add56e1f1b60
msgid "Resources can appear more than once and they inherit the attributes of the earlier resource. In other words, you can tell |apache| to start and stop in a recipe by specifying the resource twice, with the second one only changing the action attribute"
msgstr ""

#: ../source/chef_why.rst:72
# a42f8018cc2f4ea8ba2bf6d8e0b13f7f
msgid "|cfengine|"
msgstr ""

#: ../source/chef_why.rst:73
# 9e9565f212a2408aae1780ecb67bc182
msgid "|cfengine| and |chef| aren't very similar at all, outside of both applications embracing the concept of Single Copy Nirvana."
msgstr ""

#: ../source/chef_why.rst:76
# 71400b849091471e9437f7c8032aee83
msgid "For more information ..."
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:5
# 753ad43de3f84c09a9119fdfe10e4f2c
msgid "For a history of |chef|, where it came from and how it evolved, watch these two (short) videos:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:7
# 00e92d5d59464d42a21822ae3d813b7c
msgid "Part one: |url opscode_youtube_short_part_one|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:8
# 5fe089d5cacc495d848539d31f228c1b
msgid "Part two: |url opscode_youtube_short_part_two|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:10
# 5bdc70e5468d45c7a22477c90e9458af
msgid "For more information about |company_name|, cookbooks, and the community:"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:12
# 1ebbb1cf2278482ea7378dfc02291c91
msgid "|url opscode|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:13
# f647c5bf3df54c24ac45a31f5f5d8bdd
msgid "|url opscode_community|"
msgstr ""

#: ../../includes_chef/includes_chef_for_more_info.rst:14
# 3a6c0311b6f04676b5f639d4ef664d8f
msgid "|url opscode_cookbooks|"
msgstr ""

