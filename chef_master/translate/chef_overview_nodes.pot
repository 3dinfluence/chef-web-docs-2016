# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-03-01 15:50\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/chef_overview_nodes.rst:34
# 6ecd2d8add5e47d29341dff68567bfb7
msgid "Nodes"
msgstr ""

#: ../../includes_node/includes_node.rst:5
# 9aa6aabfe3c940e9b139cc1bb6811506
msgid "|node description| A node can be physical or cloud-based. A |chef| organization comprises any combination of physical and cloud-based nodes. A |chef client| runs on each node. |ohai| is used to collect data about the system so that it is available to the |chef client| during every |chef| run."
msgstr ""

#: ../source/chef_overview_nodes.rst:38
# d0b2f4e3c7ec405cb388f7dd3ae4c4ae
msgid "There are two types of nodes that |chef| can manage:"
msgstr ""

#: ../source/chef_overview_nodes.rst:44
#: ../source/chef_overview_nodes.rst:57
# 38d956d08e7e4b55b839fcc90391a8a5
# 222906071aa940a3bca8862700ed3a30
msgid "Feature"
msgstr ""

#: ../source/chef_overview_nodes.rst:45
#: ../source/chef_overview_nodes.rst:58
#: ../../includes_chef/includes_chef_client_run.rst:16
# 484dc08f425d4c6c83511ae5d751fbc5
# dbd58996cb96451881b18c25141490b0
# 1fcc0d1a27de44a5bdc4eee910dc9787
msgid "Description"
msgstr ""

#: ../../includes_node/includes_node_cloud.rst:4
# b694556754c948908ce66219d4b18f41
msgid "A cloud-based node is hosted in an external cloud-based service, such as |amazon vpc|, |openstack|, |rackspace|, |google compute engine|, |linode|, or |windows azure|. Plugins are available for |knife| that provide support for external cloud-based services. |knife| can use these plugins to create instances on cloud-based services. Once created, |chef| can be used to deploy, configure, and maintain those instances."
msgstr ""

#: ../../includes_node/includes_node_physical.rst:4
# 85e99d821d8342c4bfee5ae66783c42c
msgid "A physical node is typically a server or a virtual machine, but it can be any active device attached to a network that is capable of sending, receiving, and forwarding information over a communications channel. In other words, a physical node is any active device attached to a network that can run a |chef client| and communicate with a |chef server|."
msgstr ""

#: ../source/chef_overview_nodes.rst:51
# f834ffd9c81b44e99a073590ceabf10d
msgid "Some important components of nodes include:"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:5
# 45635575f82c458eaaf347838e54cc0c
msgid "A |chef client| is an agent that runs locally on every node that is registered with the |chef server|. When a |chef client| is run, it will perform all of the steps that are required to bring the node into the expected state, including:"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:7
# 971fb45c22a04023892b1aa9d7eb6580
msgid "Registering and authenticating the node with the |chef server|"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:8
# 67aef26f646244ebade9ee5a6ee179c9
msgid "Building the node object"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:9
# bafff0020afb42628d8a663359996c29
msgid "Synchronizing cookbooks"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:10
# 06d1c7082d1e440ab1249f9a590a003a
msgid "Compiling the resource collection by loading each of the required cookbooks, including recipes, attributes, and all other dependencies"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:11
# e9949eb9662c48498c41ace1b0e3370f
msgid "Taking the appropriate and required actions to configure the node"
msgstr ""

#: ../../includes_chef/includes_chef_client.rst:12
# e9e0650c6b8a4af39fc618b170e5245f
msgid "Looking for exceptions and notifications, handling each as required"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:4
# 46a1480bed144a3c8d4affb3dff03da2
msgid "|ohai| is a tool that is used to detect certain properties about a node's environment and provide them to the |chef client| during every |chef| run. The types of properties |ohai| reports on include:"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:6
# fbd7e37ad3a843649328f6ee08327670
msgid "Platform details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:7
# 316a7655aac044d694e2153e63664056
msgid "Networking usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:8
# 12735dea1ee3401482994323b543f166
msgid "Memory usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:9
# 2b76840ac4354f8787e9d73985596a69
msgid "Processor usage"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:10
# 7799dc75fd344bf1af8b7089097dadaf
msgid "Kernel data"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:11
# 71c37209d600477cab780a13213e05fb
msgid "Host names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:12
# 79358dfe44d74ea7a36a7241935486b5
msgid "Fully qualified domain names"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:13
# dfc4361d05f9493d861d892a95d7f910
msgid "Other configuration details"
msgstr ""

#: ../../includes_ohai/includes_ohai.rst:15
# f0ab28ad43374b2d844a07044c5a1acc
msgid "When |chef| configures the node object during each |chef| run, these attributes are used by the |chef client| to ensure that certain properties remain unchanged. (These properties are also referred to as ``automatic`` attributes.) |ohai| is part of the required configuration on each node that is registered with the |chef server|."
msgstr ""

#: ../source/chef_overview_nodes.rst:65
# 6d63628fd87e4d34ae929d46feb0c67f
msgid "The Chef Run"
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:5
# 875411bd3649463bb1f0b4959171bde0
msgid "A \"|chef| run\" is the term used to describe a series of steps that are taken by the |chef client| when it is configuring a node. The following diagram shows the various stages that occur during the |chef| run, and then the list below the diagram describes in greater detail each of those stages."
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:9
# 297eb42f28fc45fcb88748bdd4536bf4
msgid "During every |chef| run, the |chef client| does the following:"
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:15
# cfb3b559ffe943599b1f544f79ef7f94
msgid "Stages"
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:17
# c6b94751ef154806b1ac87fbdeaf5417
msgid "**Get configuration data**"
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:18
# 0483bbccacf043ce9bc5d15c71ed9978
msgid "The |chef client| gets process configuration data from the |client rb| file on the node, and then gets node configuration data from |ohai|. One important piece of configuration data is the name of the node, which is found in the ``node_name`` attribute in the |client rb| file or is provided by |ohai|. If |ohai| provides the name of a node, it is typically the |fully qualified domain name| for the node, which is always unique within an organization."
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:19
# ae36fe53dc794170a994e8e666300661
msgid "**Authenticate to the Chef Server**"
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:20
# 3317b108d3dc42fc8cd3484e94c54165
msgid "The |chef client| authenticates to the |chef server| using an RSA private key. The name of the node is required as part of the authentication process to the |chef server|. If this is the first |chef| run for a node, the |chef validator| will be used to generate the RSA private key."
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:21
# ccda91565d03416ebf2a50b1f3f41404
msgid "**Get, rebuild the node object**"
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:22
# 75da2a0041a9422a9bca4c12614d0c1e
msgid "The |chef client| pulls down the node object from the |chef server|. If this is the first |chef| run for the node, there will not be a node object to pull down from the |chef| server. After the node object is pulled down from the |chef server|, the |chef client| rebuilds the node object. If this is the first |chef| run for the node, the rebuilt node object will contain only the default run-list. For any subsequent |chef| run, the rebuilt node object will also contain the run-list from the previous |chef| run."
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:23
# bb91d4f2cea6450581c4c20b5de1d767
msgid "**Expand the run-list**"
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:24
# b84bce54eb7f4e49aabb424196462d7a
msgid "The |chef client| expands the run-list from the rebuilt node object, compiling a full and complete list of roles and recipes that will be applied to the node, placing the roles and recipes in the same exact order they will be applied."
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:25
# 0689ef67c3814327b8c77c2ccdbd6fa2
msgid "**Get a list of cookbook files**"
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:26
# 9bd0f658bf1649e2a1c0dd036066abf1
msgid "The |chef client| asks the |chef server| for a list of all cookbook files (including recipes, templates, resources, providers, attributes, libraries, and definitions) that will be required to do every action identified in the run-list for the rebuilt node object. The |chef server| provides to the |chef client| a list of all of those files. The |chef client| compares this list to the cookbook files cached on the node (from previous |chef| runs), and then pulls down a copy of every file that has changed since the previous |chef| run, along with any new files."
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:27
# d7d420185733460bac862b1dbbc28dad
msgid "**Reset node attributes**"
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:28
# ff9d8120dc3b4ba3b2b8895a75a047ec
msgid "All attributes in the rebuilt node object are reset. All attributes from recipes, roles, environments, |ohai| and attribute files are loaded. All attributes in the rebuilt node object are updated with the attribute data according to attribute precedence. When all of the attributes are updated, the rebuilt node object is complete."
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:29
# 8f66ff391de04c5fac1216146d46b42e
msgid "**Identify resources, build the resource collection**"
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:30
# 8a51728f81464b8bb0a9fa7234031fcc
msgid "The |chef client| identifies each resource in the node object and builds the resource collection. All details about the node are put into a single collection. All definitions are loaded (to ensure that any pseudo-resources are available). All libraries are loaded (to ensure that all language extensions and |ruby| classes are available). All recipes are loaded and each action specified specified in recipes are identified and any |ruby| blocks within recipes are evaluated."
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:31
# 6e17bb78a01b4092865d3b48be14c4e7
msgid "**Configure the node**"
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:32
# 42fe0a32ca934b69bb19a1cd5c9d54f1
msgid "The |chef client| configures the system based on the information that has been collected. Each resource in the resource collection is mapped to a provider. The provider examines the node, and then does the steps necessary to complete the action. Each action configures a specific part of the system. This process is also referred to as convergence."
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:33
# 7869c9b7842e400a83315ef8f10f386f
msgid "**Update the node object, process exception and report handlers**"
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:34
# 0f1d83d0dbc5464a87fd380d77d34b9b
msgid "When all of the actions identified by resources in the resource collection have been done, the |chef client| updates the node object on the |chef server| with the node object that was built during this |chef| run. (This node object will be pulled down by the |chef client| during the next |chef| run.) This makes the node object (and the data in the node object) available for search. The |chef client| checks the resource collection for the presence of exception and report handlers. If any are present, each one is processed appropriately."
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:35
# 3fca2eb05f1f4abfb7b73ca4c338affd
msgid "**Stop, wait for the next run**"
msgstr ""

#: ../../includes_chef/includes_chef_client_run.rst:36
# 53a2e2ded5444964917d2e6c145ccedf
msgid "When everything is configured and the |chef| run is complete, |chef| stops and waits until the next time it is asked to run."
msgstr ""

