# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License.
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-11 21:18-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/manage.rst:8
# b52054f3e11241b2a654540feaf9253a
msgid "|chef manage_title|"
msgstr ""

#: ../../includes_manage/includes_manage.rst:4
# f0da73ad493a46df94bc8b2ddffe5d29
msgid "The |chef manage| enables the management of nodes, data bags, roles, environments, and cookbooks by using a web user interface. In addition, access to nodes, data bags, roles, environments, and cookbooks is configurable using role-based access control (RBAC)."
msgstr ""

#: ../../includes_chef/includes_chef_subscriptions.rst:4
# ee5080ee76224a60a26eff6c2bd5d10f
msgid "This is a premium feature of |chef|. Access to premium features is free (up to 25 nodes) when the |chef server| is installed on-premises. For higher node counts, access is `available via subscription <https://www.chef.io/chef/#plans-and-pricing>`_. Premium features are installed `from the command line <http://docs.chef.io/ctl_chef_server.html#install>`_."
msgstr ""

#: ../source/manage.rst:15
# 2f1a8514de1a4aecb2252b75ea3603f6
msgid "Nodes"
msgstr ""

#: ../../includes_node/includes_node.rst:5
# e30cbb5fa2bd4a87983076ccf29dbb05
msgid "A node is any physical, virtual, or cloud machine that is configured to be maintained by a |chef client|."
msgstr ""

#: ../source/manage.rst:18
# e194f8685e064462964575b9b3c241aa
msgid "The |chef manage| provides ways for users to `delete nodes and reset their private keys <http://docs.chef.io/server_manage_nodes.html#manage>`_, `edit node attributes <http://docs.chef.io/server_manage_nodes.html#node-attributes>`_, `manage the run-lists <http://docs.chef.io/server_manage_nodes.html#run-lists>`_, `configure user and group permissions <http://docs.chef.io/server_manage_nodes.html#permissions>`_, and `manage tags <http://docs.chef.io/server_manage_nodes.html#manage-tags>`_."
msgstr ""

#: ../source/manage.rst:23
# e4c1611162c741d69cf696badfeb5d1f
msgid "Search"
msgstr ""

#: ../../includes_search/includes_search.rst:4
# d51bf7765ac1488fb270987462aa1ea6
msgid "Search indexes allow queries to be made for any type of data that is indexed by the |chef server|, including data bags (and data bag items), environments, nodes, and roles. A defined query syntax is used to support search patterns like exact, wildcard, range, and fuzzy. A search is a full-text query that can be done from several locations, including from within a recipe, by using the ``search`` subcommand in |knife|, the ``search`` method in the |dsl recipe|, the search box in the |chef manage|, and by using the ``/search`` or ``/search/INDEX`` endpoints in the |api chef server|. The search engine is based on |apache solr| and is run from the |chef server|."
msgstr ""

#: ../source/manage.rst:26
# e57f8bd95b084fc6a9ceca70e4a0efce
msgid "The syntax for search queries in the |chef manage| is identical to the syntax for search queries used with |knife|, the command line tool used to manage objects on the |chef server|."
msgstr ""

#: ../source/manage.rst:29
# b08dc350f8dd406894cae22a61e5e2a9
msgid "Query Syntax"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:5
# 70ec1c2ee7ac4edb9490d488cb9bba4a
msgid "|search query syntax| A search query has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_query_syntax.rst:11
# 33ce0e8791e6485193ff118c7408a560
msgid "where ``key`` is a field name that is found in the |json| description of an indexable object on the |chef server| (a role, node, client, environment, or data bag) and ``search_pattern`` defines what will be searched for, using one of the following search patterns: exact, wildcard, range, or fuzzy matching. Both ``key`` and ``search_pattern`` are case-sensitive; ``key`` has limited support for multiple character wildcard matching using an asterisk (\"*\") (and as long as it is not the first character)."
msgstr ""

#: ../source/manage.rst:33
# ba1af9e841da41c4abf900c33faee9ee
msgid "Keys"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 337a627dd9dd4ba5ba72f0e3c485ce80
msgid "|search key| Any field that exists in any |json| description for any role, node, |chef client|, environment, or data bag can be searched."
msgstr ""

#: ../source/manage.rst:37
# 2e5c05601ace43dfade05d005ee2cf1c
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 177ce2638cec43a88d23fd8494b078f3
msgid "A nested field appears deeper in the |json| data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested fields are present in a |json| structure, the |chef client| will extract those nested fields to the top-level, flattening them into compound fields that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# f3421d4c6fb94cf0b37954febb50e4d7
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# 296e28b687f7435eb1a9e1dde59cb42e
msgid "Consider the following snippet of |json| data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 1a4dae5797174d938d97ab049520a113
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# 81a6495b33f44928a4b9e58eedb26d2c
# 793d373848df41f786ae591d33ba5e6c
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 033cdbb30c744257bf969832c4597801
# 5755869a65114dde81d9e4d0a4e02ebe
msgid "or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# e947858058404c16a6ee2a330a38d96a
msgid "This data is also flattened into various compound fields, which follow the same pattern as the |json| hierarchy and use underscores (``_``) to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# b0ba58b96b61456e8dfa8d648b0a1b51
msgid "This flattened data structure also supports using wildcard compound fields, which allow searches to omit levels within the |json| data structure that are not important to the search query. In the following example, an asterisk (``*``) is used to show where the wildcard can exist when searching for a nested field:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 835cf02dc1ee46c785a7d8bcef80dcff
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:124
# b066eef483eb4695b6bf0c33aea77af5
msgid "This query will search within the ``flags`` node, within the |json| structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../source/manage.rst:41
# e88bea3047074cadb0679b4681265203
msgid "About Patterns"
msgstr ""

#: ../../includes_search/includes_search_pattern.rst:5
# ed0095dcc2c74b698c3306e0f2b8eb5e
msgid "|search pattern| There are four types of search patterns that can be used when searching the search indexes on the |chef server|: exact, wildcard, range, and fuzzy."
msgstr ""

#: ../source/manage.rst:45
# 9f6e71b151464dada51b8720de1f78b2
msgid "Exact Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_exact.rst:5
# 4cd16460ec4844ff94adcd2deaedf0ba
msgid "An exact matching search pattern is used to search for a key with a name that exactly matches a search query. If the name of the key contains spaces, quotes must be used in the search pattern to ensure the search query finds the key. The entire query must also be contained within quotes, so as to prevent it from being interpreted by |ruby| or a command shell. The best way to ensure that quotes are used consistently is to quote the entire query using single quotes (' ') and a search pattern with double quotes (\" \")."
msgstr ""

#: ../source/manage.rst:49
# dae7de1b361f4c2ea800aa6742c73e07
msgid "Wildcard Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:5
# 1c15c5bcdf424d22af0d5db7ed9852f9
msgid "A wildcard matching search pattern is used to query for substring matches that replace zero (or more) characters in the search pattern with anything that could match the replaced character. There are two types of wildcard searches:"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:7
# 10c19e826a6f45c993a4122fd7bffecc
msgid "A question mark (``?``) can be used to replace exactly one character (as long as that character is not the first character in the search pattern)"
msgstr ""

#: ../../includes_search/includes_search_pattern_wildcard.rst:8
# 26770bb319fd498ca007b807cf930be4
msgid "An asterisk (``*``) can be used to replace any number of characters (including zero)"
msgstr ""

#: ../source/manage.rst:53
# 3996d30c14604edeba7d9286ee4d04fb
msgid "Range Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:5
# 37a5a692ac80460aa701345a5909c894
msgid "A range matching search pattern is used to query for values that are within a range defined by upper and lower boundaries. A range matching search pattern can be inclusive or exclusive of the boundaries. Use square brackets (\"[ ]\") to denote inclusive boundaries and curly braces (\"{ }\") to denote exclusive boundaries and with the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_range.rst:11
# d96bf88e53254504ac4fa78f173645ab
msgid "where ``TO`` is required (and must be capitalized)."
msgstr ""

#: ../source/manage.rst:57
# 5664545642fa47edb8ea8b8676e123bf
msgid "Fuzzy Matching"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:5
# 77e8f312d6b64910941beed7cc43c86c
msgid "A fuzzy matching search pattern is used to search based on the proximity of two strings of characters. An (optional) integer may be used as part of the search query to more closely define the proximity. A fuzzy matching search pattern has the following syntax:"
msgstr ""

#: ../../includes_search/includes_search_pattern_fuzzy.rst:11
# 3c1c442d9a1c411b8cfdd5bd96e3ba34
msgid "where ``search_query`` is the string that will be used during the search and ``edit_distance`` is the proximity. A tilde (\"~\") is used to separate the edit distance from the search query."
msgstr ""

#: ../source/manage.rst:61
# 830bc567a2aa439fb3384b718386839e
msgid "About Operators"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:4
# a2333ee425aa4d9189bb4cb73ed5d160
msgid "|search operator| Searches can use the following operators:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:10
# 35a34d4273ba4663b1b6c646f33b8986
msgid "Operator"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:11
# 77e746ff108a48d9ad59358efcd5ef82
msgid "Description"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:12
# 76eefd23e69e4cd9a46bd72b579ddddc
msgid "``AND``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:13
# c9024770823a4b85b5767fd66e282dee
msgid "Use to find a match when both terms exist."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:14
# 623e1074c0b1469d8d71c10102ee3bd7
msgid "``OR``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:15
# 655d434557544e1784cd9a6789f087c2
msgid "Use to find a match if either term exists."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:16
# b9d5245f35b24c4f969dd0ef08985577
msgid "``NOT``"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators.rst:17
# 862381b462354a5ea7b934000781fb4a
msgid "Use to exclude the term after ``NOT`` from the search results."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:5
# 2b716bc5203d4136b18832f8497a2bc2
msgid "Operators must be in ALL CAPS. Parentheses can be used to group clauses and to form sub-queries."
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:7
# 241f2b2361104775ad5f9fa9f6873e22
msgid "Using ``AND NOT`` together may trigger an error. For example:"
msgstr ""

#: ../../includes_search/includes_search_boolean_operators_andnot.rst:15
# dc807bfaf16045c4917f6c503f832179
msgid "Use ``-`` instead of ``NOT``. For example:"
msgstr ""

#: ../source/manage.rst:67
# bf5709f970374b3cbc8a44fe275dbac3
msgid "Special Characters"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:5
# 7fffc079ab55459c89d9f747220a270f
msgid "|search special character| The following characters can be included within the search query syntax, but each occurrence of a special character must be escaped with a backslash (``\\``):"
msgstr ""

#: ../../includes_search/includes_search_special_characters.rst:11
# a06e5ab4895449d29fabb54df1342ba7
msgid "For example:"
msgstr ""

#: ../source/manage.rst:73
# aa4a90051ad5453683acedb2cd5eb7ad
msgid "Reports"
msgstr ""

#: ../../includes_reporting/includes_reporting.rst:4
# 58e1798e7d56421bb2ed53920991ea9b
msgid "Use |reporting| to keep track of what happens during the execution of |chef client| runs across all of the machines that are management by |chef|. Reports can be generated for the entire organization and they can be generated for specific nodes."
msgstr ""

#: ../../includes_reporting/includes_reporting.rst:6
# b3fd7d794ebc4a4b86f4de3d7434a46a
msgid "|reporting| data is collected during the |chef client| run and the results are posted to the |chef server| at the end of the |chef client| run at the same time the node object is uploaded to the |chef server|."
msgstr ""

#: ../source/manage.rst:76
# 86b6e2980c334dc6aac4bdc99ce692ad
msgid "The |chef manage| provides ways for users to `configure the timeframe <http://docs.chef.io/server_manage_reports.html#configure-reports>`_ around which a report is built, and then to `review the reports <http://docs.chef.io/server_manage_reports.html#view-reports>`_ that are available for that timeframe."
msgstr ""

#: ../source/manage.rst:81
# 7754f7645dd74e07a0c266976812adfe
msgid "Policy"
msgstr ""

#: ../../includes_chef/includes_chef_policy.rst:4
# 0c131efb9df240b9bf02f0e1dbfa0443
msgid "Policy settings can be used to map business and operational requirements, such as process and workflow, to settings and objects stored on the |chef server|:"
msgstr ""

#: ../../includes_chef/includes_chef_policy.rst:6
# 6f37a689bd2843978185af5416a92afc
msgid "Roles define server types, such as \"web server\" or \"database server\""
msgstr ""

#: ../../includes_chef/includes_chef_policy.rst:7
# 4c28fe6c00eb45c590a3715014d2f4bf
msgid "Environments define process, such as \"dev\", \"staging\", or \"production\""
msgstr ""

#: ../../includes_chef/includes_chef_policy.rst:8
# de40cb6130904c9c994b7936e77ee963
msgid "Certain types of data---passwords, user account data, and other sensitive items---can be placed in data bags, which are located in a secure sub-area on the |chef server| that can only be accessed by nodes that authenticate to the |chef server| with the correct |ssl| certificates"
msgstr ""

#: ../../includes_chef/includes_chef_policy.rst:9
# 415846eec77f4e5d96cd601f8d9bbf14
msgid "The cookbooks (and cookbook versions) in which organization-specific configuration policies are maintained"
msgstr ""

#: ../source/manage.rst:84
# cc4cff3544ed4fa1b0f8386df6f2bebc
msgid "The |chef manage| provides ways for users to manage `data bags <http://docs.chef.io/server_manage_data_bags.html>`_, `environments <http://docs.chef.io/server_manage_environments.html>`_, `roles <http://docs.chef.io/server_manage_roles.html>`_, `cookbooks <http://docs.chef.io/server_manage_cookbooks.html>`_, and `clients <http://docs.chef.io/server_manage_clients.html>`_,"
msgstr ""

#: ../source/manage.rst:86
# 08ca41f2a6634f1092bf535b2f4cb8bf
msgid "`managing tags <http://docs.chef.io/server_manage_nodes.html#manage-tags>`_."
msgstr ""

#: ../source/manage.rst:91
# cc626871b212457396bd28d483287226
msgid "Admin"
msgstr ""

#: ../../includes_manage/includes_manage_admin.rst:4
# 2500cf19a12448e8b65501e450692fc8
msgid "Organizations, users, and groups can be managed from the |chef manage|, including role-based access control for any user and group to any of the objects saved to the |chef server|."
msgstr ""

#: ../../includes_server_rbac/includes_server_rbac.rst:4
# 9a7ee48c992b46e180ff5a39c382018b
msgid "The |chef server| uses role-based access control (RBAC) to restrict access to objects---nodes, environments, roles, data bags, cookbooks, and so on. This ensures that only authorized user and/or |chef client| requests to the |chef server| are allowed. Access to objects on the |chef server| is fine-grained, allowing access to be defined by object type, object, group, user, and organization. The |chef server| uses permissions to define how a user may interact with an object, after they have been authorized to do so."
msgstr ""

