# SOME DESCRIPTIVE TITLE.
# Copyright (C) This work is licensed under a Creative Commons Attribution 3.0 Unported License
# This file is distributed under the same license as the Chef Docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Chef Docs 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-01-10 12:07\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/essentials_search_keys.rst:34
# d8ee265698c848db972633f22e613aa9
msgid "Keys (or Field Names)"
msgstr ""

#: ../../includes_search/includes_search_key.rst:5
# 8d3d480e8a374361b6f6e6fb17613f1d
msgid "|search key| Any key that exists in any JSON description for any role, node, |chef client|, environment, or data bag can be searched for. To search for the available keys for a particular object, use the ``show`` sub-commands for any of the following |knife| sub-commands: ``client``, ``data bag``, ``environment``, ``node``, or ``role``."
msgstr ""

#: ../../steps/step_search_key_name.rst:3
# 25f9d486a16b46698385502ae4ba9dd2
msgid "To see the available keys for a node, enter the following (for a node named \"staging\"):"
msgstr ""

#: ../../steps/step_search_key_name.rst:9
# 1a4108c0d1f843939d62b7fa529a9e1b
msgid "to return a full JSON description of the node and to view the available keys with which any search query can be based."
msgstr ""

#: ../../steps/step_search_key_wildcard_question_mark.rst:3
# 5e48d55ca84d4747aaf193f515f9179b
msgid "To use a question mark(\"?\") to replace a single character in a wildcard search, enter the following:"
msgstr ""

#: ../../steps/step_search_key_wildcard_asterisk.rst:3
# d493f5800ce24462baffb24a77cee56d
msgid "To use an asterisk (\"*\") to replace zero (or more) characters in a wildcard search, enter the following:"
msgstr ""

#: ../source/essentials_search_keys.rst:45
# 1379fba01cd54b34931fc8afa81fc1d0
msgid "Nested Fields"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:5
# 929ee993f185421fa0fb52b357d52ff8
msgid "A nested key is a key that appears deeper in the JSON data structure. For example, information about a network interface might be several layers deep: ``node[:network][:interfaces][:en1]``. When nested keys are present in a JSON structure, |chef| will extract those nested fields to the top-level, flattening them into compound keys that support wildcard search patterns."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:7
# 62b32665a04f4832adc2c2c4f639aaaa
msgid "By combining wildcards with range-matching patterns and wildcard queries, it is possible to perform very powerful searches, such as using the vendor part of the MAC address to find every node that has a network card made by the specified vendor."
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:9
# ea7a083bd35f4e43bd77ebdd6ddfef16
msgid "Consider the following snippet of JSON data:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:65
# 534a9394ca354eca89799a69c645faff
msgid "Before this data is indexed on the |chef server|, the nested fields are extracted into the top level, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:73
#: ../../includes_search/includes_search_key_nested.rst:101
# f73accad766b4398b1562e57bed668c0
# 85179ca0fa97468c947e825f286e1683
msgid "which allows searches like the following to find data that is present in this node:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:79
#: ../../includes_search/includes_search_key_nested.rst:85
# 12c86f75c1b94b97bbad8bc03c646a9c
# e9fb1cbf75604f4e8ee482aafdfb9ba3
msgid "Or:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:91
# 6294a9f24e664ed083f948ee5af284c6
msgid "This data is also flattened into various compound keys, which follow the same pattern as the JSON hierarchy and use underscores (\"_\") to separate the levels of data, similar to:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:107
# 46df6b589dc546a3b9aa980e4a5dbd51
msgid "This flattened data structure also supports using wildcard compound keys, which allow searches to omit levels within the JSON data structure that are not important to the search query. In the following example, an asterisk (\"*\") is used to show where the wildcard can exist when searching for nested key:"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:118
# 5046a96f3fef46cdbf13a58a31d92951
msgid "For each of the wildcard examples above, the possible values are shown contained within the brackets. When running a search query, the query syntax for wildcards is to simply omit the name of the node (while preserving the underscores), similar to::"
msgstr ""

#: ../../includes_search/includes_search_key_nested.rst:122
# c515e9fb23e04fcb8f7e9436a4fcdc0b
msgid "This query will search within the ``flags`` node, within the JSON structure, for each of ``UP``, ``BROADCAST``, ``SMART``, ``RUNNING``, ``SIMPLEX``, and ``MULTICAST``."
msgstr ""

#: ../../steps/step_search_key_nested_starting_with.rst:3
# ca13e7e3490649c889bb75dd64a18bdf
msgid "To find all IP address that are on the same network, enter the following:"
msgstr ""

#: ../../steps/step_search_key_nested_starting_with.rst:9
# ad4bbbf0a0fa4deb9ecdf46b1edacbcf
msgid "where ``192.168*`` is the network address for which the search will be run."
msgstr ""

#: ../../steps/step_search_key_nested_range.rst:3
# 169eb1a67b6149f195bf9c8808a17ea4
msgid "To use a range search to find IP addresses within a subnet, enter the following:"
msgstr ""

#: ../../steps/step_search_key_nested_range.rst:9
# 0419f8a161724291809f272ab9ab52dc
msgid "where ``192.168.0.* TO 192.168.127.*`` defines the subnet range."
msgstr ""

